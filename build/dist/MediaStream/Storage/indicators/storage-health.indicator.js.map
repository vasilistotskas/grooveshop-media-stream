{"version":3,"sources":["../../../../../src/MediaStream/Storage/indicators/storage-health.indicator.ts"],"sourcesContent":["import type { HealthCheckOptions } from '@microservice/Health/interfaces/health-indicator.interface'\r\nimport type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport type { AccessPattern, StorageStats } from '../services/storage-monitoring.service'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { BaseHealthIndicator } from '@microservice/Health/base/base-health-indicator'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { StorageCleanupService } from '../services/storage-cleanup.service'\r\nimport { StorageMonitoringService } from '../services/storage-monitoring.service'\r\n\r\nexport interface StorageHealthDetails {\r\n\ttotalFiles: number\r\n\ttotalSize: string\r\n\tusagePercentage: number\r\n\toldestFile: string | null\r\n\tnewestFile: string | null\r\n\ttopFileTypes: Array<{ extension: string, count: number }>\r\n\tcleanupStatus: {\r\n\t\tenabled: boolean\r\n\t\tlastCleanup: string\r\n\t\tnextCleanup: string\r\n\t}\r\n\tthresholds: {\r\n\t\twarningSize: string\r\n\t\tcriticalSize: string\r\n\t\twarningFileCount: number\r\n\t\tcriticalFileCount: number\r\n\t}\r\n\trecommendations: string[]\r\n}\r\n\r\n@Injectable()\r\nexport class StorageHealthIndicator extends BaseHealthIndicator {\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly storageMonitoring: StorageMonitoringService,\r\n\t\tprivate readonly storageCleanup: StorageCleanupService,\r\n\t) {\r\n\t\tconst options: HealthCheckOptions = {\r\n\t\t\ttimeout: 5000,\r\n\t\t\tthreshold: 0.9,\r\n\t\t}\r\n\r\n\t\tsuper('storage', options)\r\n\t}\r\n\r\n\tprotected async performHealthCheck(): Promise<HealthIndicatorResult> {\r\n\t\treturn this.executeWithTimeout(async () => {\r\n\t\t\tconst thresholdCheck = await this.storageMonitoring.checkThresholds()\r\n\t\t\tconst stats = thresholdCheck.stats\r\n\t\t\tconst cleanupStatus = this.storageCleanup.getCleanupStatus()\r\n\r\n\t\t\tconst maxSize = this._configService.getOptional('storage.maxSize', 1024 * 1024 * 1024)\r\n\t\t\tconst usagePercentage = stats.totalSize / maxSize\r\n\r\n\t\t\tconst recommendations = this.generateRecommendations(thresholdCheck, cleanupStatus)\r\n\r\n\t\t\tconst details: StorageHealthDetails = {\r\n\t\t\t\ttotalFiles: stats.totalFiles,\r\n\t\t\t\ttotalSize: this.formatBytes(stats.totalSize),\r\n\t\t\t\tusagePercentage: Math.round(usagePercentage * 100),\r\n\t\t\t\toldestFile: stats.oldestFile ? stats.oldestFile.toISOString() : null,\r\n\t\t\t\tnewestFile: stats.newestFile ? stats.newestFile.toISOString() : null,\r\n\t\t\t\ttopFileTypes: Object.entries(stats.fileTypes)\r\n\t\t\t\t\t.map(([extension, count]) => ({ extension, count }))\r\n\t\t\t\t\t.sort((a: any, b: any) => b.count - a.count)\r\n\t\t\t\t\t.slice(0, 5),\r\n\t\t\t\tcleanupStatus: {\r\n\t\t\t\t\tenabled: cleanupStatus.enabled,\r\n\t\t\t\t\tlastCleanup: cleanupStatus.lastCleanup.toISOString(),\r\n\t\t\t\t\tnextCleanup: cleanupStatus.nextCleanup.toISOString(),\r\n\t\t\t\t},\r\n\t\t\t\tthresholds: {\r\n\t\t\t\t\twarningSize: this.formatBytes(this._configService.getOptional('storage.warningSize', 800 * 1024 * 1024)),\r\n\t\t\t\t\tcriticalSize: this.formatBytes(this._configService.getOptional('storage.criticalSize', 1024 * 1024 * 1024)),\r\n\t\t\t\t\twarningFileCount: this._configService.getOptional('storage.warningFileCount', 5000),\r\n\t\t\t\t\tcriticalFileCount: this._configService.getOptional('storage.criticalFileCount', 10000),\r\n\t\t\t\t},\r\n\t\t\t\trecommendations,\r\n\t\t\t}\r\n\r\n\t\t\tif (thresholdCheck.status === 'critical') {\r\n\t\t\t\treturn this.createUnhealthyResult(\r\n\t\t\t\t\t`Storage in critical state: ${thresholdCheck.issues.join(', ')}`,\r\n\t\t\t\t\tdetails,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tif (thresholdCheck.status === 'warning') {\r\n\t\t\t\treturn this.createHealthyResult({\r\n\t\t\t\t\t...details,\r\n\t\t\t\t\tdetailStatus: 'warning',\r\n\t\t\t\t\twarnings: thresholdCheck.issues,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\treturn this.createHealthyResult(details)\r\n\t\t})\r\n\t}\r\n\r\n\tprotected getDescription(): string {\r\n\t\treturn 'Monitors storage usage, file patterns, and cleanup status with intelligent recommendations'\r\n\t}\r\n\r\n\t/**\r\n\t * Get detailed storage analysis\r\n\t */\r\n\tasync getStorageAnalysis(): Promise<{\r\n\t\tstats: any\r\n\t\tthresholds: any\r\n\t\tevictionCandidates: any[]\r\n\t\tcleanupRecommendations: string[]\r\n\t}> {\r\n\t\tconst stats = await this.storageMonitoring.getStorageStats()\r\n\t\tconst thresholdCheck = await this.storageMonitoring.checkThresholds()\r\n\t\tconst evictionRecommendations = await this.storageMonitoring.getEvictionCandidates()\r\n\r\n\t\treturn {\r\n\t\t\tstats,\r\n\t\t\tthresholds: thresholdCheck,\r\n\t\t\tevictionCandidates: evictionRecommendations.slice(0, 10),\r\n\t\t\tcleanupRecommendations: this.generateCleanupRecommendations(stats, thresholdCheck),\r\n\t\t}\r\n\t}\r\n\r\n\tprivate generateRecommendations(\r\n\t\tthresholdCheck: any,\r\n\t\tcleanupStatus: any,\r\n\t): string[] {\r\n\t\tconst recommendations: string[] = []\r\n\r\n\t\tif (thresholdCheck.status === 'critical') {\r\n\t\t\trecommendations.push('URGENT: Run immediate cleanup to free storage space')\r\n\t\t\trecommendations.push('Consider increasing storage capacity or reducing retention periods')\r\n\t\t}\r\n\t\telse if (thresholdCheck.status === 'warning') {\r\n\t\t\trecommendations.push('Schedule cleanup soon to prevent storage issues')\r\n\t\t\trecommendations.push('Review retention policies for optimization')\r\n\t\t}\r\n\r\n\t\tif (!cleanupStatus.enabled) {\r\n\t\t\trecommendations.push('Enable automatic cleanup to maintain storage health')\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst timeSinceLastCleanup = Date.now() - cleanupStatus.lastCleanup.getTime()\r\n\t\t\tconst daysSinceCleanup = timeSinceLastCleanup / (1000 * 60 * 60 * 24)\r\n\r\n\t\t\tif (daysSinceCleanup > 7) {\r\n\t\t\t\trecommendations.push('Last cleanup was over a week ago - consider running manual cleanup')\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (thresholdCheck.stats.fileTypes['.json'] > 1000) {\r\n\t\t\trecommendations.push('High number of JSON cache files - consider shorter TTL for cache entries')\r\n\t\t}\r\n\r\n\t\tif (thresholdCheck.stats.fileTypes['.webp'] > 500) {\r\n\t\t\trecommendations.push('Many WebP files stored - ensure image optimization is working correctly')\r\n\t\t}\r\n\r\n\t\tconst lowAccessFiles = thresholdCheck.stats.accessPatterns.filter((p: AccessPattern) => p.accessCount < 2).length\r\n\t\tif (lowAccessFiles > thresholdCheck.stats.totalFiles * 0.5) {\r\n\t\t\trecommendations.push('Over 50% of files have low access counts - consider more aggressive eviction')\r\n\t\t}\r\n\r\n\t\treturn recommendations\r\n\t}\r\n\r\n\tprivate generateCleanupRecommendations(stats: StorageStats, _thresholdCheck: any): string[] {\r\n\t\tconst recommendations: string[] = []\r\n\r\n\t\tconst oldFiles = stats.accessPatterns.filter((p: AccessPattern) => {\r\n\t\t\tconst ageInDays = (Date.now() - p.lastAccessed.getTime()) / (1000 * 60 * 60 * 24)\r\n\t\t\treturn ageInDays > 30\r\n\t\t})\r\n\r\n\t\tif (oldFiles.length > 0) {\r\n\t\t\tconst totalOldSize = oldFiles.reduce((sum: number, f: AccessPattern) => sum + f.size, 0)\r\n\t\t\trecommendations.push(`${oldFiles.length} files older than 30 days (${this.formatBytes(totalOldSize)})`)\r\n\t\t}\r\n\r\n\t\tconst largeFiles = stats.accessPatterns\r\n\t\t\t.filter((p: AccessPattern) => p.size > 1024 * 1024)\r\n\t\t\t.sort((a: AccessPattern, b: AccessPattern) => b.size - a.size)\r\n\t\t\t.slice(0, 10)\r\n\r\n\t\tif (largeFiles.length > 0) {\r\n\t\t\trecommendations.push(`Top large files: ${largeFiles.map((f: AccessPattern) => `${f.file} (${this.formatBytes(f.size)})`).join(', ')}`)\r\n\t\t}\r\n\r\n\t\tconst neverAccessedFiles = stats.accessPatterns.filter((p: AccessPattern) => p.accessCount === 1)\r\n\t\tif (neverAccessedFiles.length > 0) {\r\n\t\t\tconst totalNeverAccessedSize = neverAccessedFiles.reduce((sum: number, f: AccessPattern) => sum + f.size, 0)\r\n\t\t\trecommendations.push(`${neverAccessedFiles.length} files accessed only once (${this.formatBytes(totalNeverAccessedSize)})`)\r\n\t\t}\r\n\r\n\t\treturn recommendations\r\n\t}\r\n\r\n\tprivate formatBytes(bytes: number): string {\r\n\t\tconst units = ['B', 'KB', 'MB', 'GB']\r\n\t\tlet size = bytes\r\n\t\tlet unitIndex = 0\r\n\r\n\t\twhile (size >= 1024 && unitIndex < units.length - 1) {\r\n\t\t\tsize /= 1024\r\n\t\t\tunitIndex++\r\n\t\t}\r\n\r\n\t\treturn `${size.toFixed(1)} ${units[unitIndex]}`\r\n\t}\r\n}\r\n"],"names":["ConfigService","BaseHealthIndicator","Injectable","StorageCleanupService","StorageMonitoringService","StorageHealthIndicator","_configService","storageMonitoring","storageCleanup","options","timeout","threshold","performHealthCheck","executeWithTimeout","thresholdCheck","checkThresholds","stats","cleanupStatus","getCleanupStatus","maxSize","getOptional","usagePercentage","totalSize","recommendations","generateRecommendations","details","totalFiles","formatBytes","Math","round","oldestFile","toISOString","newestFile","topFileTypes","Object","entries","fileTypes","map","extension","count","sort","a","b","slice","enabled","lastCleanup","nextCleanup","thresholds","warningSize","criticalSize","warningFileCount","criticalFileCount","status","createUnhealthyResult","issues","join","createHealthyResult","detailStatus","warnings","getDescription","getStorageAnalysis","getStorageStats","evictionRecommendations","getEvictionCandidates","evictionCandidates","cleanupRecommendations","generateCleanupRecommendations","push","timeSinceLastCleanup","Date","now","getTime","daysSinceCleanup","lowAccessFiles","accessPatterns","filter","p","accessCount","length","_thresholdCheck","oldFiles","ageInDays","lastAccessed","totalOldSize","reduce","sum","f","size","largeFiles","file","neverAccessedFiles","totalNeverAccessedSize","bytes","units","unitIndex","toFixed"],"mappings":"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"}