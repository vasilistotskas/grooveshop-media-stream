{"version":3,"sources":["../../../../../src/MediaStream/Storage/services/storage-optimization.service.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport type { AccessPattern } from './storage-monitoring.service'\r\nimport { Buffer } from 'node:buffer'\r\nimport { promises as fs } from 'node:fs'\r\nimport { join } from 'node:path'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { Cron, CronExpression } from '@nestjs/schedule'\r\nimport { StorageMonitoringService } from './storage-monitoring.service'\r\n\r\nexport interface OptimizationStrategy {\r\n\tname: string\r\n\tdescription: string\r\n\texecute: (files: AccessPattern[]) => Promise<OptimizationResult>\r\n}\r\n\r\nexport interface OptimizationResult {\r\n\tfilesOptimized: number\r\n\tsizeReduced: number\r\n\terrors: string[]\r\n\tstrategy: string\r\n\tduration: number\r\n}\r\n\r\nexport interface OptimizationConfig {\r\n\tenabled: boolean\r\n\tstrategies: string[]\r\n\tpopularFileThreshold: number\r\n\tcompressionLevel: number\r\n\tcreateBackups: boolean\r\n\tmaxOptimizationTime: number\r\n}\r\n\r\nexport interface FileOptimization {\r\n\toriginalPath: string\r\n\toptimizedPath: string\r\n\toriginalSize: number\r\n\toptimizedSize: number\r\n\tcompressionRatio: number\r\n\tstrategy: string\r\n}\r\n\r\n@Injectable()\r\nexport class StorageOptimizationService implements OnModuleInit {\r\n\tprivate readonly _logger = new Logger(StorageOptimizationService.name)\r\n\tprivate readonly storageDirectory: string\r\n\tprivate readonly config: OptimizationConfig\r\n\tprivate readonly strategies = new Map<string, OptimizationStrategy>()\r\n\tprivate optimizationHistory = new Map<string, FileOptimization>()\r\n\tprivate isOptimizationRunning = false\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly storageMonitoring: StorageMonitoringService,\r\n\t) {\r\n\t\tthis.storageDirectory = this._configService.getOptional('cache.file.directory', './storage')\r\n\t\tthis.config = {\r\n\t\t\tenabled: this._configService.getOptional('storage.optimization.enabled', true),\r\n\t\t\tstrategies: this._configService.getOptional('storage.optimization.strategies', ['compression', 'deduplication']),\r\n\t\t\tpopularFileThreshold: this._configService.getOptional('storage.optimization.popularThreshold', 10),\r\n\t\t\tcompressionLevel: this._configService.getOptional('storage.optimization.compressionLevel', 6),\r\n\t\t\tcreateBackups: this._configService.getOptional('storage.optimization.createBackups', false),\r\n\t\t\tmaxOptimizationTime: this._configService.getOptional('storage.optimization.maxTime', 600000),\r\n\t\t}\r\n\r\n\t\tthis.initializeStrategies()\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tif (this.config.enabled) {\r\n\t\t\tthis._logger.log(`Storage optimization enabled with strategies: ${this.config.strategies.join(', ')}`)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._logger.log('Storage optimization disabled')\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Optimize frequently accessed files\r\n\t */\r\n\tasync optimizeFrequentlyAccessedFiles(): Promise<OptimizationResult> {\r\n\t\tif (this.isOptimizationRunning) {\r\n\t\t\tthrow new Error('Optimization is already running')\r\n\t\t}\r\n\r\n\t\tconst startTime = Date.now()\r\n\t\tthis.isOptimizationRunning = true\r\n\r\n\t\ttry {\r\n\t\t\tCorrelatedLogger.log('Starting storage optimization for frequently accessed files', StorageOptimizationService.name)\r\n\r\n\t\t\tlet stats\r\n\t\t\ttry {\r\n\t\t\t\tstats = await this.storageMonitoring.getStorageStats()\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tfilesOptimized: 0,\r\n\t\t\t\t\tsizeReduced: 0,\r\n\t\t\t\t\terrors: [`Storage monitoring error: ${(error as Error).message}`],\r\n\t\t\t\t\tstrategy: 'none',\r\n\t\t\t\t\tduration: Date.now() - startTime,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst popularFiles = stats.accessPatterns.filter(\r\n\t\t\t\tpattern => pattern.accessCount >= this.config.popularFileThreshold,\r\n\t\t\t)\r\n\r\n\t\t\tif (popularFiles.length === 0) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tfilesOptimized: 0,\r\n\t\t\t\t\tsizeReduced: 0,\r\n\t\t\t\t\terrors: [],\r\n\t\t\t\t\tstrategy: 'none',\r\n\t\t\t\t\tduration: Date.now() - startTime,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet totalFilesOptimized = 0\r\n\t\t\tlet totalSizeReduced = 0\r\n\t\t\tconst allErrors: string[] = []\r\n\t\t\tconst appliedStrategies: string[] = []\r\n\r\n\t\t\tfor (const strategyName of this.config.strategies) {\r\n\t\t\t\tconst strategy = this.strategies.get(strategyName)\r\n\t\t\t\tif (!strategy) {\r\n\t\t\t\t\tallErrors.push(`Unknown strategy: ${strategyName}`)\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst result = await strategy.execute(popularFiles)\r\n\t\t\t\t\ttotalFilesOptimized += result.filesOptimized\r\n\t\t\t\t\ttotalSizeReduced += result.sizeReduced\r\n\t\t\t\t\tallErrors.push(...result.errors)\r\n\t\t\t\t\tappliedStrategies.push(strategyName)\r\n\r\n\t\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t\t`Strategy '${strategyName}': ${result.filesOptimized} files, ${this.formatBytes(result.sizeReduced)} saved`,\r\n\t\t\t\t\t\tStorageOptimizationService.name,\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tconst errorMsg = `Strategy '${strategyName}' failed: ${(error as Error).message}`\r\n\t\t\t\t\tallErrors.push(errorMsg)\r\n\t\t\t\t\tCorrelatedLogger.error(errorMsg, (error as Error).stack, StorageOptimizationService.name)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst result: OptimizationResult = {\r\n\t\t\t\tfilesOptimized: totalFilesOptimized,\r\n\t\t\t\tsizeReduced: totalSizeReduced,\r\n\t\t\t\terrors: allErrors,\r\n\t\t\t\tstrategy: appliedStrategies.join(', '),\r\n\t\t\t\tduration: Date.now() - startTime,\r\n\t\t\t}\r\n\r\n\t\t\tCorrelatedLogger.log(\r\n\t\t\t\t`Optimization completed: ${totalFilesOptimized} files optimized, ${this.formatBytes(totalSizeReduced)} saved`,\r\n\t\t\t\tStorageOptimizationService.name,\r\n\t\t\t)\r\n\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.isOptimizationRunning = false\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Scheduled optimization\r\n\t */\r\n\t@Cron(CronExpression.EVERY_6_HOURS)\r\n\tasync scheduledOptimization(): Promise<void> {\r\n\t\tif (!this.config.enabled || this.isOptimizationRunning) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tawait this.optimizeFrequentlyAccessedFiles()\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t`Scheduled optimization failed: ${(error as Error).message}`,\r\n\t\t\t\t(error as Error).stack,\r\n\t\t\t\tStorageOptimizationService.name,\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get optimization statistics\r\n\t */\r\n\tgetOptimizationStats(): {\r\n\t\tenabled: boolean\r\n\t\tisRunning: boolean\r\n\t\ttotalOptimizations: number\r\n\t\ttotalSizeSaved: number\r\n\t\taverageCompressionRatio: number\r\n\t\tstrategies: string[]\r\n\t} {\r\n\t\tconst optimizations = Array.from(this.optimizationHistory.values())\r\n\t\tconst totalSizeSaved = optimizations.reduce((sum: any, opt: any) => sum + (opt.originalSize - opt.optimizedSize), 0)\r\n\t\tconst averageCompressionRatio = optimizations.length > 0\r\n\t\t\t? optimizations.reduce((sum: any, opt: any) => sum + opt.compressionRatio, 0) / optimizations.length\r\n\t\t\t: 0\r\n\r\n\t\treturn {\r\n\t\t\tenabled: this.config.enabled,\r\n\t\t\tisRunning: this.isOptimizationRunning,\r\n\t\t\ttotalOptimizations: optimizations.length,\r\n\t\t\ttotalSizeSaved,\r\n\t\t\taverageCompressionRatio,\r\n\t\t\tstrategies: this.config.strategies,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get optimization history for a specific file\r\n\t */\r\n\tgetFileOptimizationHistory(filename: string): FileOptimization | null {\r\n\t\treturn this.optimizationHistory.get(filename) || null\r\n\t}\r\n\r\n\tprivate initializeStrategies(): void {\r\n\t\tthis.strategies.set('compression', {\r\n\t\t\tname: 'Compression',\r\n\t\t\tdescription: 'Compress frequently accessed files using gzip',\r\n\t\t\texecute: async (files: AccessPattern[]) => {\r\n\t\t\t\tlet filesOptimized = 0\r\n\t\t\t\tlet sizeReduced = 0\r\n\t\t\t\tconst errors: string[] = []\r\n\r\n\t\t\t\tfor (const file of files) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst result = await this.compressFile(file)\r\n\t\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\t\tfilesOptimized++\r\n\t\t\t\t\t\t\tsizeReduced += result.originalSize - result.optimizedSize\r\n\t\t\t\t\t\t\tthis.optimizationHistory.set(file.file, result)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\t\terrors.push(`Compression failed for ${file.file}: ${(error as Error).message}`)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tfilesOptimized,\r\n\t\t\t\t\tsizeReduced,\r\n\t\t\t\t\terrors,\r\n\t\t\t\t\tstrategy: 'compression',\r\n\t\t\t\t\tduration: 0,\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\tthis.strategies.set('deduplication', {\r\n\t\t\tname: 'Deduplication',\r\n\t\t\tdescription: 'Remove duplicate files and create hard links',\r\n\t\t\texecute: async (files: AccessPattern[]) => {\r\n\t\t\t\tlet filesOptimized = 0\r\n\t\t\t\tlet sizeReduced = 0\r\n\t\t\t\tconst errors: string[] = []\r\n\r\n\t\t\t\tconst duplicates = await this.findDuplicateFiles(files)\r\n\r\n\t\t\t\tfor (const duplicateGroup of duplicates) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst result = await this.deduplicateFiles(duplicateGroup)\r\n\t\t\t\t\t\tfilesOptimized += result.filesProcessed\r\n\t\t\t\t\t\tsizeReduced += result.sizeReduced\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\t\terrors.push(`Deduplication failed: ${(error as Error).message}`)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tfilesOptimized,\r\n\t\t\t\t\tsizeReduced,\r\n\t\t\t\t\terrors,\r\n\t\t\t\t\tstrategy: 'deduplication',\r\n\t\t\t\t\tduration: 0,\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\tthis.strategies.set('prefetch', {\r\n\t\t\tname: 'Prefetch',\r\n\t\t\tdescription: 'Move frequently accessed files to faster storage tier',\r\n\t\t\texecute: async (files: AccessPattern[]) => {\r\n\t\t\t\t// This would move files to SSD or memory-mapped storage\r\n\t\t\t\t// For now, we'll just mark them as optimized\r\n\t\t\t\treturn {\r\n\t\t\t\t\tfilesOptimized: files.length,\r\n\t\t\t\t\tsizeReduced: 0,\r\n\t\t\t\t\terrors: [],\r\n\t\t\t\t\tstrategy: 'prefetch',\r\n\t\t\t\t\tduration: 0,\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t})\r\n\t}\r\n\r\n\tprivate async compressFile(file: AccessPattern): Promise<FileOptimization | null> {\r\n\t\tconst filePath = join(this.storageDirectory, file.file)\r\n\t\tconst compressedPath = `${filePath}.gz`\r\n\r\n\t\tif (file.extension === '.gz' || file.size < 1024) {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst zlib = await import('node:zlib')\r\n\t\t\tconst originalData = await fs.readFile(filePath)\r\n\t\t\tconst compressedData = await new Promise<Buffer>((resolve, reject) => {\r\n\t\t\t\tzlib.gzip(originalData, { level: this.config.compressionLevel }, (err, result) => {\r\n\t\t\t\t\tif (err)\r\n\t\t\t\t\t\treject(err)\r\n\t\t\t\t\telse resolve(result)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tconst compressionRatio = compressedData.length / originalData.length\r\n\t\t\tif (compressionRatio < 0.8) {\r\n\t\t\t\tif (this.config.createBackups) {\r\n\t\t\t\t\tawait fs.copyFile(filePath, `${filePath}.backup`)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tawait fs.writeFile(compressedPath, compressedData)\r\n\t\t\t\tawait fs.unlink(filePath)\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\toriginalPath: filePath,\r\n\t\t\t\t\toptimizedPath: compressedPath,\r\n\t\t\t\t\toriginalSize: originalData.length,\r\n\t\t\t\t\toptimizedSize: compressedData.length,\r\n\t\t\t\t\tcompressionRatio,\r\n\t\t\t\t\tstrategy: 'compression',\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t`Failed to compress ${file.file}: ${(error as Error).message}`,\r\n\t\t\t\tStorageOptimizationService.name,\r\n\t\t\t)\r\n\t\t\tthrow error\r\n\t\t}\r\n\r\n\t\treturn null\r\n\t}\r\n\r\n\tprivate async findDuplicateFiles(files: AccessPattern[]): Promise<AccessPattern[][]> {\r\n\t\tconst hashMap = new Map<string, AccessPattern[]>()\r\n\t\tconst crypto = await import('node:crypto')\r\n\r\n\t\tfor (const file of files) {\r\n\t\t\ttry {\r\n\t\t\t\tconst filePath = join(this.storageDirectory, file.file)\r\n\t\t\t\tconst data = await fs.readFile(filePath)\r\n\t\t\t\tconst hash = crypto.createHash('md5').update(data).digest('hex')\r\n\r\n\t\t\t\tif (!hashMap.has(hash)) {\r\n\t\t\t\t\thashMap.set(hash, [])\r\n\t\t\t\t}\r\n\t\t\t\thashMap.get(hash)!.push(file)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Failed to hash ${file.file}: ${(error as Error).message}`,\r\n\t\t\t\t\tStorageOptimizationService.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn Array.from(hashMap.values()).filter(group => group.length > 1)\r\n\t}\r\n\r\n\tprivate async deduplicateFiles(duplicateGroup: AccessPattern[]): Promise<{\r\n\t\tfilesProcessed: number\r\n\t\tsizeReduced: number\r\n\t}> {\r\n\t\tif (duplicateGroup.length < 2) {\r\n\t\t\treturn { filesProcessed: 0, sizeReduced: 0 }\r\n\t\t}\r\n\r\n\t\tconst sortedFiles = duplicateGroup.sort((a: any, b: any) => b.accessCount - a.accessCount)\r\n\t\tconst originalFile = sortedFiles[0]\r\n\t\tconst duplicates = sortedFiles.slice(1)\r\n\r\n\t\tlet filesProcessed = 0\r\n\t\tlet sizeReduced = 0\r\n\r\n\t\tfor (const duplicate of duplicates) {\r\n\t\t\ttry {\r\n\t\t\t\tconst originalPath = join(this.storageDirectory, originalFile.file)\r\n\t\t\t\tconst duplicatePath = join(this.storageDirectory, duplicate.file)\r\n\r\n\t\t\t\tawait fs.unlink(duplicatePath)\r\n\t\t\t\tawait fs.link(originalPath, duplicatePath)\r\n\r\n\t\t\t\tfilesProcessed++\r\n\t\t\t\tsizeReduced += duplicate.size\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Failed to deduplicate ${duplicate.file}: ${(error as Error).message}`,\r\n\t\t\t\t\tStorageOptimizationService.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { filesProcessed, sizeReduced }\r\n\t}\r\n\r\n\tprivate formatBytes(bytes: number): string {\r\n\t\tconst units = ['B', 'KB', 'MB', 'GB']\r\n\t\tlet size = bytes\r\n\t\tlet unitIndex = 0\r\n\r\n\t\twhile (size >= 1024 && unitIndex < units.length - 1) {\r\n\t\t\tsize /= 1024\r\n\t\t\tunitIndex++\r\n\t\t}\r\n\r\n\t\treturn `${size.toFixed(1)} ${units[unitIndex]}`\r\n\t}\r\n}\r\n"],"names":["promises","fs","join","ConfigService","CorrelatedLogger","Injectable","Logger","Cron","CronExpression","StorageMonitoringService","StorageOptimizationService","onModuleInit","config","enabled","_logger","log","strategies","optimizeFrequentlyAccessedFiles","isOptimizationRunning","Error","startTime","Date","now","name","stats","storageMonitoring","getStorageStats","error","filesOptimized","sizeReduced","errors","message","strategy","duration","popularFiles","accessPatterns","filter","pattern","accessCount","popularFileThreshold","length","totalFilesOptimized","totalSizeReduced","allErrors","appliedStrategies","strategyName","get","push","result","execute","debug","formatBytes","errorMsg","stack","scheduledOptimization","getOptimizationStats","optimizations","Array","from","optimizationHistory","values","totalSizeSaved","reduce","sum","opt","originalSize","optimizedSize","averageCompressionRatio","compressionRatio","isRunning","totalOptimizations","getFileOptimizationHistory","filename","initializeStrategies","set","description","files","file","compressFile","duplicates","findDuplicateFiles","duplicateGroup","deduplicateFiles","filesProcessed","filePath","storageDirectory","compressedPath","extension","size","zlib","originalData","readFile","compressedData","Promise","resolve","reject","gzip","level","compressionLevel","err","createBackups","copyFile","writeFile","unlink","originalPath","optimizedPath","warn","hashMap","Map","crypto","data","hash","createHash","update","digest","has","group","sortedFiles","sort","a","b","originalFile","slice","duplicate","duplicatePath","link","bytes","units","unitIndex","toFixed","_configService","getOptional","maxOptimizationTime","EVERY_6_HOURS"],"mappings":";;;;;;;;;AAGA,SAASA,YAAYC,EAAE,QAAQ,UAAS;AACxC,SAASC,IAAI,QAAQ,YAAW;AAChC,SAASC,aAAa,QAAQ,iCAAqC;AACnE,SAASC,gBAAgB,QAAQ,yCAA6C;AAC9E,SAASC,UAAU,EAAEC,MAAM,QAAQ,iBAAgB;AACnD,SAASC,IAAI,EAAEC,cAAc,QAAQ,mBAAkB;AACvD,SAASC,wBAAwB,QAAQ,kCAA8B;AAmCvE,OAAO,MAAMC;IAyBZ,MAAMC,eAA8B;QACnC,IAAI,IAAI,CAACC,MAAM,CAACC,OAAO,EAAE;YACxB,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,8CAA8C,EAAE,IAAI,CAACH,MAAM,CAACI,UAAU,CAACd,IAAI,CAAC,OAAO;QACtG,OACK;YACJ,IAAI,CAACY,OAAO,CAACC,GAAG,CAAC;QAClB;IACD;IAEA;;EAEC,GACD,MAAME,kCAA+D;QACpE,IAAI,IAAI,CAACC,qBAAqB,EAAE;YAC/B,MAAM,IAAIC,MAAM;QACjB;QAEA,MAAMC,YAAYC,KAAKC,GAAG;QAC1B,IAAI,CAACJ,qBAAqB,GAAG;QAE7B,IAAI;YACHd,iBAAiBW,GAAG,CAAC,+DAA+DL,2BAA2Ba,IAAI;YAEnH,IAAIC;YACJ,IAAI;gBACHA,QAAQ,MAAM,IAAI,CAACC,iBAAiB,CAACC,eAAe;YACrD,EACA,OAAOC,OAAgB;gBACtB,OAAO;oBACNC,gBAAgB;oBAChBC,aAAa;oBACbC,QAAQ;wBAAC,CAAC,0BAA0B,EAAE,AAACH,MAAgBI,OAAO,EAAE;qBAAC;oBACjEC,UAAU;oBACVC,UAAUZ,KAAKC,GAAG,KAAKF;gBACxB;YACD;YAEA,MAAMc,eAAeV,MAAMW,cAAc,CAACC,MAAM,CAC/CC,CAAAA,UAAWA,QAAQC,WAAW,IAAI,IAAI,CAAC1B,MAAM,CAAC2B,oBAAoB;YAGnE,IAAIL,aAAaM,MAAM,KAAK,GAAG;gBAC9B,OAAO;oBACNZ,gBAAgB;oBAChBC,aAAa;oBACbC,QAAQ,EAAE;oBACVE,UAAU;oBACVC,UAAUZ,KAAKC,GAAG,KAAKF;gBACxB;YACD;YAEA,IAAIqB,sBAAsB;YAC1B,IAAIC,mBAAmB;YACvB,MAAMC,YAAsB,EAAE;YAC9B,MAAMC,oBAA8B,EAAE;YAEtC,KAAK,MAAMC,gBAAgB,IAAI,CAACjC,MAAM,CAACI,UAAU,CAAE;gBAClD,MAAMgB,WAAW,IAAI,CAAChB,UAAU,CAAC8B,GAAG,CAACD;gBACrC,IAAI,CAACb,UAAU;oBACdW,UAAUI,IAAI,CAAC,CAAC,kBAAkB,EAAEF,cAAc;oBAClD;gBACD;gBAEA,IAAI;oBACH,MAAMG,SAAS,MAAMhB,SAASiB,OAAO,CAACf;oBACtCO,uBAAuBO,OAAOpB,cAAc;oBAC5Cc,oBAAoBM,OAAOnB,WAAW;oBACtCc,UAAUI,IAAI,IAAIC,OAAOlB,MAAM;oBAC/Bc,kBAAkBG,IAAI,CAACF;oBAEvBzC,iBAAiB8C,KAAK,CACrB,CAAC,UAAU,EAAEL,aAAa,GAAG,EAAEG,OAAOpB,cAAc,CAAC,QAAQ,EAAE,IAAI,CAACuB,WAAW,CAACH,OAAOnB,WAAW,EAAE,MAAM,CAAC,EAC3GnB,2BAA2Ba,IAAI;gBAEjC,EACA,OAAOI,OAAgB;oBACtB,MAAMyB,WAAW,CAAC,UAAU,EAAEP,aAAa,UAAU,EAAE,AAAClB,MAAgBI,OAAO,EAAE;oBACjFY,UAAUI,IAAI,CAACK;oBACfhD,iBAAiBuB,KAAK,CAACyB,UAAU,AAACzB,MAAgB0B,KAAK,EAAE3C,2BAA2Ba,IAAI;gBACzF;YACD;YAEA,MAAMyB,SAA6B;gBAClCpB,gBAAgBa;gBAChBZ,aAAaa;gBACbZ,QAAQa;gBACRX,UAAUY,kBAAkB1C,IAAI,CAAC;gBACjC+B,UAAUZ,KAAKC,GAAG,KAAKF;YACxB;YAEAhB,iBAAiBW,GAAG,CACnB,CAAC,wBAAwB,EAAE0B,oBAAoB,kBAAkB,EAAE,IAAI,CAACU,WAAW,CAACT,kBAAkB,MAAM,CAAC,EAC7GhC,2BAA2Ba,IAAI;YAGhC,OAAOyB;QACR,SACQ;YACP,IAAI,CAAC9B,qBAAqB,GAAG;QAC9B;IACD;IAEA;;EAEC,GACD,MACMoC,wBAAuC;QAC5C,IAAI,CAAC,IAAI,CAAC1C,MAAM,CAACC,OAAO,IAAI,IAAI,CAACK,qBAAqB,EAAE;YACvD;QACD;QAEA,IAAI;YACH,MAAM,IAAI,CAACD,+BAA+B;QAC3C,EACA,OAAOU,OAAgB;YACtBvB,iBAAiBuB,KAAK,CACrB,CAAC,+BAA+B,EAAE,AAACA,MAAgBI,OAAO,EAAE,EAC5D,AAACJ,MAAgB0B,KAAK,EACtB3C,2BAA2Ba,IAAI;QAEjC;IACD;IAEA;;EAEC,GACDgC,uBAOE;QACD,MAAMC,gBAAgBC,MAAMC,IAAI,CAAC,IAAI,CAACC,mBAAmB,CAACC,MAAM;QAChE,MAAMC,iBAAiBL,cAAcM,MAAM,CAAC,CAACC,KAAUC,MAAaD,MAAOC,CAAAA,IAAIC,YAAY,GAAGD,IAAIE,aAAa,AAAD,GAAI;QAClH,MAAMC,0BAA0BX,cAAchB,MAAM,GAAG,IACpDgB,cAAcM,MAAM,CAAC,CAACC,KAAUC,MAAaD,MAAMC,IAAII,gBAAgB,EAAE,KAAKZ,cAAchB,MAAM,GAClG;QAEH,OAAO;YACN3B,SAAS,IAAI,CAACD,MAAM,CAACC,OAAO;YAC5BwD,WAAW,IAAI,CAACnD,qBAAqB;YACrCoD,oBAAoBd,cAAchB,MAAM;YACxCqB;YACAM;YACAnD,YAAY,IAAI,CAACJ,MAAM,CAACI,UAAU;QACnC;IACD;IAEA;;EAEC,GACDuD,2BAA2BC,QAAgB,EAA2B;QACrE,OAAO,IAAI,CAACb,mBAAmB,CAACb,GAAG,CAAC0B,aAAa;IAClD;IAEQC,uBAA6B;QACpC,IAAI,CAACzD,UAAU,CAAC0D,GAAG,CAAC,eAAe;YAClCnD,MAAM;YACNoD,aAAa;YACb1B,SAAS,OAAO2B;gBACf,IAAIhD,iBAAiB;gBACrB,IAAIC,cAAc;gBAClB,MAAMC,SAAmB,EAAE;gBAE3B,KAAK,MAAM+C,QAAQD,MAAO;oBACzB,IAAI;wBACH,MAAM5B,SAAS,MAAM,IAAI,CAAC8B,YAAY,CAACD;wBACvC,IAAI7B,QAAQ;4BACXpB;4BACAC,eAAemB,OAAOiB,YAAY,GAAGjB,OAAOkB,aAAa;4BACzD,IAAI,CAACP,mBAAmB,CAACe,GAAG,CAACG,KAAKA,IAAI,EAAE7B;wBACzC;oBACD,EACA,OAAOrB,OAAgB;wBACtBG,OAAOiB,IAAI,CAAC,CAAC,uBAAuB,EAAE8B,KAAKA,IAAI,CAAC,EAAE,EAAE,AAAClD,MAAgBI,OAAO,EAAE;oBAC/E;gBACD;gBAEA,OAAO;oBACNH;oBACAC;oBACAC;oBACAE,UAAU;oBACVC,UAAU;gBACX;YACD;QACD;QAEA,IAAI,CAACjB,UAAU,CAAC0D,GAAG,CAAC,iBAAiB;YACpCnD,MAAM;YACNoD,aAAa;YACb1B,SAAS,OAAO2B;gBACf,IAAIhD,iBAAiB;gBACrB,IAAIC,cAAc;gBAClB,MAAMC,SAAmB,EAAE;gBAE3B,MAAMiD,aAAa,MAAM,IAAI,CAACC,kBAAkB,CAACJ;gBAEjD,KAAK,MAAMK,kBAAkBF,WAAY;oBACxC,IAAI;wBACH,MAAM/B,SAAS,MAAM,IAAI,CAACkC,gBAAgB,CAACD;wBAC3CrD,kBAAkBoB,OAAOmC,cAAc;wBACvCtD,eAAemB,OAAOnB,WAAW;oBAClC,EACA,OAAOF,OAAgB;wBACtBG,OAAOiB,IAAI,CAAC,CAAC,sBAAsB,EAAE,AAACpB,MAAgBI,OAAO,EAAE;oBAChE;gBACD;gBAEA,OAAO;oBACNH;oBACAC;oBACAC;oBACAE,UAAU;oBACVC,UAAU;gBACX;YACD;QACD;QAEA,IAAI,CAACjB,UAAU,CAAC0D,GAAG,CAAC,YAAY;YAC/BnD,MAAM;YACNoD,aAAa;YACb1B,SAAS,OAAO2B;gBACf,wDAAwD;gBACxD,6CAA6C;gBAC7C,OAAO;oBACNhD,gBAAgBgD,MAAMpC,MAAM;oBAC5BX,aAAa;oBACbC,QAAQ,EAAE;oBACVE,UAAU;oBACVC,UAAU;gBACX;YACD;QACD;IACD;IAEA,MAAc6C,aAAaD,IAAmB,EAAoC;QACjF,MAAMO,WAAWlF,KAAK,IAAI,CAACmF,gBAAgB,EAAER,KAAKA,IAAI;QACtD,MAAMS,iBAAiB,GAAGF,SAAS,GAAG,CAAC;QAEvC,IAAIP,KAAKU,SAAS,KAAK,SAASV,KAAKW,IAAI,GAAG,MAAM;YACjD,OAAO;QACR;QAEA,IAAI;YACH,MAAMC,OAAO,MAAM,MAAM,CAAC;YAC1B,MAAMC,eAAe,MAAMzF,GAAG0F,QAAQ,CAACP;YACvC,MAAMQ,iBAAiB,MAAM,IAAIC,QAAgB,CAACC,SAASC;gBAC1DN,KAAKO,IAAI,CAACN,cAAc;oBAAEO,OAAO,IAAI,CAACrF,MAAM,CAACsF,gBAAgB;gBAAC,GAAG,CAACC,KAAKnD;oBACtE,IAAImD,KACHJ,OAAOI;yBACHL,QAAQ9C;gBACd;YACD;YAEA,MAAMoB,mBAAmBwB,eAAepD,MAAM,GAAGkD,aAAalD,MAAM;YACpE,IAAI4B,mBAAmB,KAAK;gBAC3B,IAAI,IAAI,CAACxD,MAAM,CAACwF,aAAa,EAAE;oBAC9B,MAAMnG,GAAGoG,QAAQ,CAACjB,UAAU,GAAGA,SAAS,OAAO,CAAC;gBACjD;gBAEA,MAAMnF,GAAGqG,SAAS,CAAChB,gBAAgBM;gBACnC,MAAM3F,GAAGsG,MAAM,CAACnB;gBAEhB,OAAO;oBACNoB,cAAcpB;oBACdqB,eAAenB;oBACfrB,cAAcyB,aAAalD,MAAM;oBACjC0B,eAAe0B,eAAepD,MAAM;oBACpC4B;oBACApC,UAAU;gBACX;YACD;QACD,EACA,OAAOL,OAAgB;YACtBvB,iBAAiBsG,IAAI,CACpB,CAAC,mBAAmB,EAAE7B,KAAKA,IAAI,CAAC,EAAE,EAAE,AAAClD,MAAgBI,OAAO,EAAE,EAC9DrB,2BAA2Ba,IAAI;YAEhC,MAAMI;QACP;QAEA,OAAO;IACR;IAEA,MAAcqD,mBAAmBJ,KAAsB,EAA8B;QACpF,MAAM+B,UAAU,IAAIC;QACpB,MAAMC,SAAS,MAAM,MAAM,CAAC;QAE5B,KAAK,MAAMhC,QAAQD,MAAO;YACzB,IAAI;gBACH,MAAMQ,WAAWlF,KAAK,IAAI,CAACmF,gBAAgB,EAAER,KAAKA,IAAI;gBACtD,MAAMiC,OAAO,MAAM7G,GAAG0F,QAAQ,CAACP;gBAC/B,MAAM2B,OAAOF,OAAOG,UAAU,CAAC,OAAOC,MAAM,CAACH,MAAMI,MAAM,CAAC;gBAE1D,IAAI,CAACP,QAAQQ,GAAG,CAACJ,OAAO;oBACvBJ,QAAQjC,GAAG,CAACqC,MAAM,EAAE;gBACrB;gBACAJ,QAAQ7D,GAAG,CAACiE,MAAOhE,IAAI,CAAC8B;YACzB,EACA,OAAOlD,OAAgB;gBACtBvB,iBAAiBsG,IAAI,CACpB,CAAC,eAAe,EAAE7B,KAAKA,IAAI,CAAC,EAAE,EAAE,AAAClD,MAAgBI,OAAO,EAAE,EAC1DrB,2BAA2Ba,IAAI;YAEjC;QACD;QAEA,OAAOkC,MAAMC,IAAI,CAACiD,QAAQ/C,MAAM,IAAIxB,MAAM,CAACgF,CAAAA,QAASA,MAAM5E,MAAM,GAAG;IACpE;IAEA,MAAc0C,iBAAiBD,cAA+B,EAG3D;QACF,IAAIA,eAAezC,MAAM,GAAG,GAAG;YAC9B,OAAO;gBAAE2C,gBAAgB;gBAAGtD,aAAa;YAAE;QAC5C;QAEA,MAAMwF,cAAcpC,eAAeqC,IAAI,CAAC,CAACC,GAAQC,IAAWA,EAAElF,WAAW,GAAGiF,EAAEjF,WAAW;QACzF,MAAMmF,eAAeJ,WAAW,CAAC,EAAE;QACnC,MAAMtC,aAAasC,YAAYK,KAAK,CAAC;QAErC,IAAIvC,iBAAiB;QACrB,IAAItD,cAAc;QAElB,KAAK,MAAM8F,aAAa5C,WAAY;YACnC,IAAI;gBACH,MAAMyB,eAAetG,KAAK,IAAI,CAACmF,gBAAgB,EAAEoC,aAAa5C,IAAI;gBAClE,MAAM+C,gBAAgB1H,KAAK,IAAI,CAACmF,gBAAgB,EAAEsC,UAAU9C,IAAI;gBAEhE,MAAM5E,GAAGsG,MAAM,CAACqB;gBAChB,MAAM3H,GAAG4H,IAAI,CAACrB,cAAcoB;gBAE5BzC;gBACAtD,eAAe8F,UAAUnC,IAAI;YAC9B,EACA,OAAO7D,OAAgB;gBACtBvB,iBAAiBsG,IAAI,CACpB,CAAC,sBAAsB,EAAEiB,UAAU9C,IAAI,CAAC,EAAE,EAAE,AAAClD,MAAgBI,OAAO,EAAE,EACtErB,2BAA2Ba,IAAI;YAEjC;QACD;QAEA,OAAO;YAAE4D;YAAgBtD;QAAY;IACtC;IAEQsB,YAAY2E,KAAa,EAAU;QAC1C,MAAMC,QAAQ;YAAC;YAAK;YAAM;YAAM;SAAK;QACrC,IAAIvC,OAAOsC;QACX,IAAIE,YAAY;QAEhB,MAAOxC,QAAQ,QAAQwC,YAAYD,MAAMvF,MAAM,GAAG,EAAG;YACpDgD,QAAQ;YACRwC;QACD;QAEA,OAAO,GAAGxC,KAAKyC,OAAO,CAAC,GAAG,CAAC,EAAEF,KAAK,CAACC,UAAU,EAAE;IAChD;IA1XA,YACC,AAAiBE,cAA6B,EAC9C,AAAiBzG,iBAA2C,CAC3D;aAFgByG,iBAAAA;aACAzG,oBAAAA;aATDX,UAAU,IAAIR,OAAOI,2BAA2Ba,IAAI;aAGpDP,aAAa,IAAI4F;aAC1BjD,sBAAsB,IAAIiD;aAC1B1F,wBAAwB;QAM/B,IAAI,CAACmE,gBAAgB,GAAG,IAAI,CAAC6C,cAAc,CAACC,WAAW,CAAC,wBAAwB;QAChF,IAAI,CAACvH,MAAM,GAAG;YACbC,SAAS,IAAI,CAACqH,cAAc,CAACC,WAAW,CAAC,gCAAgC;YACzEnH,YAAY,IAAI,CAACkH,cAAc,CAACC,WAAW,CAAC,mCAAmC;gBAAC;gBAAe;aAAgB;YAC/G5F,sBAAsB,IAAI,CAAC2F,cAAc,CAACC,WAAW,CAAC,yCAAyC;YAC/FjC,kBAAkB,IAAI,CAACgC,cAAc,CAACC,WAAW,CAAC,yCAAyC;YAC3F/B,eAAe,IAAI,CAAC8B,cAAc,CAACC,WAAW,CAAC,sCAAsC;YACrFC,qBAAqB,IAAI,CAACF,cAAc,CAACC,WAAW,CAAC,gCAAgC;QACtF;QAEA,IAAI,CAAC1D,oBAAoB;IAC1B;AA4WD;;wBAjQsB4D"}