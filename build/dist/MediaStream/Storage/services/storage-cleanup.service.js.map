{"version":3,"sources":["../../../../../src/MediaStream/Storage/services/storage-cleanup.service.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport { promises as fs, Stats } from 'node:fs'\r\nimport { join } from 'node:path'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { Cron } from '@nestjs/schedule'\r\nimport { IntelligentEvictionService } from './intelligent-eviction.service'\r\nimport { StorageMonitoringService } from './storage-monitoring.service'\r\n\r\nexport interface RetentionPolicy {\r\n\tname: string\r\n\tdescription: string\r\n\tmaxAge: number\r\n\tmaxSize: number\r\n\tfilePattern?: RegExp\r\n\tpreserveCount?: number\r\n\tenabled: boolean\r\n}\r\n\r\nexport interface CleanupResult {\r\n\tfilesRemoved: number\r\n\tsizeFreed: number\r\n\terrors: string[]\r\n\tpoliciesApplied: string[]\r\n\tduration: number\r\n\tnextCleanup: Date\r\n}\r\n\r\nexport interface CleanupConfig {\r\n\tenabled: boolean\r\n\tcronSchedule: string\r\n\tpolicies: RetentionPolicy[]\r\n\tdryRun: boolean\r\n\tmaxCleanupDuration: number\r\n}\r\n\r\n@Injectable()\r\nexport class StorageCleanupService implements OnModuleInit {\r\n\tprivate readonly _logger = new Logger(StorageCleanupService.name)\r\n\tprivate readonly storageDirectory: string\r\n\tprivate readonly config: CleanupConfig\r\n\tprivate lastCleanup: Date = new Date()\r\n\tprivate isCleanupRunning = false\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly storageMonitoring: StorageMonitoringService,\r\n\t\tprivate readonly intelligentEviction: IntelligentEvictionService,\r\n\t) {\r\n\t\tthis.storageDirectory = this._configService.getOptional('cache.file.directory', './storage')\r\n\t\tthis.config = this.loadCleanupConfig()\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tif (this.config.enabled) {\r\n\t\t\tthis._logger.log('Storage cleanup service initialized with policies:', this.config.policies.map(p => p.name))\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._logger.log('Storage cleanup service disabled')\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Perform manual cleanup with optional policy override\r\n\t */\r\n\tasync performCleanup(policyNames?: string[], dryRun?: boolean): Promise<CleanupResult> {\r\n\t\tif (this.isCleanupRunning) {\r\n\t\t\tthrow new Error('Cleanup is already running')\r\n\t\t}\r\n\r\n\t\tconst startTime = Date.now()\r\n\t\tthis.isCleanupRunning = true\r\n\r\n\t\ttry {\r\n\t\t\tCorrelatedLogger.log('Starting storage cleanup', StorageCleanupService.name)\r\n\r\n\t\t\tconst policiesToApply = policyNames\r\n\t\t\t\t? this.config.policies.filter(p => policyNames.includes(p.name))\r\n\t\t\t\t: this.config.policies.filter(p => p.enabled)\r\n\r\n\t\t\tconst isDryRun = dryRun ?? this.config.dryRun\r\n\r\n\t\t\tlet totalFilesRemoved = 0\r\n\t\t\tlet totalSizeFreed = 0\r\n\t\t\tconst allErrors: string[] = []\r\n\t\t\tconst appliedPolicies: string[] = []\r\n\r\n\t\t\tfor (const policy of policiesToApply) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst result = await this.applyRetentionPolicy(policy, isDryRun)\r\n\t\t\t\t\ttotalFilesRemoved += result.filesRemoved\r\n\t\t\t\t\ttotalSizeFreed += result.sizeFreed\r\n\t\t\t\t\tallErrors.push(...result.errors)\r\n\t\t\t\t\tappliedPolicies.push(policy.name)\r\n\r\n\t\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t\t`Policy '${policy.name}': ${result.filesRemoved} files, ${this.formatBytes(result.sizeFreed)} freed`,\r\n\t\t\t\t\t\tStorageCleanupService.name,\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tconst errorMsg = `Policy '${policy.name}' failed: ${(error as Error).message}`\r\n\t\t\t\t\tallErrors.push(errorMsg)\r\n\t\t\t\t\tCorrelatedLogger.error(errorMsg, (error as Error).stack, StorageCleanupService.name)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst thresholdCheck = await this.storageMonitoring.checkThresholds()\r\n\t\t\tif (thresholdCheck.status !== 'healthy' && !isDryRun) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst evictionResult = await this.intelligentEviction.performThresholdBasedEviction()\r\n\t\t\t\t\ttotalFilesRemoved += evictionResult.filesEvicted\r\n\t\t\t\t\ttotalSizeFreed += evictionResult.sizeFreed\r\n\t\t\t\t\tallErrors.push(...evictionResult.errors)\r\n\t\t\t\t\tappliedPolicies.push('intelligent-eviction')\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tallErrors.push(`Intelligent eviction failed: ${(error as Error).message}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.lastCleanup = new Date()\r\n\t\t\tconst duration = Date.now() - startTime\r\n\r\n\t\t\tconst result: CleanupResult = {\r\n\t\t\t\tfilesRemoved: totalFilesRemoved,\r\n\t\t\t\tsizeFreed: totalSizeFreed,\r\n\t\t\t\terrors: allErrors,\r\n\t\t\t\tpoliciesApplied: appliedPolicies,\r\n\t\t\t\tduration,\r\n\t\t\t\tnextCleanup: this.getNextCleanupTime(),\r\n\t\t\t}\r\n\r\n\t\t\tCorrelatedLogger.log(\r\n\t\t\t\t`Cleanup completed: ${totalFilesRemoved} files removed, ${this.formatBytes(totalSizeFreed)} freed`,\r\n\t\t\t\tStorageCleanupService.name,\r\n\t\t\t)\r\n\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.isCleanupRunning = false\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Scheduled cleanup based on cron configuration\r\n\t */\r\n\t@Cron('0 2 * * *')\r\n\tasync scheduledCleanup(): Promise<void> {\r\n\t\tconst currentlyEnabled = this._configService.getOptional('storage.cleanup.enabled', true)\r\n\t\tif (!currentlyEnabled || this.isCleanupRunning) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tawait this.performCleanup()\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t`Scheduled cleanup failed: ${(error as Error).message}`,\r\n\t\t\t\t(error as Error).stack,\r\n\t\t\t\tStorageCleanupService.name,\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get cleanup status and next scheduled run\r\n\t */\r\n\tgetCleanupStatus(): {\r\n\t\tenabled: boolean\r\n\t\tisRunning: boolean\r\n\t\tlastCleanup: Date\r\n\t\tnextCleanup: Date\r\n\t\tpolicies: RetentionPolicy[]\r\n\t} {\r\n\t\treturn {\r\n\t\t\tenabled: this.config.enabled,\r\n\t\t\tisRunning: this.isCleanupRunning,\r\n\t\t\tlastCleanup: this.lastCleanup,\r\n\t\t\tnextCleanup: this.getNextCleanupTime(),\r\n\t\t\tpolicies: this.config.policies,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add or update a retention policy\r\n\t */\r\n\tupdateRetentionPolicy(policy: RetentionPolicy): void {\r\n\t\tconst existingIndex = this.config.policies.findIndex(p => p.name === policy.name)\r\n\r\n\t\tif (existingIndex >= 0) {\r\n\t\t\tthis.config.policies[existingIndex] = policy\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.config.policies.push(policy)\r\n\t\t}\r\n\r\n\t\tCorrelatedLogger.log(`Retention policy '${policy.name}' updated`, StorageCleanupService.name)\r\n\t}\r\n\r\n\t/**\r\n\t * Remove a retention policy\r\n\t */\r\n\tremoveRetentionPolicy(policyName: string): boolean {\r\n\t\tconst index = this.config.policies.findIndex(p => p.name === policyName)\r\n\r\n\t\tif (index >= 0) {\r\n\t\t\tthis.config.policies.splice(index, 1)\r\n\t\t\tCorrelatedLogger.log(`Retention policy '${policyName}' removed`, StorageCleanupService.name)\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\r\n\tprivate async applyRetentionPolicy(policy: RetentionPolicy, dryRun: boolean): Promise<{\r\n\t\tfilesRemoved: number\r\n\t\tsizeFreed: number\r\n\t\terrors: string[]\r\n\t}> {\r\n\t\tconst files = await fs.readdir(this.storageDirectory)\r\n\t\tconst candidates: Array<{ file: string, stats: Stats }> = []\r\n\r\n\t\tfor (const file of files) {\r\n\t\t\tif (file === '.gitkeep')\r\n\t\t\t\tcontinue\r\n\r\n\t\t\tconst filePath = join(this.storageDirectory, file)\r\n\t\t\tconst stats = await fs.stat(filePath)\r\n\r\n\t\t\tif (policy.filePattern && !policy.filePattern.test(file)) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tconst ageInDays = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60 * 24)\r\n\t\t\tif (ageInDays < policy.maxAge) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tcandidates.push({ file, stats })\r\n\t\t}\r\n\r\n\t\tcandidates.sort((a: any, b: any) => a.stats.mtime.getTime() - b.stats.mtime.getTime())\r\n\r\n\t\tif (policy.preserveCount && candidates.length <= policy.preserveCount) {\r\n\t\t\treturn { filesRemoved: 0, sizeFreed: 0, errors: [] }\r\n\t\t}\r\n\r\n\t\tconst filesToRemove = policy.preserveCount\r\n\t\t\t? candidates.slice(0, candidates.length - policy.preserveCount)\r\n\t\t\t: candidates\r\n\r\n\t\tlet totalSize = 0\r\n\t\tconst finalCandidates: Array<{ file: string, stats: Stats }> = []\r\n\r\n\t\tfor (const candidate of filesToRemove) {\r\n\t\t\tif (policy.maxSize > 0 && totalSize + candidate.stats.size > policy.maxSize) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\tfinalCandidates.push(candidate)\r\n\t\t\ttotalSize += candidate.stats.size\r\n\t\t}\r\n\r\n\t\tlet filesRemoved = 0\r\n\t\tlet sizeFreed = 0\r\n\t\tconst errors: string[] = []\r\n\r\n\t\tfor (const { file, stats } of finalCandidates) {\r\n\t\t\ttry {\r\n\t\t\t\tif (!dryRun) {\r\n\t\t\t\t\tconst filePath = join(this.storageDirectory, file)\r\n\t\t\t\t\tawait fs.unlink(filePath)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfilesRemoved++\r\n\t\t\t\tsizeFreed += stats.size\r\n\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`${dryRun ? '[DRY RUN] ' : ''}Removed file: ${file} (${this.formatBytes(stats.size)})`,\r\n\t\t\t\t\tStorageCleanupService.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tconst errorMsg = `Failed to remove ${file}: ${(error as Error).message}`\r\n\t\t\t\terrors.push(errorMsg)\r\n\t\t\t\tCorrelatedLogger.warn(errorMsg, StorageCleanupService.name)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { filesRemoved, sizeFreed, errors }\r\n\t}\r\n\r\n\tprivate loadCleanupConfig(): CleanupConfig {\r\n\t\tconst enabled = this._configService.getOptional('storage.cleanup.enabled', true)\r\n\t\tconst cronSchedule = this._configService.getOptional('storage.cleanup.cronSchedule', '0 2 * * *')\r\n\t\tconst dryRun = this._configService.getOptional('storage.cleanup.dryRun', false)\r\n\t\tconst maxCleanupDuration = this._configService.getOptional('storage.cleanup.maxDuration', 300000)\r\n\r\n\t\tconst defaultPolicies: RetentionPolicy[] = [\r\n\t\t\t{\r\n\t\t\t\tname: 'old-cache-files',\r\n\t\t\t\tdescription: 'Remove cache files older than 30 days',\r\n\t\t\t\tmaxAge: 30,\r\n\t\t\t\tmaxSize: 0,\r\n\t\t\t\tfilePattern: /\\.(json|cache)$/,\r\n\t\t\t\tenabled: true,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'large-images',\r\n\t\t\t\tdescription: 'Remove large image files older than 7 days',\r\n\t\t\t\tmaxAge: 7,\r\n\t\t\t\tmaxSize: 100 * 1024 * 1024,\r\n\t\t\t\tfilePattern: /\\.(jpg|jpeg|png|webp|gif)$/,\r\n\t\t\t\tenabled: true,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'temp-files',\r\n\t\t\t\tdescription: 'Remove temporary files older than 1 day',\r\n\t\t\t\tmaxAge: 1,\r\n\t\t\t\tmaxSize: 0,\r\n\t\t\t\tfilePattern: /\\.(tmp|temp)$/,\r\n\t\t\t\tenabled: true,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'preserve-recent',\r\n\t\t\t\tdescription: 'Keep at least 100 most recent files',\r\n\t\t\t\tmaxAge: 0,\r\n\t\t\t\tmaxSize: 0,\r\n\t\t\t\tpreserveCount: 100,\r\n\t\t\t\tenabled: true,\r\n\t\t\t},\r\n\t\t]\r\n\r\n\t\treturn {\r\n\t\t\tenabled,\r\n\t\t\tcronSchedule,\r\n\t\t\tpolicies: defaultPolicies,\r\n\t\t\tdryRun,\r\n\t\t\tmaxCleanupDuration,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getNextCleanupTime(): Date {\r\n\t\tconst nextCleanup = new Date(this.lastCleanup)\r\n\t\tnextCleanup.setDate(nextCleanup.getDate() + 1)\r\n\t\tnextCleanup.setHours(2, 0, 0, 0)\r\n\r\n\t\treturn nextCleanup\r\n\t}\r\n\r\n\tprivate formatBytes(bytes: number): string {\r\n\t\tconst units = ['B', 'KB', 'MB', 'GB']\r\n\t\tlet size = bytes\r\n\t\tlet unitIndex = 0\r\n\r\n\t\twhile (size >= 1024 && unitIndex < units.length - 1) {\r\n\t\t\tsize /= 1024\r\n\t\t\tunitIndex++\r\n\t\t}\r\n\r\n\t\treturn `${size.toFixed(1)} ${units[unitIndex]}`\r\n\t}\r\n}\r\n"],"names":["promises","fs","join","ConfigService","CorrelatedLogger","Injectable","Logger","Cron","IntelligentEvictionService","StorageMonitoringService","StorageCleanupService","_configService","storageMonitoring","intelligentEviction","_logger","name","lastCleanup","Date","isCleanupRunning","storageDirectory","getOptional","config","loadCleanupConfig","onModuleInit","enabled","log","policies","map","p","performCleanup","policyNames","dryRun","Error","startTime","now","policiesToApply","filter","includes","isDryRun","totalFilesRemoved","totalSizeFreed","allErrors","appliedPolicies","policy","result","applyRetentionPolicy","filesRemoved","sizeFreed","push","errors","debug","formatBytes","error","errorMsg","message","stack","thresholdCheck","checkThresholds","status","evictionResult","performThresholdBasedEviction","filesEvicted","duration","policiesApplied","nextCleanup","getNextCleanupTime","scheduledCleanup","currentlyEnabled","getCleanupStatus","isRunning","updateRetentionPolicy","existingIndex","findIndex","removeRetentionPolicy","policyName","index","splice","files","readdir","candidates","file","filePath","stats","stat","filePattern","test","ageInDays","mtime","getTime","maxAge","sort","a","b","preserveCount","length","filesToRemove","slice","totalSize","finalCandidates","candidate","maxSize","size","unlink","warn","cronSchedule","maxCleanupDuration","defaultPolicies","description","setDate","getDate","setHours","bytes","units","unitIndex","toFixed"],"mappings":"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"}