{"version":3,"sources":["../../../../../src/MediaStream/Storage/services/intelligent-eviction.service.ts"],"sourcesContent":["import type { AccessPattern } from './storage-monitoring.service'\r\nimport { promises as fs } from 'node:fs'\r\nimport { join } from 'node:path'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { StorageMonitoringService } from './storage-monitoring.service'\r\n\r\nexport interface EvictionStrategy {\r\n\tname: string\r\n\tdescription: string\r\n\texecute: (candidates: AccessPattern[], targetSize: number) => Promise<AccessPattern[]>\r\n}\r\n\r\nexport interface EvictionResult {\r\n\tfilesEvicted: number\r\n\tsizeFreed: number\r\n\terrors: string[]\r\n\tstrategy: string\r\n\tduration: number\r\n}\r\n\r\nexport interface EvictionConfig {\r\n\tstrategy: 'lru' | 'lfu' | 'size-based' | 'age-based' | 'intelligent'\r\n\taggressiveness: 'conservative' | 'moderate' | 'aggressive'\r\n\tpreservePopular: boolean\r\n\tminAccessCount: number\r\n\tmaxFileAge: number\r\n}\r\n\r\n@Injectable()\r\nexport class IntelligentEvictionService {\r\n\tprivate readonly storageDirectory: string\r\n\tprivate readonly config: EvictionConfig\r\n\tprivate readonly strategies = new Map<string, EvictionStrategy>()\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly storageMonitoring: StorageMonitoringService,\r\n\t) {\r\n\t\tthis.storageDirectory = this._configService.getOptional('cache.file.directory', './storage')\r\n\t\tthis.config = {\r\n\t\t\tstrategy: this._configService.getOptional('storage.eviction.strategy', 'intelligent'),\r\n\t\t\taggressiveness: this._configService.getOptional('storage.eviction.aggressiveness', 'moderate'),\r\n\t\t\tpreservePopular: this._configService.getOptional('storage.eviction.preservePopular', true),\r\n\t\t\tminAccessCount: this._configService.getOptional('storage.eviction.minAccessCount', 5),\r\n\t\t\tmaxFileAge: this._configService.getOptional('storage.eviction.maxFileAge', 7),\r\n\t\t}\r\n\r\n\t\tthis.initializeStrategies()\r\n\t}\r\n\r\n\t/**\r\n\t * Perform intelligent cache eviction based on access patterns\r\n\t */\r\n\tasync performEviction(targetSize?: number): Promise<EvictionResult> {\r\n\t\tconst startTime = Date.now()\r\n\r\n\t\ttry {\r\n\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t`Starting intelligent eviction with strategy: ${this.config.strategy}`,\r\n\t\t\t\tIntelligentEvictionService.name,\r\n\t\t\t)\r\n\r\n\t\t\tawait this.storageMonitoring.getStorageStats()\r\n\t\t\tconst candidates = await this.storageMonitoring.getEvictionCandidates(targetSize)\r\n\r\n\t\t\tif (candidates.length === 0) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tfilesEvicted: 0,\r\n\t\t\t\t\tsizeFreed: 0,\r\n\t\t\t\t\terrors: [],\r\n\t\t\t\t\tstrategy: this.config.strategy,\r\n\t\t\t\t\tduration: Date.now() - startTime,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst strategy = this.strategies.get(this.config.strategy)\r\n\t\t\tif (!strategy) {\r\n\t\t\t\tthrow new Error(`Unknown eviction strategy: ${this.config.strategy}`)\r\n\t\t\t}\r\n\r\n\t\t\tconst finalCandidates = await strategy.execute(candidates, targetSize || 0)\r\n\r\n\t\t\tconst result = await this.evictFiles(finalCandidates)\r\n\t\t\tresult.strategy = this.config.strategy\r\n\t\t\tresult.duration = Date.now() - startTime\r\n\r\n\t\t\tCorrelatedLogger.log(\r\n\t\t\t\t`Eviction completed: ${result.filesEvicted} files, ${this.formatBytes(result.sizeFreed)} freed`,\r\n\t\t\t\tIntelligentEvictionService.name,\r\n\t\t\t)\r\n\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t`Eviction failed: ${(error as Error).message}`,\r\n\t\t\t\t(error as Error).stack,\r\n\t\t\t\tIntelligentEvictionService.name,\r\n\t\t\t)\r\n\r\n\t\t\treturn {\r\n\t\t\t\tfilesEvicted: 0,\r\n\t\t\t\tsizeFreed: 0,\r\n\t\t\t\terrors: [(error as Error).message],\r\n\t\t\t\tstrategy: this.config.strategy,\r\n\t\t\t\tduration: Date.now() - startTime,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Perform eviction based on storage thresholds\r\n\t */\r\n\tasync performThresholdBasedEviction(): Promise<EvictionResult> {\r\n\t\tconst thresholdCheck = await this.storageMonitoring.checkThresholds()\r\n\r\n\t\tif (thresholdCheck.status === 'healthy') {\r\n\t\t\treturn {\r\n\t\t\t\tfilesEvicted: 0,\r\n\t\t\t\tsizeFreed: 0,\r\n\t\t\t\terrors: [],\r\n\t\t\t\tstrategy: 'threshold-based',\r\n\t\t\t\tduration: 0,\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet targetReduction: number\r\n\r\n\t\tif (thresholdCheck.status === 'critical') {\r\n\t\t\ttargetReduction = Math.floor(thresholdCheck.stats.totalSize * 0.4)\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttargetReduction = Math.floor(thresholdCheck.stats.totalSize * 0.2)\r\n\t\t}\r\n\r\n\t\treturn this.performEviction(targetReduction)\r\n\t}\r\n\r\n\t/**\r\n\t * Get eviction recommendations without executing\r\n\t */\r\n\tasync getEvictionRecommendations(targetSize?: number): Promise<{\r\n\t\tcandidates: AccessPattern[]\r\n\t\ttotalSize: number\r\n\t\tstrategy: string\r\n\t\treasoning: string[]\r\n\t}> {\r\n\t\tconst candidates = await this.storageMonitoring.getEvictionCandidates(targetSize)\r\n\t\tconst strategy = this.strategies.get(this.config.strategy)\r\n\r\n\t\tif (!strategy) {\r\n\t\t\tthrow new Error(`Unknown eviction strategy: ${this.config.strategy}`)\r\n\t\t}\r\n\r\n\t\tconst finalCandidates = await strategy.execute(candidates, targetSize || 0)\r\n\t\tconst totalSize = finalCandidates.reduce((sum: any, candidate: any) => sum + candidate.size, 0)\r\n\r\n\t\tconst reasoning = this.generateEvictionReasoning(finalCandidates)\r\n\r\n\t\treturn {\r\n\t\t\tcandidates: finalCandidates,\r\n\t\t\ttotalSize,\r\n\t\t\tstrategy: this.config.strategy,\r\n\t\t\treasoning,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate initializeStrategies(): void {\r\n\t\tthis.strategies.set('lru', {\r\n\t\t\tname: 'LRU',\r\n\t\t\tdescription: 'Evict least recently used files',\r\n\t\t\texecute: async (candidates: AccessPattern[], targetSize: number) => {\r\n\t\t\t\treturn candidates\r\n\t\t\t\t\t.sort((a: any, b: any) => a.lastAccessed.getTime() - b.lastAccessed.getTime())\r\n\t\t\t\t\t.slice(0, this.calculateFileCount(candidates, targetSize))\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\tthis.strategies.set('lfu', {\r\n\t\t\tname: 'LFU',\r\n\t\t\tdescription: 'Evict least frequently used files',\r\n\t\t\texecute: async (candidates: AccessPattern[], targetSize: number) => {\r\n\t\t\t\treturn candidates\r\n\t\t\t\t\t.sort((a: any, b: any) => a.accessCount - b.accessCount)\r\n\t\t\t\t\t.slice(0, this.calculateFileCount(candidates, targetSize))\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\tthis.strategies.set('size-based', {\r\n\t\t\tname: 'Size-based',\r\n\t\t\tdescription: 'Evict largest files first',\r\n\t\t\texecute: async (candidates: AccessPattern[], targetSize: number) => {\r\n\t\t\t\treturn candidates\r\n\t\t\t\t\t.sort((a: any, b: any) => b.size - a.size)\r\n\t\t\t\t\t.slice(0, this.calculateFileCount(candidates, targetSize))\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\tthis.strategies.set('age-based', {\r\n\t\t\tname: 'Age-based',\r\n\t\t\tdescription: 'Evict oldest files first',\r\n\t\t\texecute: async (candidates: AccessPattern[], targetSize: number) => {\r\n\t\t\t\tconst maxAge = this.config.maxFileAge * 24 * 60 * 60 * 1000\r\n\t\t\t\tconst cutoffDate = new Date(Date.now() - maxAge)\r\n\r\n\t\t\t\treturn candidates\r\n\t\t\t\t\t.filter(candidate => candidate.lastAccessed < cutoffDate)\r\n\t\t\t\t\t.sort((a: any, b: any) => a.lastAccessed.getTime() - b.lastAccessed.getTime())\r\n\t\t\t\t\t.slice(0, this.calculateFileCount(candidates, targetSize))\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\tthis.strategies.set('intelligent', {\r\n\t\t\tname: 'Intelligent',\r\n\t\t\tdescription: 'Combines access patterns, size, and age for optimal eviction',\r\n\t\t\texecute: async (candidates: AccessPattern[], targetSize: number) => {\r\n\t\t\t\tlet filtered = candidates\r\n\t\t\t\tif (this.config.preservePopular) {\r\n\t\t\t\t\tfiltered = candidates.filter(candidate =>\r\n\t\t\t\t\t\tcandidate.accessCount < this.config.minAccessCount,\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst aggressivenessMultiplier = this.getAggressivenessMultiplier()\r\n\t\t\t\tconst adjustedTargetSize = targetSize * aggressivenessMultiplier\r\n\r\n\t\t\t\treturn filtered.slice(0, this.calculateFileCount(filtered, adjustedTargetSize))\r\n\t\t\t},\r\n\t\t})\r\n\t}\r\n\r\n\tprivate async evictFiles(candidates: AccessPattern[]): Promise<EvictionResult> {\r\n\t\tlet filesEvicted = 0\r\n\t\tlet sizeFreed = 0\r\n\t\tconst errors: string[] = []\r\n\r\n\t\tfor (const candidate of candidates) {\r\n\t\t\ttry {\r\n\t\t\t\tconst filePath = join(this.storageDirectory, candidate.file)\r\n\t\t\t\tawait fs.unlink(filePath)\r\n\r\n\t\t\t\tfilesEvicted++\r\n\t\t\t\tsizeFreed += candidate.size\r\n\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`Evicted file: ${candidate.file} (${this.formatBytes(candidate.size)})`,\r\n\t\t\t\t\tIntelligentEvictionService.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tconst errorMsg = `Failed to evict ${candidate.file}: ${(error as Error).message}`\r\n\t\t\t\terrors.push(errorMsg)\r\n\t\t\t\tCorrelatedLogger.warn(errorMsg, IntelligentEvictionService.name)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tfilesEvicted,\r\n\t\t\tsizeFreed,\r\n\t\t\terrors,\r\n\t\t\tstrategy: '',\r\n\t\t\tduration: 0,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate calculateFileCount(candidates: AccessPattern[], targetSize: number): number {\r\n\t\tif (targetSize <= 0)\r\n\t\t\treturn candidates.length\r\n\r\n\t\tlet currentSize = 0\r\n\t\tlet count = 0\r\n\r\n\t\tfor (const candidate of candidates) {\r\n\t\t\tcurrentSize += candidate.size\r\n\t\t\tcount++\r\n\r\n\t\t\tif (currentSize >= targetSize) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn count\r\n\t}\r\n\r\n\tprivate getAggressivenessMultiplier(): number {\r\n\t\tswitch (this.config.aggressiveness) {\r\n\t\t\tcase 'conservative':\r\n\t\t\t\treturn 0.8\r\n\t\t\tcase 'moderate':\r\n\t\t\t\treturn 1.0\r\n\t\t\tcase 'aggressive':\r\n\t\t\t\treturn 1.5\r\n\t\t\tdefault:\r\n\t\t\t\treturn 1.0\r\n\t\t}\r\n\t}\r\n\r\n\tprivate generateEvictionReasoning(candidates: AccessPattern[]): string[] {\r\n\t\tconst reasoning: string[] = []\r\n\r\n\t\tif (candidates.length === 0) {\r\n\t\t\treasoning.push('No files selected for eviction')\r\n\t\t\treturn reasoning\r\n\t\t}\r\n\r\n\t\tconst totalSize = candidates.reduce((sum: any, c: any) => sum + c.size, 0)\r\n\t\tconst avgAccessCount = candidates.reduce((sum: any, c: any) => sum + c.accessCount, 0) / candidates.length\r\n\t\tconst oldestAccess = Math.min(...candidates.map(c => c.lastAccessed.getTime()))\r\n\t\tconst daysSinceOldest = (Date.now() - oldestAccess) / (1000 * 60 * 60 * 24)\r\n\r\n\t\treasoning.push(`Selected ${candidates.length} files totaling ${this.formatBytes(totalSize)}`)\r\n\t\treasoning.push(`Average access count: ${avgAccessCount.toFixed(1)}`)\r\n\t\treasoning.push(`Oldest file last accessed ${daysSinceOldest.toFixed(1)} days ago`)\r\n\r\n\t\tif (this.config.preservePopular) {\r\n\t\t\treasoning.push(`Popular files (>${this.config.minAccessCount} accesses) preserved`)\r\n\t\t}\r\n\r\n\t\treasoning.push(`Strategy: ${this.config.strategy} (${this.config.aggressiveness})`)\r\n\r\n\t\treturn reasoning\r\n\t}\r\n\r\n\tprivate formatBytes(bytes: number): string {\r\n\t\tconst units = ['B', 'KB', 'MB', 'GB']\r\n\t\tlet size = bytes\r\n\t\tlet unitIndex = 0\r\n\r\n\t\twhile (size >= 1024 && unitIndex < units.length - 1) {\r\n\t\t\tsize /= 1024\r\n\t\t\tunitIndex++\r\n\t\t}\r\n\r\n\t\treturn `${size.toFixed(1)} ${units[unitIndex]}`\r\n\t}\r\n}\r\n"],"names":["promises","fs","join","ConfigService","CorrelatedLogger","Injectable","StorageMonitoringService","IntelligentEvictionService","_configService","storageMonitoring","strategies","Map","storageDirectory","getOptional","config","strategy","aggressiveness","preservePopular","minAccessCount","maxFileAge","initializeStrategies","performEviction","targetSize","startTime","Date","now","debug","name","getStorageStats","candidates","getEvictionCandidates","length","filesEvicted","sizeFreed","errors","duration","get","Error","finalCandidates","execute","result","evictFiles","log","formatBytes","error","message","stack","performThresholdBasedEviction","thresholdCheck","checkThresholds","status","targetReduction","Math","floor","stats","totalSize","getEvictionRecommendations","reduce","sum","candidate","size","reasoning","generateEvictionReasoning","set","description","sort","a","b","lastAccessed","getTime","slice","calculateFileCount","accessCount","maxAge","cutoffDate","filter","filtered","aggressivenessMultiplier","getAggressivenessMultiplier","adjustedTargetSize","filePath","file","unlink","errorMsg","push","warn","currentSize","count","c","avgAccessCount","oldestAccess","min","map","daysSinceOldest","toFixed","bytes","units","unitIndex"],"mappings":"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"}