{"version":3,"sources":["../../../../../src/MediaStream/Storage/services/storage-monitoring.service.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport { promises as fs, Stats } from 'node:fs'\r\nimport { extname, join } from 'node:path'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { Cron, CronExpression } from '@nestjs/schedule'\r\n\r\nexport interface StorageStats {\r\n\ttotalFiles: number\r\n\ttotalSize: number\r\n\taverageFileSize: number\r\n\toldestFile: Date | null\r\n\tnewestFile: Date | null\r\n\tfileTypes: Record<string, number>\r\n\taccessPatterns: AccessPattern[]\r\n}\r\n\r\nexport interface AccessPattern {\r\n\tfile: string\r\n\tlastAccessed: Date\r\n\taccessCount: number\r\n\tsize: number\r\n\textension: string\r\n}\r\n\r\nexport interface StorageThresholds {\r\n\twarningSize: number\r\n\tcriticalSize: number\r\n\twarningFileCount: number\r\n\tcriticalFileCount: number\r\n\tmaxFileAge: number\r\n}\r\n\r\n@Injectable()\r\nexport class StorageMonitoringService implements OnModuleInit {\r\n\tprivate readonly _logger = new Logger(StorageMonitoringService.name)\r\n\tprivate readonly storageDirectory: string\r\n\tprivate readonly thresholds: StorageThresholds\r\n\tprivate accessPatterns = new Map<string, AccessPattern>()\r\n\tprivate lastScanTime: Date = new Date()\r\n\r\n\tconstructor(private readonly _configService: ConfigService) {\r\n\t\tthis.storageDirectory = this._configService.getOptional('cache.file.directory', './storage')\r\n\t\tthis.thresholds = {\r\n\t\t\twarningSize: this._configService.getOptional('storage.warningSize', 800 * 1024 * 1024),\r\n\t\t\tcriticalSize: this._configService.getOptional('storage.criticalSize', 1024 * 1024 * 1024),\r\n\t\t\twarningFileCount: this._configService.getOptional('storage.warningFileCount', 5000),\r\n\t\t\tcriticalFileCount: this._configService.getOptional('storage.criticalFileCount', 10000),\r\n\t\t\tmaxFileAge: this._configService.getOptional('storage.maxFileAge', 30),\r\n\t\t}\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tawait this.ensureStorageDirectory()\r\n\t\tawait this.scanStorageDirectory()\r\n\t\tthis._logger.log('Storage monitoring service initialized')\r\n\t}\r\n\r\n\t/**\r\n\t * Get current storage statistics\r\n\t */\r\n\tasync getStorageStats(): Promise<StorageStats> {\r\n\t\ttry {\r\n\t\t\tconst files = await fs.readdir(this.storageDirectory)\r\n\t\t\tlet totalSize = 0\r\n\t\t\tlet processedFileCount = 0\r\n\t\t\tlet oldestFile: Date | null = null as any\r\n\t\t\tlet newestFile: Date | null = null as any\r\n\t\t\tconst fileTypes: Record<string, number> = {}\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tif (file === '.gitkeep')\r\n\t\t\t\t\tcontinue\r\n\r\n\t\t\t\tconst filePath = join(this.storageDirectory, file)\r\n\t\t\t\tconst stats = await fs.stat(filePath)\r\n\r\n\t\t\t\ttotalSize += stats.size\r\n\t\t\t\tprocessedFileCount++\r\n\r\n\t\t\t\tif (!oldestFile || stats.mtime < oldestFile) {\r\n\t\t\t\t\toldestFile = stats.mtime\r\n\t\t\t\t}\r\n\t\t\t\tif (!newestFile || stats.mtime > newestFile) {\r\n\t\t\t\t\tnewestFile = stats.mtime\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst ext = extname(file).toLowerCase()\r\n\t\t\t\tfileTypes[ext] = (fileTypes[ext] || 0) + 1\r\n\r\n\t\t\t\tthis.updateAccessPattern(file, stats)\r\n\t\t\t}\r\n\r\n\t\t\tconst averageFileSize = processedFileCount > 0 ? totalSize / processedFileCount : 0\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttotalFiles: processedFileCount,\r\n\t\t\t\ttotalSize,\r\n\t\t\t\taverageFileSize,\r\n\t\t\t\toldestFile,\r\n\t\t\t\tnewestFile,\r\n\t\t\t\tfileTypes,\r\n\t\t\t\taccessPatterns: Array.from(this.accessPatterns.values())\r\n\t\t\t\t\t.sort((a: any, b: any) => b.accessCount - a.accessCount)\r\n\t\t\t\t\t.slice(0, 100),\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t`Failed to get storage stats: ${(error as Error).message}`,\r\n\t\t\t\t(error as Error).stack,\r\n\t\t\t\tStorageMonitoringService.name,\r\n\t\t\t)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check if storage exceeds thresholds\r\n\t */\r\n\tasync checkThresholds(): Promise<{\r\n\t\tstatus: 'healthy' | 'warning' | 'critical'\r\n\t\tissues: string[]\r\n\t\tstats: StorageStats\r\n\t}> {\r\n\t\tconst stats = await this.getStorageStats()\r\n\t\tconst issues: string[] = []\r\n\t\tlet status: 'healthy' | 'warning' | 'critical' = 'healthy'\r\n\r\n\t\tif (stats.totalSize >= this.thresholds.criticalSize) {\r\n\t\t\tstatus = 'critical'\r\n\t\t\tissues.push(`Storage size critical: ${this.formatBytes(stats.totalSize)} / ${this.formatBytes(this.thresholds.criticalSize)}`)\r\n\t\t}\r\n\t\telse if (stats.totalSize >= this.thresholds.warningSize) {\r\n\t\t\tstatus = 'warning'\r\n\t\t\tissues.push(`Storage size warning: ${this.formatBytes(stats.totalSize)} / ${this.formatBytes(this.thresholds.warningSize)}`)\r\n\t\t}\r\n\r\n\t\tif (stats.totalFiles >= this.thresholds.criticalFileCount) {\r\n\t\t\tstatus = 'critical'\r\n\t\t\tissues.push(`File count critical: ${stats.totalFiles} / ${this.thresholds.criticalFileCount}`)\r\n\t\t}\r\n\t\telse if (stats.totalFiles >= this.thresholds.warningFileCount) {\r\n\t\t\tif (status !== 'critical')\r\n\t\t\t\tstatus = 'warning'\r\n\t\t\tissues.push(`File count warning: ${stats.totalFiles} / ${this.thresholds.warningFileCount}`)\r\n\t\t}\r\n\r\n\t\tconst maxAge = this.thresholds.maxFileAge * 24 * 60 * 60 * 1000\r\n\t\tconst cutoffDate = new Date(Date.now() - maxAge)\r\n\t\tconst oldFiles = stats.accessPatterns.filter(pattern => pattern.lastAccessed < cutoffDate)\r\n\r\n\t\tif (oldFiles.length > 0) {\r\n\t\t\tif (status !== 'critical')\r\n\t\t\t\tstatus = 'warning'\r\n\t\t\tissues.push(`${oldFiles.length} files older than ${this.thresholds.maxFileAge} days`)\r\n\t\t}\r\n\r\n\t\treturn { status, issues, stats }\r\n\t}\r\n\r\n\t/**\r\n\t * Get files recommended for eviction based on access patterns\r\n\t */\r\n\tasync getEvictionCandidates(targetSize?: number): Promise<AccessPattern[]> {\r\n\t\tconst stats = await this.getStorageStats()\r\n\r\n\t\tconst defaultTarget = Math.floor(stats.totalSize * 0.2)\r\n\t\tconst target = targetSize || defaultTarget\r\n\r\n\t\tconst candidates = stats.accessPatterns\r\n\t\t\t.map(pattern => ({\r\n\t\t\t\t...pattern,\r\n\t\t\t\tscore: this.calculateEvictionScore(pattern),\r\n\t\t\t}))\r\n\t\t\t.sort((a: any, b: any) => a.score - b.score)\r\n\r\n\t\tconst selected: AccessPattern[] = []\r\n\t\tlet freedSize = 0\r\n\r\n\t\tfor (const candidate of candidates) {\r\n\t\t\tselected.push(candidate)\r\n\t\t\tfreedSize += candidate.size\r\n\r\n\t\t\tif (freedSize >= target) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn selected\r\n\t}\r\n\r\n\t/**\r\n\t * Record file access for tracking patterns\r\n\t */\r\n\trecordFileAccess(filename: string): void {\r\n\t\tconst pattern = this.accessPatterns.get(filename)\r\n\t\tif (pattern) {\r\n\t\t\tpattern.accessCount++\r\n\t\t\tpattern.lastAccessed = new Date()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Scan storage directory and update access patterns\r\n\t */\r\n\t@Cron(CronExpression.EVERY_HOUR)\r\n\tasync scanStorageDirectory(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tCorrelatedLogger.debug('Starting storage directory scan', StorageMonitoringService.name)\r\n\r\n\t\t\tconst files = await fs.readdir(this.storageDirectory)\r\n\t\t\tconst currentFiles = new Set<string>()\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tif (file === '.gitkeep')\r\n\t\t\t\t\tcontinue\r\n\r\n\t\t\t\tcurrentFiles.add(file)\r\n\t\t\t\tconst filePath = join(this.storageDirectory, file)\r\n\t\t\t\tconst stats = await fs.stat(filePath)\r\n\r\n\t\t\t\tthis.updateAccessPattern(file, stats)\r\n\t\t\t}\r\n\r\n\t\t\tfor (const [filename] of this.accessPatterns) {\r\n\t\t\t\tif (!currentFiles.has(filename)) {\r\n\t\t\t\t\tthis.accessPatterns.delete(filename)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.lastScanTime = new Date()\r\n\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t`Storage scan completed. Tracking ${this.accessPatterns.size} files`,\r\n\t\t\t\tStorageMonitoringService.name,\r\n\t\t\t)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t`Storage directory scan failed: ${(error as Error).message}`,\r\n\t\t\t\t(error as Error).stack,\r\n\t\t\t\tStorageMonitoringService.name,\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the last scan time\r\n\t */\r\n\tgetLastScanTime(): Date {\r\n\t\treturn this.lastScanTime\r\n\t}\r\n\r\n\tprivate updateAccessPattern(filename: string, stats: Stats): void {\r\n\t\tconst existing = this.accessPatterns.get(filename)\r\n\r\n\t\tif (existing) {\r\n\t\t\texisting.size = stats.size\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.accessPatterns.set(filename, {\r\n\t\t\t\tfile: filename,\r\n\t\t\t\tlastAccessed: stats.atime,\r\n\t\t\t\taccessCount: 1,\r\n\t\t\t\tsize: stats.size,\r\n\t\t\t\textension: extname(filename).toLowerCase(),\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tprivate calculateEvictionScore(pattern: AccessPattern): number {\r\n\t\tconst now = Date.now()\r\n\t\tconst ageInDays = (now - pattern.lastAccessed.getTime()) / (1000 * 60 * 60 * 24)\r\n\t\tconst sizeWeight = pattern.size / (1024 * 1024)\r\n\r\n\t\tconst ageScore = Math.min(ageInDays * 10, 1000)\r\n\t\tconst accessScore = Math.max(1000 - (pattern.accessCount * 10), 0)\r\n\t\tconst sizeScore = Math.min(sizeWeight, 100)\r\n\r\n\t\treturn ageScore + accessScore + sizeScore\r\n\t}\r\n\r\n\tprivate formatBytes(bytes: number): string {\r\n\t\tconst units = ['B', 'KB', 'MB', 'GB']\r\n\t\tlet size = bytes\r\n\t\tlet unitIndex = 0\r\n\r\n\t\twhile (size >= 1024 && unitIndex < units.length - 1) {\r\n\t\t\tsize /= 1024\r\n\t\t\tunitIndex++\r\n\t\t}\r\n\r\n\t\treturn `${size.toFixed(1)} ${units[unitIndex]}`\r\n\t}\r\n\r\n\tprivate async ensureStorageDirectory(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait fs.mkdir(this.storageDirectory, { recursive: true })\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t`Failed to create storage directory: ${(error as Error).message}`,\r\n\t\t\t\t(error as Error).stack,\r\n\t\t\t\tStorageMonitoringService.name,\r\n\t\t\t)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["promises","fs","extname","join","ConfigService","CorrelatedLogger","Injectable","Logger","Cron","CronExpression","StorageMonitoringService","onModuleInit","ensureStorageDirectory","scanStorageDirectory","_logger","log","getStorageStats","files","readdir","storageDirectory","totalSize","processedFileCount","oldestFile","newestFile","fileTypes","file","filePath","stats","stat","size","mtime","ext","toLowerCase","updateAccessPattern","averageFileSize","totalFiles","accessPatterns","Array","from","values","sort","a","b","accessCount","slice","error","message","stack","name","checkThresholds","issues","status","thresholds","criticalSize","push","formatBytes","warningSize","criticalFileCount","warningFileCount","maxAge","maxFileAge","cutoffDate","Date","now","oldFiles","filter","pattern","lastAccessed","length","getEvictionCandidates","targetSize","defaultTarget","Math","floor","target","candidates","map","score","calculateEvictionScore","selected","freedSize","candidate","recordFileAccess","filename","get","debug","currentFiles","Set","add","has","delete","lastScanTime","getLastScanTime","existing","set","atime","extension","ageInDays","getTime","sizeWeight","ageScore","min","accessScore","max","sizeScore","bytes","units","unitIndex","toFixed","mkdir","recursive","_configService","Map","getOptional","EVERY_HOUR"],"mappings":"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"}