{"version":3,"sources":["../../../../../src/MediaStream/Validation/services/simple-validation.service.ts"],"sourcesContent":["import CacheImageRequest from '@microservice/API/dto/cache-image-request.dto'\r\n\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { InputSanitizationService } from './input-sanitization.service'\r\nimport { SecurityCheckerService } from './security-checker.service'\r\n\r\nexport interface SimpleValidationResult {\r\n\tisValid: boolean\r\n\terrors: string[]\r\n\tsanitizedInput?: any\r\n}\r\n\r\n@Injectable()\r\nexport class SimpleValidationService {\r\n\tprivate readonly _logger = new Logger(SimpleValidationService.name)\r\n\r\n\tconstructor(\r\n\t\tprivate readonly sanitizationService: InputSanitizationService,\r\n\t\tprivate readonly securityChecker: SecurityCheckerService,\r\n\t) {}\r\n\r\n\tasync validateCacheImageRequest(request: CacheImageRequest): Promise<SimpleValidationResult> {\r\n\t\tconst errors: string[] = []\r\n\r\n\t\ttry {\r\n\t\t\tconst isMalicious = await this.securityChecker.checkForMaliciousContent(request)\r\n\t\t\tif (isMalicious) {\r\n\t\t\t\terrors.push('Request contains potentially malicious content')\r\n\t\t\t\tawait this.securityChecker.logSecurityEvent({\r\n\t\t\t\t\ttype: 'malicious_content',\r\n\t\t\t\t\tsource: 'simple_validation_service',\r\n\t\t\t\t\tdetails: { resourceTarget: request.resourceTarget },\r\n\t\t\t\t\ttimestamp: new Date(),\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.sanitizationService.validateUrl(request.resourceTarget)) {\r\n\t\t\t\terrors.push('Invalid or disallowed URL')\r\n\t\t\t}\r\n\r\n\t\t\tconst { width, height } = request.resizeOptions\r\n\t\t\tif (width && height) {\r\n\t\t\t\tif (!this.sanitizationService.validateImageDimensions(width, height)) {\r\n\t\t\t\t\terrors.push('Image dimensions exceed allowed limits')\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst sanitizedInput = await this.sanitizationService.sanitize(request)\r\n\r\n\t\t\treturn {\r\n\t\t\t\tisValid: errors.length === 0,\r\n\t\t\t\terrors,\r\n\t\t\t\tsanitizedInput,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Validation error', error)\r\n\t\t\treturn {\r\n\t\t\t\tisValid: false,\r\n\t\t\t\terrors: ['Validation service error'],\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync validateInput(input: any): Promise<SimpleValidationResult> {\r\n\t\tconst errors: string[] = []\r\n\r\n\t\ttry {\r\n\t\t\tconst isMalicious = await this.securityChecker.checkForMaliciousContent(input)\r\n\t\t\tif (isMalicious) {\r\n\t\t\t\terrors.push('Input contains potentially malicious content')\r\n\t\t\t}\r\n\r\n\t\t\tconst sanitizedInput = await this.sanitizationService.sanitize(input)\r\n\r\n\t\t\treturn {\r\n\t\t\t\tisValid: errors.length === 0,\r\n\t\t\t\terrors,\r\n\t\t\t\tsanitizedInput,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Input validation error', error)\r\n\t\t\treturn {\r\n\t\t\t\tisValid: false,\r\n\t\t\t\terrors: ['Input validation service error'],\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["Injectable","Logger","InputSanitizationService","SecurityCheckerService","SimpleValidationService","sanitizationService","securityChecker","_logger","name","validateCacheImageRequest","request","errors","isMalicious","checkForMaliciousContent","push","logSecurityEvent","type","source","details","resourceTarget","timestamp","Date","validateUrl","width","height","resizeOptions","validateImageDimensions","sanitizedInput","sanitize","isValid","length","error","validateInput","input"],"mappings":";;;;;;;;;AAEA,SAASA,UAAU,EAAEC,MAAM,QAAQ,iBAAgB;AACnD,SAASC,wBAAwB,QAAQ,kCAA8B;AACvE,SAASC,sBAAsB,QAAQ,gCAA4B;AASnE,OAAO,MAAMC;IAGZ,YACC,AAAiBC,mBAA6C,EAC9D,AAAiBC,eAAuC,CACvD;aAFgBD,sBAAAA;aACAC,kBAAAA;aAJDC,UAAU,IAAIN,OAAOG,wBAAwBI,IAAI;IAK/D;IAEH,MAAMC,0BAA0BC,OAA0B,EAAmC;QAC5F,MAAMC,SAAmB,EAAE;QAE3B,IAAI;YACH,MAAMC,cAAc,MAAM,IAAI,CAACN,eAAe,CAACO,wBAAwB,CAACH;YACxE,IAAIE,aAAa;gBAChBD,OAAOG,IAAI,CAAC;gBACZ,MAAM,IAAI,CAACR,eAAe,CAACS,gBAAgB,CAAC;oBAC3CC,MAAM;oBACNC,QAAQ;oBACRC,SAAS;wBAAEC,gBAAgBT,QAAQS,cAAc;oBAAC;oBAClDC,WAAW,IAAIC;gBAChB;YACD;YAEA,IAAI,CAAC,IAAI,CAAChB,mBAAmB,CAACiB,WAAW,CAACZ,QAAQS,cAAc,GAAG;gBAClER,OAAOG,IAAI,CAAC;YACb;YAEA,MAAM,EAAES,KAAK,EAAEC,MAAM,EAAE,GAAGd,QAAQe,aAAa;YAC/C,IAAIF,SAASC,QAAQ;gBACpB,IAAI,CAAC,IAAI,CAACnB,mBAAmB,CAACqB,uBAAuB,CAACH,OAAOC,SAAS;oBACrEb,OAAOG,IAAI,CAAC;gBACb;YACD;YAEA,MAAMa,iBAAiB,MAAM,IAAI,CAACtB,mBAAmB,CAACuB,QAAQ,CAAClB;YAE/D,OAAO;gBACNmB,SAASlB,OAAOmB,MAAM,KAAK;gBAC3BnB;gBACAgB;YACD;QACD,EACA,OAAOI,OAAgB;YACtB,IAAI,CAACxB,OAAO,CAACwB,KAAK,CAAC,oBAAoBA;YACvC,OAAO;gBACNF,SAAS;gBACTlB,QAAQ;oBAAC;iBAA2B;YACrC;QACD;IACD;IAEA,MAAMqB,cAAcC,KAAU,EAAmC;QAChE,MAAMtB,SAAmB,EAAE;QAE3B,IAAI;YACH,MAAMC,cAAc,MAAM,IAAI,CAACN,eAAe,CAACO,wBAAwB,CAACoB;YACxE,IAAIrB,aAAa;gBAChBD,OAAOG,IAAI,CAAC;YACb;YAEA,MAAMa,iBAAiB,MAAM,IAAI,CAACtB,mBAAmB,CAACuB,QAAQ,CAACK;YAE/D,OAAO;gBACNJ,SAASlB,OAAOmB,MAAM,KAAK;gBAC3BnB;gBACAgB;YACD;QACD,EACA,OAAOI,OAAgB;YACtB,IAAI,CAACxB,OAAO,CAACwB,KAAK,CAAC,0BAA0BA;YAC7C,OAAO;gBACNF,SAAS;gBACTlB,QAAQ;oBAAC;iBAAiC;YAC3C;QACD;IACD;AACD"}