{"version":3,"sources":["../../../../../src/MediaStream/Config/dto/rate-limit-config.dto.ts"],"sourcesContent":["import { Transform, Type } from 'class-transformer'\r\nimport { IsBoolean, IsNumber, IsOptional, IsString, Min, ValidateNested } from 'class-validator'\r\n\r\nexport class RateLimitThrottlerConfigDto {\r\n\t@IsNumber()\r\n\t@Min(1000)\r\n\t@Transform(({ value }) => Number.parseInt(value, 10))\r\n\twindowMs: number = 60000\r\n\r\n\t@IsNumber()\r\n\t@Min(1)\r\n\t@Transform(({ value }) => Number.parseInt(value, 10))\r\n\tmax: number = 100\r\n\r\n\t@IsBoolean()\r\n\t@IsOptional()\r\n\t@Transform(({ value }) => value === 'true')\r\n\tskipSuccessfulRequests: boolean = false\r\n\r\n\t@IsBoolean()\r\n\t@IsOptional()\r\n\t@Transform(({ value }) => value === 'true')\r\n\tskipFailedRequests: boolean = false\r\n\r\n\tconstructor(data?: Partial<RateLimitThrottlerConfigDto>) {\r\n\t\tif (data) {\r\n\t\t\tObject.assign(this, data)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class SystemLoadThresholdsDto {\r\n\t@IsNumber()\r\n\t@Min(0)\r\n\t@Transform(({ value }) => Number.parseFloat(value))\r\n\tcpu: number = 80\r\n\r\n\t@IsNumber()\r\n\t@Min(0)\r\n\t@Transform(({ value }) => Number.parseFloat(value))\r\n\tmemory: number = 85\r\n\r\n\t@IsNumber()\r\n\t@Min(0)\r\n\t@Transform(({ value }) => Number.parseInt(value, 10))\r\n\tconnections: number = 1000\r\n}\r\n\r\nexport class AdaptiveConfigDto {\r\n\t@IsBoolean()\r\n\t@Transform(({ value }) => value === 'true')\r\n\tenabled: boolean = true\r\n\r\n\t@ValidateNested()\r\n\t@Type(() => SystemLoadThresholdsDto)\r\n\tsystemLoadThresholds: SystemLoadThresholdsDto = new SystemLoadThresholdsDto()\r\n\r\n\t@IsNumber()\r\n\t@Min(0)\r\n\t@Transform(({ value }) => Number.parseFloat(value))\r\n\tmaxReduction: number = 0.5\r\n\r\n\t@IsNumber()\r\n\t@Min(1)\r\n\t@Transform(({ value }) => Number.parseInt(value, 10))\r\n\tminLimit: number = 1\r\n}\r\n\r\nexport class BypassConfigDto {\r\n\t@IsBoolean()\r\n\t@Transform(({ value }) => value === 'true')\r\n\thealthChecks: boolean = true\r\n\r\n\t@IsBoolean()\r\n\t@Transform(({ value }) => value === 'true')\r\n\tmetricsEndpoint: boolean = true\r\n\r\n\t@IsBoolean()\r\n\t@Transform(({ value }) => value === 'true')\r\n\tstaticAssets: boolean = true\r\n\r\n\t@IsBoolean()\r\n\t@Transform(({ value }) => value === 'true')\r\n\tbots: boolean = true\r\n\r\n\t@IsString({ each: true })\r\n\t@IsOptional()\r\n\tcustomPaths: string[] = []\r\n\r\n\t@IsString({ each: true })\r\n\t@IsOptional()\r\n\twhitelistedDomains: string[] = []\r\n}\r\n\r\nexport class RateLimitConfigDto {\r\n\t@ValidateNested()\r\n\t@Type(() => RateLimitThrottlerConfigDto)\r\n\tdefault: RateLimitThrottlerConfigDto = new RateLimitThrottlerConfigDto()\r\n\r\n\t@ValidateNested()\r\n\t@Type(() => RateLimitThrottlerConfigDto)\r\n\timageProcessing: RateLimitThrottlerConfigDto = new RateLimitThrottlerConfigDto({\r\n\t\twindowMs: 60000,\r\n\t\tmax: 50,\r\n\t\tskipSuccessfulRequests: false,\r\n\t\tskipFailedRequests: false,\r\n\t})\r\n\r\n\t@ValidateNested()\r\n\t@Type(() => RateLimitThrottlerConfigDto)\r\n\thealthCheck: RateLimitThrottlerConfigDto = new RateLimitThrottlerConfigDto({\r\n\t\twindowMs: 10000,\r\n\t\tmax: 1000,\r\n\t\tskipSuccessfulRequests: true,\r\n\t\tskipFailedRequests: true,\r\n\t})\r\n\r\n\t@ValidateNested()\r\n\t@Type(() => AdaptiveConfigDto)\r\n\tadaptive: AdaptiveConfigDto = new AdaptiveConfigDto()\r\n\r\n\t@ValidateNested()\r\n\t@Type(() => BypassConfigDto)\r\n\tbypass: BypassConfigDto = new BypassConfigDto()\r\n\r\n\t@IsBoolean()\r\n\t@Transform(({ value }) => value === 'true')\r\n\tenabled: boolean = true\r\n\r\n\t@IsBoolean()\r\n\t@Transform(({ value }) => value === 'true')\r\n\tlogBlocked: boolean = true\r\n}\r\n"],"names":["Transform","Type","IsBoolean","IsNumber","IsOptional","IsString","Min","ValidateNested","RateLimitThrottlerConfigDto","data","windowMs","max","skipSuccessfulRequests","skipFailedRequests","Object","assign","value","Number","parseInt","SystemLoadThresholdsDto","cpu","memory","connections","parseFloat","AdaptiveConfigDto","enabled","systemLoadThresholds","maxReduction","minLimit","BypassConfigDto","healthChecks","metricsEndpoint","staticAssets","bots","customPaths","whitelistedDomains","each","RateLimitConfigDto","default","imageProcessing","healthCheck","adaptive","bypass","logBlocked"],"mappings":";;;;;;;;;AAAA,SAASA,SAAS,EAAEC,IAAI,QAAQ,oBAAmB;AACnD,SAASC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,cAAc,QAAQ,kBAAiB;AAEhG,OAAO,MAAMC;IAqBZ,YAAYC,IAA2C,CAAE;aAjBzDC,WAAmB;aAKnBC,MAAc;aAKdC,yBAAkC;aAKlCC,qBAA8B;QAG7B,IAAIJ,MAAM;YACTK,OAAOC,MAAM,CAAC,IAAI,EAAEN;QACrB;IACD;AACD;;;;eAvBa,EAAEO,KAAK,EAAE,GAAKC,OAAOC,QAAQ,CAACF,OAAO;;;;;;eAKrC,EAAEA,KAAK,EAAE,GAAKC,OAAOC,QAAQ,CAACF,OAAO;;;;;;eAKrC,EAAEA,KAAK,EAAE,GAAKA,UAAU;;;;;;eAKxB,EAAEA,KAAK,EAAE,GAAKA,UAAU;;;AAUrC,OAAO,MAAMG;;aAIZC,MAAc;aAKdC,SAAiB;aAKjBC,cAAsB;;AACvB;;;;eAZa,EAAEN,KAAK,EAAE,GAAKC,OAAOM,UAAU,CAACP;;;;;;eAKhC,EAAEA,KAAK,EAAE,GAAKC,OAAOM,UAAU,CAACP;;;;;;eAKhC,EAAEA,KAAK,EAAE,GAAKC,OAAOC,QAAQ,CAACF,OAAO;;;AAIlD,OAAO,MAAMQ;;aAGZC,UAAmB;aAInBC,uBAAgD,IAAIP;aAKpDQ,eAAuB;aAKvBC,WAAmB;;AACpB;;;eAhBa,EAAEZ,KAAK,EAAE,GAAKA,UAAU;;;;;aAIxBG;;;;;;eAKA,EAAEH,KAAK,EAAE,GAAKC,OAAOM,UAAU,CAACP;;;;;;eAKhC,EAAEA,KAAK,EAAE,GAAKC,OAAOC,QAAQ,CAACF,OAAO;;;AAIlD,OAAO,MAAMa;;aAGZC,eAAwB;aAIxBC,kBAA2B;aAI3BC,eAAwB;aAIxBC,OAAgB;aAIhBC,cAAwB,EAAE;aAI1BC,qBAA+B,EAAE;;AAClC;;;eAtBa,EAAEnB,KAAK,EAAE,GAAKA,UAAU;;;;;eAIxB,EAAEA,KAAK,EAAE,GAAKA,UAAU;;;;;eAIxB,EAAEA,KAAK,EAAE,GAAKA,UAAU;;;;;eAIxB,EAAEA,KAAK,EAAE,GAAKA,UAAU;;;;;QAGxBoB,MAAM;;;;;;;QAINA,MAAM;;;;;AAKnB,OAAO,MAAMC;;aAGZC,UAAuC,IAAI9B;aAI3C+B,kBAA+C,IAAI/B,4BAA4B;YAC9EE,UAAU;YACVC,KAAK;YACLC,wBAAwB;YACxBC,oBAAoB;QACrB;aAIA2B,cAA2C,IAAIhC,4BAA4B;YAC1EE,UAAU;YACVC,KAAK;YACLC,wBAAwB;YACxBC,oBAAoB;QACrB;aAIA4B,WAA8B,IAAIjB;aAIlCkB,SAA0B,IAAIb;aAI9BJ,UAAmB;aAInBkB,aAAsB;;AACvB;;;aApCanC;;;;;aAIAA;;;;;aASAA;;;;;aASAgB;;;;;aAIAK;;;;;eAIA,EAAEb,KAAK,EAAE,GAAKA,UAAU;;;;;eAIxB,EAAEA,KAAK,EAAE,GAAKA,UAAU"}