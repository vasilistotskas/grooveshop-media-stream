{"version":3,"sources":["../../../../src/MediaStream/Config/config.service.ts"],"sourcesContent":["import type { AppConfig } from '@microservice/Config/interfaces/app-config.interface'\r\nimport type { OnModuleInit } from '@nestjs/common'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { ConfigService as NestConfigService } from '@nestjs/config'\r\n\r\n@Injectable()\r\nexport class ConfigService implements OnModuleInit {\r\n\tprivate readonly _logger = new Logger(ConfigService.name)\r\n\tprivate config: AppConfig\r\n\tprivate readonly hotReloadableKeys = new Set([\r\n\t\t'MONITORING_ENABLED',\r\n\t\t'PROCESSING_MAX_CONCURRENT',\r\n\t\t'CACHE_MEMORY_TTL',\r\n\t\t'CACHE_FILE_CLEANUP_INTERVAL',\r\n\t])\r\n\r\n\tconstructor(private readonly nestConfigService: NestConfigService) {\r\n\t\tthis.config = this.loadAndValidateConfig()\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tthis._logger.log('Configuration loaded and validated successfully')\r\n\t}\r\n\r\n\t/**\r\n\t * Get a configuration value by key with type safety\r\n\t */\r\n\tget<T = any>(key: string): T {\r\n\t\tconst keys = key.split('.')\r\n\t\tlet value: any = this.config\r\n\r\n\t\tfor (const k of keys) {\r\n\t\t\tvalue = value?.[k]\r\n\t\t}\r\n\r\n\t\tif (value === undefined) {\r\n\t\t\tthrow new Error(`Configuration key '${key}' not found`)\r\n\t\t}\r\n\r\n\t\treturn value as T\r\n\t}\r\n\r\n\t/**\r\n\t * Get an optional configuration value with default fallback\r\n\t */\r\n\tgetOptional<T = any>(key: string, defaultValue?: T): T {\r\n\t\ttry {\r\n\t\t\treturn this.get<T>(key)\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\treturn defaultValue as T\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the entire configuration object\r\n\t */\r\n\tgetAll(): AppConfig {\r\n\t\treturn { ...this.config }\r\n\t}\r\n\r\n\t/**\r\n\t * Validate the current configuration\r\n\t */\r\n\tasync validate(): Promise<void> {\r\n\t\tconst { plainToClass } = await import('class-transformer')\r\n\t\tconst { validate } = await import('class-validator')\r\n\t\tconst { AppConfigDto } = await import('@microservice/Config/dto/app-config.dto')\r\n\r\n\t\tconst rawConfig = this.createRawConfigForValidation()\r\n\r\n\t\tconst dto = plainToClass(AppConfigDto, rawConfig, {\r\n\t\t\tenableImplicitConversion: true,\r\n\t\t\texcludeExtraneousValues: false,\r\n\t\t})\r\n\t\tconst errors = await validate(dto, {\r\n\t\t\twhitelist: false,\r\n\t\t\tforbidNonWhitelisted: false,\r\n\t\t})\r\n\r\n\t\tif (errors.length > 0) {\r\n\t\t\tconst errorMessages = errors.map(error =>\r\n\t\t\t\tObject.values(error.constraints || {}).join(', '),\r\n\t\t\t).join('; ')\r\n\t\t\tthrow new Error(`Configuration validation failed: ${errorMessages}`)\r\n\t\t}\r\n\r\n\t\tthis._logger.log('Configuration validation passed')\r\n\t}\r\n\r\n\t/**\r\n\t * Create raw configuration object for validation\r\n\t */\r\n\tprivate createRawConfigForValidation(): Record<string, any> {\r\n\t\treturn {\r\n\t\t\tserver: {\r\n\t\t\t\tport: this.nestConfigService.get('PORT'),\r\n\t\t\t\thost: this.nestConfigService.get('HOST'),\r\n\t\t\t\tcors: {\r\n\t\t\t\t\torigin: this.nestConfigService.get('CORS_ORIGIN'),\r\n\t\t\t\t\tmethods: this.nestConfigService.get('CORS_METHODS'),\r\n\t\t\t\t\tmaxAge: this.nestConfigService.get('CORS_MAX_AGE'),\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tcache: {\r\n\t\t\t\tmemory: {\r\n\t\t\t\t\tmaxSize: this.nestConfigService.get('CACHE_MEMORY_MAX_SIZE'),\r\n\t\t\t\t\tdefaultTtl: this.nestConfigService.get('CACHE_MEMORY_DEFAULT_TTL'),\r\n\t\t\t\t\tcheckPeriod: this.nestConfigService.get('CACHE_MEMORY_CHECK_PERIOD'),\r\n\t\t\t\t\tmaxKeys: this.nestConfigService.get('CACHE_MEMORY_MAX_KEYS'),\r\n\t\t\t\t\twarningThreshold: this.nestConfigService.get('CACHE_MEMORY_WARNING_THRESHOLD'),\r\n\t\t\t\t},\r\n\t\t\t\tredis: {\r\n\t\t\t\t\thost: this.nestConfigService.get('REDIS_HOST'),\r\n\t\t\t\t\tport: this.nestConfigService.get('REDIS_PORT'),\r\n\t\t\t\t\tpassword: this.nestConfigService.get('REDIS_PASSWORD'),\r\n\t\t\t\t\tdb: this.nestConfigService.get('REDIS_DB'),\r\n\t\t\t\t\tttl: this.nestConfigService.get('REDIS_TTL'),\r\n\t\t\t\t\tmaxRetries: this.nestConfigService.get('REDIS_MAX_RETRIES'),\r\n\t\t\t\t\tretryDelayOnFailover: this.nestConfigService.get('REDIS_RETRY_DELAY'),\r\n\t\t\t\t},\r\n\t\t\t\tfile: {\r\n\t\t\t\t\tdirectory: this.nestConfigService.get('CACHE_FILE_DIRECTORY'),\r\n\t\t\t\t\tmaxSize: this.nestConfigService.get('CACHE_FILE_MAX_SIZE'),\r\n\t\t\t\t\tcleanupInterval: this.nestConfigService.get('CACHE_FILE_CLEANUP_INTERVAL'),\r\n\t\t\t\t},\r\n\t\t\t\twarming: {\r\n\t\t\t\t\tenabled: this.nestConfigService.get('CACHE_WARMING_ENABLED'),\r\n\t\t\t\t\twarmupOnStart: this.nestConfigService.get('CACHE_WARMING_ON_START'),\r\n\t\t\t\t\tmaxFilesToWarm: this.nestConfigService.get('CACHE_WARMING_MAX_FILES'),\r\n\t\t\t\t\twarmupCron: this.nestConfigService.get('CACHE_WARMING_CRON'),\r\n\t\t\t\t\tpopularImageThreshold: this.nestConfigService.get('CACHE_WARMING_THRESHOLD'),\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tprocessing: {\r\n\t\t\t\tmaxConcurrent: this.nestConfigService.get('PROCESSING_MAX_CONCURRENT'),\r\n\t\t\t\ttimeout: this.nestConfigService.get('PROCESSING_TIMEOUT'),\r\n\t\t\t\tretries: this.nestConfigService.get('PROCESSING_RETRIES'),\r\n\t\t\t\tmaxFileSize: this.nestConfigService.get('PROCESSING_MAX_FILE_SIZE'),\r\n\t\t\t\tallowedFormats: this.nestConfigService.get('PROCESSING_ALLOWED_FORMATS'),\r\n\t\t\t},\r\n\t\t\tmonitoring: {\r\n\t\t\t\tenabled: this.nestConfigService.get('MONITORING_ENABLED'),\r\n\t\t\t\tmetricsPort: this.nestConfigService.get('MONITORING_METRICS_PORT'),\r\n\t\t\t\thealthPath: this.nestConfigService.get('MONITORING_HEALTH_PATH'),\r\n\t\t\t\tmetricsPath: this.nestConfigService.get('MONITORING_METRICS_PATH'),\r\n\t\t\t},\r\n\t\t\texternalServices: {\r\n\t\t\t\tdjangoUrl: this.nestConfigService.get('NEST_PUBLIC_DJANGO_URL'),\r\n\t\t\t\tnuxtUrl: this.nestConfigService.get('NEST_PUBLIC_NUXT_URL'),\r\n\t\t\t\trequestTimeout: this.nestConfigService.get('EXTERNAL_REQUEST_TIMEOUT'),\r\n\t\t\t\tmaxRetries: this.nestConfigService.get('EXTERNAL_MAX_RETRIES'),\r\n\t\t\t},\r\n\t\t\thttp: {\r\n\t\t\t\ttimeout: this.nestConfigService.get('HTTP_TIMEOUT'),\r\n\t\t\t\tmaxRetries: this.nestConfigService.get('HTTP_MAX_RETRIES'),\r\n\t\t\t\tretryDelay: this.nestConfigService.get('HTTP_RETRY_DELAY'),\r\n\t\t\t\tcircuitBreaker: {\r\n\t\t\t\t\tenabled: this.nestConfigService.get('HTTP_CIRCUIT_BREAKER_ENABLED'),\r\n\t\t\t\t\tfailureThreshold: this.nestConfigService.get('HTTP_CIRCUIT_BREAKER_FAILURE_THRESHOLD'),\r\n\t\t\t\t\tresetTimeout: this.nestConfigService.get('HTTP_CIRCUIT_BREAKER_RESET_TIMEOUT'),\r\n\t\t\t\t},\r\n\t\t\t\thealthCheck: {\r\n\t\t\t\t\tenabled: this.nestConfigService.get('HTTP_HEALTH_CHECK_ENABLED'),\r\n\t\t\t\t\turls: this.nestConfigService.get('HTTP_HEALTH_CHECK_URLS'),\r\n\t\t\t\t\ttimeout: this.nestConfigService.get('HTTP_HEALTH_CHECK_TIMEOUT'),\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\trateLimit: {\r\n\t\t\t\tenabled: this.nestConfigService.get('RATE_LIMIT_ENABLED'),\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\twindowMs: this.nestConfigService.get('RATE_LIMIT_DEFAULT_WINDOW_MS'),\r\n\t\t\t\t\tmax: this.nestConfigService.get('RATE_LIMIT_DEFAULT_MAX'),\r\n\t\t\t\t},\r\n\t\t\t\timageProcessing: {\r\n\t\t\t\t\twindowMs: this.nestConfigService.get('RATE_LIMIT_IMAGE_PROCESSING_WINDOW_MS'),\r\n\t\t\t\t\tmax: this.nestConfigService.get('RATE_LIMIT_IMAGE_PROCESSING_MAX'),\r\n\t\t\t\t},\r\n\t\t\t\thealthCheck: {\r\n\t\t\t\t\twindowMs: this.nestConfigService.get('RATE_LIMIT_HEALTH_CHECK_WINDOW_MS'),\r\n\t\t\t\t\tmax: this.nestConfigService.get('RATE_LIMIT_HEALTH_CHECK_MAX'),\r\n\t\t\t\t},\r\n\t\t\t\tbypass: {\r\n\t\t\t\t\thealthChecks: this.nestConfigService.get('RATE_LIMIT_BYPASS_HEALTH_CHECKS'),\r\n\t\t\t\t\tmetricsEndpoint: this.nestConfigService.get('RATE_LIMIT_BYPASS_METRICS_ENDPOINT'),\r\n\t\t\t\t\tstaticAssets: this.nestConfigService.get('RATE_LIMIT_BYPASS_STATIC_ASSETS'),\r\n\t\t\t\t\twhitelistedDomains: this.nestConfigService.get('RATE_LIMIT_BYPASS_WHITELISTED_DOMAINS'),\r\n\t\t\t\t\tbots: this.nestConfigService.get('RATE_LIMIT_BYPASS_BOTS'),\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reload configuration for hot-reloadable settings\r\n\t */\r\n\tasync reload(): Promise<void> {\r\n\t\tthis._logger.log('Reloading hot-reloadable configuration...')\r\n\r\n\t\tconst newConfig = this.loadConfig()\r\n\r\n\t\tthis.updateHotReloadableSettings(newConfig)\r\n\r\n\t\tthis._logger.log('Hot-reloadable configuration updated successfully')\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a configuration key supports hot-reload\r\n\t */\r\n\tisHotReloadable(key: string): boolean {\r\n\t\treturn this.hotReloadableKeys.has(key)\r\n\t}\r\n\r\n\tprivate loadAndValidateConfig(): AppConfig {\r\n\t\treturn this.loadConfig()\r\n\t}\r\n\r\n\tprivate loadConfig(): AppConfig {\r\n\t\tconst serverPort = Number.parseInt(this.nestConfigService.get('PORT') || '3003')\r\n\t\tconst serverHost = this.nestConfigService.get('HOST') || '0.0.0.0'\r\n\t\tconst corsOrigin = this.nestConfigService.get('CORS_ORIGIN') || '*'\r\n\t\tconst corsMethods = this.nestConfigService.get('CORS_METHODS') || 'GET'\r\n\t\tconst corsMaxAge = Number.parseInt(this.nestConfigService.get('CORS_MAX_AGE') || '86400')\r\n\r\n\t\tconst memoryMaxSize = Number.parseInt(this.nestConfigService.get('CACHE_MEMORY_MAX_SIZE') || '104857600')\r\n\t\tconst memoryDefaultTtl = Number.parseInt(this.nestConfigService.get('CACHE_MEMORY_DEFAULT_TTL') || '3600')\r\n\t\tconst memoryCheckPeriod = Number.parseInt(this.nestConfigService.get('CACHE_MEMORY_CHECK_PERIOD') || '600')\r\n\t\tconst memoryMaxKeys = Number.parseInt(this.nestConfigService.get('CACHE_MEMORY_MAX_KEYS') || '1000')\r\n\t\tconst memoryWarningThreshold = Number.parseInt(this.nestConfigService.get('CACHE_MEMORY_WARNING_THRESHOLD') || '80')\r\n\r\n\t\tconst redisHost = this.nestConfigService.get('REDIS_HOST') || 'localhost'\r\n\t\tconst redisPort = Number.parseInt(this.nestConfigService.get('REDIS_PORT') || '6379')\r\n\t\tconst redisPassword = this.nestConfigService.get('REDIS_PASSWORD')\r\n\t\tconst redisDb = Number.parseInt(this.nestConfigService.get('REDIS_DB') || '0')\r\n\t\tconst redisTtl = Number.parseInt(this.nestConfigService.get('REDIS_TTL') || '7200')\r\n\t\tconst redisMaxRetries = Number.parseInt(this.nestConfigService.get('REDIS_MAX_RETRIES') || '3')\r\n\t\tconst redisRetryDelay = Number.parseInt(this.nestConfigService.get('REDIS_RETRY_DELAY') || '100')\r\n\r\n\t\tconst fileDirectory = this.nestConfigService.get('CACHE_FILE_DIRECTORY') || './storage'\r\n\t\tconst fileMaxSize = Number.parseInt(this.nestConfigService.get('CACHE_FILE_MAX_SIZE') || '1073741824')\r\n\t\tconst fileCleanupInterval = Number.parseInt(this.nestConfigService.get('CACHE_FILE_CLEANUP_INTERVAL') || '3600')\r\n\r\n\t\tconst warmingEnabledStr = this.nestConfigService.get('CACHE_WARMING_ENABLED') || 'true'\r\n\t\tconst warmingEnabled = typeof warmingEnabledStr === 'string'\r\n\t\t\t? warmingEnabledStr.toLowerCase() === 'true'\r\n\t\t\t: warmingEnabledStr\r\n\t\tconst warmingOnStartStr = this.nestConfigService.get('CACHE_WARMING_ON_START') || 'true'\r\n\t\tconst warmingOnStart = typeof warmingOnStartStr === 'string'\r\n\t\t\t? warmingOnStartStr.toLowerCase() === 'true'\r\n\t\t\t: warmingOnStartStr\r\n\t\tconst warmingMaxFiles = Number.parseInt(this.nestConfigService.get('CACHE_WARMING_MAX_FILES') || '50')\r\n\t\tconst warmingCron = this.nestConfigService.get('CACHE_WARMING_CRON') || '0 */6 * * *'\r\n\t\tconst warmingThreshold = Number.parseInt(this.nestConfigService.get('CACHE_WARMING_THRESHOLD') || '5')\r\n\r\n\t\tconst processingMaxConcurrent = Number.parseInt(this.nestConfigService.get('PROCESSING_MAX_CONCURRENT') || '10')\r\n\t\tconst processingTimeout = Number.parseInt(this.nestConfigService.get('PROCESSING_TIMEOUT') || '30000')\r\n\t\tconst processingRetries = Number.parseInt(this.nestConfigService.get('PROCESSING_RETRIES') || '3')\r\n\t\tconst processingMaxFileSize = Number.parseInt(this.nestConfigService.get('PROCESSING_MAX_FILE_SIZE') || '10485760')\r\n\r\n\t\tconst allowedFormatsStr = this.nestConfigService.get('PROCESSING_ALLOWED_FORMATS') || 'jpg,jpeg,png,webp,gif,svg'\r\n\t\tconst allowedFormats = typeof allowedFormatsStr === 'string'\r\n\t\t\t? allowedFormatsStr.split(',').map(format => format.trim().toLowerCase())\r\n\t\t\t: allowedFormatsStr\r\n\r\n\t\tconst monitoringEnabledStr = this.nestConfigService.get('MONITORING_ENABLED') || 'true'\r\n\t\tconst monitoringEnabled = typeof monitoringEnabledStr === 'string'\r\n\t\t\t? monitoringEnabledStr.toLowerCase() === 'true'\r\n\t\t\t: monitoringEnabledStr\r\n\t\tconst monitoringMetricsPort = Number.parseInt(this.nestConfigService.get('MONITORING_METRICS_PORT') || '9090')\r\n\t\tconst monitoringHealthPath = this.nestConfigService.get('MONITORING_HEALTH_PATH') || '/health'\r\n\t\tconst monitoringMetricsPath = this.nestConfigService.get('MONITORING_METRICS_PATH') || '/metrics'\r\n\r\n\t\tconst djangoUrl = this.nestConfigService.get('NEST_PUBLIC_DJANGO_URL') || 'http://localhost:8000'\r\n\t\tconst nuxtUrl = this.nestConfigService.get('NEST_PUBLIC_NUXT_URL') || 'http://localhost:3000'\r\n\t\tconst externalRequestTimeout = Number.parseInt(this.nestConfigService.get('EXTERNAL_REQUEST_TIMEOUT') || '30000')\r\n\t\tconst externalMaxRetries = Number.parseInt(this.nestConfigService.get('EXTERNAL_MAX_RETRIES') || '3')\r\n\r\n\t\tconst rateLimitEnabledStr = this.nestConfigService.get('RATE_LIMIT_ENABLED') || 'true'\r\n\t\tconst rateLimitEnabled = typeof rateLimitEnabledStr === 'string'\r\n\t\t\t? rateLimitEnabledStr.toLowerCase() === 'true'\r\n\t\t\t: rateLimitEnabledStr\r\n\t\tconst rateLimitDefaultWindowMs = Number.parseInt(this.nestConfigService.get('RATE_LIMIT_DEFAULT_WINDOW_MS') || '60000')\r\n\t\tconst rateLimitDefaultMax = Number.parseInt(this.nestConfigService.get('RATE_LIMIT_DEFAULT_MAX') || '100')\r\n\t\tconst rateLimitImageProcessingWindowMs = Number.parseInt(this.nestConfigService.get('RATE_LIMIT_IMAGE_PROCESSING_WINDOW_MS') || '60000')\r\n\t\tconst rateLimitImageProcessingMax = Number.parseInt(this.nestConfigService.get('RATE_LIMIT_IMAGE_PROCESSING_MAX') || '50')\r\n\t\tconst rateLimitHealthCheckWindowMs = Number.parseInt(this.nestConfigService.get('RATE_LIMIT_HEALTH_CHECK_WINDOW_MS') || '10000')\r\n\t\tconst rateLimitHealthCheckMax = Number.parseInt(this.nestConfigService.get('RATE_LIMIT_HEALTH_CHECK_MAX') || '1000')\r\n\r\n\t\tconst rateLimitBypassHealthChecksStr = this.nestConfigService.get('RATE_LIMIT_BYPASS_HEALTH_CHECKS') || 'true'\r\n\t\tconst rateLimitBypassHealthChecks = typeof rateLimitBypassHealthChecksStr === 'string'\r\n\t\t\t? rateLimitBypassHealthChecksStr.toLowerCase() === 'true'\r\n\t\t\t: rateLimitBypassHealthChecksStr\r\n\t\tconst rateLimitBypassMetricsEndpointStr = this.nestConfigService.get('RATE_LIMIT_BYPASS_METRICS_ENDPOINT') || 'true'\r\n\t\tconst rateLimitBypassMetricsEndpoint = typeof rateLimitBypassMetricsEndpointStr === 'string'\r\n\t\t\t? rateLimitBypassMetricsEndpointStr.toLowerCase() === 'true'\r\n\t\t\t: rateLimitBypassMetricsEndpointStr\r\n\t\tconst rateLimitBypassStaticAssetsStr = this.nestConfigService.get('RATE_LIMIT_BYPASS_STATIC_ASSETS') || 'true'\r\n\t\tconst rateLimitBypassStaticAssets = typeof rateLimitBypassStaticAssetsStr === 'string'\r\n\t\t\t? rateLimitBypassStaticAssetsStr.toLowerCase() === 'true'\r\n\t\t\t: rateLimitBypassStaticAssetsStr\r\n\t\tconst rateLimitBypassWhitelistedDomains = this.nestConfigService.get('RATE_LIMIT_BYPASS_WHITELISTED_DOMAINS') || ''\r\n\t\tconst rateLimitBypassBotsStr = this.nestConfigService.get('RATE_LIMIT_BYPASS_BOTS') || 'true'\r\n\t\tconst rateLimitBypassBots = typeof rateLimitBypassBotsStr === 'string'\r\n\t\t\t? rateLimitBypassBotsStr.toLowerCase() === 'true'\r\n\t\t\t: rateLimitBypassBotsStr\r\n\r\n\t\treturn {\r\n\t\t\tserver: {\r\n\t\t\t\tport: serverPort,\r\n\t\t\t\thost: serverHost,\r\n\t\t\t\tcors: {\r\n\t\t\t\t\torigin: corsOrigin,\r\n\t\t\t\t\tmethods: corsMethods,\r\n\t\t\t\t\tmaxAge: corsMaxAge,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tcache: {\r\n\t\t\t\tmemory: {\r\n\t\t\t\t\tmaxSize: memoryMaxSize,\r\n\t\t\t\t\tdefaultTtl: memoryDefaultTtl,\r\n\t\t\t\t\tcheckPeriod: memoryCheckPeriod,\r\n\t\t\t\t\tmaxKeys: memoryMaxKeys,\r\n\t\t\t\t\twarningThreshold: memoryWarningThreshold,\r\n\t\t\t\t},\r\n\t\t\t\tredis: {\r\n\t\t\t\t\thost: redisHost,\r\n\t\t\t\t\tport: redisPort,\r\n\t\t\t\t\tpassword: redisPassword,\r\n\t\t\t\t\tdb: redisDb,\r\n\t\t\t\t\tttl: redisTtl,\r\n\t\t\t\t\tmaxRetries: redisMaxRetries,\r\n\t\t\t\t\tretryDelayOnFailover: redisRetryDelay,\r\n\t\t\t\t},\r\n\t\t\t\tfile: {\r\n\t\t\t\t\tdirectory: fileDirectory,\r\n\t\t\t\t\tmaxSize: fileMaxSize,\r\n\t\t\t\t\tcleanupInterval: fileCleanupInterval,\r\n\t\t\t\t},\r\n\t\t\t\twarming: {\r\n\t\t\t\t\tenabled: warmingEnabled,\r\n\t\t\t\t\twarmupOnStart: warmingOnStart,\r\n\t\t\t\t\tmaxFilesToWarm: warmingMaxFiles,\r\n\t\t\t\t\twarmupCron: warmingCron,\r\n\t\t\t\t\tpopularImageThreshold: warmingThreshold,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tprocessing: {\r\n\t\t\t\tmaxConcurrent: processingMaxConcurrent,\r\n\t\t\t\ttimeout: processingTimeout,\r\n\t\t\t\tretries: processingRetries,\r\n\t\t\t\tmaxFileSize: processingMaxFileSize,\r\n\t\t\t\tallowedFormats,\r\n\t\t\t},\r\n\t\t\tmonitoring: {\r\n\t\t\t\tenabled: monitoringEnabled,\r\n\t\t\t\tmetricsPort: monitoringMetricsPort,\r\n\t\t\t\thealthPath: monitoringHealthPath,\r\n\t\t\t\tmetricsPath: monitoringMetricsPath,\r\n\t\t\t},\r\n\t\t\texternalServices: {\r\n\t\t\t\tdjangoUrl,\r\n\t\t\t\tnuxtUrl,\r\n\t\t\t\trequestTimeout: externalRequestTimeout,\r\n\t\t\t\tmaxRetries: externalMaxRetries,\r\n\t\t\t},\r\n\t\t\trateLimit: {\r\n\t\t\t\tenabled: rateLimitEnabled,\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\twindowMs: rateLimitDefaultWindowMs,\r\n\t\t\t\t\tmax: rateLimitDefaultMax,\r\n\t\t\t\t},\r\n\t\t\t\timageProcessing: {\r\n\t\t\t\t\twindowMs: rateLimitImageProcessingWindowMs,\r\n\t\t\t\t\tmax: rateLimitImageProcessingMax,\r\n\t\t\t\t},\r\n\t\t\t\thealthCheck: {\r\n\t\t\t\t\twindowMs: rateLimitHealthCheckWindowMs,\r\n\t\t\t\t\tmax: rateLimitHealthCheckMax,\r\n\t\t\t\t},\r\n\t\t\t\tbypass: {\r\n\t\t\t\t\thealthChecks: rateLimitBypassHealthChecks,\r\n\t\t\t\t\tmetricsEndpoint: rateLimitBypassMetricsEndpoint,\r\n\t\t\t\t\tstaticAssets: rateLimitBypassStaticAssets,\r\n\t\t\t\t\twhitelistedDomains: rateLimitBypassWhitelistedDomains,\r\n\t\t\t\t\tbots: rateLimitBypassBots,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateHotReloadableSettings(newConfig: AppConfig): void {\r\n\t\tif (this.isHotReloadable('MONITORING_ENABLED')) {\r\n\t\t\tthis.config.monitoring.enabled = newConfig.monitoring.enabled\r\n\t\t}\r\n\r\n\t\tif (this.isHotReloadable('PROCESSING_MAX_CONCURRENT')) {\r\n\t\t\tthis.config.processing.maxConcurrent = newConfig.processing.maxConcurrent\r\n\t\t}\r\n\r\n\t\tif (this.isHotReloadable('CACHE_MEMORY_TTL')) {\r\n\t\t\tthis.config.cache.memory.defaultTtl = newConfig.cache.memory.defaultTtl\r\n\t\t}\r\n\r\n\t\tif (this.isHotReloadable('CACHE_FILE_CLEANUP_INTERVAL')) {\r\n\t\t\tthis.config.cache.file.cleanupInterval = newConfig.cache.file.cleanupInterval\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["Injectable","Logger","ConfigService","NestConfigService","onModuleInit","_logger","log","get","key","keys","split","value","config","k","undefined","Error","getOptional","defaultValue","getAll","validate","plainToClass","AppConfigDto","rawConfig","createRawConfigForValidation","dto","enableImplicitConversion","excludeExtraneousValues","errors","whitelist","forbidNonWhitelisted","length","errorMessages","map","error","Object","values","constraints","join","server","port","nestConfigService","host","cors","origin","methods","maxAge","cache","memory","maxSize","defaultTtl","checkPeriod","maxKeys","warningThreshold","redis","password","db","ttl","maxRetries","retryDelayOnFailover","file","directory","cleanupInterval","warming","enabled","warmupOnStart","maxFilesToWarm","warmupCron","popularImageThreshold","processing","maxConcurrent","timeout","retries","maxFileSize","allowedFormats","monitoring","metricsPort","healthPath","metricsPath","externalServices","djangoUrl","nuxtUrl","requestTimeout","http","retryDelay","circuitBreaker","failureThreshold","resetTimeout","healthCheck","urls","rateLimit","default","windowMs","max","imageProcessing","bypass","healthChecks","metricsEndpoint","staticAssets","whitelistedDomains","bots","reload","newConfig","loadConfig","updateHotReloadableSettings","isHotReloadable","hotReloadableKeys","has","loadAndValidateConfig","serverPort","Number","parseInt","serverHost","corsOrigin","corsMethods","corsMaxAge","memoryMaxSize","memoryDefaultTtl","memoryCheckPeriod","memoryMaxKeys","memoryWarningThreshold","redisHost","redisPort","redisPassword","redisDb","redisTtl","redisMaxRetries","redisRetryDelay","fileDirectory","fileMaxSize","fileCleanupInterval","warmingEnabledStr","warmingEnabled","toLowerCase","warmingOnStartStr","warmingOnStart","warmingMaxFiles","warmingCron","warmingThreshold","processingMaxConcurrent","processingTimeout","processingRetries","processingMaxFileSize","allowedFormatsStr","format","trim","monitoringEnabledStr","monitoringEnabled","monitoringMetricsPort","monitoringHealthPath","monitoringMetricsPath","externalRequestTimeout","externalMaxRetries","rateLimitEnabledStr","rateLimitEnabled","rateLimitDefaultWindowMs","rateLimitDefaultMax","rateLimitImageProcessingWindowMs","rateLimitImageProcessingMax","rateLimitHealthCheckWindowMs","rateLimitHealthCheckMax","rateLimitBypassHealthChecksStr","rateLimitBypassHealthChecks","rateLimitBypassMetricsEndpointStr","rateLimitBypassMetricsEndpoint","rateLimitBypassStaticAssetsStr","rateLimitBypassStaticAssets","rateLimitBypassWhitelistedDomains","rateLimitBypassBotsStr","rateLimitBypassBots","name","Set"],"mappings":";;;;;;;;;AAEA,SAASA,UAAU,EAAEC,MAAM,QAAQ,iBAAgB;AACnD,SAASC,iBAAiBC,iBAAiB,QAAQ,iBAAgB;AAGnE,OAAO,MAAMD;IAcZ,MAAME,eAA8B;QACnC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC;IAClB;IAEA;;EAEC,GACDC,IAAaC,GAAW,EAAK;QAC5B,MAAMC,OAAOD,IAAIE,KAAK,CAAC;QACvB,IAAIC,QAAa,IAAI,CAACC,MAAM;QAE5B,KAAK,MAAMC,KAAKJ,KAAM;YACrBE,QAAQA,OAAO,CAACE,EAAE;QACnB;QAEA,IAAIF,UAAUG,WAAW;YACxB,MAAM,IAAIC,MAAM,CAAC,mBAAmB,EAAEP,IAAI,WAAW,CAAC;QACvD;QAEA,OAAOG;IACR;IAEA;;EAEC,GACDK,YAAqBR,GAAW,EAAES,YAAgB,EAAK;QACtD,IAAI;YACH,OAAO,IAAI,CAACV,GAAG,CAAIC;QACpB,EACA,OAAM;YACL,OAAOS;QACR;IACD;IAEA;;EAEC,GACDC,SAAoB;QACnB,OAAO;YAAE,GAAG,IAAI,CAACN,MAAM;QAAC;IACzB;IAEA;;EAEC,GACD,MAAMO,WAA0B;QAC/B,MAAM,EAAEC,YAAY,EAAE,GAAG,MAAM,MAAM,CAAC;QACtC,MAAM,EAAED,QAAQ,EAAE,GAAG,MAAM,MAAM,CAAC;QAClC,MAAM,EAAEE,YAAY,EAAE,GAAG,MAAM,MAAM,CAAC;QAEtC,MAAMC,YAAY,IAAI,CAACC,4BAA4B;QAEnD,MAAMC,MAAMJ,aAAaC,cAAcC,WAAW;YACjDG,0BAA0B;YAC1BC,yBAAyB;QAC1B;QACA,MAAMC,SAAS,MAAMR,SAASK,KAAK;YAClCI,WAAW;YACXC,sBAAsB;QACvB;QAEA,IAAIF,OAAOG,MAAM,GAAG,GAAG;YACtB,MAAMC,gBAAgBJ,OAAOK,GAAG,CAACC,CAAAA,QAChCC,OAAOC,MAAM,CAACF,MAAMG,WAAW,IAAI,CAAC,GAAGC,IAAI,CAAC,OAC3CA,IAAI,CAAC;YACP,MAAM,IAAItB,MAAM,CAAC,iCAAiC,EAAEgB,eAAe;QACpE;QAEA,IAAI,CAAC1B,OAAO,CAACC,GAAG,CAAC;IAClB;IAEA;;EAEC,GACD,AAAQiB,+BAAoD;QAC3D,OAAO;YACNe,QAAQ;gBACPC,MAAM,IAAI,CAACC,iBAAiB,CAACjC,GAAG,CAAC;gBACjCkC,MAAM,IAAI,CAACD,iBAAiB,CAACjC,GAAG,CAAC;gBACjCmC,MAAM;oBACLC,QAAQ,IAAI,CAACH,iBAAiB,CAACjC,GAAG,CAAC;oBACnCqC,SAAS,IAAI,CAACJ,iBAAiB,CAACjC,GAAG,CAAC;oBACpCsC,QAAQ,IAAI,CAACL,iBAAiB,CAACjC,GAAG,CAAC;gBACpC;YACD;YACAuC,OAAO;gBACNC,QAAQ;oBACPC,SAAS,IAAI,CAACR,iBAAiB,CAACjC,GAAG,CAAC;oBACpC0C,YAAY,IAAI,CAACT,iBAAiB,CAACjC,GAAG,CAAC;oBACvC2C,aAAa,IAAI,CAACV,iBAAiB,CAACjC,GAAG,CAAC;oBACxC4C,SAAS,IAAI,CAACX,iBAAiB,CAACjC,GAAG,CAAC;oBACpC6C,kBAAkB,IAAI,CAACZ,iBAAiB,CAACjC,GAAG,CAAC;gBAC9C;gBACA8C,OAAO;oBACNZ,MAAM,IAAI,CAACD,iBAAiB,CAACjC,GAAG,CAAC;oBACjCgC,MAAM,IAAI,CAACC,iBAAiB,CAACjC,GAAG,CAAC;oBACjC+C,UAAU,IAAI,CAACd,iBAAiB,CAACjC,GAAG,CAAC;oBACrCgD,IAAI,IAAI,CAACf,iBAAiB,CAACjC,GAAG,CAAC;oBAC/BiD,KAAK,IAAI,CAAChB,iBAAiB,CAACjC,GAAG,CAAC;oBAChCkD,YAAY,IAAI,CAACjB,iBAAiB,CAACjC,GAAG,CAAC;oBACvCmD,sBAAsB,IAAI,CAAClB,iBAAiB,CAACjC,GAAG,CAAC;gBAClD;gBACAoD,MAAM;oBACLC,WAAW,IAAI,CAACpB,iBAAiB,CAACjC,GAAG,CAAC;oBACtCyC,SAAS,IAAI,CAACR,iBAAiB,CAACjC,GAAG,CAAC;oBACpCsD,iBAAiB,IAAI,CAACrB,iBAAiB,CAACjC,GAAG,CAAC;gBAC7C;gBACAuD,SAAS;oBACRC,SAAS,IAAI,CAACvB,iBAAiB,CAACjC,GAAG,CAAC;oBACpCyD,eAAe,IAAI,CAACxB,iBAAiB,CAACjC,GAAG,CAAC;oBAC1C0D,gBAAgB,IAAI,CAACzB,iBAAiB,CAACjC,GAAG,CAAC;oBAC3C2D,YAAY,IAAI,CAAC1B,iBAAiB,CAACjC,GAAG,CAAC;oBACvC4D,uBAAuB,IAAI,CAAC3B,iBAAiB,CAACjC,GAAG,CAAC;gBACnD;YACD;YACA6D,YAAY;gBACXC,eAAe,IAAI,CAAC7B,iBAAiB,CAACjC,GAAG,CAAC;gBAC1C+D,SAAS,IAAI,CAAC9B,iBAAiB,CAACjC,GAAG,CAAC;gBACpCgE,SAAS,IAAI,CAAC/B,iBAAiB,CAACjC,GAAG,CAAC;gBACpCiE,aAAa,IAAI,CAAChC,iBAAiB,CAACjC,GAAG,CAAC;gBACxCkE,gBAAgB,IAAI,CAACjC,iBAAiB,CAACjC,GAAG,CAAC;YAC5C;YACAmE,YAAY;gBACXX,SAAS,IAAI,CAACvB,iBAAiB,CAACjC,GAAG,CAAC;gBACpCoE,aAAa,IAAI,CAACnC,iBAAiB,CAACjC,GAAG,CAAC;gBACxCqE,YAAY,IAAI,CAACpC,iBAAiB,CAACjC,GAAG,CAAC;gBACvCsE,aAAa,IAAI,CAACrC,iBAAiB,CAACjC,GAAG,CAAC;YACzC;YACAuE,kBAAkB;gBACjBC,WAAW,IAAI,CAACvC,iBAAiB,CAACjC,GAAG,CAAC;gBACtCyE,SAAS,IAAI,CAACxC,iBAAiB,CAACjC,GAAG,CAAC;gBACpC0E,gBAAgB,IAAI,CAACzC,iBAAiB,CAACjC,GAAG,CAAC;gBAC3CkD,YAAY,IAAI,CAACjB,iBAAiB,CAACjC,GAAG,CAAC;YACxC;YACA2E,MAAM;gBACLZ,SAAS,IAAI,CAAC9B,iBAAiB,CAACjC,GAAG,CAAC;gBACpCkD,YAAY,IAAI,CAACjB,iBAAiB,CAACjC,GAAG,CAAC;gBACvC4E,YAAY,IAAI,CAAC3C,iBAAiB,CAACjC,GAAG,CAAC;gBACvC6E,gBAAgB;oBACfrB,SAAS,IAAI,CAACvB,iBAAiB,CAACjC,GAAG,CAAC;oBACpC8E,kBAAkB,IAAI,CAAC7C,iBAAiB,CAACjC,GAAG,CAAC;oBAC7C+E,cAAc,IAAI,CAAC9C,iBAAiB,CAACjC,GAAG,CAAC;gBAC1C;gBACAgF,aAAa;oBACZxB,SAAS,IAAI,CAACvB,iBAAiB,CAACjC,GAAG,CAAC;oBACpCiF,MAAM,IAAI,CAAChD,iBAAiB,CAACjC,GAAG,CAAC;oBACjC+D,SAAS,IAAI,CAAC9B,iBAAiB,CAACjC,GAAG,CAAC;gBACrC;YACD;YACAkF,WAAW;gBACV1B,SAAS,IAAI,CAACvB,iBAAiB,CAACjC,GAAG,CAAC;gBACpCmF,SAAS;oBACRC,UAAU,IAAI,CAACnD,iBAAiB,CAACjC,GAAG,CAAC;oBACrCqF,KAAK,IAAI,CAACpD,iBAAiB,CAACjC,GAAG,CAAC;gBACjC;gBACAsF,iBAAiB;oBAChBF,UAAU,IAAI,CAACnD,iBAAiB,CAACjC,GAAG,CAAC;oBACrCqF,KAAK,IAAI,CAACpD,iBAAiB,CAACjC,GAAG,CAAC;gBACjC;gBACAgF,aAAa;oBACZI,UAAU,IAAI,CAACnD,iBAAiB,CAACjC,GAAG,CAAC;oBACrCqF,KAAK,IAAI,CAACpD,iBAAiB,CAACjC,GAAG,CAAC;gBACjC;gBACAuF,QAAQ;oBACPC,cAAc,IAAI,CAACvD,iBAAiB,CAACjC,GAAG,CAAC;oBACzCyF,iBAAiB,IAAI,CAACxD,iBAAiB,CAACjC,GAAG,CAAC;oBAC5C0F,cAAc,IAAI,CAACzD,iBAAiB,CAACjC,GAAG,CAAC;oBACzC2F,oBAAoB,IAAI,CAAC1D,iBAAiB,CAACjC,GAAG,CAAC;oBAC/C4F,MAAM,IAAI,CAAC3D,iBAAiB,CAACjC,GAAG,CAAC;gBAClC;YACD;QACD;IACD;IAEA;;EAEC,GACD,MAAM6F,SAAwB;QAC7B,IAAI,CAAC/F,OAAO,CAACC,GAAG,CAAC;QAEjB,MAAM+F,YAAY,IAAI,CAACC,UAAU;QAEjC,IAAI,CAACC,2BAA2B,CAACF;QAEjC,IAAI,CAAChG,OAAO,CAACC,GAAG,CAAC;IAClB;IAEA;;EAEC,GACDkG,gBAAgBhG,GAAW,EAAW;QACrC,OAAO,IAAI,CAACiG,iBAAiB,CAACC,GAAG,CAAClG;IACnC;IAEQmG,wBAAmC;QAC1C,OAAO,IAAI,CAACL,UAAU;IACvB;IAEQA,aAAwB;QAC/B,MAAMM,aAAaC,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,WAAW;QACzE,MAAMwG,aAAa,IAAI,CAACvE,iBAAiB,CAACjC,GAAG,CAAC,WAAW;QACzD,MAAMyG,aAAa,IAAI,CAACxE,iBAAiB,CAACjC,GAAG,CAAC,kBAAkB;QAChE,MAAM0G,cAAc,IAAI,CAACzE,iBAAiB,CAACjC,GAAG,CAAC,mBAAmB;QAClE,MAAM2G,aAAaL,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,mBAAmB;QAEjF,MAAM4G,gBAAgBN,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,4BAA4B;QAC7F,MAAM6G,mBAAmBP,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,+BAA+B;QACnG,MAAM8G,oBAAoBR,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,gCAAgC;QACrG,MAAM+G,gBAAgBT,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,4BAA4B;QAC7F,MAAMgH,yBAAyBV,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,qCAAqC;QAE/G,MAAMiH,YAAY,IAAI,CAAChF,iBAAiB,CAACjC,GAAG,CAAC,iBAAiB;QAC9D,MAAMkH,YAAYZ,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,iBAAiB;QAC9E,MAAMmH,gBAAgB,IAAI,CAAClF,iBAAiB,CAACjC,GAAG,CAAC;QACjD,MAAMoH,UAAUd,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,eAAe;QAC1E,MAAMqH,WAAWf,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,gBAAgB;QAC5E,MAAMsH,kBAAkBhB,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,wBAAwB;QAC3F,MAAMuH,kBAAkBjB,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,wBAAwB;QAE3F,MAAMwH,gBAAgB,IAAI,CAACvF,iBAAiB,CAACjC,GAAG,CAAC,2BAA2B;QAC5E,MAAMyH,cAAcnB,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,0BAA0B;QACzF,MAAM0H,sBAAsBpB,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,kCAAkC;QAEzG,MAAM2H,oBAAoB,IAAI,CAAC1F,iBAAiB,CAACjC,GAAG,CAAC,4BAA4B;QACjF,MAAM4H,iBAAiB,OAAOD,sBAAsB,WACjDA,kBAAkBE,WAAW,OAAO,SACpCF;QACH,MAAMG,oBAAoB,IAAI,CAAC7F,iBAAiB,CAACjC,GAAG,CAAC,6BAA6B;QAClF,MAAM+H,iBAAiB,OAAOD,sBAAsB,WACjDA,kBAAkBD,WAAW,OAAO,SACpCC;QACH,MAAME,kBAAkB1B,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,8BAA8B;QACjG,MAAMiI,cAAc,IAAI,CAAChG,iBAAiB,CAACjC,GAAG,CAAC,yBAAyB;QACxE,MAAMkI,mBAAmB5B,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,8BAA8B;QAElG,MAAMmI,0BAA0B7B,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,gCAAgC;QAC3G,MAAMoI,oBAAoB9B,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,yBAAyB;QAC9F,MAAMqI,oBAAoB/B,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,yBAAyB;QAC9F,MAAMsI,wBAAwBhC,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,+BAA+B;QAExG,MAAMuI,oBAAoB,IAAI,CAACtG,iBAAiB,CAACjC,GAAG,CAAC,iCAAiC;QACtF,MAAMkE,iBAAiB,OAAOqE,sBAAsB,WACjDA,kBAAkBpI,KAAK,CAAC,KAAKsB,GAAG,CAAC+G,CAAAA,SAAUA,OAAOC,IAAI,GAAGZ,WAAW,MACpEU;QAEH,MAAMG,uBAAuB,IAAI,CAACzG,iBAAiB,CAACjC,GAAG,CAAC,yBAAyB;QACjF,MAAM2I,oBAAoB,OAAOD,yBAAyB,WACvDA,qBAAqBb,WAAW,OAAO,SACvCa;QACH,MAAME,wBAAwBtC,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,8BAA8B;QACvG,MAAM6I,uBAAuB,IAAI,CAAC5G,iBAAiB,CAACjC,GAAG,CAAC,6BAA6B;QACrF,MAAM8I,wBAAwB,IAAI,CAAC7G,iBAAiB,CAACjC,GAAG,CAAC,8BAA8B;QAEvF,MAAMwE,YAAY,IAAI,CAACvC,iBAAiB,CAACjC,GAAG,CAAC,6BAA6B;QAC1E,MAAMyE,UAAU,IAAI,CAACxC,iBAAiB,CAACjC,GAAG,CAAC,2BAA2B;QACtE,MAAM+I,yBAAyBzC,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,+BAA+B;QACzG,MAAMgJ,qBAAqB1C,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,2BAA2B;QAEjG,MAAMiJ,sBAAsB,IAAI,CAAChH,iBAAiB,CAACjC,GAAG,CAAC,yBAAyB;QAChF,MAAMkJ,mBAAmB,OAAOD,wBAAwB,WACrDA,oBAAoBpB,WAAW,OAAO,SACtCoB;QACH,MAAME,2BAA2B7C,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,mCAAmC;QAC/G,MAAMoJ,sBAAsB9C,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,6BAA6B;QACpG,MAAMqJ,mCAAmC/C,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,4CAA4C;QAChI,MAAMsJ,8BAA8BhD,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,sCAAsC;QACrH,MAAMuJ,+BAA+BjD,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,wCAAwC;QACxH,MAAMwJ,0BAA0BlD,OAAOC,QAAQ,CAAC,IAAI,CAACtE,iBAAiB,CAACjC,GAAG,CAAC,kCAAkC;QAE7G,MAAMyJ,iCAAiC,IAAI,CAACxH,iBAAiB,CAACjC,GAAG,CAAC,sCAAsC;QACxG,MAAM0J,8BAA8B,OAAOD,mCAAmC,WAC3EA,+BAA+B5B,WAAW,OAAO,SACjD4B;QACH,MAAME,oCAAoC,IAAI,CAAC1H,iBAAiB,CAACjC,GAAG,CAAC,yCAAyC;QAC9G,MAAM4J,iCAAiC,OAAOD,sCAAsC,WACjFA,kCAAkC9B,WAAW,OAAO,SACpD8B;QACH,MAAME,iCAAiC,IAAI,CAAC5H,iBAAiB,CAACjC,GAAG,CAAC,sCAAsC;QACxG,MAAM8J,8BAA8B,OAAOD,mCAAmC,WAC3EA,+BAA+BhC,WAAW,OAAO,SACjDgC;QACH,MAAME,oCAAoC,IAAI,CAAC9H,iBAAiB,CAACjC,GAAG,CAAC,4CAA4C;QACjH,MAAMgK,yBAAyB,IAAI,CAAC/H,iBAAiB,CAACjC,GAAG,CAAC,6BAA6B;QACvF,MAAMiK,sBAAsB,OAAOD,2BAA2B,WAC3DA,uBAAuBnC,WAAW,OAAO,SACzCmC;QAEH,OAAO;YACNjI,QAAQ;gBACPC,MAAMqE;gBACNnE,MAAMsE;gBACNrE,MAAM;oBACLC,QAAQqE;oBACRpE,SAASqE;oBACTpE,QAAQqE;gBACT;YACD;YACApE,OAAO;gBACNC,QAAQ;oBACPC,SAASmE;oBACTlE,YAAYmE;oBACZlE,aAAamE;oBACblE,SAASmE;oBACTlE,kBAAkBmE;gBACnB;gBACAlE,OAAO;oBACNZ,MAAM+E;oBACNjF,MAAMkF;oBACNnE,UAAUoE;oBACVnE,IAAIoE;oBACJnE,KAAKoE;oBACLnE,YAAYoE;oBACZnE,sBAAsBoE;gBACvB;gBACAnE,MAAM;oBACLC,WAAWmE;oBACX/E,SAASgF;oBACTnE,iBAAiBoE;gBAClB;gBACAnE,SAAS;oBACRC,SAASoE;oBACTnE,eAAesE;oBACfrE,gBAAgBsE;oBAChBrE,YAAYsE;oBACZrE,uBAAuBsE;gBACxB;YACD;YACArE,YAAY;gBACXC,eAAeqE;gBACfpE,SAASqE;gBACTpE,SAASqE;gBACTpE,aAAaqE;gBACbpE;YACD;YACAC,YAAY;gBACXX,SAASmF;gBACTvE,aAAawE;gBACbvE,YAAYwE;gBACZvE,aAAawE;YACd;YACAvE,kBAAkB;gBACjBC;gBACAC;gBACAC,gBAAgBqE;gBAChB7F,YAAY8F;YACb;YACA9D,WAAW;gBACV1B,SAAS0F;gBACT/D,SAAS;oBACRC,UAAU+D;oBACV9D,KAAK+D;gBACN;gBACA9D,iBAAiB;oBAChBF,UAAUiE;oBACVhE,KAAKiE;gBACN;gBACAtE,aAAa;oBACZI,UAAUmE;oBACVlE,KAAKmE;gBACN;gBACAjE,QAAQ;oBACPC,cAAckE;oBACdjE,iBAAiBmE;oBACjBlE,cAAcoE;oBACdnE,oBAAoBoE;oBACpBnE,MAAMqE;gBACP;YACD;QACD;IACD;IAEQjE,4BAA4BF,SAAoB,EAAQ;QAC/D,IAAI,IAAI,CAACG,eAAe,CAAC,uBAAuB;YAC/C,IAAI,CAAC5F,MAAM,CAAC8D,UAAU,CAACX,OAAO,GAAGsC,UAAU3B,UAAU,CAACX,OAAO;QAC9D;QAEA,IAAI,IAAI,CAACyC,eAAe,CAAC,8BAA8B;YACtD,IAAI,CAAC5F,MAAM,CAACwD,UAAU,CAACC,aAAa,GAAGgC,UAAUjC,UAAU,CAACC,aAAa;QAC1E;QAEA,IAAI,IAAI,CAACmC,eAAe,CAAC,qBAAqB;YAC7C,IAAI,CAAC5F,MAAM,CAACkC,KAAK,CAACC,MAAM,CAACE,UAAU,GAAGoD,UAAUvD,KAAK,CAACC,MAAM,CAACE,UAAU;QACxE;QAEA,IAAI,IAAI,CAACuD,eAAe,CAAC,gCAAgC;YACxD,IAAI,CAAC5F,MAAM,CAACkC,KAAK,CAACa,IAAI,CAACE,eAAe,GAAGwC,UAAUvD,KAAK,CAACa,IAAI,CAACE,eAAe;QAC9E;IACD;IAtYA,YAAY,AAAiBrB,iBAAoC,CAAE;aAAtCA,oBAAAA;aATZnC,UAAU,IAAIJ,OAAOC,cAAcuK,IAAI;aAEvChE,oBAAoB,IAAIiE,IAAI;YAC5C;YACA;YACA;YACA;SACA;QAGA,IAAI,CAAC9J,MAAM,GAAG,IAAI,CAAC+F,qBAAqB;IACzC;AAqYD"}