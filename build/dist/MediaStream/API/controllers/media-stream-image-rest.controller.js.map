{"version":3,"sources":["../../../../../src/MediaStream/API/controllers/media-stream-image-rest.controller.ts"],"sourcesContent":["import type ResourceMetaData from '@microservice/HTTP/dto/resource-meta-data.dto'\r\nimport type { Response } from 'express'\r\nimport { Buffer } from 'node:buffer'\r\nimport { createHash } from 'node:crypto'\r\nimport { open } from 'node:fs/promises'\r\nimport * as process from 'node:process'\r\nimport CacheImageRequest, {\r\n\tBackgroundOptions,\r\n\tFitOptions,\r\n\tPositionOptions,\r\n\tResizeOptions,\r\n\tSupportedResizeFormats,\r\n} from '@microservice/API/dto/cache-image-request.dto'\r\nimport CacheImageResourceOperation from '@microservice/Cache/operations/cache-image-resource.operation'\r\nimport { IMAGE, VERSION } from '@microservice/common/constants/route-prefixes.constant'\r\nimport {\r\n\tDefaultImageFallbackError,\r\n\tInvalidRequestError,\r\n\tResourceStreamingError,\r\n} from '@microservice/common/errors/media-stream.errors'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { PerformanceTracker } from '@microservice/Correlation/utils/performance-tracker.util'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { AdaptiveRateLimitGuard } from '@microservice/RateLimit/guards/adaptive-rate-limit.guard'\r\nimport { InputSanitizationService } from '@microservice/Validation/services/input-sanitization.service'\r\nimport { SecurityCheckerService } from '@microservice/Validation/services/security-checker.service'\r\nimport { Controller, Get, Logger, Param, Res, Scope, UseGuards } from '@nestjs/common'\r\n\r\n@Controller({\r\n\tpath: IMAGE,\r\n\tversion: VERSION,\r\n\tscope: Scope.REQUEST,\r\n})\r\n@UseGuards(AdaptiveRateLimitGuard)\r\nexport default class MediaStreamImageRESTController {\r\n\tprivate readonly _logger = new Logger(MediaStreamImageRESTController.name)\r\n\r\n\tconstructor(\r\n\t\tprivate readonly cacheImageResourceOperation: CacheImageResourceOperation,\r\n\t\tprivate readonly inputSanitizationService: InputSanitizationService,\r\n\t\tprivate readonly securityCheckerService: SecurityCheckerService,\r\n\t\tprivate readonly _correlationService: CorrelationService,\r\n\t\tprivate readonly metricsService: MetricsService,\r\n\t) {}\r\n\r\n\t/**\r\n\t * Validates request parameters using the new validation infrastructure\r\n\t */\r\n\tprivate async validateRequestParameters(params: any): Promise<void> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\r\n\t\tif (params.imageType) {\r\n\t\t\tconst isMalicious = await this.securityCheckerService.checkForMaliciousContent(params.imageType)\r\n\t\t\tif (isMalicious) {\r\n\t\t\t\tthrow new InvalidRequestError('Invalid imageType parameter', {\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\timageType: params.imageType,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (params.image) {\r\n\t\t\tconst isMalicious = await this.securityCheckerService.checkForMaliciousContent(params.image)\r\n\t\t\tif (isMalicious) {\r\n\t\t\t\tthrow new InvalidRequestError('Invalid image parameter', {\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\timage: params.image,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (params.width !== null && params.width !== undefined) {\r\n\t\t\tconst width = Number(params.width)\r\n\t\t\tif (Number.isNaN(width) || width < 1 || width > 5000) {\r\n\t\t\t\tthrow new InvalidRequestError('Invalid width parameter', {\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\twidth: params.width,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (params.height !== null && params.height !== undefined) {\r\n\t\t\tconst height = Number(params.height)\r\n\t\t\tif (Number.isNaN(height) || height < 1 || height > 5000) {\r\n\t\t\t\tthrow new InvalidRequestError('Invalid height parameter', {\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\theight: params.height,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (params.quality !== undefined) {\r\n\t\t\tconst quality = Number(params.quality)\r\n\t\t\tif (Number.isNaN(quality) || quality < 1 || quality > 100) {\r\n\t\t\t\tthrow new InvalidRequestError('Invalid quality parameter', {\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\tquality: params.quality,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (params.trimThreshold !== undefined) {\r\n\t\t\tconst trimThreshold = Number(params.trimThreshold)\r\n\t\t\tif (Number.isNaN(trimThreshold) || trimThreshold < 0 || trimThreshold > 100) {\r\n\t\t\t\tthrow new InvalidRequestError('Invalid trimThreshold parameter', {\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\ttrimThreshold: params.trimThreshold,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates an ETag for cache validation\r\n\t */\r\n\tprivate generateETag(input: Buffer | string): string {\r\n\t\tconst hash = createHash('md5')\r\n\t\thash.update(Buffer.isBuffer(input) ? input : Buffer.from(input))\r\n\t\treturn `\"${hash.digest('hex')}\"`\r\n\t}\r\n\r\n\t/**\r\n\t * Adds required headers to the response with correlation ID\r\n\t *\r\n\t * @param res\r\n\t * @param headers\r\n\t * @param etag Optional ETag for cache validation\r\n\t * @protected\r\n\t */\r\n\tprotected addHeadersToRequest(res: Response, headers: ResourceMetaData, etag?: string): Response {\r\n\t\tif (!headers) {\r\n\t\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\t\t\tthrow new InvalidRequestError('Headers object is undefined', {\r\n\t\t\t\theaders,\r\n\t\t\t\tcorrelationId,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tconst size = headers.size !== undefined ? headers.size.toString() : '0'\r\n\t\tconst format = headers.format || 'png'\r\n\t\tconst publicTTL = headers.publicTTL || 0\r\n\t\tconst expiresAt = Date.now() + publicTTL\r\n\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\r\n\t\tres\r\n\t\t\t.header('Content-Length', size)\r\n\t\t\t.header('Cache-Control', `max-age=${publicTTL / 1000}, public, immutable`)\r\n\t\t\t.header('Expires', new Date(expiresAt).toUTCString())\r\n\t\t\t.header('X-Correlation-ID', correlationId || 'unknown')\r\n\t\t\t.header('Vary', 'Accept-Encoding')\r\n\r\n\t\tif (etag) {\r\n\t\t\tres.header('ETag', etag)\r\n\t\t}\r\n\r\n\t\tif (format === 'svg') {\r\n\t\t\tres.header('Content-Type', 'image/svg+xml')\r\n\t\t}\r\n\t\telse {\r\n\t\t\tres.header('Content-Type', `image/${format}`)\r\n\t\t}\r\n\r\n\t\treturn res\r\n\t}\r\n\r\n\t/**\r\n\t * Handles streaming the resource or falling back to the default image.\r\n\t *\r\n\t * @param request\r\n\t * @param res\r\n\t * @protected\r\n\t */\r\n\tprivate async handleStreamOrFallback(request: CacheImageRequest, res: Response): Promise<void> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\t\tPerformanceTracker.startPhase('image_request_processing')\r\n\r\n\t\ttry {\r\n\t\t\tthis.metricsService.recordError('image_requests', 'total')\r\n\r\n\t\t\tawait this.cacheImageResourceOperation.setup(request)\r\n\r\n\t\t\tif (await this.cacheImageResourceOperation.resourceExists) {\r\n\t\t\t\tthis._logger.debug('Resource exists, attempting to stream.', {\r\n\t\t\t\t\trequest,\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t})\r\n\t\t\t\tawait this.streamResource(request, res)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._logger.debug('Resource does not exist, attempting to fetch or fallback to default.', {\r\n\t\t\t\t\trequest,\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst shouldUseQueue = this.cacheImageResourceOperation.shouldUseBackgroundProcessing\r\n\t\t\t\t\t&& this.cacheImageResourceOperation.shouldUseBackgroundProcessing()\r\n\r\n\t\t\t\tawait this.cacheImageResourceOperation.execute()\r\n\r\n\t\t\t\tconst maxWaitTime = shouldUseQueue ? 15000 : 10000\r\n\t\t\t\tconst pollInterval = 150\r\n\t\t\t\tlet waitTime = 0\r\n\r\n\t\t\t\twhile (waitTime < maxWaitTime) {\r\n\t\t\t\t\tif (await this.cacheImageResourceOperation.resourceExists) {\r\n\t\t\t\t\t\tthis._logger.debug('Resource became available after waiting', {\r\n\t\t\t\t\t\t\twaitTime,\r\n\t\t\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\tawait this.streamResource(request, res)\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, pollInterval))\r\n\t\t\t\t\twaitTime += pollInterval\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (waitTime >= maxWaitTime) {\r\n\t\t\t\t\tthis._logger.warn('Timeout waiting for resource to be processed', {\r\n\t\t\t\t\t\twaitTime,\r\n\t\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\t\twasQueued: shouldUseQueue,\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\tawait this.defaultImageFallback(request, res)\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst context = { request, error, correlationId }\r\n\r\n\t\t\tconst errorMessage = (error as Error).message || ''\r\n\t\t\tif (errorMessage.includes('Circuit breaker is open')) {\r\n\t\t\t\tthis._logger.warn(\r\n\t\t\t\t\t'Circuit breaker is open, serving fallback immediately',\r\n\t\t\t\t\tcontext,\r\n\t\t\t\t)\r\n\t\t\t\tthis.metricsService.recordError('image_request', 'circuit_breaker_open')\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._logger.error(\r\n\t\t\t\t\t`Error while processing the image request: ${errorMessage}`,\r\n\t\t\t\t\terror,\r\n\t\t\t\t\tcontext,\r\n\t\t\t\t)\r\n\t\t\t\tconst errorName = error instanceof Error ? error.constructor.name : 'UnknownError'\r\n\t\t\t\tthis.metricsService.recordError('image_request', errorName)\r\n\t\t\t}\r\n\r\n\t\t\tawait this.defaultImageFallback(request, res)\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tPerformanceTracker.endPhase('image_request_processing')\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Streams the requested resource if it exists.\r\n\t *\r\n\t * @param request\r\n\t * @param res\r\n\t * @protected\r\n\t */\r\n\t/**\r\n\t * Streams a file to the response.\r\n\t *\r\n\t * @param filePath The path to the file to stream\r\n\t * @param headers The headers to add to the response\r\n\t * @param res The response object\r\n\t * @returns A promise that resolves when the file has been streamed\r\n\t * @private\r\n\t */\r\n\tprivate async streamFileToResponse(filePath: string, headers: ResourceMetaData, res: Response): Promise<void> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\t\tPerformanceTracker.startPhase('file_streaming')\r\n\t\tlet fd = null as any\r\n\r\n\t\ttry {\r\n\t\t\tthis._logger.debug(`Streaming file: ${filePath}`, {\r\n\t\t\t\tfilePath,\r\n\t\t\t\theaders,\r\n\t\t\t\tcorrelationId,\r\n\t\t\t})\r\n\r\n\t\t\tfd = await open(filePath, 'r')\r\n\t\t\tres = this.addHeadersToRequest(res, headers)\r\n\r\n\t\t\tconst fileStream = fd.createReadStream()\r\n\r\n\t\t\tif (typeof res.on === 'function') {\r\n\t\t\t\tfileStream.pipe(res)\r\n\r\n\t\t\t\tawait new Promise<void>((resolve, reject) => {\r\n\t\t\t\t\tfileStream.on('end', () => {\r\n\t\t\t\t\t\tresolve()\r\n\t\t\t\t\t})\r\n\t\t\t\t\tfileStream.on('error', (error: unknown) => {\r\n\t\t\t\t\t\tconst context = { filePath, headers, error, correlationId }\r\n\t\t\t\t\t\tthis._logger.error(`Stream error: ${(error as Error).message || error}`, error, context)\r\n\t\t\t\t\t\tthis.metricsService.recordError('file_stream', 'stream_error')\r\n\t\t\t\t\t\treject(new ResourceStreamingError('Error streaming file', context))\r\n\t\t\t\t\t})\r\n\t\t\t\t\tres.on('close', () => {\r\n\t\t\t\t\t\tfileStream.destroy()\r\n\t\t\t\t\t\tresolve()\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow new InvalidRequestError('Response object is not a writable stream', {\r\n\t\t\t\t\tfilePath,\r\n\t\t\t\t\theaders,\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tif ((error as any).name !== 'ResourceStreamingError') {\r\n\t\t\t\tthrow new ResourceStreamingError('Failed to stream file', {\r\n\t\t\t\t\tfilePath,\r\n\t\t\t\t\terror: (error as Error).message || error,\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tthrow error\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tPerformanceTracker.endPhase('file_streaming')\r\n\r\n\t\t\tif (fd) {\r\n\t\t\t\tawait fd.close().catch((err: unknown) => {\r\n\t\t\t\t\tthis._logger.error(`Error closing file descriptor: ${(err as Error).message || err}`, err, {\r\n\t\t\t\t\t\tfilePath,\r\n\t\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async streamResource(request: CacheImageRequest, res: Response): Promise<void> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\t\tconst headers = await this.cacheImageResourceOperation.getHeaders\r\n\r\n\t\tif (!headers) {\r\n\t\t\tthis._logger.warn('Resource metadata is missing or invalid.', {\r\n\t\t\t\trequest,\r\n\t\t\t\tcorrelationId,\r\n\t\t\t})\r\n\t\t\tawait this.defaultImageFallback(request, res)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst cachedResource = await this.cacheImageResourceOperation.getCachedResource()\r\n\t\t\tif (cachedResource && cachedResource.data) {\r\n\t\t\t\tres = this.addHeadersToRequest(res, headers)\r\n\r\n\t\t\t\tlet imageData: Buffer\r\n\t\t\t\tif (typeof cachedResource.data === 'string') {\r\n\t\t\t\t\timageData = Buffer.from(cachedResource.data, 'base64')\r\n\t\t\t\t}\r\n\t\t\t\telse if (Buffer.isBuffer(cachedResource.data)) {\r\n\t\t\t\t\timageData = cachedResource.data\r\n\t\t\t\t}\r\n\t\t\t\telse if (cachedResource.data && typeof cachedResource.data === 'object' && 'data' in cachedResource.data) {\r\n\t\t\t\t\timageData = Buffer.from((cachedResource.data as any).data)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._logger.warn('Unexpected data type in cached resource, falling back to file streaming', {\r\n\t\t\t\t\t\tdataType: typeof cachedResource.data,\r\n\t\t\t\t\t\tcorrelationId: this._correlationService.getCorrelationId(),\r\n\t\t\t\t\t})\r\n\t\t\t\t\tawait this.streamFileToResponse(\r\n\t\t\t\t\t\tthis.cacheImageResourceOperation.getResourcePath,\r\n\t\t\t\t\t\theaders,\r\n\t\t\t\t\t\tres,\r\n\t\t\t\t\t)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\tres.end(imageData)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tawait this.streamFileToResponse(\r\n\t\t\t\tthis.cacheImageResourceOperation.getResourcePath,\r\n\t\t\t\theaders,\r\n\t\t\t\tres,\r\n\t\t\t)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst context = {\r\n\t\t\t\trequest,\r\n\t\t\t\tresourcePath: this.cacheImageResourceOperation.getResourcePath,\r\n\t\t\t\terror: (error as Error).message || error,\r\n\t\t\t\tcorrelationId,\r\n\t\t\t}\r\n\t\t\tthis._logger.error(`Error while streaming resource: ${(error as Error).message || error}`, error, context)\r\n\t\t\tawait this.defaultImageFallback(request, res)\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tawait this.cacheImageResourceOperation.execute()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches the resource, processes it, and streams it.\r\n\t *\r\n\t * @param request\r\n\t * @param res\r\n\t * @protected\r\n\t */\r\n\tprivate async fetchAndStreamResource(request: CacheImageRequest, res: Response): Promise<void> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\r\n\t\ttry {\r\n\t\t\tawait this.cacheImageResourceOperation.execute()\r\n\r\n\t\t\tif (this.cacheImageResourceOperation.shouldUseBackgroundProcessing && this.cacheImageResourceOperation.shouldUseBackgroundProcessing()) {\r\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 100))\r\n\t\t\t}\r\n\r\n\t\t\tconst headers = await this.cacheImageResourceOperation.getHeaders\r\n\r\n\t\t\tif (!headers) {\r\n\t\t\t\tthis._logger.warn('Failed to fetch resource or generate headers.', {\r\n\t\t\t\t\trequest,\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t})\r\n\t\t\t\tawait this.defaultImageFallback(request, res)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tconst cachedResource = await this.cacheImageResourceOperation.getCachedResource()\r\n\t\t\tif (cachedResource && cachedResource.data) {\r\n\t\t\t\tres = this.addHeadersToRequest(res, headers)\r\n\t\t\t\tconst imageData = typeof cachedResource.data === 'string'\r\n\t\t\t\t\t? Buffer.from(cachedResource.data, 'base64')\r\n\t\t\t\t\t: cachedResource.data\r\n\t\t\t\tres.end(imageData)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tawait this.streamFileToResponse(\r\n\t\t\t\tthis.cacheImageResourceOperation.getResourcePath,\r\n\t\t\t\theaders,\r\n\t\t\t\tres,\r\n\t\t\t)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst context = {\r\n\t\t\t\trequest,\r\n\t\t\t\tresourcePath: this.cacheImageResourceOperation.getResourcePath,\r\n\t\t\t\terror: (error as Error).message || error,\r\n\t\t\t\tcorrelationId,\r\n\t\t\t}\r\n\t\t\tthis._logger.error(`Error during resource fetch and stream: ${(error as Error).message || error}`, error, context)\r\n\t\t\tawait this.defaultImageFallback(request, res)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Provides a fallback to serve a default image in case of errors or missing resources.\r\n\t *\r\n\t * @param request\r\n\t * @param res\r\n\t * @protected\r\n\t */\r\n\tprivate async defaultImageFallback(request: CacheImageRequest, res: Response): Promise<void> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\r\n\t\ttry {\r\n\t\t\tconst optimizedDefaultImagePath = await this.cacheImageResourceOperation.optimizeAndServeDefaultImage(\r\n\t\t\t\trequest.resizeOptions,\r\n\t\t\t)\r\n\r\n\t\t\tres.header('X-Correlation-ID', correlationId || 'unknown')\r\n\t\t\tres.sendFile(optimizedDefaultImagePath)\r\n\t\t}\r\n\t\tcatch (defaultImageError: unknown) {\r\n\t\t\tconst errorMessage = defaultImageError instanceof Error ? defaultImageError.message : String(defaultImageError)\r\n\t\t\tconst context = {\r\n\t\t\t\trequest,\r\n\t\t\t\tresizeOptions: request.resizeOptions,\r\n\t\t\t\terror: errorMessage,\r\n\t\t\t\tcorrelationId,\r\n\t\t\t}\r\n\t\t\tthis._logger.error(`Failed to serve default image: ${errorMessage}`, defaultImageError, context)\r\n\t\t\tthis.metricsService.recordError('default_image_fallback', 'fallback_error')\r\n\t\t\tthrow new DefaultImageFallbackError('Failed to process the image request', context)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares the resource target URL by ensuring proper decoding of URL-encoded characters.\r\n\t * This is critical for handling Greek and other non-ASCII characters in filenames.\r\n\t *\r\n\t * @param resourceTarget The raw resource target URL\r\n\t * @returns The properly decoded resource target URL\r\n\t */\r\n\tprivate static resourceTargetPrepare(resourceTarget: string): string {\r\n\t\ttry {\r\n\t\t\tif (resourceTarget.includes('%')) {\r\n\t\t\t\treturn decodeURIComponent(resourceTarget)\r\n\t\t\t}\r\n\t\t\treturn resourceTarget\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\treturn resourceTarget\r\n\t\t}\r\n\t}\r\n\r\n\t@Get(\r\n\t\t'media/uploads/:imageType/:image/:width/:height/:fit/:position/:background/:trimThreshold/:format/:quality',\r\n\t)\r\n\tpublic async uploadedImage(\r\n\t\t@Param('imageType') imageType: string,\r\n\t\t@Param('image') image: string,\r\n\t\t@Param('width') width: number | null = null,\r\n\t\t@Param('height') height: number | null = null,\r\n\t\t@Param('fit') fit: FitOptions = FitOptions.contain,\r\n\t\t@Param('position') position = PositionOptions.entropy,\r\n\t\t@Param('background') background = BackgroundOptions.transparent,\r\n\t\t@Param('trimThreshold') trimThreshold = 5,\r\n\t\t@Param('format') format: SupportedResizeFormats = SupportedResizeFormats.webp,\r\n\t\t@Param('quality') quality = 100,\r\n\r\n\t\t@Res() res: Response,\r\n\t): Promise<void> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\t\tPerformanceTracker.startPhase('uploaded_image_request')\r\n\r\n\t\ttry {\r\n\t\t\tconst decodedImageType = decodeURIComponent(imageType)\r\n\t\t\tconst decodedImage = decodeURIComponent(image)\r\n\r\n\t\t\tawait this.validateRequestParameters({\r\n\t\t\t\timageType: decodedImageType,\r\n\t\t\t\timage: decodedImage,\r\n\t\t\t\twidth,\r\n\t\t\t\theight,\r\n\t\t\t\tquality,\r\n\t\t\t\ttrimThreshold,\r\n\t\t\t})\r\n\r\n\t\t\tconst resizeOptions = new ResizeOptions({\r\n\t\t\t\twidth: width ? Number(width) : null,\r\n\t\t\t\theight: height ? Number(height) : null,\r\n\t\t\t\tposition,\r\n\t\t\t\tbackground,\r\n\t\t\t\tfit,\r\n\t\t\t\ttrimThreshold: Number(trimThreshold),\r\n\t\t\t\tformat,\r\n\t\t\t\tquality: Number(quality),\r\n\t\t\t})\r\n\r\n\t\t\tthis._logger.debug(`Created ResizeOptions:`, {\r\n\t\t\t\tresizeOptions: JSON.stringify(resizeOptions, null, 2),\r\n\t\t\t\tcorrelationId,\r\n\t\t\t})\r\n\r\n\t\t\tconst djangoApiUrl = process.env.NEST_PUBLIC_DJANGO_URL || 'http://localhost:8000'\r\n\t\t\tconst resourceUrl = `${djangoApiUrl}/media/uploads/${decodedImageType}/${decodedImage}`\r\n\r\n\t\t\tconst isValidUrl = this.inputSanitizationService.validateUrl(resourceUrl)\r\n\t\t\tif (!isValidUrl) {\r\n\t\t\t\tthrow new InvalidRequestError('Invalid resource URL', {\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\tresourceUrl,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tconst request = new CacheImageRequest({\r\n\t\t\t\tresourceTarget: MediaStreamImageRESTController.resourceTargetPrepare(resourceUrl),\r\n\t\t\t\tresizeOptions,\r\n\t\t\t})\r\n\r\n\t\t\tthis._logger.debug(`Uploaded image request`, {\r\n\t\t\t\trequest: {\r\n\t\t\t\t\timageType: decodedImageType,\r\n\t\t\t\t\timage: decodedImage,\r\n\t\t\t\t\twidth,\r\n\t\t\t\t\theight,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\tquality,\r\n\t\t\t\t},\r\n\t\t\t\tcorrelationId,\r\n\t\t\t})\r\n\r\n\t\t\tres.locals.requestedFormat = format\r\n\t\t\tres.locals.originalUrl = resourceUrl\r\n\r\n\t\t\tawait this.handleStreamOrFallback(request, res)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst context = {\r\n\t\t\t\timageType,\r\n\t\t\t\timage,\r\n\t\t\t\twidth,\r\n\t\t\t\theight,\r\n\t\t\t\tformat,\r\n\t\t\t\tquality,\r\n\t\t\t\tcorrelationId,\r\n\t\t\t\terror: (error as Error).message || error,\r\n\t\t\t}\r\n\t\t\tthis._logger.error(`Error in uploadedImage: ${(error as Error).message || error}`, error, context)\r\n\t\t\tconst errorName = error instanceof Error ? error.constructor.name : 'UnknownError'\r\n\t\t\tthis.metricsService.recordError('uploaded_image_request', errorName)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tPerformanceTracker.endPhase('uploaded_image_request')\r\n\t\t}\r\n\t}\r\n\r\n\t@Get('static/images/:image/:width/:height/:fit/:position/:background/:trimThreshold/:format/:quality')\r\n\tpublic async staticImage(\r\n\t\t@Param('image') image: string,\r\n\t\t@Param('width') width: number | null = null,\r\n\t\t@Param('height') height: number | null = null,\r\n\t\t@Param('fit') fit: FitOptions = FitOptions.contain,\r\n\t\t@Param('position') position = PositionOptions.entropy,\r\n\t\t@Param('background') background = BackgroundOptions.transparent,\r\n\t\t@Param('trimThreshold') trimThreshold = 5,\r\n\t\t@Param('format') format: SupportedResizeFormats = SupportedResizeFormats.webp,\r\n\t\t@Param('quality') quality = 100,\r\n\r\n\t\t@Res() res: Response,\r\n\t): Promise<void> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId()\r\n\t\tPerformanceTracker.startPhase('static_image_request')\r\n\r\n\t\ttry {\r\n\t\t\tconst decodedImage = decodeURIComponent(image)\r\n\r\n\t\t\tawait this.validateRequestParameters({\r\n\t\t\t\timage: decodedImage,\r\n\t\t\t\twidth,\r\n\t\t\t\theight,\r\n\t\t\t\tquality,\r\n\t\t\t\ttrimThreshold,\r\n\t\t\t})\r\n\r\n\t\t\tconst djangoApiUrl = process.env.NEST_PUBLIC_DJANGO_URL || 'http://localhost:8000'\r\n\t\t\tconst resourceUrl = `${djangoApiUrl}/static/images/${decodedImage}`\r\n\r\n\t\t\tconst isValidUrl = this.inputSanitizationService.validateUrl(resourceUrl)\r\n\t\t\tif (!isValidUrl) {\r\n\t\t\t\tthrow new InvalidRequestError('Invalid resource URL', {\r\n\t\t\t\t\tcorrelationId,\r\n\t\t\t\t\tresourceUrl,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tconst request = new CacheImageRequest({\r\n\t\t\t\tresourceTarget: MediaStreamImageRESTController.resourceTargetPrepare(resourceUrl),\r\n\t\t\t\tresizeOptions: new ResizeOptions({\r\n\t\t\t\t\twidth: width ? Number(width) : null,\r\n\t\t\t\t\theight: height ? Number(height) : null,\r\n\t\t\t\t\tposition,\r\n\t\t\t\t\tbackground,\r\n\t\t\t\t\tfit,\r\n\t\t\t\t\ttrimThreshold: Number(trimThreshold),\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\tquality: Number(quality),\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\r\n\t\t\tthis._logger.debug(`Static image request`, {\r\n\t\t\t\trequest: {\r\n\t\t\t\t\timage: decodedImage,\r\n\t\t\t\t\twidth,\r\n\t\t\t\t\theight,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\tquality,\r\n\t\t\t\t},\r\n\t\t\t\tcorrelationId,\r\n\t\t\t})\r\n\r\n\t\t\tres.locals.requestedFormat = format\r\n\t\t\tres.locals.originalUrl = resourceUrl\r\n\r\n\t\t\tawait this.handleStreamOrFallback(request, res)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst context = {\r\n\t\t\t\timage,\r\n\t\t\t\twidth,\r\n\t\t\t\theight,\r\n\t\t\t\tformat,\r\n\t\t\t\tquality,\r\n\t\t\t\tcorrelationId,\r\n\t\t\t\terror: (error as Error).message || error,\r\n\t\t\t}\r\n\t\t\tthis._logger.error(`Error in staticImage: ${(error as Error).message || error}`, error, context)\r\n\t\t\tconst errorName = error instanceof Error ? error.constructor.name : 'UnknownError'\r\n\t\t\tthis.metricsService.recordError('static_image_request', errorName)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tPerformanceTracker.endPhase('static_image_request')\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["Buffer","createHash","open","process","CacheImageRequest","BackgroundOptions","FitOptions","PositionOptions","ResizeOptions","SupportedResizeFormats","CacheImageResourceOperation","IMAGE","VERSION","DefaultImageFallbackError","InvalidRequestError","ResourceStreamingError","CorrelationService","PerformanceTracker","MetricsService","AdaptiveRateLimitGuard","InputSanitizationService","SecurityCheckerService","Controller","Get","Logger","Param","Res","Scope","UseGuards","MediaStreamImageRESTController","validateRequestParameters","params","correlationId","_correlationService","getCorrelationId","imageType","isMalicious","securityCheckerService","checkForMaliciousContent","image","width","undefined","Number","isNaN","height","quality","trimThreshold","generateETag","input","hash","update","isBuffer","from","digest","addHeadersToRequest","res","headers","etag","size","toString","format","publicTTL","expiresAt","Date","now","header","toUTCString","handleStreamOrFallback","request","startPhase","metricsService","recordError","cacheImageResourceOperation","setup","resourceExists","_logger","debug","streamResource","shouldUseQueue","shouldUseBackgroundProcessing","execute","maxWaitTime","pollInterval","waitTime","Promise","resolve","setTimeout","warn","wasQueued","defaultImageFallback","error","context","errorMessage","message","includes","errorName","Error","name","endPhase","streamFileToResponse","filePath","fd","fileStream","createReadStream","on","pipe","reject","destroy","close","catch","err","getHeaders","cachedResource","getCachedResource","data","imageData","dataType","getResourcePath","end","resourcePath","fetchAndStreamResource","optimizedDefaultImagePath","optimizeAndServeDefaultImage","resizeOptions","sendFile","defaultImageError","String","resourceTargetPrepare","resourceTarget","decodeURIComponent","uploadedImage","fit","contain","position","entropy","background","transparent","webp","decodedImageType","decodedImage","JSON","stringify","djangoApiUrl","env","NEST_PUBLIC_DJANGO_URL","resourceUrl","isValidUrl","inputSanitizationService","validateUrl","locals","requestedFormat","originalUrl","staticImage","path","version","scope","REQUEST"],"mappings":"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"}