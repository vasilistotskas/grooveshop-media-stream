{"version":3,"sources":["../../../../../src/MediaStream/Queue/jobs/webp-image-manipulation.job.ts"],"sourcesContent":["import type { ResizeOptions } from '@microservice/API/dto/cache-image-request.dto'\r\nimport { copyFile, readFile } from 'node:fs/promises'\r\nimport { extname } from 'node:path'\r\nimport ManipulationJobResult from '@microservice/Queue/dto/manipulation-job-result.dto'\r\nimport { Injectable, Logger, Scope } from '@nestjs/common'\r\nimport sharp from 'sharp'\r\n\r\n@Injectable({ scope: Scope.REQUEST })\r\nexport default class WebpImageManipulationJob {\r\n\tprivate readonly logger = new Logger(WebpImageManipulationJob.name)\r\n\tasync handle(\r\n\t\tfilePathFrom: string,\r\n\t\tfilePathTo: string,\r\n\t\toptions: ResizeOptions,\r\n\t): Promise<ManipulationJobResult> {\r\n\t\tthis.logger.debug(`WebpImageManipulationJob.handle called with all options:`, {\r\n\t\t\tfilePathFrom,\r\n\t\t\tfilePathTo,\r\n\t\t\toptions: JSON.stringify(options, null, 2),\r\n\t\t})\r\n\r\n\t\tif (options.format === 'svg') {\r\n\t\t\tthis.logger.debug(`SVG format requested. Source file: ${filePathFrom}`)\r\n\t\t\tconst sourceExtension = extname(filePathFrom).toLowerCase()\r\n\t\t\tlet isSourceSvg = sourceExtension === '.svg'\r\n\r\n\t\t\tthis.logger.debug(`Source extension: ${sourceExtension}, isSourceSvg: ${isSourceSvg}`)\r\n\r\n\t\t\tif (!isSourceSvg) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst fileContent = await readFile(filePathFrom, 'utf8')\r\n\t\t\t\t\tisSourceSvg = fileContent.trim().startsWith('<svg') || fileContent.includes('xmlns=\"http://www.w3.org/2000/svg\"')\r\n\t\t\t\t\tthis.logger.debug(`Content-based SVG detection: ${isSourceSvg}`)\r\n\t\t\t\t}\r\n\t\t\t\tcatch {\r\n\t\t\t\t\tisSourceSvg = false\r\n\t\t\t\t\tthis.logger.debug('Could not read file as text, assuming not SVG')\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (isSourceSvg) {\r\n\t\t\t\tconst needsResizing = (options.width !== null && !Number.isNaN(options.width))\r\n\t\t\t\t\t|| (options.height !== null && !Number.isNaN(options.height))\r\n\r\n\t\t\t\tif (!needsResizing) {\r\n\t\t\t\t\tthis.logger.debug(`SVG file needs no resizing, copying original`)\r\n\t\t\t\t\tawait copyFile(filePathFrom, filePathTo)\r\n\t\t\t\t\tconst stats = await readFile(filePathFrom)\r\n\t\t\t\t\tconst result = new ManipulationJobResult({\r\n\t\t\t\t\t\tsize: String(stats.length),\r\n\t\t\t\t\t\tformat: 'svg',\r\n\t\t\t\t\t})\r\n\t\t\t\t\tthis.logger.debug(`SVG copy result: ${JSON.stringify(result)}`)\r\n\t\t\t\t\treturn result\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst manipulation = sharp(filePathFrom)\r\n\t\t\t\t\tmanipulation.png({ quality: options.quality })\r\n\r\n\t\t\t\t\tconst resizeScales: Record<string, number> = {}\r\n\t\t\t\t\tif (options.width !== null && !Number.isNaN(options.width)) {\r\n\t\t\t\t\t\tresizeScales.width = Number(options.width)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (options.height !== null && !Number.isNaN(options.height)) {\r\n\t\t\t\t\t\tresizeScales.height = Number(options.height)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmanipulation.resize({\r\n\t\t\t\t\t\t...resizeScales,\r\n\t\t\t\t\t\tfit: options.fit,\r\n\t\t\t\t\t\tposition: options.position,\r\n\t\t\t\t\t\tbackground: options.background,\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tconst manipulatedFile = await manipulation.toFile(filePathTo)\r\n\t\t\t\t\tconst result = new ManipulationJobResult({\r\n\t\t\t\t\t\tsize: String(manipulatedFile.size),\r\n\t\t\t\t\t\tformat: 'png',\r\n\t\t\t\t\t})\r\n\t\t\t\t\tthis.logger.debug(`SVG resized to PNG. Result: ${JSON.stringify(result)}`)\r\n\t\t\t\t\treturn result\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.logger.debug('Non-SVG source with SVG output requested, converting to PNG')\r\n\r\n\t\t\t\tconst manipulation = sharp(filePathFrom)\r\n\t\t\t\tmanipulation.png({ quality: options.quality })\r\n\r\n\t\t\t\tconst resizeScales: Record<string, number> = {}\r\n\t\t\t\tif (options.width !== null && !Number.isNaN(options.width)) {\r\n\t\t\t\t\tresizeScales.width = Number(options.width)\r\n\t\t\t\t}\r\n\t\t\t\tif (options.height !== null && !Number.isNaN(options.height)) {\r\n\t\t\t\t\tresizeScales.height = Number(options.height)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.logger.debug(`Resize scales: ${JSON.stringify(resizeScales)}`)\r\n\r\n\t\t\t\tif (Object.keys(resizeScales).length > 0) {\r\n\t\t\t\t\tif (options.trimThreshold !== null && !Number.isNaN(options.trimThreshold)) {\r\n\t\t\t\t\t\tmanipulation.trim({\r\n\t\t\t\t\t\t\tbackground: options.background,\r\n\t\t\t\t\t\t\tthreshold: Number(options.trimThreshold),\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmanipulation.resize({\r\n\t\t\t\t\t\t...resizeScales,\r\n\t\t\t\t\t\tfit: options.fit,\r\n\t\t\t\t\t\tposition: options.position,\r\n\t\t\t\t\t\tbackground: options.background,\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst manipulatedFile = await manipulation.toFile(filePathTo)\r\n\t\t\t\tthis.logger.debug(`Manipulation complete. Result format: png, size: ${manipulatedFile.size}`)\r\n\r\n\t\t\t\treturn new ManipulationJobResult({\r\n\t\t\t\t\tsize: String(manipulatedFile.size),\r\n\t\t\t\t\tformat: 'png',\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst manipulation = sharp(filePathFrom)\r\n\r\n\t\tswitch (options.format) {\r\n\t\t\tcase 'jpeg':\r\n\t\t\t\tmanipulation.jpeg({ quality: options.quality })\r\n\t\t\t\tbreak\r\n\t\t\tcase 'png':\r\n\t\t\t\tmanipulation.png({ quality: options.quality })\r\n\t\t\t\tbreak\r\n\t\t\tcase 'webp':\r\n\t\t\t\tmanipulation.webp({ quality: options.quality })\r\n\t\t\t\tbreak\r\n\t\t\tcase 'gif':\r\n\t\t\t\tmanipulation.gif()\r\n\t\t\t\tbreak\r\n\t\t\tcase 'tiff':\r\n\t\t\t\tmanipulation.tiff()\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tmanipulation.webp({ quality: options.quality })\r\n\t\t}\r\n\r\n\t\tconst resizeScales: Record<string, number> = {};\r\n\r\n\t\t(['width', 'height'] as const).forEach((scale) => {\r\n\t\t\tconst value = options[scale]\r\n\t\t\tif (value !== null && !Number.isNaN(value)) {\r\n\t\t\t\tresizeScales[scale] = Number(value)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (Object.keys(resizeScales).length > 0) {\r\n\t\t\tif (options.trimThreshold !== null && !Number.isNaN(options.trimThreshold)) {\r\n\t\t\t\tmanipulation.trim({\r\n\t\t\t\t\tbackground: options.background,\r\n\t\t\t\t\tthreshold: Number(options.trimThreshold),\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tconst resizeConfig = {\r\n\t\t\t\t...resizeScales,\r\n\t\t\t\tfit: options.fit,\r\n\t\t\t\tposition: options.position,\r\n\t\t\t\tbackground: options.background,\r\n\t\t\t}\r\n\r\n\t\t\tthis.logger.debug(`Applying Sharp resize with config:`, {\r\n\t\t\t\tresizeConfig: JSON.stringify(resizeConfig, null, 2),\r\n\t\t\t})\r\n\r\n\t\t\tmanipulation.resize(resizeConfig)\r\n\t\t}\r\n\r\n\t\tconst manipulatedFile = await manipulation.toFile(filePathTo)\r\n\r\n\t\treturn new ManipulationJobResult({\r\n\t\t\tsize: String(manipulatedFile.size),\r\n\t\t\tformat: manipulatedFile.format,\r\n\t\t})\r\n\t}\r\n}\r\n"],"names":["copyFile","readFile","extname","ManipulationJobResult","Injectable","Logger","Scope","sharp","WebpImageManipulationJob","handle","filePathFrom","filePathTo","options","logger","debug","JSON","stringify","format","sourceExtension","toLowerCase","isSourceSvg","fileContent","trim","startsWith","includes","needsResizing","width","Number","isNaN","height","stats","result","size","String","length","manipulation","png","quality","resizeScales","resize","fit","position","background","manipulatedFile","toFile","Object","keys","trimThreshold","threshold","jpeg","webp","gif","tiff","forEach","scale","value","resizeConfig","name","scope","REQUEST"],"mappings":"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"}