{"version":3,"sources":["../../../../../src/MediaStream/Queue/indicators/job-queue-health.indicator.ts"],"sourcesContent":["import type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport { BaseHealthIndicator } from '@microservice/Health/base/base-health-indicator'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { JobQueueManager } from '../services/job-queue.manager'\r\n\r\n@Injectable()\r\nexport class JobQueueHealthIndicator extends BaseHealthIndicator {\r\n\tconstructor(private readonly jobQueueManager: JobQueueManager) {\r\n\t\tsuper('job-queue')\r\n\t}\r\n\r\n\tprotected async performHealthCheck(): Promise<HealthIndicatorResult> {\r\n\t\ttry {\r\n\t\t\tconst stats = await this.jobQueueManager.getQueueStats()\r\n\r\n\t\t\tconst maxQueueLength = 1000\r\n\t\t\tconst maxFailureRate = 0.1\r\n\r\n\t\t\tconst failureRate = stats.totalJobs > 0\r\n\t\t\t\t? stats.failedJobs / stats.totalJobs\r\n\t\t\t\t: 0\r\n\r\n\t\t\tconst isHealthy\r\n\t\t\t\t= stats.queueLength < maxQueueLength\r\n\t\t\t\t\t&& failureRate < maxFailureRate\r\n\r\n\t\t\tconst details = {\r\n\t\t\t\tqueueLength: stats.queueLength,\r\n\t\t\t\tactiveWorkers: stats.activeWorkers,\r\n\t\t\t\ttotalJobs: stats.totalJobs,\r\n\t\t\t\tcompletedJobs: stats.completedJobs,\r\n\t\t\t\tfailedJobs: stats.failedJobs,\r\n\t\t\t\tfailureRate: Math.round(failureRate * 100) / 100,\r\n\t\t\t\taverageProcessingTime: Math.round(stats.averageProcessingTime),\r\n\t\t\t}\r\n\r\n\t\t\tif (!isHealthy) {\r\n\t\t\t\treturn this.createUnhealthyResult('Job queue is unhealthy', details)\r\n\t\t\t}\r\n\r\n\t\t\treturn this.createHealthyResult(details)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\treturn this.createUnhealthyResult('Job queue health check failed', {\r\n\t\t\t\terror: (error as Error).message,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getDescription(): string {\r\n\t\treturn 'Monitors job queue health including queue length, failure rates, and processing times'\r\n\t}\r\n}\r\n"],"names":["BaseHealthIndicator","Injectable","JobQueueManager","JobQueueHealthIndicator","jobQueueManager","performHealthCheck","stats","getQueueStats","maxQueueLength","maxFailureRate","failureRate","totalJobs","failedJobs","isHealthy","queueLength","details","activeWorkers","completedJobs","Math","round","averageProcessingTime","createUnhealthyResult","createHealthyResult","error","message","getDescription"],"mappings":";;;;;;;;;AACA,SAASA,mBAAmB,QAAQ,6CAAiD;AACrF,SAASC,UAAU,QAAQ,iBAAgB;AAC3C,SAASC,eAAe,QAAQ,mCAA+B;AAG/D,OAAO,MAAMC,gCAAgCH;IAC5C,YAAY,AAAiBI,eAAgC,CAAE;QAC9D,KAAK,CAAC,mBADsBA,kBAAAA;IAE7B;IAEA,MAAgBC,qBAAqD;QACpE,IAAI;YACH,MAAMC,QAAQ,MAAM,IAAI,CAACF,eAAe,CAACG,aAAa;YAEtD,MAAMC,iBAAiB;YACvB,MAAMC,iBAAiB;YAEvB,MAAMC,cAAcJ,MAAMK,SAAS,GAAG,IACnCL,MAAMM,UAAU,GAAGN,MAAMK,SAAS,GAClC;YAEH,MAAME,YACHP,MAAMQ,WAAW,GAAGN,kBAClBE,cAAcD;YAEnB,MAAMM,UAAU;gBACfD,aAAaR,MAAMQ,WAAW;gBAC9BE,eAAeV,MAAMU,aAAa;gBAClCL,WAAWL,MAAMK,SAAS;gBAC1BM,eAAeX,MAAMW,aAAa;gBAClCL,YAAYN,MAAMM,UAAU;gBAC5BF,aAAaQ,KAAKC,KAAK,CAACT,cAAc,OAAO;gBAC7CU,uBAAuBF,KAAKC,KAAK,CAACb,MAAMc,qBAAqB;YAC9D;YAEA,IAAI,CAACP,WAAW;gBACf,OAAO,IAAI,CAACQ,qBAAqB,CAAC,0BAA0BN;YAC7D;YAEA,OAAO,IAAI,CAACO,mBAAmB,CAACP;QACjC,EACA,OAAOQ,OAAgB;YACtB,OAAO,IAAI,CAACF,qBAAqB,CAAC,iCAAiC;gBAClEE,OAAO,AAACA,MAAgBC,OAAO;YAChC;QACD;IACD;IAEUC,iBAAyB;QAClC,OAAO;IACR;AACD"}