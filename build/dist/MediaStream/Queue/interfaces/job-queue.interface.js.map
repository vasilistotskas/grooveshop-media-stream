{"version":3,"sources":["../../../../../src/MediaStream/Queue/interfaces/job-queue.interface.ts"],"sourcesContent":["export interface IJobQueue {\r\n\t/**\r\n\t * Add a job to the queue\r\n\t */\r\n\tadd: <T = any>(name: string, data: T, options?: JobOptions) => Promise<Job<T>>\r\n\r\n\t/**\r\n\t * Process jobs of a specific type\r\n\t */\r\n\tprocess: <T = any>(name: string, processor: JobProcessor<T>) => void\r\n\r\n\t/**\r\n\t * Get queue statistics\r\n\t */\r\n\tgetStats: () => Promise<QueueStats>\r\n\r\n\t/**\r\n\t * Get job by ID\r\n\t */\r\n\tgetJob: (jobId: string) => Promise<Job | null>\r\n\r\n\t/**\r\n\t * Remove job by ID\r\n\t */\r\n\tremoveJob: (jobId: string) => Promise<void>\r\n\r\n\t/**\r\n\t * Pause the queue\r\n\t */\r\n\tpause: () => Promise<void>\r\n\r\n\t/**\r\n\t * Resume the queue\r\n\t */\r\n\tresume: () => Promise<void>\r\n\r\n\t/**\r\n\t * Clean completed jobs\r\n\t */\r\n\tclean: (grace: number, status: JobStatus) => Promise<void>\r\n}\r\n\r\nexport interface Job<T = any> {\r\n\tid: string\r\n\tname: string\r\n\tdata: T\r\n\topts: JobOptions\r\n\tprogress: number\r\n\tdelay: number\r\n\ttimestamp: number\r\n\tattemptsMade: number\r\n\tfailedReason?: string\r\n\tstacktrace?: string[]\r\n\treturnvalue?: any\r\n\tfinishedOn?: number\r\n\tprocessedOn?: number\r\n}\r\n\r\nexport interface JobOptions {\r\n\tpriority?: number\r\n\tdelay?: number\r\n\tattempts?: number\r\n\trepeat?: RepeatOptions\r\n\tbackoff?: BackoffOptions\r\n\tlifo?: boolean\r\n\ttimeout?: number\r\n\tremoveOnComplete?: boolean | number\r\n\tremoveOnFail?: boolean | number\r\n\tjobId?: string\r\n}\r\n\r\nexport interface RepeatOptions {\r\n\tcron?: string\r\n\ttz?: string\r\n\tstartDate?: Date | string | number\r\n\tendDate?: Date | string | number\r\n\tlimit?: number\r\n\tevery?: number\r\n\tcount?: number\r\n}\r\n\r\nexport interface BackoffOptions {\r\n\ttype: 'fixed' | 'exponential'\r\n\tdelay?: number\r\n}\r\n\r\nexport interface QueueStats {\r\n\twaiting: number\r\n\tactive: number\r\n\tcompleted: number\r\n\tfailed: number\r\n\tdelayed: number\r\n\tpaused: boolean\r\n}\r\n\r\nexport type JobStatus = 'completed' | 'waiting' | 'active' | 'delayed' | 'failed' | 'paused'\r\n\r\nexport type JobProcessor<T = any> = (job: Job<T>) => Promise<any>\r\n\r\nexport interface JobEvent {\r\n\tjobId: string\r\n\tevent: 'completed' | 'failed' | 'progress' | 'stalled'\r\n\tdata?: any\r\n\terror?: Error\r\n}\r\n"],"names":[],"mappings":"AAmGA,WAKC"}