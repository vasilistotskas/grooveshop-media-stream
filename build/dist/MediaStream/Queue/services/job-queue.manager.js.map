{"version":3,"sources":["../../../../../src/MediaStream/Queue/services/job-queue.manager.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport type { Job, JobOptions } from '../interfaces/job-queue.interface'\r\nimport type {\r\n\tCacheCleanupJobData,\r\n\tCacheWarmingJobData,\r\n\tImageProcessingJobData,\r\n\tJobMetrics,\r\n} from '../types/job.types'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { CacheOperationsProcessor } from '../processors/cache-operations.processor'\r\nimport { ImageProcessingProcessor } from '../processors/image-processing.processor'\r\nimport { JobPriority, JobType } from '../types/job.types'\r\nimport { BullQueueService } from './bull-queue.service'\r\n\r\n@Injectable()\r\nexport class JobQueueManager implements OnModuleInit {\r\n\tprivate readonly _logger = new Logger(JobQueueManager.name)\r\n\tprivate readonly metrics = {\r\n\t\ttotalJobs: 0,\r\n\t\tcompletedJobs: 0,\r\n\t\tfailedJobs: 0,\r\n\t\tprocessingTimes: [] as number[],\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprivate readonly queueService: BullQueueService,\r\n\t\tprivate readonly imageProcessor: ImageProcessingProcessor,\r\n\t\tprivate readonly cacheProcessor: CacheOperationsProcessor,\r\n\t\tprivate readonly _correlationService: CorrelationService,\r\n\t) {}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tthis.setupJobProcessors()\r\n\t\tthis._logger.log('Job queue manager initialized')\r\n\t}\r\n\r\n\tasync addImageProcessingJob(\r\n\t\tdata: Omit<ImageProcessingJobData, 'correlationId'>,\r\n\t\toptions: Partial<JobOptions> = {},\r\n\t): Promise<Job<ImageProcessingJobData>> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId() || this._correlationService.generateCorrelationId()\r\n\r\n\t\tconst jobData: ImageProcessingJobData = {\r\n\t\t\t...data,\r\n\t\t\tcorrelationId,\r\n\t\t}\r\n\r\n\t\tconst jobOptions: JobOptions = {\r\n\t\t\tpriority: data.priority || JobPriority.NORMAL,\r\n\t\t\tattempts: 3,\r\n\t\t\tbackoff: { type: 'exponential', delay: 2000 },\r\n\t\t\tremoveOnComplete: 10,\r\n\t\t\tremoveOnFail: 5,\r\n\t\t\t...options,\r\n\t\t}\r\n\r\n\t\tthis.metrics.totalJobs++\r\n\r\n\t\tthis._logger.debug(`Adding image processing job for URL: ${data.imageUrl}`)\r\n\r\n\t\treturn await this.queueService.add(JobType.IMAGE_PROCESSING, jobData, jobOptions)\r\n\t}\r\n\r\n\tasync addCacheWarmingJob(\r\n\t\tdata: Omit<CacheWarmingJobData, 'correlationId'>,\r\n\t\toptions: Partial<JobOptions> = {},\r\n\t): Promise<Job<CacheWarmingJobData>> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId() || this._correlationService.generateCorrelationId()\r\n\r\n\t\tconst jobData: CacheWarmingJobData = {\r\n\t\t\t...data,\r\n\t\t\tcorrelationId,\r\n\t\t}\r\n\r\n\t\tconst jobOptions: JobOptions = {\r\n\t\t\tpriority: data.priority || JobPriority.LOW,\r\n\t\t\tattempts: 2,\r\n\t\t\tbackoff: { type: 'fixed', delay: 5000 },\r\n\t\t\tremoveOnComplete: 5,\r\n\t\t\tremoveOnFail: 3,\r\n\t\t\t...options,\r\n\t\t}\r\n\r\n\t\tthis.metrics.totalJobs++\r\n\r\n\t\tthis._logger.debug(`Adding cache warming job for ${data.imageUrls.length} images`)\r\n\r\n\t\treturn await this.queueService.add(JobType.CACHE_WARMING, jobData, jobOptions)\r\n\t}\r\n\r\n\tasync addCacheCleanupJob(\r\n\t\tdata: Omit<CacheCleanupJobData, 'correlationId'>,\r\n\t\toptions: Partial<JobOptions> = {},\r\n\t): Promise<Job<CacheCleanupJobData>> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId() || this._correlationService.generateCorrelationId()\r\n\r\n\t\tconst jobData: CacheCleanupJobData = {\r\n\t\t\t...data,\r\n\t\t\tcorrelationId,\r\n\t\t}\r\n\r\n\t\tconst jobOptions: JobOptions = {\r\n\t\t\tpriority: data.priority || JobPriority.LOW,\r\n\t\t\tattempts: 1,\r\n\t\t\tremoveOnComplete: 3,\r\n\t\t\tremoveOnFail: 1,\r\n\t\t\t...options,\r\n\t\t}\r\n\r\n\t\tthis.metrics.totalJobs++\r\n\r\n\t\tthis._logger.debug('Adding cache cleanup job')\r\n\r\n\t\treturn await this.queueService.add(JobType.CACHE_CLEANUP, jobData, jobOptions)\r\n\t}\r\n\r\n\tasync getJobById(jobId: string): Promise<Job | null> {\r\n\t\treturn await this.queueService.getJob(jobId)\r\n\t}\r\n\r\n\tasync removeJob(jobId: string): Promise<void> {\r\n\t\tawait this.queueService.removeJob(jobId)\r\n\t}\r\n\r\n\tasync pauseQueues(): Promise<void> {\r\n\t\tawait this.queueService.pause()\r\n\t\tthis._logger.log('All queues paused')\r\n\t}\r\n\r\n\tasync resumeQueues(): Promise<void> {\r\n\t\tawait this.queueService.resume()\r\n\t\tthis._logger.log('All queues resumed')\r\n\t}\r\n\r\n\tasync getQueueStats(): Promise<JobMetrics> {\r\n\t\tconst queueStats = await this.queueService.getStats()\r\n\r\n\t\tconst averageProcessingTime = this.metrics.processingTimes.length > 0\r\n\t\t\t? this.metrics.processingTimes.reduce((a: any, b: any) => a + b, 0) / this.metrics.processingTimes.length\r\n\t\t\t: 0\r\n\r\n\t\treturn {\r\n\t\t\ttotalJobs: this.metrics.totalJobs,\r\n\t\t\tcompletedJobs: this.metrics.completedJobs,\r\n\t\t\tfailedJobs: this.metrics.failedJobs,\r\n\t\t\taverageProcessingTime,\r\n\t\t\tqueueLength: queueStats.waiting + queueStats.delayed,\r\n\t\t\tactiveWorkers: queueStats.active,\r\n\t\t}\r\n\t}\r\n\r\n\tasync cleanCompletedJobs(olderThan: number = 24 * 60 * 60 * 1000): Promise<void> {\r\n\t\tawait this.queueService.clean(olderThan, 'completed')\r\n\t\tthis._logger.debug(`Cleaned completed jobs older than ${olderThan}ms`)\r\n\t}\r\n\r\n\tasync cleanFailedJobs(olderThan: number = 7 * 24 * 60 * 60 * 1000): Promise<void> {\r\n\t\tawait this.queueService.clean(olderThan, 'failed')\r\n\t\tthis._logger.debug(`Cleaned failed jobs older than ${olderThan}ms`)\r\n\t}\r\n\r\n\tprivate setupJobProcessors(): void {\r\n\t\tthis.queueService.process(JobType.IMAGE_PROCESSING, async (job) => {\r\n\t\t\tconst startTime = Date.now()\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await this.imageProcessor.process(job)\r\n\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(true, processingTime)\r\n\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(false, processingTime)\r\n\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.queueService.process(JobType.CACHE_WARMING, async (job) => {\r\n\t\t\tconst startTime = Date.now()\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await this.cacheProcessor.processCacheWarming(job)\r\n\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(true, processingTime)\r\n\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(false, processingTime)\r\n\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.queueService.process(JobType.CACHE_CLEANUP, async (job) => {\r\n\t\t\tconst startTime = Date.now()\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await this.cacheProcessor.processCacheCleanup(job)\r\n\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(true, processingTime)\r\n\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(false, processingTime)\r\n\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._logger.debug('Job processors configured')\r\n\t}\r\n\r\n\tprivate updateMetrics(success: boolean, processingTime: number): void {\r\n\t\tif (success) {\r\n\t\t\tthis.metrics.completedJobs++\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.metrics.failedJobs++\r\n\t\t}\r\n\r\n\t\tthis.metrics.processingTimes.push(processingTime)\r\n\r\n\t\tif (this.metrics.processingTimes.length > 1000) {\r\n\t\t\tthis.metrics.processingTimes = this.metrics.processingTimes.slice(-1000)\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["CorrelationService","Injectable","Logger","CacheOperationsProcessor","ImageProcessingProcessor","JobPriority","JobType","BullQueueService","JobQueueManager","onModuleInit","setupJobProcessors","_logger","log","addImageProcessingJob","data","options","correlationId","_correlationService","getCorrelationId","generateCorrelationId","jobData","jobOptions","priority","NORMAL","attempts","backoff","type","delay","removeOnComplete","removeOnFail","metrics","totalJobs","debug","imageUrl","queueService","add","IMAGE_PROCESSING","addCacheWarmingJob","LOW","imageUrls","length","CACHE_WARMING","addCacheCleanupJob","CACHE_CLEANUP","getJobById","jobId","getJob","removeJob","pauseQueues","pause","resumeQueues","resume","getQueueStats","queueStats","getStats","averageProcessingTime","processingTimes","reduce","a","b","completedJobs","failedJobs","queueLength","waiting","delayed","activeWorkers","active","cleanCompletedJobs","olderThan","clean","cleanFailedJobs","process","job","startTime","Date","now","result","imageProcessor","processingTime","updateMetrics","error","cacheProcessor","processCacheWarming","processCacheCleanup","success","push","slice","name"],"mappings":"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"}