{"version":3,"sources":["../../../../../src/MediaStream/Queue/services/job-queue.manager.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport type { Job, JobOptions } from '../interfaces/job-queue.interface'\r\nimport type {\r\n\tCacheCleanupJobData,\r\n\tCacheWarmingJobData,\r\n\tImageProcessingJobData,\r\n\tJobMetrics,\r\n} from '../types/job.types'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { CacheOperationsProcessor } from '../processors/cache-operations.processor'\r\nimport { ImageProcessingProcessor } from '../processors/image-processing.processor'\r\nimport { JobPriority, JobType } from '../types/job.types'\r\nimport { BullQueueService } from './bull-queue.service'\r\n\r\n@Injectable()\r\nexport class JobQueueManager implements OnModuleInit {\r\n\tprivate readonly _logger = new Logger(JobQueueManager.name)\r\n\tprivate readonly metrics = {\r\n\t\ttotalJobs: 0,\r\n\t\tcompletedJobs: 0,\r\n\t\tfailedJobs: 0,\r\n\t\tprocessingTimes: [] as number[],\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprivate readonly queueService: BullQueueService,\r\n\t\tprivate readonly imageProcessor: ImageProcessingProcessor,\r\n\t\tprivate readonly cacheProcessor: CacheOperationsProcessor,\r\n\t\tprivate readonly _correlationService: CorrelationService,\r\n\t) {}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tthis.setupJobProcessors()\r\n\t\tthis._logger.log('Job queue manager initialized')\r\n\t}\r\n\r\n\tasync addImageProcessingJob(\r\n\t\tdata: Omit<ImageProcessingJobData, 'correlationId'>,\r\n\t\toptions: Partial<JobOptions> = {},\r\n\t): Promise<Job<ImageProcessingJobData>> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId() || this._correlationService.generateCorrelationId()\r\n\r\n\t\tconst jobData: ImageProcessingJobData = {\r\n\t\t\t...data,\r\n\t\t\tcorrelationId,\r\n\t\t}\r\n\r\n\t\tconst jobOptions: JobOptions = {\r\n\t\t\tpriority: data.priority || JobPriority.NORMAL,\r\n\t\t\tattempts: 3,\r\n\t\t\tbackoff: { type: 'exponential', delay: 2000 },\r\n\t\t\tremoveOnComplete: 10,\r\n\t\t\tremoveOnFail: 5,\r\n\t\t\t...options,\r\n\t\t}\r\n\r\n\t\tthis.metrics.totalJobs++\r\n\r\n\t\tthis._logger.debug(`Adding image processing job for URL: ${data.imageUrl}`)\r\n\r\n\t\treturn await this.queueService.add(JobType.IMAGE_PROCESSING, jobData, jobOptions)\r\n\t}\r\n\r\n\tasync addCacheWarmingJob(\r\n\t\tdata: Omit<CacheWarmingJobData, 'correlationId'>,\r\n\t\toptions: Partial<JobOptions> = {},\r\n\t): Promise<Job<CacheWarmingJobData>> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId() || this._correlationService.generateCorrelationId()\r\n\r\n\t\tconst jobData: CacheWarmingJobData = {\r\n\t\t\t...data,\r\n\t\t\tcorrelationId,\r\n\t\t}\r\n\r\n\t\tconst jobOptions: JobOptions = {\r\n\t\t\tpriority: data.priority || JobPriority.LOW,\r\n\t\t\tattempts: 2,\r\n\t\t\tbackoff: { type: 'fixed', delay: 5000 },\r\n\t\t\tremoveOnComplete: 5,\r\n\t\t\tremoveOnFail: 3,\r\n\t\t\t...options,\r\n\t\t}\r\n\r\n\t\tthis.metrics.totalJobs++\r\n\r\n\t\tthis._logger.debug(`Adding cache warming job for ${data.imageUrls.length} images`)\r\n\r\n\t\treturn await this.queueService.add(JobType.CACHE_WARMING, jobData, jobOptions)\r\n\t}\r\n\r\n\tasync addCacheCleanupJob(\r\n\t\tdata: Omit<CacheCleanupJobData, 'correlationId'>,\r\n\t\toptions: Partial<JobOptions> = {},\r\n\t): Promise<Job<CacheCleanupJobData>> {\r\n\t\tconst correlationId = this._correlationService.getCorrelationId() || this._correlationService.generateCorrelationId()\r\n\r\n\t\tconst jobData: CacheCleanupJobData = {\r\n\t\t\t...data,\r\n\t\t\tcorrelationId,\r\n\t\t}\r\n\r\n\t\tconst jobOptions: JobOptions = {\r\n\t\t\tpriority: data.priority || JobPriority.LOW,\r\n\t\t\tattempts: 1,\r\n\t\t\tremoveOnComplete: 3,\r\n\t\t\tremoveOnFail: 1,\r\n\t\t\t...options,\r\n\t\t}\r\n\r\n\t\tthis.metrics.totalJobs++\r\n\r\n\t\tthis._logger.debug('Adding cache cleanup job')\r\n\r\n\t\treturn await this.queueService.add(JobType.CACHE_CLEANUP, jobData, jobOptions)\r\n\t}\r\n\r\n\tasync getJobById(jobId: string): Promise<Job | null> {\r\n\t\treturn await this.queueService.getJob(jobId)\r\n\t}\r\n\r\n\tasync removeJob(jobId: string): Promise<void> {\r\n\t\tawait this.queueService.removeJob(jobId)\r\n\t}\r\n\r\n\tasync pauseQueues(): Promise<void> {\r\n\t\tawait this.queueService.pause()\r\n\t\tthis._logger.log('All queues paused')\r\n\t}\r\n\r\n\tasync resumeQueues(): Promise<void> {\r\n\t\tawait this.queueService.resume()\r\n\t\tthis._logger.log('All queues resumed')\r\n\t}\r\n\r\n\tasync getQueueStats(): Promise<JobMetrics> {\r\n\t\tconst queueStats = await this.queueService.getStats()\r\n\r\n\t\tconst averageProcessingTime = this.metrics.processingTimes.length > 0\r\n\t\t\t? this.metrics.processingTimes.reduce((a: any, b: any) => a + b, 0) / this.metrics.processingTimes.length\r\n\t\t\t: 0\r\n\r\n\t\treturn {\r\n\t\t\ttotalJobs: this.metrics.totalJobs,\r\n\t\t\tcompletedJobs: this.metrics.completedJobs,\r\n\t\t\tfailedJobs: this.metrics.failedJobs,\r\n\t\t\taverageProcessingTime,\r\n\t\t\tqueueLength: queueStats.waiting + queueStats.delayed,\r\n\t\t\tactiveWorkers: queueStats.active,\r\n\t\t}\r\n\t}\r\n\r\n\tasync cleanCompletedJobs(olderThan: number = 24 * 60 * 60 * 1000): Promise<void> {\r\n\t\tawait this.queueService.clean(olderThan, 'completed')\r\n\t\tthis._logger.debug(`Cleaned completed jobs older than ${olderThan}ms`)\r\n\t}\r\n\r\n\tasync cleanFailedJobs(olderThan: number = 7 * 24 * 60 * 60 * 1000): Promise<void> {\r\n\t\tawait this.queueService.clean(olderThan, 'failed')\r\n\t\tthis._logger.debug(`Cleaned failed jobs older than ${olderThan}ms`)\r\n\t}\r\n\r\n\tprivate setupJobProcessors(): void {\r\n\t\tthis.queueService.process(JobType.IMAGE_PROCESSING, async (job) => {\r\n\t\t\tconst startTime = Date.now()\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await this.imageProcessor.process(job)\r\n\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(true, processingTime)\r\n\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(false, processingTime)\r\n\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.queueService.process(JobType.CACHE_WARMING, async (job) => {\r\n\t\t\tconst startTime = Date.now()\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await this.cacheProcessor.processCacheWarming(job)\r\n\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(true, processingTime)\r\n\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(false, processingTime)\r\n\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.queueService.process(JobType.CACHE_CLEANUP, async (job) => {\r\n\t\t\tconst startTime = Date.now()\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await this.cacheProcessor.processCacheCleanup(job)\r\n\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(true, processingTime)\r\n\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\tthis.updateMetrics(false, processingTime)\r\n\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._logger.debug('Job processors configured')\r\n\t}\r\n\r\n\tprivate updateMetrics(success: boolean, processingTime: number): void {\r\n\t\tif (success) {\r\n\t\t\tthis.metrics.completedJobs++\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.metrics.failedJobs++\r\n\t\t}\r\n\r\n\t\tthis.metrics.processingTimes.push(processingTime)\r\n\r\n\t\tif (this.metrics.processingTimes.length > 1000) {\r\n\t\t\tthis.metrics.processingTimes = this.metrics.processingTimes.slice(-1000)\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["CorrelationService","Injectable","Logger","CacheOperationsProcessor","ImageProcessingProcessor","JobPriority","JobType","BullQueueService","JobQueueManager","queueService","imageProcessor","cacheProcessor","_correlationService","_logger","name","metrics","totalJobs","completedJobs","failedJobs","processingTimes","onModuleInit","setupJobProcessors","log","addImageProcessingJob","data","options","correlationId","getCorrelationId","generateCorrelationId","jobData","jobOptions","priority","NORMAL","attempts","backoff","type","delay","removeOnComplete","removeOnFail","debug","imageUrl","add","IMAGE_PROCESSING","addCacheWarmingJob","LOW","imageUrls","length","CACHE_WARMING","addCacheCleanupJob","CACHE_CLEANUP","getJobById","jobId","getJob","removeJob","pauseQueues","pause","resumeQueues","resume","getQueueStats","queueStats","getStats","averageProcessingTime","reduce","a","b","queueLength","waiting","delayed","activeWorkers","active","cleanCompletedJobs","olderThan","clean","cleanFailedJobs","process","job","startTime","Date","now","result","processingTime","updateMetrics","error","processCacheWarming","processCacheCleanup","success","push","slice"],"mappings":";;;;;;;;;AAQA,SAASA,kBAAkB,QAAQ,oDAAwD;AAC3F,SAASC,UAAU,EAAEC,MAAM,QAAQ,iBAAgB;AACnD,SAASC,wBAAwB,QAAQ,8CAA0C;AACnF,SAASC,wBAAwB,QAAQ,8CAA0C;AACnF,SAASC,WAAW,EAAEC,OAAO,QAAQ,wBAAoB;AACzD,SAASC,gBAAgB,QAAQ,0BAAsB;AAGvD,OAAO,MAAMC;IASZ,YACC,AAAiBC,YAA8B,EAC/C,AAAiBC,cAAwC,EACzD,AAAiBC,cAAwC,EACzD,AAAiBC,mBAAuC,CACvD;aAJgBH,eAAAA;aACAC,iBAAAA;aACAC,iBAAAA;aACAC,sBAAAA;aAZDC,UAAU,IAAIX,OAAOM,gBAAgBM,IAAI;aACzCC,UAAU;YAC1BC,WAAW;YACXC,eAAe;YACfC,YAAY;YACZC,iBAAiB,EAAE;QACpB;IAOG;IAEH,MAAMC,eAA8B;QACnC,IAAI,CAACC,kBAAkB;QACvB,IAAI,CAACR,OAAO,CAACS,GAAG,CAAC;IAClB;IAEA,MAAMC,sBACLC,IAAmD,EACnDC,UAA+B,CAAC,CAAC,EACM;QACvC,MAAMC,gBAAgB,IAAI,CAACd,mBAAmB,CAACe,gBAAgB,MAAM,IAAI,CAACf,mBAAmB,CAACgB,qBAAqB;QAEnH,MAAMC,UAAkC;YACvC,GAAGL,IAAI;YACPE;QACD;QAEA,MAAMI,aAAyB;YAC9BC,UAAUP,KAAKO,QAAQ,IAAI1B,YAAY2B,MAAM;YAC7CC,UAAU;YACVC,SAAS;gBAAEC,MAAM;gBAAeC,OAAO;YAAK;YAC5CC,kBAAkB;YAClBC,cAAc;YACd,GAAGb,OAAO;QACX;QAEA,IAAI,CAACV,OAAO,CAACC,SAAS;QAEtB,IAAI,CAACH,OAAO,CAAC0B,KAAK,CAAC,CAAC,qCAAqC,EAAEf,KAAKgB,QAAQ,EAAE;QAE1E,OAAO,MAAM,IAAI,CAAC/B,YAAY,CAACgC,GAAG,CAACnC,QAAQoC,gBAAgB,EAAEb,SAASC;IACvE;IAEA,MAAMa,mBACLnB,IAAgD,EAChDC,UAA+B,CAAC,CAAC,EACG;QACpC,MAAMC,gBAAgB,IAAI,CAACd,mBAAmB,CAACe,gBAAgB,MAAM,IAAI,CAACf,mBAAmB,CAACgB,qBAAqB;QAEnH,MAAMC,UAA+B;YACpC,GAAGL,IAAI;YACPE;QACD;QAEA,MAAMI,aAAyB;YAC9BC,UAAUP,KAAKO,QAAQ,IAAI1B,YAAYuC,GAAG;YAC1CX,UAAU;YACVC,SAAS;gBAAEC,MAAM;gBAASC,OAAO;YAAK;YACtCC,kBAAkB;YAClBC,cAAc;YACd,GAAGb,OAAO;QACX;QAEA,IAAI,CAACV,OAAO,CAACC,SAAS;QAEtB,IAAI,CAACH,OAAO,CAAC0B,KAAK,CAAC,CAAC,6BAA6B,EAAEf,KAAKqB,SAAS,CAACC,MAAM,CAAC,OAAO,CAAC;QAEjF,OAAO,MAAM,IAAI,CAACrC,YAAY,CAACgC,GAAG,CAACnC,QAAQyC,aAAa,EAAElB,SAASC;IACpE;IAEA,MAAMkB,mBACLxB,IAAgD,EAChDC,UAA+B,CAAC,CAAC,EACG;QACpC,MAAMC,gBAAgB,IAAI,CAACd,mBAAmB,CAACe,gBAAgB,MAAM,IAAI,CAACf,mBAAmB,CAACgB,qBAAqB;QAEnH,MAAMC,UAA+B;YACpC,GAAGL,IAAI;YACPE;QACD;QAEA,MAAMI,aAAyB;YAC9BC,UAAUP,KAAKO,QAAQ,IAAI1B,YAAYuC,GAAG;YAC1CX,UAAU;YACVI,kBAAkB;YAClBC,cAAc;YACd,GAAGb,OAAO;QACX;QAEA,IAAI,CAACV,OAAO,CAACC,SAAS;QAEtB,IAAI,CAACH,OAAO,CAAC0B,KAAK,CAAC;QAEnB,OAAO,MAAM,IAAI,CAAC9B,YAAY,CAACgC,GAAG,CAACnC,QAAQ2C,aAAa,EAAEpB,SAASC;IACpE;IAEA,MAAMoB,WAAWC,KAAa,EAAuB;QACpD,OAAO,MAAM,IAAI,CAAC1C,YAAY,CAAC2C,MAAM,CAACD;IACvC;IAEA,MAAME,UAAUF,KAAa,EAAiB;QAC7C,MAAM,IAAI,CAAC1C,YAAY,CAAC4C,SAAS,CAACF;IACnC;IAEA,MAAMG,cAA6B;QAClC,MAAM,IAAI,CAAC7C,YAAY,CAAC8C,KAAK;QAC7B,IAAI,CAAC1C,OAAO,CAACS,GAAG,CAAC;IAClB;IAEA,MAAMkC,eAA8B;QACnC,MAAM,IAAI,CAAC/C,YAAY,CAACgD,MAAM;QAC9B,IAAI,CAAC5C,OAAO,CAACS,GAAG,CAAC;IAClB;IAEA,MAAMoC,gBAAqC;QAC1C,MAAMC,aAAa,MAAM,IAAI,CAAClD,YAAY,CAACmD,QAAQ;QAEnD,MAAMC,wBAAwB,IAAI,CAAC9C,OAAO,CAACI,eAAe,CAAC2B,MAAM,GAAG,IACjE,IAAI,CAAC/B,OAAO,CAACI,eAAe,CAAC2C,MAAM,CAAC,CAACC,GAAQC,IAAWD,IAAIC,GAAG,KAAK,IAAI,CAACjD,OAAO,CAACI,eAAe,CAAC2B,MAAM,GACvG;QAEH,OAAO;YACN9B,WAAW,IAAI,CAACD,OAAO,CAACC,SAAS;YACjCC,eAAe,IAAI,CAACF,OAAO,CAACE,aAAa;YACzCC,YAAY,IAAI,CAACH,OAAO,CAACG,UAAU;YACnC2C;YACAI,aAAaN,WAAWO,OAAO,GAAGP,WAAWQ,OAAO;YACpDC,eAAeT,WAAWU,MAAM;QACjC;IACD;IAEA,MAAMC,mBAAmBC,YAAoB,KAAK,KAAK,KAAK,IAAI,EAAiB;QAChF,MAAM,IAAI,CAAC9D,YAAY,CAAC+D,KAAK,CAACD,WAAW;QACzC,IAAI,CAAC1D,OAAO,CAAC0B,KAAK,CAAC,CAAC,kCAAkC,EAAEgC,UAAU,EAAE,CAAC;IACtE;IAEA,MAAME,gBAAgBF,YAAoB,IAAI,KAAK,KAAK,KAAK,IAAI,EAAiB;QACjF,MAAM,IAAI,CAAC9D,YAAY,CAAC+D,KAAK,CAACD,WAAW;QACzC,IAAI,CAAC1D,OAAO,CAAC0B,KAAK,CAAC,CAAC,+BAA+B,EAAEgC,UAAU,EAAE,CAAC;IACnE;IAEQlD,qBAA2B;QAClC,IAAI,CAACZ,YAAY,CAACiE,OAAO,CAACpE,QAAQoC,gBAAgB,EAAE,OAAOiC;YAC1D,MAAMC,YAAYC,KAAKC,GAAG;YAE1B,IAAI;gBACH,MAAMC,SAAS,MAAM,IAAI,CAACrE,cAAc,CAACgE,OAAO,CAACC;gBAEjD,MAAMK,iBAAiBH,KAAKC,GAAG,KAAKF;gBACpC,IAAI,CAACK,aAAa,CAAC,MAAMD;gBAEzB,OAAOD;YACR,EACA,OAAOG,OAAgB;gBACtB,MAAMF,iBAAiBH,KAAKC,GAAG,KAAKF;gBACpC,IAAI,CAACK,aAAa,CAAC,OAAOD;gBAE1B,MAAME;YACP;QACD;QAEA,IAAI,CAACzE,YAAY,CAACiE,OAAO,CAACpE,QAAQyC,aAAa,EAAE,OAAO4B;YACvD,MAAMC,YAAYC,KAAKC,GAAG;YAE1B,IAAI;gBACH,MAAMC,SAAS,MAAM,IAAI,CAACpE,cAAc,CAACwE,mBAAmB,CAACR;gBAE7D,MAAMK,iBAAiBH,KAAKC,GAAG,KAAKF;gBACpC,IAAI,CAACK,aAAa,CAAC,MAAMD;gBAEzB,OAAOD;YACR,EACA,OAAOG,OAAgB;gBACtB,MAAMF,iBAAiBH,KAAKC,GAAG,KAAKF;gBACpC,IAAI,CAACK,aAAa,CAAC,OAAOD;gBAE1B,MAAME;YACP;QACD;QAEA,IAAI,CAACzE,YAAY,CAACiE,OAAO,CAACpE,QAAQ2C,aAAa,EAAE,OAAO0B;YACvD,MAAMC,YAAYC,KAAKC,GAAG;YAE1B,IAAI;gBACH,MAAMC,SAAS,MAAM,IAAI,CAACpE,cAAc,CAACyE,mBAAmB,CAACT;gBAE7D,MAAMK,iBAAiBH,KAAKC,GAAG,KAAKF;gBACpC,IAAI,CAACK,aAAa,CAAC,MAAMD;gBAEzB,OAAOD;YACR,EACA,OAAOG,OAAgB;gBACtB,MAAMF,iBAAiBH,KAAKC,GAAG,KAAKF;gBACpC,IAAI,CAACK,aAAa,CAAC,OAAOD;gBAE1B,MAAME;YACP;QACD;QAEA,IAAI,CAACrE,OAAO,CAAC0B,KAAK,CAAC;IACpB;IAEQ0C,cAAcI,OAAgB,EAAEL,cAAsB,EAAQ;QACrE,IAAIK,SAAS;YACZ,IAAI,CAACtE,OAAO,CAACE,aAAa;QAC3B,OACK;YACJ,IAAI,CAACF,OAAO,CAACG,UAAU;QACxB;QAEA,IAAI,CAACH,OAAO,CAACI,eAAe,CAACmE,IAAI,CAACN;QAElC,IAAI,IAAI,CAACjE,OAAO,CAACI,eAAe,CAAC2B,MAAM,GAAG,MAAM;YAC/C,IAAI,CAAC/B,OAAO,CAACI,eAAe,GAAG,IAAI,CAACJ,OAAO,CAACI,eAAe,CAACoE,KAAK,CAAC,CAAC;QACpE;IACD;AACD"}