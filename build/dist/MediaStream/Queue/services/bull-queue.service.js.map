{"version":3,"sources":["../../../../../src/MediaStream/Queue/services/bull-queue.service.ts"],"sourcesContent":["import type { OnModuleDestroy } from '@nestjs/common'\r\nimport type { Job as BullJob, JobOptions as BullJobOptions, Queue } from 'bull'\r\n\r\nimport type { IJobQueue, Job, JobOptions, JobProcessor, JobStatus, QueueStats } from '../interfaces/job-queue.interface'\r\nimport { InjectQueue } from '@nestjs/bull'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { JobType } from '../types/job.types'\r\n\r\n@Injectable()\r\nexport class BullQueueService implements IJobQueue, OnModuleDestroy {\r\n\tprivate readonly _logger = new Logger(BullQueueService.name)\r\n\tprivate readonly processors = new Map<string, JobProcessor>()\r\n\r\n\tconstructor(\r\n\t\t@InjectQueue('image-processing') private readonly imageQueue: Queue,\r\n\t\t@InjectQueue('cache-operations') private readonly cacheQueue: Queue,\r\n\t) {}\r\n\r\n\tasync add<T = any>(name: string, data: T, options: JobOptions = {}): Promise<Job<T>> {\r\n\t\ttry {\r\n\t\t\tconst queue = this.getQueueForJobType(name)\r\n\t\t\tconst bullOptions: BullJobOptions = this.convertToBullOptions(options)\r\n\r\n\t\t\tconst bullJob = await queue.add(name, data, bullOptions)\r\n\r\n\t\t\tthis._logger.debug(`Job ${name} added to queue with ID: ${bullJob.id}`)\r\n\r\n\t\t\treturn this.convertFromBullJob(bullJob)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error(`Failed to add job ${name} to queue:`, error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tprocess<T = any>(name: string, processor: JobProcessor<T>): void {\r\n\t\tthis.processors.set(name, processor)\r\n\r\n\t\tconst queue = this.getQueueForJobType(name)\r\n\r\n\t\tqueue.process(name, async (bullJob: BullJob<T>) => {\r\n\t\t\tconst job = this.convertFromBullJob(bullJob)\r\n\r\n\t\t\ttry {\r\n\t\t\t\tthis._logger.debug(`Processing job ${name} with ID: ${job.id}`)\r\n\t\t\t\tconst result = await processor(job)\r\n\t\t\t\tthis._logger.debug(`Job ${name} completed successfully`)\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tthis._logger.error(`Job ${name} failed:`, error)\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tasync getStats(): Promise<QueueStats> {\r\n\t\ttry {\r\n\t\t\tconst [imageStats, cacheStats] = await Promise.all([\r\n\t\t\t\tthis.getQueueStats(this.imageQueue),\r\n\t\t\t\tthis.getQueueStats(this.cacheQueue),\r\n\t\t\t])\r\n\r\n\t\t\treturn {\r\n\t\t\t\twaiting: imageStats.waiting + cacheStats.waiting,\r\n\t\t\t\tactive: imageStats.active + cacheStats.active,\r\n\t\t\t\tcompleted: imageStats.completed + cacheStats.completed,\r\n\t\t\t\tfailed: imageStats.failed + cacheStats.failed,\r\n\t\t\t\tdelayed: imageStats.delayed + cacheStats.delayed,\r\n\t\t\t\tpaused: imageStats.paused && cacheStats.paused,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to get queue stats:', error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync getJob(jobId: string): Promise<Job | null> {\r\n\t\ttry {\r\n\t\t\tconst [imageJob, cacheJob] = await Promise.all([\r\n\t\t\t\tthis.imageQueue.getJob(jobId),\r\n\t\t\t\tthis.cacheQueue.getJob(jobId),\r\n\t\t\t])\r\n\r\n\t\t\tconst bullJob = imageJob || cacheJob\r\n\t\t\treturn bullJob ? this.convertFromBullJob(bullJob) : null\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error(`Failed to get job ${jobId}:`, error)\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n\r\n\tasync removeJob(jobId: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst job = await this.getJob(jobId)\r\n\t\t\tif (!job) {\r\n\t\t\t\tthrow new Error(`Job ${jobId} not found`)\r\n\t\t\t}\r\n\r\n\t\t\tconst queue = this.getQueueForJobType(job.name)\r\n\t\t\tconst bullJob = await queue.getJob(jobId)\r\n\r\n\t\t\tif (bullJob) {\r\n\t\t\t\tawait bullJob.remove()\r\n\t\t\t\tthis._logger.debug(`Job ${jobId} removed from queue`)\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error(`Failed to remove job ${jobId}:`, error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync pause(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait Promise.all([\r\n\t\t\t\tthis.imageQueue.pause(),\r\n\t\t\t\tthis.cacheQueue.pause(),\r\n\t\t\t])\r\n\t\t\tthis._logger.log('All queues paused')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to pause queues:', error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync resume(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait Promise.all([\r\n\t\t\t\tthis.imageQueue.resume(),\r\n\t\t\t\tthis.cacheQueue.resume(),\r\n\t\t\t])\r\n\t\t\tthis._logger.log('All queues resumed')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to resume queues:', error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync clean(grace: number, status: JobStatus): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst bullStatus = status as any\r\n\t\t\tawait Promise.all([\r\n\t\t\t\tthis.imageQueue.clean(grace, bullStatus),\r\n\t\t\t\tthis.cacheQueue.clean(grace, bullStatus),\r\n\t\t\t])\r\n\t\t\tthis._logger.debug(`Cleaned ${status} jobs older than ${grace}ms`)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error(`Failed to clean ${status} jobs:`, error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync onModuleDestroy(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait Promise.all([\r\n\t\t\t\tthis.imageQueue.close(),\r\n\t\t\t\tthis.cacheQueue.close(),\r\n\t\t\t])\r\n\t\t\tthis._logger.log('Queue connections closed')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to close queue connections:', error)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getQueueForJobType(jobType: string): Queue {\r\n\t\tif (jobType === JobType.IMAGE_PROCESSING) {\r\n\t\t\treturn this.imageQueue\r\n\t\t}\r\n\t\treturn this.cacheQueue\r\n\t}\r\n\r\n\tprivate async getQueueStats(queue: Queue): Promise<QueueStats> {\r\n\t\tconst [waiting, active, completed, failed, delayed, paused] = await Promise.all([\r\n\t\t\tqueue.getWaiting(),\r\n\t\t\tqueue.getActive(),\r\n\t\t\tqueue.getCompleted(),\r\n\t\t\tqueue.getFailed(),\r\n\t\t\tqueue.getDelayed(),\r\n\t\t\tqueue.isPaused(),\r\n\t\t])\r\n\r\n\t\treturn {\r\n\t\t\twaiting: waiting.length,\r\n\t\t\tactive: active.length,\r\n\t\t\tcompleted: completed.length,\r\n\t\t\tfailed: failed.length,\r\n\t\t\tdelayed: delayed.length,\r\n\t\t\tpaused,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate convertToBullOptions(options: JobOptions): BullJobOptions {\r\n\t\treturn {\r\n\t\t\tpriority: options.priority,\r\n\t\t\tdelay: options.delay,\r\n\t\t\tattempts: options.attempts || 3,\r\n\t\t\trepeat: options.repeat as any,\r\n\t\t\tbackoff: options.backoff || { type: 'exponential', delay: 2000 },\r\n\t\t\tlifo: options.lifo,\r\n\t\t\ttimeout: options.timeout || 30000,\r\n\t\t\tremoveOnComplete: options.removeOnComplete ?? 10,\r\n\t\t\tremoveOnFail: options.removeOnFail ?? 5,\r\n\t\t\tjobId: options.jobId,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate convertFromBullJob<T = any>(bullJob: BullJob<T>): Job<T> {\r\n\t\treturn {\r\n\t\t\tid: bullJob.id.toString(),\r\n\t\t\tname: bullJob.name,\r\n\t\t\tdata: bullJob.data,\r\n\t\t\topts: bullJob.opts as JobOptions,\r\n\t\t\tprogress: bullJob.progress(),\r\n\t\t\tdelay: (bullJob as any).delay || 0,\r\n\t\t\ttimestamp: bullJob.timestamp,\r\n\t\t\tattemptsMade: bullJob.attemptsMade,\r\n\t\t\tfailedReason: bullJob.failedReason,\r\n\t\t\tstacktrace: bullJob.stacktrace,\r\n\t\t\treturnvalue: bullJob.returnvalue,\r\n\t\t\tfinishedOn: bullJob.finishedOn,\r\n\t\t\tprocessedOn: bullJob.processedOn,\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["InjectQueue","Injectable","Logger","JobType","BullQueueService","add","name","data","options","queue","getQueueForJobType","bullOptions","convertToBullOptions","bullJob","_logger","debug","id","convertFromBullJob","error","process","processor","processors","set","job","result","getStats","imageStats","cacheStats","Promise","all","getQueueStats","imageQueue","cacheQueue","waiting","active","completed","failed","delayed","paused","getJob","jobId","imageJob","cacheJob","removeJob","Error","remove","pause","log","resume","clean","grace","status","bullStatus","onModuleDestroy","close","jobType","IMAGE_PROCESSING","getWaiting","getActive","getCompleted","getFailed","getDelayed","isPaused","length","priority","delay","attempts","repeat","backoff","type","lifo","timeout","removeOnComplete","removeOnFail","toString","opts","progress","timestamp","attemptsMade","failedReason","stacktrace","returnvalue","finishedOn","processedOn","Map"],"mappings":"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"}