{"version":3,"sources":["../../../../../src/MediaStream/Queue/services/bull-queue.service.ts"],"sourcesContent":["import type { OnModuleDestroy } from '@nestjs/common'\r\nimport type { Job as BullJob, JobOptions as BullJobOptions, Queue } from 'bull'\r\n\r\nimport type { IJobQueue, Job, JobOptions, JobProcessor, JobStatus, QueueStats } from '../interfaces/job-queue.interface'\r\nimport { InjectQueue } from '@nestjs/bull'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { JobType } from '../types/job.types'\r\n\r\n@Injectable()\r\nexport class BullQueueService implements IJobQueue, OnModuleDestroy {\r\n\tprivate readonly _logger = new Logger(BullQueueService.name)\r\n\tprivate readonly processors = new Map<string, JobProcessor>()\r\n\r\n\tconstructor(\r\n\t\t@InjectQueue('image-processing') private readonly imageQueue: Queue,\r\n\t\t@InjectQueue('cache-operations') private readonly cacheQueue: Queue,\r\n\t) {}\r\n\r\n\tasync add<T = any>(name: string, data: T, options: JobOptions = {}): Promise<Job<T>> {\r\n\t\ttry {\r\n\t\t\tconst queue = this.getQueueForJobType(name)\r\n\t\t\tconst bullOptions: BullJobOptions = this.convertToBullOptions(options)\r\n\r\n\t\t\tconst bullJob = await queue.add(name, data, bullOptions)\r\n\r\n\t\t\tthis._logger.debug(`Job ${name} added to queue with ID: ${bullJob.id}`)\r\n\r\n\t\t\treturn this.convertFromBullJob(bullJob)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error(`Failed to add job ${name} to queue:`, error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tprocess<T = any>(name: string, processor: JobProcessor<T>): void {\r\n\t\tthis.processors.set(name, processor)\r\n\r\n\t\tconst queue = this.getQueueForJobType(name)\r\n\r\n\t\tqueue.process(name, async (bullJob: BullJob<T>) => {\r\n\t\t\tconst job = this.convertFromBullJob(bullJob)\r\n\r\n\t\t\ttry {\r\n\t\t\t\tthis._logger.debug(`Processing job ${name} with ID: ${job.id}`)\r\n\t\t\t\tconst result = await processor(job)\r\n\t\t\t\tthis._logger.debug(`Job ${name} completed successfully`)\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tthis._logger.error(`Job ${name} failed:`, error)\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tasync getStats(): Promise<QueueStats> {\r\n\t\ttry {\r\n\t\t\tconst [imageStats, cacheStats] = await Promise.all([\r\n\t\t\t\tthis.getQueueStats(this.imageQueue),\r\n\t\t\t\tthis.getQueueStats(this.cacheQueue),\r\n\t\t\t])\r\n\r\n\t\t\treturn {\r\n\t\t\t\twaiting: imageStats.waiting + cacheStats.waiting,\r\n\t\t\t\tactive: imageStats.active + cacheStats.active,\r\n\t\t\t\tcompleted: imageStats.completed + cacheStats.completed,\r\n\t\t\t\tfailed: imageStats.failed + cacheStats.failed,\r\n\t\t\t\tdelayed: imageStats.delayed + cacheStats.delayed,\r\n\t\t\t\tpaused: imageStats.paused && cacheStats.paused,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to get queue stats:', error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync getJob(jobId: string): Promise<Job | null> {\r\n\t\ttry {\r\n\t\t\tconst [imageJob, cacheJob] = await Promise.all([\r\n\t\t\t\tthis.imageQueue.getJob(jobId),\r\n\t\t\t\tthis.cacheQueue.getJob(jobId),\r\n\t\t\t])\r\n\r\n\t\t\tconst bullJob = imageJob || cacheJob\r\n\t\t\treturn bullJob ? this.convertFromBullJob(bullJob) : null\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error(`Failed to get job ${jobId}:`, error)\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n\r\n\tasync removeJob(jobId: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst job = await this.getJob(jobId)\r\n\t\t\tif (!job) {\r\n\t\t\t\tthrow new Error(`Job ${jobId} not found`)\r\n\t\t\t}\r\n\r\n\t\t\tconst queue = this.getQueueForJobType(job.name)\r\n\t\t\tconst bullJob = await queue.getJob(jobId)\r\n\r\n\t\t\tif (bullJob) {\r\n\t\t\t\tawait bullJob.remove()\r\n\t\t\t\tthis._logger.debug(`Job ${jobId} removed from queue`)\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error(`Failed to remove job ${jobId}:`, error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync pause(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait Promise.all([\r\n\t\t\t\tthis.imageQueue.pause(),\r\n\t\t\t\tthis.cacheQueue.pause(),\r\n\t\t\t])\r\n\t\t\tthis._logger.log('All queues paused')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to pause queues:', error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync resume(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait Promise.all([\r\n\t\t\t\tthis.imageQueue.resume(),\r\n\t\t\t\tthis.cacheQueue.resume(),\r\n\t\t\t])\r\n\t\t\tthis._logger.log('All queues resumed')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to resume queues:', error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync clean(grace: number, status: JobStatus): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst bullStatus = status as any\r\n\t\t\tawait Promise.all([\r\n\t\t\t\tthis.imageQueue.clean(grace, bullStatus),\r\n\t\t\t\tthis.cacheQueue.clean(grace, bullStatus),\r\n\t\t\t])\r\n\t\t\tthis._logger.debug(`Cleaned ${status} jobs older than ${grace}ms`)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error(`Failed to clean ${status} jobs:`, error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync onModuleDestroy(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait Promise.all([\r\n\t\t\t\tthis.imageQueue.close(),\r\n\t\t\t\tthis.cacheQueue.close(),\r\n\t\t\t])\r\n\t\t\tthis._logger.log('Queue connections closed')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to close queue connections:', error)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getQueueForJobType(jobType: string): Queue {\r\n\t\tif (jobType === JobType.IMAGE_PROCESSING) {\r\n\t\t\treturn this.imageQueue\r\n\t\t}\r\n\t\treturn this.cacheQueue\r\n\t}\r\n\r\n\tprivate async getQueueStats(queue: Queue): Promise<QueueStats> {\r\n\t\tconst [waiting, active, completed, failed, delayed, paused] = await Promise.all([\r\n\t\t\tqueue.getWaiting(),\r\n\t\t\tqueue.getActive(),\r\n\t\t\tqueue.getCompleted(),\r\n\t\t\tqueue.getFailed(),\r\n\t\t\tqueue.getDelayed(),\r\n\t\t\tqueue.isPaused(),\r\n\t\t])\r\n\r\n\t\treturn {\r\n\t\t\twaiting: waiting.length,\r\n\t\t\tactive: active.length,\r\n\t\t\tcompleted: completed.length,\r\n\t\t\tfailed: failed.length,\r\n\t\t\tdelayed: delayed.length,\r\n\t\t\tpaused,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate convertToBullOptions(options: JobOptions): BullJobOptions {\r\n\t\treturn {\r\n\t\t\tpriority: options.priority,\r\n\t\t\tdelay: options.delay,\r\n\t\t\tattempts: options.attempts || 3,\r\n\t\t\trepeat: options.repeat as any,\r\n\t\t\tbackoff: options.backoff || { type: 'exponential', delay: 2000 },\r\n\t\t\tlifo: options.lifo,\r\n\t\t\ttimeout: options.timeout || 30000,\r\n\t\t\tremoveOnComplete: options.removeOnComplete ?? 10,\r\n\t\t\tremoveOnFail: options.removeOnFail ?? 5,\r\n\t\t\tjobId: options.jobId,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate convertFromBullJob<T = any>(bullJob: BullJob<T>): Job<T> {\r\n\t\treturn {\r\n\t\t\tid: bullJob.id.toString(),\r\n\t\t\tname: bullJob.name,\r\n\t\t\tdata: bullJob.data,\r\n\t\t\topts: bullJob.opts as JobOptions,\r\n\t\t\tprogress: bullJob.progress(),\r\n\t\t\tdelay: (bullJob as any).delay || 0,\r\n\t\t\ttimestamp: bullJob.timestamp,\r\n\t\t\tattemptsMade: bullJob.attemptsMade,\r\n\t\t\tfailedReason: bullJob.failedReason,\r\n\t\t\tstacktrace: bullJob.stacktrace,\r\n\t\t\treturnvalue: bullJob.returnvalue,\r\n\t\t\tfinishedOn: bullJob.finishedOn,\r\n\t\t\tprocessedOn: bullJob.processedOn,\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["InjectQueue","Injectable","Logger","JobType","BullQueueService","imageQueue","cacheQueue","_logger","name","processors","Map","add","data","options","queue","getQueueForJobType","bullOptions","convertToBullOptions","bullJob","debug","id","convertFromBullJob","error","process","processor","set","job","result","getStats","imageStats","cacheStats","Promise","all","getQueueStats","waiting","active","completed","failed","delayed","paused","getJob","jobId","imageJob","cacheJob","removeJob","Error","remove","pause","log","resume","clean","grace","status","bullStatus","onModuleDestroy","close","jobType","IMAGE_PROCESSING","getWaiting","getActive","getCompleted","getFailed","getDelayed","isPaused","length","priority","delay","attempts","repeat","backoff","type","lifo","timeout","removeOnComplete","removeOnFail","toString","opts","progress","timestamp","attemptsMade","failedReason","stacktrace","returnvalue","finishedOn","processedOn"],"mappings":"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"}