{"version":3,"sources":["../../../../../src/MediaStream/Queue/processors/image-processing.processor.ts"],"sourcesContent":["import type { Job } from '../interfaces/job-queue.interface'\r\nimport type { ImageProcessingJobData, JobResult } from '../types/job.types'\r\nimport { Buffer } from 'node:buffer'\r\nimport { writeFile } from 'node:fs/promises'\r\nimport { join } from 'node:path'\r\nimport { cwd, hrtime } from 'node:process'\r\nimport { MultiLayerCacheManager } from '@microservice/Cache/services/multi-layer-cache.manager'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport ResourceMetaData from '@microservice/HTTP/dto/resource-meta-data.dto'\r\nimport { HttpClientService } from '@microservice/HTTP/services/http-client.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport sharp from 'sharp'\r\n\r\n@Injectable()\r\nexport class ImageProcessingProcessor {\r\n\tprivate readonly _logger = new Logger(ImageProcessingProcessor.name)\r\n\tprivate static readonly MAX_SHARP_INSTANCES = 4\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _correlationService: CorrelationService,\r\n\t\tprivate readonly httpClient: HttpClientService,\r\n\t\tprivate readonly cacheManager: MultiLayerCacheManager,\r\n\t) {\r\n\t\tsharp.cache({\r\n\t\t\tmemory: 50,\r\n\t\t\tfiles: 10,\r\n\t\t\titems: 100,\r\n\t\t})\r\n\r\n\t\tsharp.concurrency(ImageProcessingProcessor.MAX_SHARP_INSTANCES)\r\n\t\tsharp.simd(true)\r\n\t}\r\n\r\n\tprivate processedCount = 0\r\n\r\n\tasync process(job: Job<ImageProcessingJobData>): Promise<JobResult> {\r\n\t\tconst startTime = Date.now()\r\n\t\tconst { imageUrl, width, height, quality, format, cacheKey, correlationId, fit, position, background, trimThreshold } = job.data\r\n\r\n\t\tthis.processedCount++\r\n\t\tif (this.processedCount % 20 === 0 && globalThis.gc) {\r\n\t\t\ttry {\r\n\t\t\t\tglobalThis.gc()\r\n\t\t\t\tthis._logger.debug(`Triggered garbage collection after ${this.processedCount} processed images`)\r\n\t\t\t}\r\n\t\t\tcatch {}\r\n\t\t}\r\n\r\n\t\treturn this._correlationService.runWithContext(\r\n\t\t\t{\r\n\t\t\t\tcorrelationId,\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tclientIp: 'queue-worker',\r\n\t\t\t\tmethod: 'JOB',\r\n\t\t\t\turl: `/queue/image-processing/${job.id}`,\r\n\t\t\t\tstartTime: hrtime.bigint(),\r\n\t\t\t},\r\n\t\t\tasync () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthis._logger.debug(`Processing image job ${job.id} for URL: ${imageUrl} with options:`, {\r\n\t\t\t\t\t\twidth,\r\n\t\t\t\t\t\theight,\r\n\t\t\t\t\t\tquality,\r\n\t\t\t\t\t\tformat,\r\n\t\t\t\t\t\tfit,\r\n\t\t\t\t\t\tposition,\r\n\t\t\t\t\t\tbackground,\r\n\t\t\t\t\t\ttrimThreshold,\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tconst cached = await this.cacheManager.get('image', cacheKey)\r\n\t\t\t\t\tif (cached) {\r\n\t\t\t\t\t\tthis._logger.debug(`Image already cached for job ${job.id}`)\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\t\tdata: cached,\r\n\t\t\t\t\t\t\tprocessingTime: Date.now() - startTime,\r\n\t\t\t\t\t\t\tcacheHit: true,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tawait this.updateProgress(job, 25, 'Downloading image')\r\n\r\n\t\t\t\t\tconst imageBuffer = await this.downloadImage(imageUrl)\r\n\r\n\t\t\t\t\tawait this.updateProgress(job, 50, 'Processing image')\r\n\r\n\t\t\t\t\tconst processedBuffer = await this.processImage(imageBuffer, {\r\n\t\t\t\t\t\twidth: width ? Number(width) : undefined,\r\n\t\t\t\t\t\theight: height ? Number(height) : undefined,\r\n\t\t\t\t\t\tquality: quality ? Number(quality) : undefined,\r\n\t\t\t\t\t\tformat,\r\n\t\t\t\t\t\tfit,\r\n\t\t\t\t\t\tposition,\r\n\t\t\t\t\t\tbackground,\r\n\t\t\t\t\t\ttrimThreshold: trimThreshold ? Number(trimThreshold) : undefined,\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tawait this.updateProgress(job, 75, 'Caching result')\r\n\r\n\t\t\t\t\tconst metadata = new ResourceMetaData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tsize: processedBuffer.length.toString(),\r\n\t\t\t\t\t\tformat: format || 'webp',\r\n\t\t\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tawait this.cacheManager.set('image', cacheKey, {\r\n\t\t\t\t\t\tdata: processedBuffer,\r\n\t\t\t\t\t\tmetadata,\r\n\t\t\t\t\t}, metadata.privateTTL)\r\n\r\n\t\t\t\t\tconst basePath = cwd()\r\n\t\t\t\t\tconst resourcePath = join(basePath, 'storage', `${cacheKey}.rsc`)\r\n\t\t\t\t\tconst metadataPath = join(basePath, 'storage', `${cacheKey}.rsm`)\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tawait Promise.all([\r\n\t\t\t\t\t\t\twriteFile(resourcePath, processedBuffer),\r\n\t\t\t\t\t\t\twriteFile(metadataPath, JSON.stringify(metadata), 'utf8'),\r\n\t\t\t\t\t\t])\r\n\t\t\t\t\t\tthis._logger.debug(`Saved processed image to filesystem: ${resourcePath}`)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (fsError) {\r\n\t\t\t\t\t\tthis._logger.warn(`Failed to save to filesystem: ${(fsError as Error).message}`)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tawait this.updateProgress(job, 100, 'Completed')\r\n\r\n\t\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\t\tthis._logger.debug(`Image processing completed for job ${job.id} in ${processingTime}ms`)\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\tdata: processedBuffer,\r\n\t\t\t\t\t\tprocessingTime,\r\n\t\t\t\t\t\tcacheHit: false,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\t\tthis._logger.error(`Image processing failed for job ${job.id}:`, error)\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\terror: (error as Error).message,\r\n\t\t\t\t\t\tprocessingTime,\r\n\t\t\t\t\t\tcacheHit: false,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t)\r\n\t}\r\n\r\n\tprivate async downloadImage(url: string): Promise<Buffer> {\r\n\t\ttry {\r\n\t\t\tconst response = await this.httpClient.get(url, {\r\n\t\t\t\tresponseType: 'arraybuffer',\r\n\t\t\t\ttimeout: 30000,\r\n\t\t\t})\r\n\r\n\t\t\treturn Buffer.from(response.data)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error(`Failed to download image from ${url}:`, error)\r\n\t\t\tthrow new Error(`Failed to download image: ${(error as Error).message}`)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async processImage(\r\n\t\tbuffer: Buffer,\r\n\t\toptions: {\r\n\t\t\twidth?: number\r\n\t\t\theight?: number\r\n\t\t\tquality?: number\r\n\t\t\tformat?: string\r\n\t\t\tfit?: string\r\n\t\t\tposition?: string\r\n\t\t\tbackground?: any\r\n\t\t\ttrimThreshold?: number\r\n\t\t},\r\n\t): Promise<Buffer> {\r\n\t\tlet pipeline: sharp.Sharp | null = null\r\n\t\ttry {\r\n\t\t\tpipeline = sharp(buffer, {\r\n\t\t\t\tfailOn: 'none',\r\n\t\t\t\tlimitInputPixels: 268402689,\r\n\t\t\t\tsequentialRead: true,\r\n\t\t\t\tdensity: 72,\r\n\t\t\t})\r\n\r\n\t\t\tif (options.trimThreshold !== undefined && options.trimThreshold > 0) {\r\n\t\t\t\tpipeline = pipeline.trim({\r\n\t\t\t\t\tbackground: options.background,\r\n\t\t\t\t\tthreshold: options.trimThreshold,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (options.width || options.height) {\r\n\t\t\t\tconst resizeOptions: any = {\r\n\t\t\t\t\tfastShrinkOnLoad: true,\r\n\t\t\t\t\tkernel: 'lanczos3',\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (options.width)\r\n\t\t\t\t\tresizeOptions.width = options.width\r\n\t\t\t\tif (options.height)\r\n\t\t\t\t\tresizeOptions.height = options.height\r\n\t\t\t\tif (options.fit)\r\n\t\t\t\t\tresizeOptions.fit = options.fit\r\n\t\t\t\tif (options.position)\r\n\t\t\t\t\tresizeOptions.position = options.position\r\n\t\t\t\tif (options.background)\r\n\t\t\t\t\tresizeOptions.background = options.background\r\n\r\n\t\t\t\tthis._logger.debug('Applying Sharp resize with options:', resizeOptions)\r\n\t\t\t\tpipeline = pipeline.resize(resizeOptions)\r\n\t\t\t}\r\n\r\n\t\t\tconst qual = options.quality || 80\r\n\r\n\t\t\tswitch (options.format) {\r\n\t\t\t\tcase 'webp':\r\n\t\t\t\t\tpipeline = pipeline.webp({\r\n\t\t\t\t\t\tquality: qual,\r\n\t\t\t\t\t\tsmartSubsample: true,\r\n\t\t\t\t\t\tnearLossless: true,\r\n\t\t\t\t\t})\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'jpeg':\r\n\t\t\t\tcase 'jpg':\r\n\t\t\t\t\tpipeline = pipeline.jpeg({\r\n\t\t\t\t\t\tquality: qual,\r\n\t\t\t\t\t\tprogressive: true,\r\n\t\t\t\t\t\toptimizeCoding: true,\r\n\t\t\t\t\t\tmozjpeg: true,\r\n\t\t\t\t\t\ttrellisQuantisation: true,\r\n\t\t\t\t\t\tovershootDeringing: true,\r\n\t\t\t\t\t})\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'png':\r\n\t\t\t\t\tpipeline = pipeline.png({\r\n\t\t\t\t\t\tquality: qual,\r\n\t\t\t\t\t\tcompressionLevel: 6,\r\n\t\t\t\t\t\tadaptiveFiltering: true,\r\n\t\t\t\t\t\tpalette: qual < 95,\r\n\t\t\t\t\t})\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'avif':\r\n\t\t\t\t\tpipeline = pipeline.avif({\r\n\t\t\t\t\t\tquality: Math.min(qual, 75),\r\n\t\t\t\t\t\teffort: 4,\r\n\t\t\t\t\t\tchromaSubsampling: '4:2:0',\r\n\t\t\t\t\t})\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tpipeline = pipeline.webp({\r\n\t\t\t\t\t\tquality: 80,\r\n\t\t\t\t\t\teffort: 4,\r\n\t\t\t\t\t\tsmartSubsample: true,\r\n\t\t\t\t\t})\r\n\t\t\t\t\tbreak\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await pipeline\r\n\t\t\t\t.withMetadata({ density: 72 })\r\n\t\t\t\t.toBuffer()\r\n\r\n\t\t\tif (pipeline) {\r\n\t\t\t\tpipeline.destroy()\r\n\t\t\t}\r\n\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tif (pipeline) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tpipeline.destroy()\r\n\t\t\t\t}\r\n\t\t\t\tcatch {}\r\n\t\t\t}\r\n\t\t\tthis._logger.error('Failed to process image:', error)\r\n\t\t\tthrow new Error(`Image processing failed: ${(error as Error).message}`)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async updateProgress(job: Job, progress: number, message: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\t// Note: This would need to be implemented based on the actual Bull job instance\r\n\t\t\t// For now, we'll just log the progress\r\n\t\t\tthis._logger.debug(`Job ${job.id} progress: ${progress}% - ${message}`)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.warn(`Failed to update job progress: ${(error as Error).message}`)\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["Buffer","writeFile","join","cwd","hrtime","MultiLayerCacheManager","CorrelationService","ResourceMetaData","HttpClientService","Injectable","Logger","sharp","ImageProcessingProcessor","process","job","startTime","Date","now","imageUrl","width","height","quality","format","cacheKey","correlationId","fit","position","background","trimThreshold","data","processedCount","globalThis","gc","_logger","debug","_correlationService","runWithContext","timestamp","clientIp","method","url","id","bigint","cached","cacheManager","get","success","processingTime","cacheHit","updateProgress","imageBuffer","downloadImage","processedBuffer","processImage","Number","undefined","metadata","version","size","length","toString","dateCreated","publicTTL","privateTTL","set","basePath","resourcePath","metadataPath","Promise","all","JSON","stringify","fsError","warn","message","error","response","httpClient","responseType","timeout","from","Error","buffer","options","pipeline","failOn","limitInputPixels","sequentialRead","density","trim","threshold","resizeOptions","fastShrinkOnLoad","kernel","resize","qual","webp","smartSubsample","nearLossless","jpeg","progressive","optimizeCoding","mozjpeg","trellisQuantisation","overshootDeringing","png","compressionLevel","adaptiveFiltering","palette","avif","Math","min","effort","chromaSubsampling","result","withMetadata","toBuffer","destroy","progress","name","cache","memory","files","items","concurrency","MAX_SHARP_INSTANCES","simd"],"mappings":"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"}