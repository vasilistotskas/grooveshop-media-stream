{"version":3,"sources":["../../../../../src/MediaStream/Queue/processors/cache-operations.processor.ts"],"sourcesContent":["import type { Job } from '../interfaces/job-queue.interface'\r\nimport type { CacheCleanupJobData, CacheWarmingJobData, JobResult } from '../types/job.types'\r\nimport { Buffer } from 'node:buffer'\r\nimport * as fs from 'node:fs/promises'\r\nimport * as path from 'node:path'\r\nimport * as process from 'node:process'\r\nimport { MultiLayerCacheManager } from '@microservice/Cache/services/multi-layer-cache.manager'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { HttpClientService } from '@microservice/HTTP/services/http-client.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\n\r\n@Injectable()\r\nexport class CacheOperationsProcessor {\r\n\tprivate readonly _logger = new Logger(CacheOperationsProcessor.name)\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _correlationService: CorrelationService,\r\n\t\tprivate readonly cacheManager: MultiLayerCacheManager,\r\n\t\tprivate readonly httpClient: HttpClientService,\r\n\t) {}\r\n\r\n\tasync processCacheWarming(job: Job<CacheWarmingJobData>): Promise<JobResult> {\r\n\t\tconst startTime = Date.now()\r\n\t\tconst { imageUrls, batchSize = 5, correlationId } = job.data\r\n\r\n\t\treturn this._correlationService.runWithContext(\r\n\t\t\t{\r\n\t\t\t\tcorrelationId,\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tclientIp: 'queue-worker',\r\n\t\t\t\tmethod: 'JOB',\r\n\t\t\t\turl: `/queue/cache-warming/${job.id}`,\r\n\t\t\t\tstartTime: process.hrtime.bigint(),\r\n\t\t\t},\r\n\t\t\tasync () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthis._logger.debug(`Starting cache warming job ${job.id} for ${imageUrls.length} images`)\r\n\r\n\t\t\t\t\tlet processed = 0\r\n\t\t\t\t\tlet successful = 0\r\n\t\t\t\t\tlet failed = 0\r\n\r\n\t\t\t\t\tfor (let i = 0; i < imageUrls.length; i += batchSize) {\r\n\t\t\t\t\t\tconst batch = imageUrls.slice(i, i + batchSize)\r\n\r\n\t\t\t\t\t\tconst batchPromises = batch.map(async (url) => {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tawait this.warmCacheForImage(url)\r\n\t\t\t\t\t\t\t\tsuccessful++\r\n\t\t\t\t\t\t\t\treturn true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\t\t\t\tthis._logger.warn(`Failed to warm cache for ${url}:`, error)\r\n\t\t\t\t\t\t\t\tfailed++\r\n\t\t\t\t\t\t\t\treturn false\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\tawait Promise.allSettled(batchPromises)\r\n\t\t\t\t\t\tprocessed += batch.length\r\n\r\n\t\t\t\t\t\tconst progress = Math.round((processed / imageUrls.length) * 100)\r\n\t\t\t\t\t\tthis._logger.debug(`Cache warming progress: ${progress}% (${processed}/${imageUrls.length})`)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\t\tthis._logger.log(`Cache warming completed: ${successful} successful, ${failed} failed in ${processingTime}ms`)\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\tdata: { successful, failed, total: imageUrls.length },\r\n\t\t\t\t\t\tprocessingTime,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\t\tthis._logger.error(`Cache warming job ${job.id} failed:`, error)\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\terror: (error as Error).message,\r\n\t\t\t\t\t\tprocessingTime,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t)\r\n\t}\r\n\r\n\tasync processCacheCleanup(job: Job<CacheCleanupJobData>): Promise<JobResult> {\r\n\t\tconst startTime = Date.now()\r\n\t\tconst { maxAge, maxSize, correlationId } = job.data\r\n\r\n\t\treturn this._correlationService.runWithContext(\r\n\t\t\t{\r\n\t\t\t\tcorrelationId,\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tclientIp: 'queue-worker',\r\n\t\t\t\tmethod: 'JOB',\r\n\t\t\t\turl: `/queue/cache-cleanup/${job.id}`,\r\n\t\t\t\tstartTime: process.hrtime.bigint(),\r\n\t\t\t},\r\n\t\t\tasync () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthis._logger.debug(`Starting cache cleanup job ${job.id}`)\r\n\r\n\t\t\t\t\tconst cleanupResults = await Promise.allSettled([\r\n\t\t\t\t\t\tthis.cleanupMemoryCache(),\r\n\t\t\t\t\t\tthis.cleanupFileCache(maxAge, maxSize),\r\n\t\t\t\t\t])\r\n\r\n\t\t\t\t\tlet totalCleaned = 0\r\n\t\t\t\t\tconst errors: string[] = []\r\n\r\n\t\t\t\t\tcleanupResults.forEach((result, index) => {\r\n\t\t\t\t\t\tif (result.status === 'fulfilled') {\r\n\t\t\t\t\t\t\ttotalCleaned += result.value.cleaned\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tconst operation = index === 0 ? 'memory cache' : 'file cache'\r\n\t\t\t\t\t\t\terrors.push(`${operation}: ${result.reason.message}`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tconst processingTime = Date.now() - startTime\r\n\r\n\t\t\t\t\tif (errors.length > 0) {\r\n\t\t\t\t\t\tthis._logger.warn(`Cache cleanup completed with errors: ${errors.join(', ')}`)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._logger.log(`Cache cleanup completed: ${totalCleaned} items cleaned in ${processingTime}ms`)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsuccess: errors.length === 0,\r\n\t\t\t\t\t\tdata: { cleaned: totalCleaned, errors },\r\n\t\t\t\t\t\tprocessingTime,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tconst processingTime = Date.now() - startTime\r\n\t\t\t\t\tthis._logger.error(`Cache cleanup job ${job.id} failed:`, error)\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\terror: (error as Error).message,\r\n\t\t\t\t\t\tprocessingTime,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t)\r\n\t}\r\n\r\n\tprivate async warmCacheForImage(imageUrl: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst cacheKey = this.generateCacheKey(imageUrl)\r\n\r\n\t\t\tconst cached = await this.cacheManager.get('images', cacheKey)\r\n\t\t\tif (cached) {\r\n\t\t\t\tthis._logger.debug(`Image already cached: ${imageUrl}`)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tconst response = await this.httpClient.get(imageUrl, {\r\n\t\t\t\tresponseType: 'arraybuffer',\r\n\t\t\t\ttimeout: 30000,\r\n\t\t\t})\r\n\r\n\t\t\tconst buffer = Buffer.from(response.data)\r\n\t\t\tawait this.cacheManager.set('images', cacheKey, buffer.toString('base64'), 3600)\r\n\r\n\t\t\tthis._logger.debug(`Cached image: ${imageUrl}`)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthrow new Error(`Failed to warm cache for ${imageUrl}: ${(error as Error).message}`)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async cleanupMemoryCache(): Promise<{ cleaned: number }> {\r\n\t\ttry {\r\n\t\t\tawait this.cacheManager.getStats()\r\n\r\n\t\t\t// In a real implementation, this would be more sophisticated\r\n\t\t\tconst cleaned = 0\r\n\r\n\t\t\tthis._logger.debug(`Memory cache cleanup completed: ${cleaned} items cleaned`)\r\n\t\t\treturn { cleaned }\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthrow new Error(`Memory cache cleanup failed: ${(error as Error).message}`)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async cleanupFileCache(maxAge: number, maxSize: number): Promise<{ cleaned: number }> {\r\n\t\ttry {\r\n\t\t\tconst cacheDir = path.join(process.cwd(), 'storage')\r\n\t\t\tlet cleaned = 0\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst files = await fs.readdir(cacheDir)\r\n\t\t\t\tconst now = Date.now()\r\n\r\n\t\t\t\tfor (const file of files) {\r\n\t\t\t\t\tconst filePath = path.join(cacheDir, file)\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst stats = await fs.stat(filePath)\r\n\r\n\t\t\t\t\t\tconst age = now - stats.mtime.getTime()\r\n\t\t\t\t\t\tif (age > maxAge) {\r\n\t\t\t\t\t\t\tawait fs.unlink(filePath)\r\n\t\t\t\t\t\t\tcleaned++\r\n\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (stats.size > maxSize) {\r\n\t\t\t\t\t\t\tawait fs.unlink(filePath)\r\n\t\t\t\t\t\t\tcleaned++\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (fileError) {\r\n\t\t\t\t\t\tthis._logger.warn(`Failed to process file ${file}:`, fileError)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (dirError) {\r\n\t\t\t\tif ((dirError as any).code !== 'ENOENT') {\r\n\t\t\t\t\tthrow dirError\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._logger.debug(`File cache cleanup completed: ${cleaned} files cleaned`)\r\n\t\t\treturn { cleaned }\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthrow new Error(`File cache cleanup failed: ${(error as Error).message}`)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate generateCacheKey(imageUrl: string): string {\r\n\t\t// Simple cache key generation - in real implementation this would be more sophisticated\r\n\t\tconst hash = Buffer.from(imageUrl).toString('base64').replace(/[/+=]/g, '')\r\n\t\treturn `image:${hash}`\r\n\t}\r\n}\r\n"],"names":["Buffer","fs","path","process","MultiLayerCacheManager","CorrelationService","HttpClientService","Injectable","Logger","CacheOperationsProcessor","_correlationService","cacheManager","httpClient","_logger","name","processCacheWarming","job","startTime","Date","now","imageUrls","batchSize","correlationId","data","runWithContext","timestamp","clientIp","method","url","id","hrtime","bigint","debug","length","processed","successful","failed","i","batch","slice","batchPromises","map","warmCacheForImage","error","warn","Promise","allSettled","progress","Math","round","processingTime","log","success","total","message","processCacheCleanup","maxAge","maxSize","cleanupResults","cleanupMemoryCache","cleanupFileCache","totalCleaned","errors","forEach","result","index","status","value","cleaned","operation","push","reason","join","imageUrl","cacheKey","generateCacheKey","cached","get","response","responseType","timeout","buffer","from","set","toString","Error","getStats","cacheDir","cwd","files","readdir","file","filePath","stats","stat","age","mtime","getTime","unlink","size","fileError","dirError","code","hash","replace"],"mappings":"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"}