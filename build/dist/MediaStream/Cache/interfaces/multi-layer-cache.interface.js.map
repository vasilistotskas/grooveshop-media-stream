{"version":3,"sources":["../../../../../src/MediaStream/Cache/interfaces/multi-layer-cache.interface.ts"],"sourcesContent":["export interface CacheLayer {\r\n\tname: string\r\n\tpriority: number\r\n\tget: <T>(key: string) => Promise<T | null>\r\n\tset: <T>(key: string, value: T, ttl?: number) => Promise<void>\r\n\tdelete: (key: string) => Promise<void>\r\n\tclear: () => Promise<void>\r\n\thas: (key: string) => Promise<boolean>\r\n\tgetStats: () => Promise<CacheStats>\r\n}\r\n\r\nexport interface CacheStats {\r\n\thits: number\r\n\tmisses: number\r\n\tkeys: number\r\n\tksize: number\r\n\tvsize: number\r\n\thitRate: number\r\n}\r\n\r\nexport interface CacheKeyStrategy {\r\n\tgenerateKey: (operation: string, params: Record<string, any>) => string\r\n\tparseKey: (key: string) => { operation: string, hash: string }\r\n}\r\n\r\nexport interface CacheInvalidationStrategy {\r\n\tshouldInvalidate: (key: string, operation: string) => boolean\r\n\tgetRelatedKeys: (key: string) => string[]\r\n}\r\n\r\nexport interface CachePreloadingStrategy {\r\n\tshouldPreload: (key: string) => boolean\r\n\tgetPreloadKeys: () => Promise<string[]>\r\n\tpreloadData: (key: string) => Promise<any>\r\n}\r\n\r\nexport interface MultiLayerCacheConfig {\r\n\tlayers: {\r\n\t\tmemory: {\r\n\t\t\tenabled: boolean\r\n\t\t\tpriority: number\r\n\t\t\tmaxSize: number\r\n\t\t\tttl: number\r\n\t\t}\r\n\t\tredis: {\r\n\t\t\tenabled: boolean\r\n\t\t\tpriority: number\r\n\t\t\tttl: number\r\n\t\t}\r\n\t\tfile: {\r\n\t\t\tenabled: boolean\r\n\t\t\tpriority: number\r\n\t\t\tttl: number\r\n\t\t}\r\n\t}\r\n\tkeyStrategy: {\r\n\t\tprefix: string\r\n\t\tseparator: string\r\n\t\thashAlgorithm: string\r\n\t}\r\n\tinvalidation: {\r\n\t\tenabled: boolean\r\n\t\tpatterns: string[]\r\n\t}\r\n\tpreloading: {\r\n\t\tenabled: boolean\r\n\t\tpopularThreshold: number\r\n\t\tmaxPreloadKeys: number\r\n\t}\r\n}\n"],"names":[],"mappings":"AAoCA,WAiCC"}