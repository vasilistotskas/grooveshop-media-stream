{"version":3,"sources":["../../../../../src/MediaStream/Cache/indicators/redis-health.indicator.ts"],"sourcesContent":["import type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { BaseHealthIndicator } from '@microservice/Health/base/base-health-indicator'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { RedisCacheService } from '../services/redis-cache.service'\r\n\r\n@Injectable()\r\nexport class RedisHealthIndicator extends BaseHealthIndicator {\r\n\tconstructor(\r\n\t\tprivate readonly redisCacheService: RedisCacheService,\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t) {\r\n\t\tsuper('redis')\r\n\t}\r\n\r\n\tprotected async performHealthCheck(): Promise<HealthIndicatorResult> {\r\n\t\tconst startTime = Date.now()\r\n\r\n\t\ttry {\r\n\t\t\tconst pingResult = await this.redisCacheService.ping()\r\n\t\t\tif (pingResult !== 'PONG') {\r\n\t\t\t\tthrow new Error(`Redis ping failed: ${pingResult}`)\r\n\t\t\t}\r\n\r\n\t\t\tconst testKey = 'health-check-redis-test'\r\n\t\t\tconst testValue = { timestamp: Date.now(), test: true }\r\n\r\n\t\t\tawait this.redisCacheService.set(testKey, testValue, 60)\r\n\r\n\t\t\tconst retrievedValue = await this.redisCacheService.get<{ timestamp: number, test: boolean }>(testKey)\r\n\t\t\tif (!retrievedValue || retrievedValue.timestamp !== testValue.timestamp) {\r\n\t\t\t\tthrow new Error('Redis GET operation failed')\r\n\t\t\t}\r\n\r\n\t\t\tconst ttl = await this.redisCacheService.getTtl(testKey)\r\n\t\t\tif (ttl <= 0 || ttl > 60) {\r\n\t\t\t\tthrow new Error(`Redis TTL operation failed: ${ttl}`)\r\n\t\t\t}\r\n\r\n\t\t\tawait this.redisCacheService.delete(testKey)\r\n\r\n\t\t\tconst deletedValue = await this.redisCacheService.get(testKey)\r\n\t\t\tif (deletedValue !== null) {\r\n\t\t\t\tthrow new Error('Redis DELETE operation failed')\r\n\t\t\t}\r\n\r\n\t\t\tconst stats = await this.redisCacheService.getStats()\r\n\t\t\tconst memoryUsage = await this.redisCacheService.getMemoryUsage()\r\n\t\t\tconst connectionStatus = this.redisCacheService.getConnectionStatus()\r\n\r\n\t\t\tconst responseTime = Date.now() - startTime\r\n\t\t\tconst isHealthy = connectionStatus.connected && responseTime <= 200\r\n\r\n\t\t\tconst result: HealthIndicatorResult = {\r\n\t\t\t\t[this.key]: {\r\n\t\t\t\t\tstatus: isHealthy ? 'up' : 'down',\r\n\t\t\t\t\tresponseTime: `${responseTime}ms`,\r\n\t\t\t\t\tconnection: {\r\n\t\t\t\t\t\tconnected: connectionStatus.connected,\r\n\t\t\t\t\t\thost: this._configService.get('cache.redis.host'),\r\n\t\t\t\t\t\tport: this._configService.get('cache.redis.port'),\r\n\t\t\t\t\t\tdb: this._configService.get('cache.redis.db'),\r\n\t\t\t\t\t},\r\n\t\t\t\t\tstatistics: {\r\n\t\t\t\t\t\thits: stats.hits,\r\n\t\t\t\t\t\tmisses: stats.misses,\r\n\t\t\t\t\t\thitRate: Math.round(stats.hitRate * 10000) / 100,\r\n\t\t\t\t\t\tkeys: stats.keys,\r\n\t\t\t\t\t\toperations: connectionStatus.stats.operations,\r\n\t\t\t\t\t\terrors: connectionStatus.stats.errors,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmemory: {\r\n\t\t\t\t\t\tused: memoryUsage.used,\r\n\t\t\t\t\t\tpeak: memoryUsage.peak,\r\n\t\t\t\t\t\tfragmentation: memoryUsage.fragmentation,\r\n\t\t\t\t\t\tusedMB: Math.round(memoryUsage.used / 1024 / 1024 * 100) / 100,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tthresholds: {\r\n\t\t\t\t\t\tresponseTime: '200ms',\r\n\t\t\t\t\t\thitRate: '70%',\r\n\t\t\t\t\t\tmemoryFragmentation: '1.5',\r\n\t\t\t\t\t},\r\n\t\t\t\t\twarnings: this.generateWarnings(stats, memoryUsage, responseTime, connectionStatus.stats.errors),\r\n\t\t\t\t},\r\n\t\t\t}\r\n\r\n\t\t\tif (isHealthy) {\r\n\t\t\t\tCorrelatedLogger.debug(`Redis health check passed in ${responseTime}ms`, RedisHealthIndicator.name)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tCorrelatedLogger.warn(`Redis health check failed: response time ${responseTime}ms, connected ${connectionStatus.connected}`, RedisHealthIndicator.name)\r\n\t\t\t}\r\n\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst responseTime = Date.now() - startTime\r\n\t\t\tCorrelatedLogger.error(`Redis health check failed: ${(error as Error).message}`, (error as Error).stack, RedisHealthIndicator.name)\r\n\r\n\t\t\treturn {\r\n\t\t\t\t[this.key]: {\r\n\t\t\t\t\tstatus: 'down',\r\n\t\t\t\t\terror: (error as Error).message,\r\n\t\t\t\t\tresponseTime: `${responseTime}ms`,\r\n\t\t\t\t\tconnection: {\r\n\t\t\t\t\t\tconnected: false,\r\n\t\t\t\t\t\thost: this._configService.get('cache.redis.host'),\r\n\t\t\t\t\t\tport: this._configService.get('cache.redis.port'),\r\n\t\t\t\t\t\tdb: this._configService.get('cache.redis.db'),\r\n\t\t\t\t\t},\r\n\t\t\t\t\tlastCheck: new Date().toISOString(),\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate generateWarnings(stats: any, memoryUsage: any, responseTime: number, errors: number = 0): string[] {\r\n\t\tconst warnings: string[] = []\r\n\r\n\t\tif (responseTime > 100) {\r\n\t\t\twarnings.push(`Response time (${responseTime}ms) is slower than optimal (100ms)`)\r\n\t\t}\r\n\r\n\t\tif (stats.hitRate < 0.7) {\r\n\t\t\twarnings.push(`Cache hit rate (${Math.round(stats.hitRate * 100)}%) is below optimal (70%)`)\r\n\t\t}\r\n\r\n\t\tif (memoryUsage.fragmentation > 1.5) {\r\n\t\t\twarnings.push(`Memory fragmentation (${memoryUsage.fragmentation}) is high (>1.5)`)\r\n\t\t}\r\n\r\n\t\tif (errors > 0) {\r\n\t\t\twarnings.push(`Redis has recorded ${errors} errors`)\r\n\t\t}\r\n\r\n\t\tconst memoryUsageMB = memoryUsage.used / 1024 / 1024\r\n\t\tif (memoryUsageMB > 100) {\r\n\t\t\twarnings.push(`Memory usage (${Math.round(memoryUsageMB)}MB) is high`)\r\n\t\t}\r\n\r\n\t\treturn warnings\r\n\t}\r\n\r\n\tasync getDetailedStatus(): Promise<any> {\r\n\t\ttry {\r\n\t\t\tconst stats = await this.redisCacheService.getStats()\r\n\t\t\tconst memoryUsage = await this.redisCacheService.getMemoryUsage()\r\n\t\t\tconst connectionStatus = this.redisCacheService.getConnectionStatus()\r\n\t\t\tconst keys = await this.redisCacheService.keys()\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'redis-cache',\r\n\t\t\t\tstatus: connectionStatus.connected ? 'operational' : 'disconnected',\r\n\t\t\t\tconnection: {\r\n\t\t\t\t\tconnected: connectionStatus.connected,\r\n\t\t\t\t\thost: this._configService.get('cache.redis.host'),\r\n\t\t\t\t\tport: this._configService.get('cache.redis.port'),\r\n\t\t\t\t\tdb: this._configService.get('cache.redis.db'),\r\n\t\t\t\t},\r\n\t\t\t\tstatistics: {\r\n\t\t\t\t\t...stats,\r\n\t\t\t\t\toperations: connectionStatus.stats.operations,\r\n\t\t\t\t\terrors: connectionStatus.stats.errors,\r\n\t\t\t\t},\r\n\t\t\t\tmemory: {\r\n\t\t\t\t\t...memoryUsage,\r\n\t\t\t\t\tusedMB: Math.round(memoryUsage.used / 1024 / 1024 * 100) / 100,\r\n\t\t\t\t\tpeakMB: Math.round(memoryUsage.peak / 1024 / 1024 * 100) / 100,\r\n\t\t\t\t},\r\n\t\t\t\tconfiguration: {\r\n\t\t\t\t\thost: this._configService.get('cache.redis.host'),\r\n\t\t\t\t\tport: this._configService.get('cache.redis.port'),\r\n\t\t\t\t\tdb: this._configService.get('cache.redis.db'),\r\n\t\t\t\t\tttl: this._configService.get('cache.redis.ttl'),\r\n\t\t\t\t\tmaxRetries: this._configService.get('cache.redis.maxRetries'),\r\n\t\t\t\t},\r\n\t\t\t\trecentKeys: keys.slice(0, 10),\r\n\t\t\t\tlastUpdated: new Date().toISOString(),\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'redis-cache',\r\n\t\t\t\tstatus: 'error',\r\n\t\t\t\terror: (error as Error).message,\r\n\t\t\t\tlastUpdated: new Date().toISOString(),\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getDescription(): string {\r\n\t\treturn 'Redis cache health indicator that tests connection and basic operations'\r\n\t}\r\n}\r\n"],"names":["ConfigService","CorrelatedLogger","BaseHealthIndicator","Injectable","RedisCacheService","RedisHealthIndicator","performHealthCheck","startTime","Date","now","pingResult","redisCacheService","ping","Error","testKey","testValue","timestamp","test","set","retrievedValue","get","ttl","getTtl","delete","deletedValue","stats","getStats","memoryUsage","getMemoryUsage","connectionStatus","getConnectionStatus","responseTime","isHealthy","connected","result","key","status","connection","host","_configService","port","db","statistics","hits","misses","hitRate","Math","round","keys","operations","errors","memory","used","peak","fragmentation","usedMB","thresholds","memoryFragmentation","warnings","generateWarnings","debug","name","warn","error","message","stack","lastCheck","toISOString","push","memoryUsageMB","getDetailedStatus","type","peakMB","configuration","maxRetries","recentKeys","slice","lastUpdated","getDescription"],"mappings":"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"}