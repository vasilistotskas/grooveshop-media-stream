{"version":3,"sources":["../../../../../src/MediaStream/Cache/indicators/cache-health.indicator.ts"],"sourcesContent":["import type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { BaseHealthIndicator } from '@microservice/Health/base/base-health-indicator'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { CacheWarmingService } from '../services/cache-warming.service'\r\nimport { MemoryCacheService } from '../services/memory-cache.service'\r\n\r\n@Injectable()\r\nexport class CacheHealthIndicator extends BaseHealthIndicator {\r\n\tconstructor(\r\n\t\tprivate readonly memoryCacheService: MemoryCacheService,\r\n\t\tprivate readonly cacheWarmingService: CacheWarmingService,\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t) {\r\n\t\tsuper('cache')\r\n\t}\r\n\r\n\tprotected async performHealthCheck(): Promise<HealthIndicatorResult> {\r\n\t\tconst startTime = Date.now()\r\n\r\n\t\ttry {\r\n\t\t\tconst testKey = 'health-check-test'\r\n\t\t\tconst testValue = { timestamp: Date.now(), test: true }\r\n\r\n\t\t\tawait this.memoryCacheService.set(testKey, testValue, 60)\r\n\r\n\t\t\tconst retrievedValue = await this.memoryCacheService.get<{ timestamp: number, test: boolean }>(testKey)\r\n\t\t\tif (!retrievedValue || retrievedValue.timestamp !== testValue.timestamp) {\r\n\t\t\t\tthrow new Error('Cache GET operation failed')\r\n\t\t\t}\r\n\r\n\t\t\tawait this.memoryCacheService.delete(testKey)\r\n\r\n\t\t\tconst deletedValue = await this.memoryCacheService.get(testKey)\r\n\t\t\tif (deletedValue !== null) {\r\n\t\t\t\tthrow new Error('Cache DELETE operation failed')\r\n\t\t\t}\r\n\r\n\t\t\tconst stats = await this.memoryCacheService.getStats()\r\n\t\t\tconst memoryUsage = this.memoryCacheService.getMemoryUsage()\r\n\t\t\tconst warmupStats = await this.cacheWarmingService.getWarmupStats()\r\n\r\n\t\t\tconst memoryUsagePercent = (memoryUsage.used / memoryUsage.total) * 100\r\n\t\t\tconst memoryThreshold = this._configService.get('cache.memory.warningThreshold') || 80\r\n\r\n\t\t\tconst responseTime = Date.now() - startTime\r\n\t\t\tconst isHealthy = responseTime < 100 && memoryUsagePercent < 90\r\n\r\n\t\t\tconst result: HealthIndicatorResult = {\r\n\t\t\t\t[this.key]: {\r\n\t\t\t\t\tstatus: isHealthy ? 'up' : 'down',\r\n\t\t\t\t\tresponseTime: `${responseTime}ms`,\r\n\t\t\t\t\tmemory: {\r\n\t\t\t\t\t\tused: memoryUsage.used,\r\n\t\t\t\t\t\ttotal: memoryUsage.total,\r\n\t\t\t\t\t\tusagePercent: Math.round(memoryUsagePercent * 100) / 100,\r\n\t\t\t\t\t\twarning: memoryUsagePercent > memoryThreshold,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tstatistics: {\r\n\t\t\t\t\t\thits: stats.hits,\r\n\t\t\t\t\t\tmisses: stats.misses,\r\n\t\t\t\t\t\thitRate: Math.round(stats.hitRate * 10000) / 100,\r\n\t\t\t\t\t\tkeys: stats.keys,\r\n\t\t\t\t\t\tkeySize: stats.ksize,\r\n\t\t\t\t\t\tvalueSize: stats.vsize,\r\n\t\t\t\t\t},\r\n\t\t\t\t\twarming: {\r\n\t\t\t\t\t\tenabled: warmupStats.enabled,\r\n\t\t\t\t\t\tfilesWarmed: warmupStats.filesWarmed,\r\n\t\t\t\t\t\tcacheSize: warmupStats.cacheSize,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tthresholds: {\r\n\t\t\t\t\t\tresponseTime: '100ms',\r\n\t\t\t\t\t\tmemoryUsage: `${memoryThreshold}%`,\r\n\t\t\t\t\t\thitRate: '70%',\r\n\t\t\t\t\t},\r\n\t\t\t\t\twarnings: this.generateWarnings(stats, memoryUsagePercent, memoryThreshold),\r\n\t\t\t\t},\r\n\t\t\t}\r\n\r\n\t\t\tif (isHealthy) {\r\n\t\t\t\tCorrelatedLogger.debug(`Cache health check passed in ${responseTime}ms`, CacheHealthIndicator.name)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tCorrelatedLogger.warn(`Cache health check failed: response time ${responseTime}ms, memory usage ${memoryUsagePercent}%`, CacheHealthIndicator.name)\r\n\t\t\t}\r\n\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst responseTime = Date.now() - startTime\r\n\t\t\tCorrelatedLogger.error(`Cache health check failed: ${(error as Error).message}`, (error as Error).stack, CacheHealthIndicator.name)\r\n\r\n\t\t\treturn {\r\n\t\t\t\t[this.key]: {\r\n\t\t\t\t\tstatus: 'down',\r\n\t\t\t\t\terror: (error as Error).message,\r\n\t\t\t\t\tresponseTime: `${responseTime}ms`,\r\n\t\t\t\t\tlastCheck: new Date().toISOString(),\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate generateWarnings(stats: any, memoryUsagePercent: number, memoryThreshold: number): string[] {\r\n\t\tconst warnings: string[] = []\r\n\r\n\t\tif (memoryUsagePercent > memoryThreshold) {\r\n\t\t\twarnings.push(`Memory usage (${memoryUsagePercent}%) exceeds threshold (${memoryThreshold}%)`)\r\n\t\t}\r\n\r\n\t\tif (stats.hitRate < 0.7) {\r\n\t\t\twarnings.push(`Cache hit rate (${Math.round(stats.hitRate * 100)}%) is below optimal (70%)`)\r\n\t\t}\r\n\r\n\t\tif (stats.keys > 900) {\r\n\t\t\twarnings.push(`Cache key count (${stats.keys}) is approaching limit`)\r\n\t\t}\r\n\r\n\t\treturn warnings\r\n\t}\r\n\r\n\tasync getDetailedStatus(): Promise<any> {\r\n\t\ttry {\r\n\t\t\tconst stats = await this.memoryCacheService.getStats()\r\n\t\t\tconst memoryUsage = this.memoryCacheService.getMemoryUsage()\r\n\t\t\tconst warmupStats = await this.cacheWarmingService.getWarmupStats()\r\n\t\t\tconst keys = await this.memoryCacheService.keys()\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'memory-cache',\r\n\t\t\t\tstatus: 'operational',\r\n\t\t\t\tstatistics: stats,\r\n\t\t\t\tmemory: memoryUsage,\r\n\t\t\t\twarming: warmupStats,\r\n\t\t\t\tconfiguration: {\r\n\t\t\t\t\tmaxKeys: this._configService.get('cache.memory.maxKeys') || 1000,\r\n\t\t\t\t\tdefaultTtl: this._configService.get('cache.memory.defaultTtl') || 3600,\r\n\t\t\t\t\tcheckPeriod: this._configService.get('cache.memory.checkPeriod') || 600,\r\n\t\t\t\t},\r\n\t\t\t\trecentKeys: keys.slice(0, 10),\r\n\t\t\t\tlastUpdated: new Date().toISOString(),\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'memory-cache',\r\n\t\t\t\tstatus: 'error',\r\n\t\t\t\terror: (error as Error).message,\r\n\t\t\t\tlastUpdated: new Date().toISOString(),\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getDescription(): string {\r\n\t\treturn 'Memory cache health indicator that tests cache operations and monitors memory usage'\r\n\t}\r\n}\r\n"],"names":["ConfigService","CorrelatedLogger","BaseHealthIndicator","Injectable","CacheWarmingService","MemoryCacheService","CacheHealthIndicator","performHealthCheck","startTime","Date","now","testKey","testValue","timestamp","test","memoryCacheService","set","retrievedValue","get","Error","delete","deletedValue","stats","getStats","memoryUsage","getMemoryUsage","warmupStats","cacheWarmingService","getWarmupStats","memoryUsagePercent","used","total","memoryThreshold","_configService","responseTime","isHealthy","result","key","status","memory","usagePercent","Math","round","warning","statistics","hits","misses","hitRate","keys","keySize","ksize","valueSize","vsize","warming","enabled","filesWarmed","cacheSize","thresholds","warnings","generateWarnings","debug","name","warn","error","message","stack","lastCheck","toISOString","push","getDetailedStatus","type","configuration","maxKeys","defaultTtl","checkPeriod","recentKeys","slice","lastUpdated","getDescription"],"mappings":"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"}