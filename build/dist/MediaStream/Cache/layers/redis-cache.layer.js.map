{"version":3,"sources":["../../../../../src/MediaStream/Cache/layers/redis-cache.layer.ts"],"sourcesContent":["import type { CacheLayer, CacheLayerStats } from '../interfaces/cache-layer.interface'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { RedisCacheService } from '../services/redis-cache.service'\r\n\r\n@Injectable()\r\nexport class RedisCacheLayer implements CacheLayer {\r\n\tprivate readonly layerName = 'redis'\r\n\tprivate readonly priority = 2\r\n\r\n\tconstructor(private readonly redisCacheService: RedisCacheService) {}\r\n\r\n\tasync get<T>(key: string): Promise<T | null> {\r\n\t\ttry {\r\n\t\t\treturn await this.redisCacheService.get<T>(key)\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n\r\n\tasync set<T>(key: string, value: T, ttl?: number): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait this.redisCacheService.set(key, value, ttl)\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\t// Silently fail for Redis layer\r\n\t\t}\r\n\t}\r\n\r\n\tasync delete(key: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait this.redisCacheService.delete(key)\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\t// Silently fail for Redis layer\r\n\t\t}\r\n\t}\r\n\r\n\tasync exists(key: string): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\treturn await this.redisCacheService.has(key)\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tasync clear(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait this.redisCacheService.clear()\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\t// Silently fail for Redis layer\r\n\t\t}\r\n\t}\r\n\r\n\tasync getStats(): Promise<CacheLayerStats> {\r\n\t\ttry {\r\n\t\t\tconst stats = await this.redisCacheService.getStats()\r\n\t\t\tconst connectionStatus = this.redisCacheService.getConnectionStatus()\r\n\t\t\treturn {\r\n\t\t\t\thits: stats.hits,\r\n\t\t\t\tmisses: stats.misses,\r\n\t\t\t\tkeys: stats.keys,\r\n\t\t\t\thitRate: stats.hitRate,\r\n\t\t\t\terrors: connectionStatus.stats.errors,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\treturn {\r\n\t\t\t\thits: 0,\r\n\t\t\t\tmisses: 0,\r\n\t\t\t\tkeys: 0,\r\n\t\t\t\thitRate: 0,\r\n\t\t\t\terrors: 1,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetLayerName(): string {\r\n\t\treturn this.layerName\r\n\t}\r\n\r\n\tgetPriority(): number {\r\n\t\treturn this.priority\r\n\t}\r\n}\r\n"],"names":["Injectable","RedisCacheService","RedisCacheLayer","get","key","redisCacheService","set","value","ttl","delete","exists","has","clear","getStats","stats","connectionStatus","getConnectionStatus","hits","misses","keys","hitRate","errors","getLayerName","layerName","getPriority","priority"],"mappings":";;;;;;;;;AACA,SAASA,UAAU,QAAQ,iBAAgB;AAC3C,SAASC,iBAAiB,QAAQ,qCAAiC;AAGnE,OAAO,MAAMC;IAMZ,MAAMC,IAAOC,GAAW,EAAqB;QAC5C,IAAI;YACH,OAAO,MAAM,IAAI,CAACC,iBAAiB,CAACF,GAAG,CAAIC;QAC5C,EACA,OAAM;YACL,OAAO;QACR;IACD;IAEA,MAAME,IAAOF,GAAW,EAAEG,KAAQ,EAAEC,GAAY,EAAiB;QAChE,IAAI;YACH,MAAM,IAAI,CAACH,iBAAiB,CAACC,GAAG,CAACF,KAAKG,OAAOC;QAC9C,EACA,OAAM;QACL,gCAAgC;QACjC;IACD;IAEA,MAAMC,OAAOL,GAAW,EAAiB;QACxC,IAAI;YACH,MAAM,IAAI,CAACC,iBAAiB,CAACI,MAAM,CAACL;QACrC,EACA,OAAM;QACL,gCAAgC;QACjC;IACD;IAEA,MAAMM,OAAON,GAAW,EAAoB;QAC3C,IAAI;YACH,OAAO,MAAM,IAAI,CAACC,iBAAiB,CAACM,GAAG,CAACP;QACzC,EACA,OAAM;YACL,OAAO;QACR;IACD;IAEA,MAAMQ,QAAuB;QAC5B,IAAI;YACH,MAAM,IAAI,CAACP,iBAAiB,CAACO,KAAK;QACnC,EACA,OAAM;QACL,gCAAgC;QACjC;IACD;IAEA,MAAMC,WAAqC;QAC1C,IAAI;YACH,MAAMC,QAAQ,MAAM,IAAI,CAACT,iBAAiB,CAACQ,QAAQ;YACnD,MAAME,mBAAmB,IAAI,CAACV,iBAAiB,CAACW,mBAAmB;YACnE,OAAO;gBACNC,MAAMH,MAAMG,IAAI;gBAChBC,QAAQJ,MAAMI,MAAM;gBACpBC,MAAML,MAAMK,IAAI;gBAChBC,SAASN,MAAMM,OAAO;gBACtBC,QAAQN,iBAAiBD,KAAK,CAACO,MAAM;YACtC;QACD,EACA,OAAM;YACL,OAAO;gBACNJ,MAAM;gBACNC,QAAQ;gBACRC,MAAM;gBACNC,SAAS;gBACTC,QAAQ;YACT;QACD;IACD;IAEAC,eAAuB;QACtB,OAAO,IAAI,CAACC,SAAS;IACtB;IAEAC,cAAsB;QACrB,OAAO,IAAI,CAACC,QAAQ;IACrB;IA5EA,YAAY,AAAiBpB,iBAAoC,CAAE;aAAtCA,oBAAAA;aAHZkB,YAAY;aACZE,WAAW;IAEwC;AA6ErE"}