{"version":3,"sources":["../../../../../src/MediaStream/Cache/services/memory-cache.service.ts"],"sourcesContent":["import type { CacheStats, ICacheManager } from '../interfaces/cache-manager.interface'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Injectable } from '@nestjs/common'\r\nimport NodeCache from 'node-cache'\r\n\r\n@Injectable()\r\nexport class MemoryCacheService implements ICacheManager {\r\n\tprotected readonly cache: NodeCache\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly metricsService: MetricsService,\r\n\t) {\r\n\t\tconst config = this._configService.get('cache.memory') || {}\r\n\r\n\t\tthis.cache = new NodeCache({\r\n\t\t\tstdTTL: config.defaultTtl || 3600,\r\n\t\t\tcheckperiod: config.checkPeriod || 600,\r\n\t\t\tuseClones: false,\r\n\t\t\tdeleteOnExpire: true,\r\n\t\t\tmaxKeys: config.maxKeys || 1000,\r\n\t\t})\r\n\r\n\t\tthis.cache.on('set', (key: string, _value: any) => {\r\n\t\t\tthis.metricsService.recordCacheOperation('set', 'memory', 'success')\r\n\t\t\tCorrelatedLogger.debug(`Memory cache SET: ${key}`, MemoryCacheService.name)\r\n\t\t})\r\n\r\n\t\tthis.cache.on('get', (key: string, value: any) => {\r\n\t\t\tif (value !== undefined) {\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'memory', 'hit')\r\n\t\t\t\tCorrelatedLogger.debug(`Memory cache HIT: ${key}`, MemoryCacheService.name)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'memory', 'miss')\r\n\t\t\t\tCorrelatedLogger.debug(`Memory cache MISS: ${key}`, MemoryCacheService.name)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.cache.on('del', (key: string, _value: any) => {\r\n\t\t\tthis.metricsService.recordCacheOperation('delete', 'memory', 'success')\r\n\t\t\tCorrelatedLogger.debug(`Memory cache DELETE: ${key}`, MemoryCacheService.name)\r\n\t\t})\r\n\r\n\t\tthis.cache.on('expired', (key: string, _value: any) => {\r\n\t\t\tthis.metricsService.recordCacheOperation('expire', 'memory', 'success')\r\n\t\t\tCorrelatedLogger.debug(`Memory cache EXPIRED: ${key}`, MemoryCacheService.name)\r\n\t\t})\r\n\r\n\t\tthis.cache.on('flush', () => {\r\n\t\t\tthis.metricsService.recordCacheOperation('flush', 'memory', 'success')\r\n\t\t\tCorrelatedLogger.debug('Memory cache FLUSHED', MemoryCacheService.name)\r\n\t\t})\r\n\t}\r\n\r\n\tasync get<T>(key: string): Promise<T | null> {\r\n\t\ttry {\r\n\t\t\tconst value = this.cache.get<T>(key)\r\n\t\t\treturn value !== undefined ? value : null\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.metricsService.recordCacheOperation('get', 'memory', 'error')\r\n\t\t\tCorrelatedLogger.error(`Memory cache GET error for key ${key}: ${(error as Error).message}`, (error as Error).stack, MemoryCacheService.name)\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n\r\n\tasync set<T>(key: string, value: T, ttl?: number): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst success = ttl !== undefined ? this.cache.set(key, value, ttl) : this.cache.set(key, value)\r\n\t\t\tif (!success) {\r\n\t\t\t\tthis.metricsService.recordCacheOperation('set', 'memory', 'error')\r\n\t\t\t\tCorrelatedLogger.warn(`Failed to set memory cache key: ${key}`, MemoryCacheService.name)\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.metricsService.recordCacheOperation('set', 'memory', 'error')\r\n\t\t\tCorrelatedLogger.error(`Memory cache SET error for key ${key}: ${(error as Error).message}`, (error as Error).stack, MemoryCacheService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync delete(key: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\tthis.cache.del(key)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.metricsService.recordCacheOperation('delete', 'memory', 'error')\r\n\t\t\tCorrelatedLogger.error(`Memory cache DELETE error for key ${key}: ${(error as Error).message}`, (error as Error).stack, MemoryCacheService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync clear(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tthis.cache.flushAll()\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.metricsService.recordCacheOperation('clear', 'memory', 'error')\r\n\t\t\tCorrelatedLogger.error(`Memory cache CLEAR error: ${(error as Error).message}`, (error as Error).stack, MemoryCacheService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync getStats(): Promise<CacheStats> {\r\n\t\ttry {\r\n\t\t\tconst stats = this.cache.getStats()\r\n\t\t\tconst hitRate = stats.hits + stats.misses > 0 ? stats.hits / (stats.hits + stats.misses) : 0\r\n\r\n\t\t\tthis.metricsService.updateCacheHitRatio('memory', hitRate)\r\n\r\n\t\t\treturn {\r\n\t\t\t\thits: stats.hits,\r\n\t\t\t\tmisses: stats.misses,\r\n\t\t\t\tkeys: stats.keys,\r\n\t\t\t\tksize: stats.ksize,\r\n\t\t\t\tvsize: stats.vsize,\r\n\t\t\t\thitRate,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Memory cache STATS error: ${(error as Error).message}`, (error as Error).stack, MemoryCacheService.name)\r\n\t\t\treturn {\r\n\t\t\t\thits: 0,\r\n\t\t\t\tmisses: 0,\r\n\t\t\t\tkeys: 0,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 0,\r\n\t\t\t\thitRate: 0,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync has(key: string): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\treturn this.cache.has(key)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Memory cache HAS error for key ${key}: ${(error as Error).message}`, (error as Error).stack, MemoryCacheService.name)\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tasync exists(key: string): Promise<boolean> {\r\n\t\treturn this.has(key)\r\n\t}\r\n\r\n\tasync keys(): Promise<string[]> {\r\n\t\ttry {\r\n\t\t\treturn this.cache.keys()\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Memory cache KEYS error: ${(error as Error).message}`, (error as Error).stack, MemoryCacheService.name)\r\n\t\t\treturn []\r\n\t\t}\r\n\t}\r\n\r\n\tasync flushAll(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tthis.cache.flushAll()\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.metricsService.recordCacheOperation('flush', 'memory', 'error')\r\n\t\t\tCorrelatedLogger.error(`Memory cache FLUSH error: ${(error as Error).message}`, (error as Error).stack, MemoryCacheService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tgetTtl(key: string): number {\r\n\t\treturn this.cache.getTtl(key) ?? 0\r\n\t}\r\n\r\n\tsetTtl(key: string, ttl: number): boolean {\r\n\t\treturn this.cache.ttl(key, ttl)\r\n\t}\r\n\r\n\tgetMemoryUsage(): { used: number, total: number } {\r\n\t\tconst stats = this.cache.getStats()\r\n\t\treturn {\r\n\t\t\tused: stats.vsize + stats.ksize,\r\n\t\t\ttotal: this._configService.get('cache.memory.maxSize') || 100 * 1024 * 1024,\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["ConfigService","CorrelatedLogger","MetricsService","Injectable","NodeCache","MemoryCacheService","_configService","metricsService","config","get","cache","stdTTL","defaultTtl","checkperiod","checkPeriod","useClones","deleteOnExpire","maxKeys","on","key","_value","recordCacheOperation","debug","name","value","undefined","error","message","stack","set","ttl","success","warn","delete","del","clear","flushAll","getStats","stats","hitRate","hits","misses","updateCacheHitRatio","keys","ksize","vsize","has","exists","getTtl","setTtl","getMemoryUsage","used","total"],"mappings":"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"}