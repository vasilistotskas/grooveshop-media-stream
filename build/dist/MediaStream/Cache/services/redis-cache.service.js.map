{"version":3,"sources":["../../../../../src/MediaStream/Cache/services/redis-cache.service.ts"],"sourcesContent":["import type { OnModuleDestroy, OnModuleInit } from '@nestjs/common'\r\nimport type { CacheStats, ICacheManager } from '../interfaces/cache-manager.interface'\r\nimport { Buffer } from 'node:buffer'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Injectable } from '@nestjs/common'\r\nimport Redis from 'ioredis'\r\n\r\n@Injectable()\r\nexport class RedisCacheService implements ICacheManager, OnModuleInit, OnModuleDestroy {\r\n\tprivate redis!: Redis\r\n\tprivate isConnected = false\r\n\tprivate stats = {\r\n\t\thits: 0,\r\n\t\tmisses: 0,\r\n\t\toperations: 0,\r\n\t\terrors: 0,\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly metricsService: MetricsService,\r\n\t) { }\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tawait this.initializeRedis()\r\n\t}\r\n\r\n\tasync onModuleDestroy(): Promise<void> {\r\n\t\tif (this.redis) {\r\n\t\t\tawait this.redis.quit()\r\n\t\t\tCorrelatedLogger.log('Redis connection closed', RedisCacheService.name)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async initializeRedis(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst config = this._configService.get('cache.redis')\r\n\r\n\t\t\tthis.redis = new Redis({\r\n\t\t\t\thost: config.host,\r\n\t\t\t\tport: config.port,\r\n\t\t\t\tpassword: config.password,\r\n\t\t\t\tdb: config.db,\r\n\t\t\t\tmaxRetriesPerRequest: config.maxRetries,\r\n\t\t\t\tenableReadyCheck: true,\r\n\t\t\t\tlazyConnect: true,\r\n\t\t\t\tkeepAlive: 30000,\r\n\t\t\t\tconnectTimeout: 10000,\r\n\t\t\t\tcommandTimeout: 5000,\r\n\t\t\t})\r\n\r\n\t\t\tthis.redis.on('connect', () => {\r\n\t\t\t\tCorrelatedLogger.log('Redis connecting...', RedisCacheService.name)\r\n\t\t\t})\r\n\r\n\t\t\tthis.redis.on('ready', () => {\r\n\t\t\t\tthis.isConnected = true\r\n\t\t\t\tCorrelatedLogger.log('Redis connection ready', RedisCacheService.name)\r\n\t\t\t\tthis.metricsService.updateActiveConnections('redis', 1)\r\n\t\t\t})\r\n\r\n\t\t\tthis.redis.on('error', (error: unknown) => {\r\n\t\t\t\tthis.isConnected = false\r\n\t\t\t\tthis.stats.errors++\r\n\t\t\t\tCorrelatedLogger.error(`Redis connection error: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\t\tthis.metricsService.updateActiveConnections('redis', 0)\r\n\t\t\t})\r\n\r\n\t\t\tthis.redis.on('close', () => {\r\n\t\t\t\tthis.isConnected = false\r\n\t\t\t\tCorrelatedLogger.warn('Redis connection closed', RedisCacheService.name)\r\n\t\t\t\tthis.metricsService.updateActiveConnections('redis', 0)\r\n\t\t\t})\r\n\r\n\t\t\tthis.redis.on('reconnecting', () => {\r\n\t\t\t\tCorrelatedLogger.log('Redis reconnecting...', RedisCacheService.name)\r\n\t\t\t})\r\n\r\n\t\t\tawait this.redis.connect()\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.isConnected = false\r\n\t\t\tCorrelatedLogger.error(`Failed to initialize Redis: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync get<T>(key: string): Promise<T | null> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tCorrelatedLogger.warn('Redis not connected, returning null', RedisCacheService.name)\r\n\t\t\tthis.stats.misses++\r\n\t\t\tthis.metricsService.recordCacheOperation('get', 'redis', 'miss')\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.stats.operations++\r\n\t\t\tconst value = await this.redis.get(key)\r\n\r\n\t\t\tif (value === null) {\r\n\t\t\t\tthis.stats.misses++\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'redis', 'miss')\r\n\t\t\t\tCorrelatedLogger.debug(`Redis cache MISS: ${key}`, RedisCacheService.name)\r\n\t\t\t\treturn null\r\n\t\t\t}\r\n\r\n\t\t\tthis.stats.hits++\r\n\t\t\tthis.metricsService.recordCacheOperation('get', 'redis', 'hit')\r\n\t\t\tCorrelatedLogger.debug(`Redis cache HIT: ${key}`, RedisCacheService.name)\r\n\r\n\t\t\treturn this.deserializeValue(value) as T\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.stats.errors++\r\n\t\t\tthis.stats.misses++\r\n\t\t\tthis.metricsService.recordCacheOperation('get', 'redis', 'error')\r\n\t\t\tCorrelatedLogger.error(`Redis cache GET error for key ${key}: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n\r\n\tasync set<T>(key: string, value: T, ttl?: number): Promise<void> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tCorrelatedLogger.warn('Redis not connected, skipping SET operation', RedisCacheService.name)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.stats.operations++\r\n\t\t\tconst serializedValue = this.serializeValue(value)\r\n\t\t\tconst defaultTtl = this._configService.get('cache.redis.ttl')\r\n\t\t\tconst effectiveTtl = ttl !== undefined ? ttl : defaultTtl\r\n\r\n\t\t\tif (effectiveTtl > 0) {\r\n\t\t\t\tawait this.redis.setex(key, effectiveTtl, serializedValue)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tawait this.redis.set(key, serializedValue)\r\n\t\t\t}\r\n\r\n\t\t\tthis.metricsService.recordCacheOperation('set', 'redis', 'success')\r\n\t\t\tCorrelatedLogger.debug(`Redis cache SET: ${key} (TTL: ${effectiveTtl}s)`, RedisCacheService.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.stats.errors++\r\n\t\t\tthis.metricsService.recordCacheOperation('set', 'redis', 'error')\r\n\t\t\tCorrelatedLogger.error(`Redis cache SET error for key ${key}: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t}\r\n\t}\r\n\r\n\tasync delete(key: string): Promise<void> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tCorrelatedLogger.warn('Redis not connected, skipping DELETE operation', RedisCacheService.name)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.stats.operations++\r\n\t\t\tawait this.redis.del(key)\r\n\t\t\tthis.metricsService.recordCacheOperation('delete', 'redis', 'success')\r\n\t\t\tCorrelatedLogger.debug(`Redis cache DELETE: ${key}`, RedisCacheService.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.stats.errors++\r\n\t\t\tthis.metricsService.recordCacheOperation('delete', 'redis', 'error')\r\n\t\t\tCorrelatedLogger.error(`Redis cache DELETE error for key ${key}: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync clear(): Promise<void> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tCorrelatedLogger.warn('Redis not connected, skipping CLEAR operation', RedisCacheService.name)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.stats.operations++\r\n\t\t\tconst db = this._configService.get('cache.redis.db')\r\n\t\t\tawait this.redis.flushdb()\r\n\t\t\tthis.metricsService.recordCacheOperation('clear', 'redis', 'success')\r\n\t\t\tCorrelatedLogger.debug(`Redis cache CLEARED (DB: ${db})`, RedisCacheService.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.stats.errors++\r\n\t\t\tthis.metricsService.recordCacheOperation('clear', 'redis', 'error')\r\n\t\t\tCorrelatedLogger.error(`Redis cache CLEAR error: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync has(key: string): Promise<boolean> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.stats.operations++\r\n\t\t\tconst exists = await this.redis.exists(key)\r\n\t\t\treturn exists === 1\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.stats.errors++\r\n\t\t\tCorrelatedLogger.error(`Redis cache HAS error for key ${key}: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tasync exists(key: string): Promise<boolean> {\r\n\t\treturn this.has(key)\r\n\t}\r\n\r\n\tasync keys(): Promise<string[]> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\treturn []\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.stats.operations++\r\n\t\t\treturn await this.redis.keys('*')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.stats.errors++\r\n\t\t\tCorrelatedLogger.error(`Redis cache KEYS error: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\treturn []\r\n\t\t}\r\n\t}\r\n\r\n\tasync flushAll(): Promise<void> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tCorrelatedLogger.warn('Redis not connected, skipping FLUSH operation', RedisCacheService.name)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.stats.operations++\r\n\t\t\tawait this.redis.flushall()\r\n\t\t\tthis.metricsService.recordCacheOperation('flush', 'redis', 'success')\r\n\t\t\tCorrelatedLogger.debug('Redis cache FLUSHED ALL', RedisCacheService.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.stats.errors++\r\n\t\t\tthis.metricsService.recordCacheOperation('flush', 'redis', 'error')\r\n\t\t\tCorrelatedLogger.error(`Redis cache FLUSH error: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync getStats(): Promise<CacheStats> {\r\n\t\ttry {\r\n\t\t\tconst hitRate = this.stats.hits + this.stats.misses > 0\r\n\t\t\t\t? this.stats.hits / (this.stats.hits + this.stats.misses)\r\n\t\t\t\t: 0\r\n\r\n\t\t\tthis.metricsService.updateCacheHitRatio('redis', hitRate)\r\n\r\n\t\t\tlet keys = 0\r\n\t\t\tlet memoryUsage = 0\r\n\r\n\t\t\tif (this.isConnected) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst info = await this.redis.info('keyspace')\r\n\t\t\t\t\tconst dbInfo = info.match(/db\\d+:keys=(\\d+)/)\r\n\t\t\t\t\tkeys = dbInfo ? Number.parseInt(dbInfo[1]) : 0\r\n\r\n\t\t\t\t\tconst memInfo = await this.redis.info('memory')\r\n\t\t\t\t\tconst memMatch = memInfo.match(/used_memory:(\\d+)/)\r\n\t\t\t\t\tmemoryUsage = memMatch ? Number.parseInt(memMatch[1]) : 0\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tCorrelatedLogger.warn(`Failed to get Redis info: ${(error as Error).message}`, RedisCacheService.name)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\thits: this.stats.hits,\r\n\t\t\t\tmisses: this.stats.misses,\r\n\t\t\t\tkeys,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: memoryUsage,\r\n\t\t\t\thitRate,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Redis cache STATS error: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\treturn {\r\n\t\t\t\thits: this.stats.hits,\r\n\t\t\t\tmisses: this.stats.misses,\r\n\t\t\t\tkeys: 0,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 0,\r\n\t\t\t\thitRate: 0,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync ping(): Promise<string> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error('Redis not connected')\r\n\t\t}\r\n\t\treturn await this.redis.ping()\r\n\t}\r\n\r\n\tasync getTtl(key: string): Promise<number> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\treturn -1\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\treturn await this.redis.ttl(key)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Redis TTL error for key ${key}: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\treturn -1\r\n\t\t}\r\n\t}\r\n\r\n\tasync setTtl(key: string, ttl: number): Promise<boolean> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst result = await this.redis.expire(key, ttl)\r\n\t\t\treturn result === 1\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Redis EXPIRE error for key ${key}: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tgetConnectionStatus(): { connected: boolean, stats: { hits: number, misses: number, operations: number, errors: number } } {\r\n\t\treturn {\r\n\t\t\tconnected: this.isConnected,\r\n\t\t\tstats: { ...this.stats },\r\n\t\t}\r\n\t}\r\n\r\n\tasync getMemoryUsage(): Promise<{ used: number, peak: number, fragmentation: number }> {\r\n\t\tif (!this.isConnected) {\r\n\t\t\treturn { used: 0, peak: 0, fragmentation: 0 }\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst info = await this.redis.info('memory')\r\n\t\t\tconst used = this.extractMemoryValue(info, 'used_memory')\r\n\t\t\tconst peak = this.extractMemoryValue(info, 'used_memory_peak')\r\n\t\t\tconst fragmentation = this.extractMemoryValue(info, 'mem_fragmentation_ratio')\r\n\r\n\t\t\treturn { used, peak, fragmentation }\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Redis memory info error: ${(error as Error).message}`, (error as Error).stack, RedisCacheService.name)\r\n\t\t\treturn { used: 0, peak: 0, fragmentation: 0 }\r\n\t\t}\r\n\t}\r\n\r\n\tprivate extractMemoryValue(info: string, key: string): number {\r\n\t\tconst match = info.match(new RegExp(`${key}:(\\\\d+(?:\\\\.\\\\d+)?)`))\r\n\t\treturn match ? Number.parseFloat(match[1]) : 0\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize value for Redis storage, handling Buffers properly\r\n\t */\r\n\tprivate serializeValue<T>(value: T): string {\r\n\t\treturn JSON.stringify(value, (key, val) => {\r\n\t\t\tif (Buffer.isBuffer(val)) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttype: 'Buffer',\r\n\t\t\t\t\tdata: val.toString('base64'),\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn val\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Deserialize value from Redis storage, reconstructing Buffers properly\r\n\t */\r\n\tprivate deserializeValue<T>(value: string): T {\r\n\t\treturn JSON.parse(value, (key, val) => {\r\n\t\t\tif (val && typeof val === 'object' && val.type === 'Buffer' && typeof val.data === 'string') {\r\n\t\t\t\treturn Buffer.from(val.data, 'base64')\r\n\t\t\t}\r\n\t\t\treturn val\r\n\t\t})\r\n\t}\r\n}\r\n"],"names":["Buffer","ConfigService","CorrelatedLogger","MetricsService","Injectable","Redis","RedisCacheService","onModuleInit","initializeRedis","onModuleDestroy","redis","quit","log","name","config","_configService","get","host","port","password","db","maxRetriesPerRequest","maxRetries","enableReadyCheck","lazyConnect","keepAlive","connectTimeout","commandTimeout","on","isConnected","metricsService","updateActiveConnections","error","stats","errors","message","stack","warn","connect","key","misses","recordCacheOperation","operations","value","debug","hits","deserializeValue","set","ttl","serializedValue","serializeValue","defaultTtl","effectiveTtl","undefined","setex","delete","del","clear","flushdb","has","exists","keys","flushAll","flushall","getStats","hitRate","updateCacheHitRatio","memoryUsage","info","dbInfo","match","Number","parseInt","memInfo","memMatch","ksize","vsize","ping","Error","getTtl","setTtl","result","expire","getConnectionStatus","connected","getMemoryUsage","used","peak","fragmentation","extractMemoryValue","RegExp","parseFloat","JSON","stringify","val","isBuffer","type","data","toString","parse","from"],"mappings":";;;;;;;;;AAEA,SAASA,MAAM,QAAQ,cAAa;AACpC,SAASC,aAAa,QAAQ,iCAAqC;AACnE,SAASC,gBAAgB,QAAQ,yCAA6C;AAC9E,SAASC,cAAc,QAAQ,4CAAgD;AAC/E,SAASC,UAAU,QAAQ,iBAAgB;AAC3C,OAAOC,WAAW,UAAS;AAG3B,OAAO,MAAMC;IAeZ,MAAMC,eAA8B;QACnC,MAAM,IAAI,CAACC,eAAe;IAC3B;IAEA,MAAMC,kBAAiC;QACtC,IAAI,IAAI,CAACC,KAAK,EAAE;YACf,MAAM,IAAI,CAACA,KAAK,CAACC,IAAI;YACrBT,iBAAiBU,GAAG,CAAC,2BAA2BN,kBAAkBO,IAAI;QACvE;IACD;IAEA,MAAcL,kBAAiC;QAC9C,IAAI;YACH,MAAMM,SAAS,IAAI,CAACC,cAAc,CAACC,GAAG,CAAC;YAEvC,IAAI,CAACN,KAAK,GAAG,IAAIL,MAAM;gBACtBY,MAAMH,OAAOG,IAAI;gBACjBC,MAAMJ,OAAOI,IAAI;gBACjBC,UAAUL,OAAOK,QAAQ;gBACzBC,IAAIN,OAAOM,EAAE;gBACbC,sBAAsBP,OAAOQ,UAAU;gBACvCC,kBAAkB;gBAClBC,aAAa;gBACbC,WAAW;gBACXC,gBAAgB;gBAChBC,gBAAgB;YACjB;YAEA,IAAI,CAACjB,KAAK,CAACkB,EAAE,CAAC,WAAW;gBACxB1B,iBAAiBU,GAAG,CAAC,uBAAuBN,kBAAkBO,IAAI;YACnE;YAEA,IAAI,CAACH,KAAK,CAACkB,EAAE,CAAC,SAAS;gBACtB,IAAI,CAACC,WAAW,GAAG;gBACnB3B,iBAAiBU,GAAG,CAAC,0BAA0BN,kBAAkBO,IAAI;gBACrE,IAAI,CAACiB,cAAc,CAACC,uBAAuB,CAAC,SAAS;YACtD;YAEA,IAAI,CAACrB,KAAK,CAACkB,EAAE,CAAC,SAAS,CAACI;gBACvB,IAAI,CAACH,WAAW,GAAG;gBACnB,IAAI,CAACI,KAAK,CAACC,MAAM;gBACjBhC,iBAAiB8B,KAAK,CAAC,CAAC,wBAAwB,EAAE,AAACA,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;gBAC5H,IAAI,CAACiB,cAAc,CAACC,uBAAuB,CAAC,SAAS;YACtD;YAEA,IAAI,CAACrB,KAAK,CAACkB,EAAE,CAAC,SAAS;gBACtB,IAAI,CAACC,WAAW,GAAG;gBACnB3B,iBAAiBmC,IAAI,CAAC,2BAA2B/B,kBAAkBO,IAAI;gBACvE,IAAI,CAACiB,cAAc,CAACC,uBAAuB,CAAC,SAAS;YACtD;YAEA,IAAI,CAACrB,KAAK,CAACkB,EAAE,CAAC,gBAAgB;gBAC7B1B,iBAAiBU,GAAG,CAAC,yBAAyBN,kBAAkBO,IAAI;YACrE;YAEA,MAAM,IAAI,CAACH,KAAK,CAAC4B,OAAO;QACzB,EACA,OAAON,OAAgB;YACtB,IAAI,CAACH,WAAW,GAAG;YACnB3B,iBAAiB8B,KAAK,CAAC,CAAC,4BAA4B,EAAE,AAACA,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YAChI,MAAMmB;QACP;IACD;IAEA,MAAMhB,IAAOuB,GAAW,EAAqB;QAC5C,IAAI,CAAC,IAAI,CAACV,WAAW,EAAE;YACtB3B,iBAAiBmC,IAAI,CAAC,uCAAuC/B,kBAAkBO,IAAI;YACnF,IAAI,CAACoB,KAAK,CAACO,MAAM;YACjB,IAAI,CAACV,cAAc,CAACW,oBAAoB,CAAC,OAAO,SAAS;YACzD,OAAO;QACR;QAEA,IAAI;YACH,IAAI,CAACR,KAAK,CAACS,UAAU;YACrB,MAAMC,QAAQ,MAAM,IAAI,CAACjC,KAAK,CAACM,GAAG,CAACuB;YAEnC,IAAII,UAAU,MAAM;gBACnB,IAAI,CAACV,KAAK,CAACO,MAAM;gBACjB,IAAI,CAACV,cAAc,CAACW,oBAAoB,CAAC,OAAO,SAAS;gBACzDvC,iBAAiB0C,KAAK,CAAC,CAAC,kBAAkB,EAAEL,KAAK,EAAEjC,kBAAkBO,IAAI;gBACzE,OAAO;YACR;YAEA,IAAI,CAACoB,KAAK,CAACY,IAAI;YACf,IAAI,CAACf,cAAc,CAACW,oBAAoB,CAAC,OAAO,SAAS;YACzDvC,iBAAiB0C,KAAK,CAAC,CAAC,iBAAiB,EAAEL,KAAK,EAAEjC,kBAAkBO,IAAI;YAExE,OAAO,IAAI,CAACiC,gBAAgB,CAACH;QAC9B,EACA,OAAOX,OAAgB;YACtB,IAAI,CAACC,KAAK,CAACC,MAAM;YACjB,IAAI,CAACD,KAAK,CAACO,MAAM;YACjB,IAAI,CAACV,cAAc,CAACW,oBAAoB,CAAC,OAAO,SAAS;YACzDvC,iBAAiB8B,KAAK,CAAC,CAAC,8BAA8B,EAAEO,IAAI,EAAE,EAAE,AAACP,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YAC1I,OAAO;QACR;IACD;IAEA,MAAMkC,IAAOR,GAAW,EAAEI,KAAQ,EAAEK,GAAY,EAAiB;QAChE,IAAI,CAAC,IAAI,CAACnB,WAAW,EAAE;YACtB3B,iBAAiBmC,IAAI,CAAC,+CAA+C/B,kBAAkBO,IAAI;YAC3F;QACD;QAEA,IAAI;YACH,IAAI,CAACoB,KAAK,CAACS,UAAU;YACrB,MAAMO,kBAAkB,IAAI,CAACC,cAAc,CAACP;YAC5C,MAAMQ,aAAa,IAAI,CAACpC,cAAc,CAACC,GAAG,CAAC;YAC3C,MAAMoC,eAAeJ,QAAQK,YAAYL,MAAMG;YAE/C,IAAIC,eAAe,GAAG;gBACrB,MAAM,IAAI,CAAC1C,KAAK,CAAC4C,KAAK,CAACf,KAAKa,cAAcH;YAC3C,OACK;gBACJ,MAAM,IAAI,CAACvC,KAAK,CAACqC,GAAG,CAACR,KAAKU;YAC3B;YAEA,IAAI,CAACnB,cAAc,CAACW,oBAAoB,CAAC,OAAO,SAAS;YACzDvC,iBAAiB0C,KAAK,CAAC,CAAC,iBAAiB,EAAEL,IAAI,OAAO,EAAEa,aAAa,EAAE,CAAC,EAAE9C,kBAAkBO,IAAI;QACjG,EACA,OAAOmB,OAAgB;YACtB,IAAI,CAACC,KAAK,CAACC,MAAM;YACjB,IAAI,CAACJ,cAAc,CAACW,oBAAoB,CAAC,OAAO,SAAS;YACzDvC,iBAAiB8B,KAAK,CAAC,CAAC,8BAA8B,EAAEO,IAAI,EAAE,EAAE,AAACP,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;QAC3I;IACD;IAEA,MAAM0C,OAAOhB,GAAW,EAAiB;QACxC,IAAI,CAAC,IAAI,CAACV,WAAW,EAAE;YACtB3B,iBAAiBmC,IAAI,CAAC,kDAAkD/B,kBAAkBO,IAAI;YAC9F;QACD;QAEA,IAAI;YACH,IAAI,CAACoB,KAAK,CAACS,UAAU;YACrB,MAAM,IAAI,CAAChC,KAAK,CAAC8C,GAAG,CAACjB;YACrB,IAAI,CAACT,cAAc,CAACW,oBAAoB,CAAC,UAAU,SAAS;YAC5DvC,iBAAiB0C,KAAK,CAAC,CAAC,oBAAoB,EAAEL,KAAK,EAAEjC,kBAAkBO,IAAI;QAC5E,EACA,OAAOmB,OAAgB;YACtB,IAAI,CAACC,KAAK,CAACC,MAAM;YACjB,IAAI,CAACJ,cAAc,CAACW,oBAAoB,CAAC,UAAU,SAAS;YAC5DvC,iBAAiB8B,KAAK,CAAC,CAAC,iCAAiC,EAAEO,IAAI,EAAE,EAAE,AAACP,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YAC7I,MAAMmB;QACP;IACD;IAEA,MAAMyB,QAAuB;QAC5B,IAAI,CAAC,IAAI,CAAC5B,WAAW,EAAE;YACtB3B,iBAAiBmC,IAAI,CAAC,iDAAiD/B,kBAAkBO,IAAI;YAC7F;QACD;QAEA,IAAI;YACH,IAAI,CAACoB,KAAK,CAACS,UAAU;YACrB,MAAMtB,KAAK,IAAI,CAACL,cAAc,CAACC,GAAG,CAAC;YACnC,MAAM,IAAI,CAACN,KAAK,CAACgD,OAAO;YACxB,IAAI,CAAC5B,cAAc,CAACW,oBAAoB,CAAC,SAAS,SAAS;YAC3DvC,iBAAiB0C,KAAK,CAAC,CAAC,yBAAyB,EAAExB,GAAG,CAAC,CAAC,EAAEd,kBAAkBO,IAAI;QACjF,EACA,OAAOmB,OAAgB;YACtB,IAAI,CAACC,KAAK,CAACC,MAAM;YACjB,IAAI,CAACJ,cAAc,CAACW,oBAAoB,CAAC,SAAS,SAAS;YAC3DvC,iBAAiB8B,KAAK,CAAC,CAAC,yBAAyB,EAAE,AAACA,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YAC7H,MAAMmB;QACP;IACD;IAEA,MAAM2B,IAAIpB,GAAW,EAAoB;QACxC,IAAI,CAAC,IAAI,CAACV,WAAW,EAAE;YACtB,OAAO;QACR;QAEA,IAAI;YACH,IAAI,CAACI,KAAK,CAACS,UAAU;YACrB,MAAMkB,SAAS,MAAM,IAAI,CAAClD,KAAK,CAACkD,MAAM,CAACrB;YACvC,OAAOqB,WAAW;QACnB,EACA,OAAO5B,OAAgB;YACtB,IAAI,CAACC,KAAK,CAACC,MAAM;YACjBhC,iBAAiB8B,KAAK,CAAC,CAAC,8BAA8B,EAAEO,IAAI,EAAE,EAAE,AAACP,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YAC1I,OAAO;QACR;IACD;IAEA,MAAM+C,OAAOrB,GAAW,EAAoB;QAC3C,OAAO,IAAI,CAACoB,GAAG,CAACpB;IACjB;IAEA,MAAMsB,OAA0B;QAC/B,IAAI,CAAC,IAAI,CAAChC,WAAW,EAAE;YACtB,OAAO,EAAE;QACV;QAEA,IAAI;YACH,IAAI,CAACI,KAAK,CAACS,UAAU;YACrB,OAAO,MAAM,IAAI,CAAChC,KAAK,CAACmD,IAAI,CAAC;QAC9B,EACA,OAAO7B,OAAgB;YACtB,IAAI,CAACC,KAAK,CAACC,MAAM;YACjBhC,iBAAiB8B,KAAK,CAAC,CAAC,wBAAwB,EAAE,AAACA,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YAC5H,OAAO,EAAE;QACV;IACD;IAEA,MAAMiD,WAA0B;QAC/B,IAAI,CAAC,IAAI,CAACjC,WAAW,EAAE;YACtB3B,iBAAiBmC,IAAI,CAAC,iDAAiD/B,kBAAkBO,IAAI;YAC7F;QACD;QAEA,IAAI;YACH,IAAI,CAACoB,KAAK,CAACS,UAAU;YACrB,MAAM,IAAI,CAAChC,KAAK,CAACqD,QAAQ;YACzB,IAAI,CAACjC,cAAc,CAACW,oBAAoB,CAAC,SAAS,SAAS;YAC3DvC,iBAAiB0C,KAAK,CAAC,2BAA2BtC,kBAAkBO,IAAI;QACzE,EACA,OAAOmB,OAAgB;YACtB,IAAI,CAACC,KAAK,CAACC,MAAM;YACjB,IAAI,CAACJ,cAAc,CAACW,oBAAoB,CAAC,SAAS,SAAS;YAC3DvC,iBAAiB8B,KAAK,CAAC,CAAC,yBAAyB,EAAE,AAACA,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YAC7H,MAAMmB;QACP;IACD;IAEA,MAAMgC,WAAgC;QACrC,IAAI;YACH,MAAMC,UAAU,IAAI,CAAChC,KAAK,CAACY,IAAI,GAAG,IAAI,CAACZ,KAAK,CAACO,MAAM,GAAG,IACnD,IAAI,CAACP,KAAK,CAACY,IAAI,GAAI,CAAA,IAAI,CAACZ,KAAK,CAACY,IAAI,GAAG,IAAI,CAACZ,KAAK,CAACO,MAAM,AAAD,IACrD;YAEH,IAAI,CAACV,cAAc,CAACoC,mBAAmB,CAAC,SAASD;YAEjD,IAAIJ,OAAO;YACX,IAAIM,cAAc;YAElB,IAAI,IAAI,CAACtC,WAAW,EAAE;gBACrB,IAAI;oBACH,MAAMuC,OAAO,MAAM,IAAI,CAAC1D,KAAK,CAAC0D,IAAI,CAAC;oBACnC,MAAMC,SAASD,KAAKE,KAAK,CAAC;oBAC1BT,OAAOQ,SAASE,OAAOC,QAAQ,CAACH,MAAM,CAAC,EAAE,IAAI;oBAE7C,MAAMI,UAAU,MAAM,IAAI,CAAC/D,KAAK,CAAC0D,IAAI,CAAC;oBACtC,MAAMM,WAAWD,QAAQH,KAAK,CAAC;oBAC/BH,cAAcO,WAAWH,OAAOC,QAAQ,CAACE,QAAQ,CAAC,EAAE,IAAI;gBACzD,EACA,OAAO1C,OAAgB;oBACtB9B,iBAAiBmC,IAAI,CAAC,CAAC,0BAA0B,EAAE,AAACL,MAAgBG,OAAO,EAAE,EAAE7B,kBAAkBO,IAAI;gBACtG;YACD;YAEA,OAAO;gBACNgC,MAAM,IAAI,CAACZ,KAAK,CAACY,IAAI;gBACrBL,QAAQ,IAAI,CAACP,KAAK,CAACO,MAAM;gBACzBqB;gBACAc,OAAO;gBACPC,OAAOT;gBACPF;YACD;QACD,EACA,OAAOjC,OAAgB;YACtB9B,iBAAiB8B,KAAK,CAAC,CAAC,yBAAyB,EAAE,AAACA,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YAC7H,OAAO;gBACNgC,MAAM,IAAI,CAACZ,KAAK,CAACY,IAAI;gBACrBL,QAAQ,IAAI,CAACP,KAAK,CAACO,MAAM;gBACzBqB,MAAM;gBACNc,OAAO;gBACPC,OAAO;gBACPX,SAAS;YACV;QACD;IACD;IAEA,MAAMY,OAAwB;QAC7B,IAAI,CAAC,IAAI,CAAChD,WAAW,EAAE;YACtB,MAAM,IAAIiD,MAAM;QACjB;QACA,OAAO,MAAM,IAAI,CAACpE,KAAK,CAACmE,IAAI;IAC7B;IAEA,MAAME,OAAOxC,GAAW,EAAmB;QAC1C,IAAI,CAAC,IAAI,CAACV,WAAW,EAAE;YACtB,OAAO,CAAC;QACT;QAEA,IAAI;YACH,OAAO,MAAM,IAAI,CAACnB,KAAK,CAACsC,GAAG,CAACT;QAC7B,EACA,OAAOP,OAAgB;YACtB9B,iBAAiB8B,KAAK,CAAC,CAAC,wBAAwB,EAAEO,IAAI,EAAE,EAAE,AAACP,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YACpI,OAAO,CAAC;QACT;IACD;IAEA,MAAMmE,OAAOzC,GAAW,EAAES,GAAW,EAAoB;QACxD,IAAI,CAAC,IAAI,CAACnB,WAAW,EAAE;YACtB,OAAO;QACR;QAEA,IAAI;YACH,MAAMoD,SAAS,MAAM,IAAI,CAACvE,KAAK,CAACwE,MAAM,CAAC3C,KAAKS;YAC5C,OAAOiC,WAAW;QACnB,EACA,OAAOjD,OAAgB;YACtB9B,iBAAiB8B,KAAK,CAAC,CAAC,2BAA2B,EAAEO,IAAI,EAAE,EAAE,AAACP,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YACvI,OAAO;QACR;IACD;IAEAsE,sBAA2H;QAC1H,OAAO;YACNC,WAAW,IAAI,CAACvD,WAAW;YAC3BI,OAAO;gBAAE,GAAG,IAAI,CAACA,KAAK;YAAC;QACxB;IACD;IAEA,MAAMoD,iBAAiF;QACtF,IAAI,CAAC,IAAI,CAACxD,WAAW,EAAE;YACtB,OAAO;gBAAEyD,MAAM;gBAAGC,MAAM;gBAAGC,eAAe;YAAE;QAC7C;QAEA,IAAI;YACH,MAAMpB,OAAO,MAAM,IAAI,CAAC1D,KAAK,CAAC0D,IAAI,CAAC;YACnC,MAAMkB,OAAO,IAAI,CAACG,kBAAkB,CAACrB,MAAM;YAC3C,MAAMmB,OAAO,IAAI,CAACE,kBAAkB,CAACrB,MAAM;YAC3C,MAAMoB,gBAAgB,IAAI,CAACC,kBAAkB,CAACrB,MAAM;YAEpD,OAAO;gBAAEkB;gBAAMC;gBAAMC;YAAc;QACpC,EACA,OAAOxD,OAAgB;YACtB9B,iBAAiB8B,KAAK,CAAC,CAAC,yBAAyB,EAAE,AAACA,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBI,KAAK,EAAE9B,kBAAkBO,IAAI;YAC7H,OAAO;gBAAEyE,MAAM;gBAAGC,MAAM;gBAAGC,eAAe;YAAE;QAC7C;IACD;IAEQC,mBAAmBrB,IAAY,EAAE7B,GAAW,EAAU;QAC7D,MAAM+B,QAAQF,KAAKE,KAAK,CAAC,IAAIoB,OAAO,GAAGnD,IAAI,mBAAmB,CAAC;QAC/D,OAAO+B,QAAQC,OAAOoB,UAAU,CAACrB,KAAK,CAAC,EAAE,IAAI;IAC9C;IAEA;;EAEC,GACD,AAAQpB,eAAkBP,KAAQ,EAAU;QAC3C,OAAOiD,KAAKC,SAAS,CAAClD,OAAO,CAACJ,KAAKuD;YAClC,IAAI9F,OAAO+F,QAAQ,CAACD,MAAM;gBACzB,OAAO;oBACNE,MAAM;oBACNC,MAAMH,IAAII,QAAQ,CAAC;gBACpB;YACD;YACA,OAAOJ;QACR;IACD;IAEA;;EAEC,GACD,AAAQhD,iBAAoBH,KAAa,EAAK;QAC7C,OAAOiD,KAAKO,KAAK,CAACxD,OAAO,CAACJ,KAAKuD;YAC9B,IAAIA,OAAO,OAAOA,QAAQ,YAAYA,IAAIE,IAAI,KAAK,YAAY,OAAOF,IAAIG,IAAI,KAAK,UAAU;gBAC5F,OAAOjG,OAAOoG,IAAI,CAACN,IAAIG,IAAI,EAAE;YAC9B;YACA,OAAOH;QACR;IACD;IAlXA,YACC,AAAiB/E,cAA6B,EAC9C,AAAiBe,cAA8B,CAC9C;aAFgBf,iBAAAA;aACAe,iBAAAA;aAVVD,cAAc;aACdI,QAAQ;YACfY,MAAM;YACNL,QAAQ;YACRE,YAAY;YACZR,QAAQ;QACT;IAKI;AAgXL"}