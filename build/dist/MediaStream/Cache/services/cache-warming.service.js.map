{"version":3,"sources":["../../../../../src/MediaStream/Cache/services/cache-warming.service.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport { Buffer } from 'node:buffer'\r\nimport { readdir, readFile, stat } from 'node:fs/promises'\r\nimport { join } from 'node:path'\r\nimport { cwd } from 'node:process'\r\nimport { MemoryCacheService } from '@microservice/Cache/services/memory-cache.service'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { Cron, CronExpression } from '@nestjs/schedule'\r\n\r\ninterface CacheWarmingConfig {\r\n\tenabled: boolean\r\n\twarmupOnStart: boolean\r\n\tmaxFilesToWarm: number\r\n\twarmupCron: string\r\n\tpopularImageThreshold: number\r\n}\r\n\r\ninterface FileAccessInfo {\r\n\tpath: string\r\n\tlastAccessed: Date\r\n\taccessCount: number\r\n\tsize: number\r\n}\r\n\r\n@Injectable()\r\nexport class CacheWarmingService implements OnModuleInit {\r\n\tprivate readonly config: CacheWarmingConfig\r\n\tprivate readonly storagePath: string\r\n\r\n\tconstructor(\r\n\t\tprivate readonly memoryCacheService: MemoryCacheService,\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly metricsService: MetricsService,\r\n\t) {\r\n\t\tthis.config = this._configService.get('cache.warming') || {\r\n\t\t\tenabled: true,\r\n\t\t\twarmupOnStart: true,\r\n\t\t\tmaxFilesToWarm: 50,\r\n\t\t\twarmupCron: '0 */6 * * *',\r\n\t\t\tpopularImageThreshold: 5,\r\n\t\t}\r\n\r\n\t\tthis.storagePath = join(cwd(), 'storage')\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tif (this.config.enabled && this.config.warmupOnStart) {\r\n\t\t\tCorrelatedLogger.log('Starting cache warming on module initialization', CacheWarmingService.name)\r\n\t\t\tsetImmediate(() => this.warmupCache())\r\n\t\t}\r\n\t}\r\n\r\n\t@Cron(CronExpression.EVERY_6_HOURS)\r\n\tasync scheduledWarmup(): Promise<void> {\r\n\t\tif (this.config.enabled) {\r\n\t\t\tCorrelatedLogger.log('Starting scheduled cache warmup', CacheWarmingService.name)\r\n\t\t\tawait this.warmupCache()\r\n\t\t}\r\n\t}\r\n\r\n\tasync warmupCache(): Promise<void> {\r\n\t\tif (!this.config.enabled) {\r\n\t\t\tCorrelatedLogger.debug('Cache warming is disabled', CacheWarmingService.name)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst startTime = Date.now()\r\n\t\tlet warmedCount = 0\r\n\r\n\t\ttry {\r\n\t\t\tCorrelatedLogger.log('Starting cache warmup process', CacheWarmingService.name)\r\n\r\n\t\t\tconst popularFiles = await this.getPopularFiles()\r\n\r\n\t\t\tfor (const fileInfo of popularFiles.slice(0, this.config.maxFilesToWarm)) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait this.warmupFile(fileInfo)\r\n\t\t\t\t\twarmedCount++\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tCorrelatedLogger.warn(`Failed to warm up file ${fileInfo.path}: ${(error as Error).message}`, CacheWarmingService.name)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst duration = Date.now() - startTime\r\n\t\t\tCorrelatedLogger.log(`Cache warmup completed: ${warmedCount} files warmed in ${duration}ms`, CacheWarmingService.name)\r\n\r\n\t\t\tthis.metricsService.recordCacheOperation('warmup', 'memory', 'success')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Cache warmup failed: ${(error as Error).message}`, (error as Error).stack, CacheWarmingService.name)\r\n\t\t\tthis.metricsService.recordCacheOperation('warmup', 'memory', 'error')\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async getPopularFiles(): Promise<FileAccessInfo[]> {\r\n\t\tconst files: FileAccessInfo[] = []\r\n\r\n\t\ttry {\r\n\t\t\tconst entries = await readdir(this.storagePath)\r\n\r\n\t\t\tfor (const entry of entries) {\r\n\t\t\t\tif (entry.endsWith('.rsc')) {\r\n\t\t\t\t\tconst filePath = join(this.storagePath, entry)\r\n\t\t\t\t\tconst metaPath = filePath.replace('.rsc', '.rsm')\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst [fileStat, metaContent] = await Promise.all([\r\n\t\t\t\t\t\t\tstat(filePath),\r\n\t\t\t\t\t\t\treadFile(metaPath, 'utf8').catch(() => null),\r\n\t\t\t\t\t\t])\r\n\r\n\t\t\t\t\t\tlet accessCount = 1\r\n\t\t\t\t\t\tif (metaContent) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tconst metadata = JSON.parse(metaContent)\r\n\t\t\t\t\t\t\t\taccessCount = metadata.accessCount || 1\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch {\r\n\t\t\t\t\t\t\t\t// Ignore metadata parsing errors\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfiles.push({\r\n\t\t\t\t\t\t\tpath: filePath,\r\n\t\t\t\t\t\t\tlastAccessed: fileStat.atime,\r\n\t\t\t\t\t\t\taccessCount,\r\n\t\t\t\t\t\t\tsize: fileStat.size,\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\t\tCorrelatedLogger.debug(`Skipping file ${entry}: ${(error as Error).message}`, CacheWarmingService.name)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn files\r\n\t\t\t\t.filter(f => f.accessCount >= this.config.popularImageThreshold)\r\n\t\t\t\t.sort((a: any, b: any) => {\r\n\t\t\t\t\tif (a.accessCount !== b.accessCount) {\r\n\t\t\t\t\t\treturn b.accessCount - a.accessCount\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn b.lastAccessed.getTime() - a.lastAccessed.getTime()\r\n\t\t\t\t})\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Failed to get popular files: ${(error as Error).message}`, (error as Error).stack, CacheWarmingService.name)\r\n\t\t\treturn []\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async warmupFile(fileInfo: FileAccessInfo): Promise<void> {\r\n\t\tconst cacheKey = this.generateCacheKey(fileInfo.path)\r\n\r\n\t\tif (await this.memoryCacheService.has(cacheKey)) {\r\n\t\t\tCorrelatedLogger.debug(`File already in cache: ${fileInfo.path}`, CacheWarmingService.name)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst content = await readFile(fileInfo.path)\r\n\r\n\t\t\tconst baseTtl = 3600\r\n\t\t\tconst accessMultiplier = Math.min(fileInfo.accessCount / 10, 5)\r\n\t\t\tconst ttl = Math.floor(baseTtl * (1 + accessMultiplier))\r\n\r\n\t\t\tawait this.memoryCacheService.set(cacheKey, content, ttl)\r\n\r\n\t\t\tCorrelatedLogger.debug(`Warmed up file: ${fileInfo.path} (TTL: ${ttl}s)`, CacheWarmingService.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.warn(`Failed to warm up file ${fileInfo.path}: ${(error as Error).message}`, CacheWarmingService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tprivate generateCacheKey(filePath: string): string {\r\n\t\tconst filename = filePath.split('/').pop() || filePath.split('\\\\').pop()\r\n\t\treturn `file:${filename?.replace(/\\.[^/.]+$/, '')}`\r\n\t}\r\n\r\n\tasync warmupSpecificFile(resourceId: string, content: Buffer, ttl?: number): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconst cacheKey = `file:${resourceId}`\r\n\t\t\tawait this.memoryCacheService.set(cacheKey, content, ttl)\r\n\t\t\tCorrelatedLogger.debug(`Manually warmed up resource: ${resourceId}`, CacheWarmingService.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Failed to manually warm up resource ${resourceId}: ${(error as Error).message}`, (error as Error).stack, CacheWarmingService.name)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tasync getWarmupStats(): Promise<{\r\n\t\tenabled: boolean\r\n\t\tlastWarmup: Date | null\r\n\t\tfilesWarmed: number\r\n\t\tcacheSize: number\r\n\t}> {\r\n\t\tconst stats = await this.memoryCacheService.getStats()\r\n\r\n\t\treturn {\r\n\t\t\tenabled: this.config.enabled,\r\n\t\t\tlastWarmup: null, // TODO: Track last warmup time\r\n\t\t\tfilesWarmed: stats.keys,\r\n\t\t\tcacheSize: stats.vsize + stats.ksize,\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["readdir","readFile","stat","join","cwd","MemoryCacheService","ConfigService","CorrelatedLogger","MetricsService","Injectable","Cron","CronExpression","CacheWarmingService","onModuleInit","config","enabled","warmupOnStart","log","name","setImmediate","warmupCache","scheduledWarmup","debug","startTime","Date","now","warmedCount","popularFiles","getPopularFiles","fileInfo","slice","maxFilesToWarm","warmupFile","error","warn","path","message","duration","metricsService","recordCacheOperation","stack","files","entries","storagePath","entry","endsWith","filePath","metaPath","replace","fileStat","metaContent","Promise","all","catch","accessCount","metadata","JSON","parse","push","lastAccessed","atime","size","filter","f","popularImageThreshold","sort","a","b","getTime","cacheKey","generateCacheKey","memoryCacheService","has","content","baseTtl","accessMultiplier","Math","min","ttl","floor","set","filename","split","pop","warmupSpecificFile","resourceId","getWarmupStats","stats","getStats","lastWarmup","filesWarmed","keys","cacheSize","vsize","ksize","_configService","get","warmupCron","EVERY_6_HOURS"],"mappings":";;;;;;;;;AAEA,SAASA,OAAO,EAAEC,QAAQ,EAAEC,IAAI,QAAQ,mBAAkB;AAC1D,SAASC,IAAI,QAAQ,YAAW;AAChC,SAASC,GAAG,QAAQ,eAAc;AAClC,SAASC,kBAAkB,QAAQ,4BAAmD;AACtF,SAASC,aAAa,QAAQ,iCAAqC;AACnE,SAASC,gBAAgB,QAAQ,yCAA6C;AAC9E,SAASC,cAAc,QAAQ,4CAAgD;AAC/E,SAASC,UAAU,QAAQ,iBAAgB;AAC3C,SAASC,IAAI,EAAEC,cAAc,QAAQ,mBAAkB;AAkBvD,OAAO,MAAMC;IAoBZ,MAAMC,eAA8B;QACnC,IAAI,IAAI,CAACC,MAAM,CAACC,OAAO,IAAI,IAAI,CAACD,MAAM,CAACE,aAAa,EAAE;YACrDT,iBAAiBU,GAAG,CAAC,mDAAmDL,oBAAoBM,IAAI;YAChGC,aAAa,IAAM,IAAI,CAACC,WAAW;QACpC;IACD;IAEA,MACMC,kBAAiC;QACtC,IAAI,IAAI,CAACP,MAAM,CAACC,OAAO,EAAE;YACxBR,iBAAiBU,GAAG,CAAC,mCAAmCL,oBAAoBM,IAAI;YAChF,MAAM,IAAI,CAACE,WAAW;QACvB;IACD;IAEA,MAAMA,cAA6B;QAClC,IAAI,CAAC,IAAI,CAACN,MAAM,CAACC,OAAO,EAAE;YACzBR,iBAAiBe,KAAK,CAAC,6BAA6BV,oBAAoBM,IAAI;YAC5E;QACD;QAEA,MAAMK,YAAYC,KAAKC,GAAG;QAC1B,IAAIC,cAAc;QAElB,IAAI;YACHnB,iBAAiBU,GAAG,CAAC,iCAAiCL,oBAAoBM,IAAI;YAE9E,MAAMS,eAAe,MAAM,IAAI,CAACC,eAAe;YAE/C,KAAK,MAAMC,YAAYF,aAAaG,KAAK,CAAC,GAAG,IAAI,CAAChB,MAAM,CAACiB,cAAc,EAAG;gBACzE,IAAI;oBACH,MAAM,IAAI,CAACC,UAAU,CAACH;oBACtBH;gBACD,EACA,OAAOO,OAAgB;oBACtB1B,iBAAiB2B,IAAI,CAAC,CAAC,uBAAuB,EAAEL,SAASM,IAAI,CAAC,EAAE,EAAE,AAACF,MAAgBG,OAAO,EAAE,EAAExB,oBAAoBM,IAAI;gBACvH;YACD;YAEA,MAAMmB,WAAWb,KAAKC,GAAG,KAAKF;YAC9BhB,iBAAiBU,GAAG,CAAC,CAAC,wBAAwB,EAAES,YAAY,iBAAiB,EAAEW,SAAS,EAAE,CAAC,EAAEzB,oBAAoBM,IAAI;YAErH,IAAI,CAACoB,cAAc,CAACC,oBAAoB,CAAC,UAAU,UAAU;QAC9D,EACA,OAAON,OAAgB;YACtB1B,iBAAiB0B,KAAK,CAAC,CAAC,qBAAqB,EAAE,AAACA,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBO,KAAK,EAAE5B,oBAAoBM,IAAI;YAC3H,IAAI,CAACoB,cAAc,CAACC,oBAAoB,CAAC,UAAU,UAAU;QAC9D;IACD;IAEA,MAAcX,kBAA6C;QAC1D,MAAMa,QAA0B,EAAE;QAElC,IAAI;YACH,MAAMC,UAAU,MAAM1C,QAAQ,IAAI,CAAC2C,WAAW;YAE9C,KAAK,MAAMC,SAASF,QAAS;gBAC5B,IAAIE,MAAMC,QAAQ,CAAC,SAAS;oBAC3B,MAAMC,WAAW3C,KAAK,IAAI,CAACwC,WAAW,EAAEC;oBACxC,MAAMG,WAAWD,SAASE,OAAO,CAAC,QAAQ;oBAE1C,IAAI;wBACH,MAAM,CAACC,UAAUC,YAAY,GAAG,MAAMC,QAAQC,GAAG,CAAC;4BACjDlD,KAAK4C;4BACL7C,SAAS8C,UAAU,QAAQM,KAAK,CAAC,IAAM;yBACvC;wBAED,IAAIC,cAAc;wBAClB,IAAIJ,aAAa;4BAChB,IAAI;gCACH,MAAMK,WAAWC,KAAKC,KAAK,CAACP;gCAC5BI,cAAcC,SAASD,WAAW,IAAI;4BACvC,EACA,OAAM;4BACL,iCAAiC;4BAClC;wBACD;wBAEAb,MAAMiB,IAAI,CAAC;4BACVvB,MAAMW;4BACNa,cAAcV,SAASW,KAAK;4BAC5BN;4BACAO,MAAMZ,SAASY,IAAI;wBACpB;oBACD,EACA,OAAO5B,OAAgB;wBACtB1B,iBAAiBe,KAAK,CAAC,CAAC,cAAc,EAAEsB,MAAM,EAAE,EAAE,AAACX,MAAgBG,OAAO,EAAE,EAAExB,oBAAoBM,IAAI;oBACvG;gBACD;YACD;YAEA,OAAOuB,MACLqB,MAAM,CAACC,CAAAA,IAAKA,EAAET,WAAW,IAAI,IAAI,CAACxC,MAAM,CAACkD,qBAAqB,EAC9DC,IAAI,CAAC,CAACC,GAAQC;gBACd,IAAID,EAAEZ,WAAW,KAAKa,EAAEb,WAAW,EAAE;oBACpC,OAAOa,EAAEb,WAAW,GAAGY,EAAEZ,WAAW;gBACrC;gBACA,OAAOa,EAAER,YAAY,CAACS,OAAO,KAAKF,EAAEP,YAAY,CAACS,OAAO;YACzD;QACF,EACA,OAAOnC,OAAgB;YACtB1B,iBAAiB0B,KAAK,CAAC,CAAC,6BAA6B,EAAE,AAACA,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBO,KAAK,EAAE5B,oBAAoBM,IAAI;YACnI,OAAO,EAAE;QACV;IACD;IAEA,MAAcc,WAAWH,QAAwB,EAAiB;QACjE,MAAMwC,WAAW,IAAI,CAACC,gBAAgB,CAACzC,SAASM,IAAI;QAEpD,IAAI,MAAM,IAAI,CAACoC,kBAAkB,CAACC,GAAG,CAACH,WAAW;YAChD9D,iBAAiBe,KAAK,CAAC,CAAC,uBAAuB,EAAEO,SAASM,IAAI,EAAE,EAAEvB,oBAAoBM,IAAI;YAC1F;QACD;QAEA,IAAI;YACH,MAAMuD,UAAU,MAAMxE,SAAS4B,SAASM,IAAI;YAE5C,MAAMuC,UAAU;YAChB,MAAMC,mBAAmBC,KAAKC,GAAG,CAAChD,SAASyB,WAAW,GAAG,IAAI;YAC7D,MAAMwB,MAAMF,KAAKG,KAAK,CAACL,UAAW,CAAA,IAAIC,gBAAe;YAErD,MAAM,IAAI,CAACJ,kBAAkB,CAACS,GAAG,CAACX,UAAUI,SAASK;YAErDvE,iBAAiBe,KAAK,CAAC,CAAC,gBAAgB,EAAEO,SAASM,IAAI,CAAC,OAAO,EAAE2C,IAAI,EAAE,CAAC,EAAElE,oBAAoBM,IAAI;QACnG,EACA,OAAOe,OAAgB;YACtB1B,iBAAiB2B,IAAI,CAAC,CAAC,uBAAuB,EAAEL,SAASM,IAAI,CAAC,EAAE,EAAE,AAACF,MAAgBG,OAAO,EAAE,EAAExB,oBAAoBM,IAAI;YACtH,MAAMe;QACP;IACD;IAEQqC,iBAAiBxB,QAAgB,EAAU;QAClD,MAAMmC,WAAWnC,SAASoC,KAAK,CAAC,KAAKC,GAAG,MAAMrC,SAASoC,KAAK,CAAC,MAAMC,GAAG;QACtE,OAAO,CAAC,KAAK,EAAEF,UAAUjC,QAAQ,aAAa,KAAK;IACpD;IAEA,MAAMoC,mBAAmBC,UAAkB,EAAEZ,OAAe,EAAEK,GAAY,EAAiB;QAC1F,IAAI;YACH,MAAMT,WAAW,CAAC,KAAK,EAAEgB,YAAY;YACrC,MAAM,IAAI,CAACd,kBAAkB,CAACS,GAAG,CAACX,UAAUI,SAASK;YACrDvE,iBAAiBe,KAAK,CAAC,CAAC,6BAA6B,EAAE+D,YAAY,EAAEzE,oBAAoBM,IAAI;QAC9F,EACA,OAAOe,OAAgB;YACtB1B,iBAAiB0B,KAAK,CAAC,CAAC,oCAAoC,EAAEoD,WAAW,EAAE,EAAE,AAACpD,MAAgBG,OAAO,EAAE,EAAE,AAACH,MAAgBO,KAAK,EAAE5B,oBAAoBM,IAAI;YACzJ,MAAMe;QACP;IACD;IAEA,MAAMqD,iBAKH;QACF,MAAMC,QAAQ,MAAM,IAAI,CAAChB,kBAAkB,CAACiB,QAAQ;QAEpD,OAAO;YACNzE,SAAS,IAAI,CAACD,MAAM,CAACC,OAAO;YAC5B0E,YAAY;YACZC,aAAaH,MAAMI,IAAI;YACvBC,WAAWL,MAAMM,KAAK,GAAGN,MAAMO,KAAK;QACrC;IACD;IAlLA,YACC,AAAiBvB,kBAAsC,EACvD,AAAiBwB,cAA6B,EAC9C,AAAiBzD,cAA8B,CAC9C;aAHgBiC,qBAAAA;aACAwB,iBAAAA;aACAzD,iBAAAA;QAEjB,IAAI,CAACxB,MAAM,GAAG,IAAI,CAACiF,cAAc,CAACC,GAAG,CAAC,oBAAoB;YACzDjF,SAAS;YACTC,eAAe;YACfe,gBAAgB;YAChBkE,YAAY;YACZjC,uBAAuB;QACxB;QAEA,IAAI,CAACrB,WAAW,GAAGxC,KAAKC,OAAO;IAChC;AAqKD;;wBA5JsB8F"}