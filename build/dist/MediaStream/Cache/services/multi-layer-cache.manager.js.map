{"version":3,"sources":["../../../../../src/MediaStream/Cache/services/multi-layer-cache.manager.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport type { CacheKeyStrategy, CacheLayer, CacheLayerStats } from '../interfaces/cache-layer.interface'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { FileCacheLayer } from '../layers/file-cache.layer'\r\nimport { MemoryCacheLayer } from '../layers/memory-cache.layer'\r\nimport { RedisCacheLayer } from '../layers/redis-cache.layer'\r\nimport { DefaultCacheKeyStrategy } from '../strategies/cache-key.strategy'\r\n\r\nexport interface MultiLayerCacheStats {\r\n\tlayers: Record<string, CacheLayerStats>\r\n\ttotalHits: number\r\n\ttotalMisses: number\r\n\toverallHitRate: number\r\n\tlayerHitDistribution: Record<string, number>\r\n}\r\n\r\n@Injectable()\r\nexport class MultiLayerCacheManager implements OnModuleInit {\r\n\tprivate layers: CacheLayer[] = []\r\n\tprivate keyStrategy: CacheKeyStrategy\r\n\tprivate preloadingEnabled: boolean\r\n\tprivate popularKeys: Map<string, number> = new Map()\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly metricsService: MetricsService,\r\n\t\tprivate readonly memoryCacheLayer: MemoryCacheLayer,\r\n\t\tprivate readonly redisCacheLayer: RedisCacheLayer,\r\n\t\tprivate readonly fileCacheLayer: FileCacheLayer,\r\n\t) {\r\n\t\tthis.keyStrategy = new DefaultCacheKeyStrategy()\r\n\t\tthis.preloadingEnabled = this._configService.getOptional('cache.preloading.enabled', false)\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tthis.layers = [\r\n\t\t\tthis.memoryCacheLayer,\r\n\t\t\tthis.redisCacheLayer,\r\n\t\t\tthis.fileCacheLayer,\r\n\t\t].sort((a: any, b: any) => a.getPriority() - b.getPriority())\r\n\r\n\t\tCorrelatedLogger.debug(\r\n\t\t\t`Multi-layer cache initialized with ${this.layers.length} layers: ${this.layers.map(l => l.getLayerName()).join(', ')}`,\r\n\t\t\tMultiLayerCacheManager.name,\r\n\t\t)\r\n\r\n\t\tif (this.preloadingEnabled) {\r\n\t\t\tthis.startPreloading()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get a value from cache using cache-aside pattern with automatic fallback\r\n\t */\r\n\tasync get<T>(namespace: string, identifier: string, params?: Record<string, any>): Promise<T | null> {\r\n\t\tconst key = this.keyStrategy.generateKey(namespace, identifier, params)\r\n\t\tthis.trackKeyAccess(key)\r\n\r\n\t\tfor (const layer of this.layers) {\r\n\t\t\ttry {\r\n\t\t\t\tconst value = await layer.get<T>(key)\r\n\t\t\t\tif (value !== null) {\r\n\t\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t\t`Cache HIT in ${layer.getLayerName()} layer for key: ${key}`,\r\n\t\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', layer.getLayerName(), 'hit')\r\n\r\n\t\t\t\t\tawait this.backfillLayers(key, value, layer)\r\n\r\n\t\t\t\t\treturn value\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache layer ${layer.getLayerName()} failed for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tCorrelatedLogger.debug(`Cache MISS for key: ${key}`, MultiLayerCacheManager.name)\r\n\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss')\r\n\r\n\t\treturn null\r\n\t}\r\n\r\n\t/**\r\n\t * Set a value in all cache layers\r\n\t */\r\n\tasync set<T>(\r\n\t\tnamespace: string,\r\n\t\tidentifier: string,\r\n\t\tvalue: T,\r\n\t\tttl?: number,\r\n\t\tparams?: Record<string, any>,\r\n\t): Promise<void> {\r\n\t\tconst key = this.keyStrategy.generateKey(namespace, identifier, params)\r\n\r\n\t\tconst setPromises = this.layers.map(async (layer) => {\r\n\t\t\ttry {\r\n\t\t\t\tawait layer.set(key, value, ttl)\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`Cache SET in ${layer.getLayerName()} layer for key: ${key}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache SET failed in ${layer.getLayerName()} layer for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tawait Promise.allSettled(setPromises)\r\n\t\tthis.metricsService.recordCacheOperation('set', 'multi-layer', 'success')\r\n\t}\r\n\r\n\t/**\r\n\t * Delete a key from all cache layers\r\n\t */\r\n\tasync delete(namespace: string, identifier: string, params?: Record<string, any>): Promise<void> {\r\n\t\tconst key = this.keyStrategy.generateKey(namespace, identifier, params)\r\n\r\n\t\tconst deletePromises = this.layers.map(async (layer) => {\r\n\t\t\ttry {\r\n\t\t\t\tawait layer.delete(key)\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`Cache DELETE in ${layer.getLayerName()} layer for key: ${key}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache DELETE failed in ${layer.getLayerName()} layer for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tawait Promise.allSettled(deletePromises)\r\n\t\tthis.popularKeys.delete(key)\r\n\t\tthis.metricsService.recordCacheOperation('delete', 'multi-layer', 'success')\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a key exists in any cache layer\r\n\t */\r\n\tasync exists(namespace: string, identifier: string, params?: Record<string, any>): Promise<boolean> {\r\n\t\tconst key = this.keyStrategy.generateKey(namespace, identifier, params)\r\n\r\n\t\tfor (const layer of this.layers) {\r\n\t\t\ttry {\r\n\t\t\t\tif (await layer.exists(key)) {\r\n\t\t\t\t\treturn true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache EXISTS check failed in ${layer.getLayerName()} layer for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Clear all cache layers\r\n\t */\r\n\tasync clear(): Promise<void> {\r\n\t\tconst clearPromises = this.layers.map(async (layer) => {\r\n\t\t\ttry {\r\n\t\t\t\tawait layer.clear()\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`Cache CLEARED in ${layer.getLayerName()} layer`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache CLEAR failed in ${layer.getLayerName()} layer: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tawait Promise.allSettled(clearPromises)\r\n\t\tthis.popularKeys.clear()\r\n\t\tthis.metricsService.recordCacheOperation('flush', 'multi-layer', 'success')\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidate keys by namespace\r\n\t */\r\n\tasync invalidateNamespace(namespace: string): Promise<void> {\r\n\t\tCorrelatedLogger.debug(\r\n\t\t\t`Invalidating cache namespace: ${namespace}`,\r\n\t\t\tMultiLayerCacheManager.name,\r\n\t\t)\r\n\r\n\t\tawait this.clear()\r\n\t\tthis.metricsService.recordCacheOperation('flush', 'multi-layer', 'success')\r\n\t}\r\n\r\n\t/**\r\n\t * Get comprehensive cache statistics\r\n\t */\r\n\tasync getStats(): Promise<MultiLayerCacheStats> {\r\n\t\tconst layerStats: Record<string, CacheLayerStats> = {}\r\n\t\tlet totalHits = 0\r\n\t\tlet totalMisses = 0\r\n\t\tconst layerHitDistribution: Record<string, number> = {}\r\n\r\n\t\tfor (const layer of this.layers) {\r\n\t\t\ttry {\r\n\t\t\t\tconst stats = await layer.getStats()\r\n\t\t\t\tlayerStats[layer.getLayerName()] = stats\r\n\t\t\t\ttotalHits += stats.hits\r\n\t\t\t\ttotalMisses += stats.misses\r\n\t\t\t\tlayerHitDistribution[layer.getLayerName()] = stats.hits\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Failed to get stats from ${layer.getLayerName()} layer: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t\tlayerStats[layer.getLayerName()] = {\r\n\t\t\t\t\thits: 0,\r\n\t\t\t\t\tmisses: 0,\r\n\t\t\t\t\tkeys: 0,\r\n\t\t\t\t\thitRate: 0,\r\n\t\t\t\t\terrors: 1,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst totalRequests = totalHits + totalMisses\r\n\t\tconst overallHitRate = totalRequests > 0 ? totalHits / totalRequests : 0\r\n\r\n\t\treturn {\r\n\t\t\tlayers: layerStats,\r\n\t\t\ttotalHits,\r\n\t\t\ttotalMisses,\r\n\t\t\toverallHitRate,\r\n\t\t\tlayerHitDistribution,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Preload popular keys into higher priority layers\r\n\t */\r\n\tasync preloadPopularKeys(): Promise<void> {\r\n\t\tif (!this.preloadingEnabled) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst popularKeys = Array.from(this.popularKeys.entries())\r\n\t\t\t.sort(([, a], [, b]) => b - a)\r\n\t\t\t.slice(0, 100)\r\n\t\t\t.map(([key]) => key)\r\n\r\n\t\tCorrelatedLogger.debug(\r\n\t\t\t`Preloading ${popularKeys.length} popular keys`,\r\n\t\t\tMultiLayerCacheManager.name,\r\n\t\t)\r\n\r\n\t\tfor (const key of popularKeys) {\r\n\t\t\ttry {\r\n\t\t\t\tfor (let i = this.layers.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tconst value = await this.layers[i].get(key)\r\n\t\t\t\t\tif (value !== null) {\r\n\t\t\t\t\t\tfor (let j = 0; j < i; j++) {\r\n\t\t\t\t\t\t\tawait this.layers[j].set(key, value)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Failed to preload key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Backfill higher priority layers when a cache hit occurs in a lower priority layer\r\n\t */\r\n\tprivate async backfillLayers<T>(key: string, value: T, sourceLayer: CacheLayer): Promise<void> {\r\n\t\tconst sourceIndex = this.layers.findIndex(layer => layer === sourceLayer)\r\n\t\tif (sourceIndex <= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst backfillPromises = this.layers.slice(0, sourceIndex).map(async (layer) => {\r\n\t\t\ttry {\r\n\t\t\t\tawait layer.set(key, value, undefined)\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`Backfilled ${layer.getLayerName()} layer with key: ${key}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Failed to backfill ${layer.getLayerName()} layer for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tawait Promise.allSettled(backfillPromises)\r\n\t}\r\n\r\n\t/**\r\n\t * Track key access frequency for preloading\r\n\t */\r\n\tprivate trackKeyAccess(key: string): void {\r\n\t\tif (!this.preloadingEnabled) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst currentCount = this.popularKeys.get(key) || 0\r\n\t\tthis.popularKeys.set(key, currentCount + 1)\r\n\r\n\t\tif (this.popularKeys.size > 10000) {\r\n\t\t\tconst entries = Array.from(this.popularKeys.entries())\r\n\t\t\t\t.sort(([, a], [, b]) => b - a)\r\n\t\t\t\t.slice(0, 5000)\r\n\r\n\t\t\tthis.popularKeys.clear()\r\n\t\t\tentries.forEach(([k, v]) => this.popularKeys.set(k, v))\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Start periodic preloading\r\n\t */\r\n\tprivate startPreloading(): void {\r\n\t\tconst interval = this._configService.getOptional('cache.preloading.interval', 300000)\r\n\r\n\t\tsetInterval(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tawait this.preloadPopularKeys()\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t\t`Preloading failed: ${(error as Error).message}`,\r\n\t\t\t\t\t(error as Error).stack,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}, interval)\r\n\r\n\t\tCorrelatedLogger.debug(\r\n\t\t\t`Cache preloading started with ${interval}ms interval`,\r\n\t\t\tMultiLayerCacheManager.name,\r\n\t\t)\r\n\t}\r\n}\r\n"],"names":["ConfigService","CorrelatedLogger","MetricsService","Injectable","FileCacheLayer","MemoryCacheLayer","RedisCacheLayer","DefaultCacheKeyStrategy","MultiLayerCacheManager","onModuleInit","layers","memoryCacheLayer","redisCacheLayer","fileCacheLayer","sort","a","b","getPriority","debug","length","map","l","getLayerName","join","name","preloadingEnabled","startPreloading","get","namespace","identifier","params","key","keyStrategy","generateKey","trackKeyAccess","layer","value","metricsService","recordCacheOperation","backfillLayers","error","warn","message","set","ttl","setPromises","Promise","allSettled","delete","deletePromises","popularKeys","exists","clear","clearPromises","invalidateNamespace","getStats","layerStats","totalHits","totalMisses","layerHitDistribution","stats","hits","misses","keys","hitRate","errors","totalRequests","overallHitRate","preloadPopularKeys","Array","from","entries","slice","i","j","sourceLayer","sourceIndex","findIndex","backfillPromises","undefined","currentCount","size","forEach","k","v","interval","_configService","getOptional","setInterval","stack","Map"],"mappings":"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"}