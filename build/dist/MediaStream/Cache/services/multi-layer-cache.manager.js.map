{"version":3,"sources":["../../../../../src/MediaStream/Cache/services/multi-layer-cache.manager.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport type { CacheKeyStrategy, CacheLayer, CacheLayerStats } from '../interfaces/cache-layer.interface'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { FileCacheLayer } from '../layers/file-cache.layer'\r\nimport { MemoryCacheLayer } from '../layers/memory-cache.layer'\r\nimport { RedisCacheLayer } from '../layers/redis-cache.layer'\r\nimport { DefaultCacheKeyStrategy } from '../strategies/cache-key.strategy'\r\n\r\nexport interface MultiLayerCacheStats {\r\n\tlayers: Record<string, CacheLayerStats>\r\n\ttotalHits: number\r\n\ttotalMisses: number\r\n\toverallHitRate: number\r\n\tlayerHitDistribution: Record<string, number>\r\n}\r\n\r\n@Injectable()\r\nexport class MultiLayerCacheManager implements OnModuleInit {\r\n\tprivate layers: CacheLayer[] = []\r\n\tprivate keyStrategy: CacheKeyStrategy\r\n\tprivate preloadingEnabled: boolean\r\n\tprivate popularKeys: Map<string, number> = new Map()\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly metricsService: MetricsService,\r\n\t\tprivate readonly memoryCacheLayer: MemoryCacheLayer,\r\n\t\tprivate readonly redisCacheLayer: RedisCacheLayer,\r\n\t\tprivate readonly fileCacheLayer: FileCacheLayer,\r\n\t) {\r\n\t\tthis.keyStrategy = new DefaultCacheKeyStrategy()\r\n\t\tthis.preloadingEnabled = this._configService.getOptional('cache.preloading.enabled', false)\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tthis.layers = [\r\n\t\t\tthis.memoryCacheLayer,\r\n\t\t\tthis.redisCacheLayer,\r\n\t\t\tthis.fileCacheLayer,\r\n\t\t].sort((a: any, b: any) => a.getPriority() - b.getPriority())\r\n\r\n\t\tCorrelatedLogger.debug(\r\n\t\t\t`Multi-layer cache initialized with ${this.layers.length} layers: ${this.layers.map(l => l.getLayerName()).join(', ')}`,\r\n\t\t\tMultiLayerCacheManager.name,\r\n\t\t)\r\n\r\n\t\tif (this.preloadingEnabled) {\r\n\t\t\tthis.startPreloading()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get a value from cache using cache-aside pattern with automatic fallback\r\n\t */\r\n\tasync get<T>(namespace: string, identifier: string, params?: Record<string, any>): Promise<T | null> {\r\n\t\tconst key = this.keyStrategy.generateKey(namespace, identifier, params)\r\n\t\tthis.trackKeyAccess(key)\r\n\r\n\t\tfor (const layer of this.layers) {\r\n\t\t\ttry {\r\n\t\t\t\tconst value = await layer.get<T>(key)\r\n\t\t\t\tif (value !== null) {\r\n\t\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t\t`Cache HIT in ${layer.getLayerName()} layer for key: ${key}`,\r\n\t\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', layer.getLayerName(), 'hit')\r\n\r\n\t\t\t\t\tawait this.backfillLayers(key, value, layer)\r\n\r\n\t\t\t\t\treturn value\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache layer ${layer.getLayerName()} failed for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tCorrelatedLogger.debug(`Cache MISS for key: ${key}`, MultiLayerCacheManager.name)\r\n\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss')\r\n\r\n\t\treturn null\r\n\t}\r\n\r\n\t/**\r\n\t * Set a value in all cache layers\r\n\t */\r\n\tasync set<T>(\r\n\t\tnamespace: string,\r\n\t\tidentifier: string,\r\n\t\tvalue: T,\r\n\t\tttl?: number,\r\n\t\tparams?: Record<string, any>,\r\n\t): Promise<void> {\r\n\t\tconst key = this.keyStrategy.generateKey(namespace, identifier, params)\r\n\r\n\t\tconst setPromises = this.layers.map(async (layer) => {\r\n\t\t\ttry {\r\n\t\t\t\tawait layer.set(key, value, ttl)\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`Cache SET in ${layer.getLayerName()} layer for key: ${key}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache SET failed in ${layer.getLayerName()} layer for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tawait Promise.allSettled(setPromises)\r\n\t\tthis.metricsService.recordCacheOperation('set', 'multi-layer', 'success')\r\n\t}\r\n\r\n\t/**\r\n\t * Delete a key from all cache layers\r\n\t */\r\n\tasync delete(namespace: string, identifier: string, params?: Record<string, any>): Promise<void> {\r\n\t\tconst key = this.keyStrategy.generateKey(namespace, identifier, params)\r\n\r\n\t\tconst deletePromises = this.layers.map(async (layer) => {\r\n\t\t\ttry {\r\n\t\t\t\tawait layer.delete(key)\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`Cache DELETE in ${layer.getLayerName()} layer for key: ${key}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache DELETE failed in ${layer.getLayerName()} layer for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tawait Promise.allSettled(deletePromises)\r\n\t\tthis.popularKeys.delete(key)\r\n\t\tthis.metricsService.recordCacheOperation('delete', 'multi-layer', 'success')\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a key exists in any cache layer\r\n\t */\r\n\tasync exists(namespace: string, identifier: string, params?: Record<string, any>): Promise<boolean> {\r\n\t\tconst key = this.keyStrategy.generateKey(namespace, identifier, params)\r\n\r\n\t\tfor (const layer of this.layers) {\r\n\t\t\ttry {\r\n\t\t\t\tif (await layer.exists(key)) {\r\n\t\t\t\t\treturn true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache EXISTS check failed in ${layer.getLayerName()} layer for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Clear all cache layers\r\n\t */\r\n\tasync clear(): Promise<void> {\r\n\t\tconst clearPromises = this.layers.map(async (layer) => {\r\n\t\t\ttry {\r\n\t\t\t\tawait layer.clear()\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`Cache CLEARED in ${layer.getLayerName()} layer`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Cache CLEAR failed in ${layer.getLayerName()} layer: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tawait Promise.allSettled(clearPromises)\r\n\t\tthis.popularKeys.clear()\r\n\t\tthis.metricsService.recordCacheOperation('flush', 'multi-layer', 'success')\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidate keys by namespace\r\n\t */\r\n\tasync invalidateNamespace(namespace: string): Promise<void> {\r\n\t\tCorrelatedLogger.debug(\r\n\t\t\t`Invalidating cache namespace: ${namespace}`,\r\n\t\t\tMultiLayerCacheManager.name,\r\n\t\t)\r\n\r\n\t\tawait this.clear()\r\n\t\tthis.metricsService.recordCacheOperation('flush', 'multi-layer', 'success')\r\n\t}\r\n\r\n\t/**\r\n\t * Get comprehensive cache statistics\r\n\t */\r\n\tasync getStats(): Promise<MultiLayerCacheStats> {\r\n\t\tconst layerStats: Record<string, CacheLayerStats> = {}\r\n\t\tlet totalHits = 0\r\n\t\tlet totalMisses = 0\r\n\t\tconst layerHitDistribution: Record<string, number> = {}\r\n\r\n\t\tfor (const layer of this.layers) {\r\n\t\t\ttry {\r\n\t\t\t\tconst stats = await layer.getStats()\r\n\t\t\t\tlayerStats[layer.getLayerName()] = stats\r\n\t\t\t\ttotalHits += stats.hits\r\n\t\t\t\ttotalMisses += stats.misses\r\n\t\t\t\tlayerHitDistribution[layer.getLayerName()] = stats.hits\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Failed to get stats from ${layer.getLayerName()} layer: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t\tlayerStats[layer.getLayerName()] = {\r\n\t\t\t\t\thits: 0,\r\n\t\t\t\t\tmisses: 0,\r\n\t\t\t\t\tkeys: 0,\r\n\t\t\t\t\thitRate: 0,\r\n\t\t\t\t\terrors: 1,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst totalRequests = totalHits + totalMisses\r\n\t\tconst overallHitRate = totalRequests > 0 ? totalHits / totalRequests : 0\r\n\r\n\t\treturn {\r\n\t\t\tlayers: layerStats,\r\n\t\t\ttotalHits,\r\n\t\t\ttotalMisses,\r\n\t\t\toverallHitRate,\r\n\t\t\tlayerHitDistribution,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Preload popular keys into higher priority layers\r\n\t */\r\n\tasync preloadPopularKeys(): Promise<void> {\r\n\t\tif (!this.preloadingEnabled) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst popularKeys = Array.from(this.popularKeys.entries())\r\n\t\t\t.sort(([, a], [, b]) => b - a)\r\n\t\t\t.slice(0, 100)\r\n\t\t\t.map(([key]) => key)\r\n\r\n\t\tCorrelatedLogger.debug(\r\n\t\t\t`Preloading ${popularKeys.length} popular keys`,\r\n\t\t\tMultiLayerCacheManager.name,\r\n\t\t)\r\n\r\n\t\tfor (const key of popularKeys) {\r\n\t\t\ttry {\r\n\t\t\t\tfor (let i = this.layers.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tconst value = await this.layers[i].get(key)\r\n\t\t\t\t\tif (value !== null) {\r\n\t\t\t\t\t\tfor (let j = 0; j < i; j++) {\r\n\t\t\t\t\t\t\tawait this.layers[j].set(key, value)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Failed to preload key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Backfill higher priority layers when a cache hit occurs in a lower priority layer\r\n\t */\r\n\tprivate async backfillLayers<T>(key: string, value: T, sourceLayer: CacheLayer): Promise<void> {\r\n\t\tconst sourceIndex = this.layers.findIndex(layer => layer === sourceLayer)\r\n\t\tif (sourceIndex <= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst backfillPromises = this.layers.slice(0, sourceIndex).map(async (layer) => {\r\n\t\t\ttry {\r\n\t\t\t\tawait layer.set(key, value, undefined)\r\n\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t`Backfilled ${layer.getLayerName()} layer with key: ${key}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`Failed to backfill ${layer.getLayerName()} layer for key ${key}: ${(error as Error).message}`,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tawait Promise.allSettled(backfillPromises)\r\n\t}\r\n\r\n\t/**\r\n\t * Track key access frequency for preloading\r\n\t */\r\n\tprivate trackKeyAccess(key: string): void {\r\n\t\tif (!this.preloadingEnabled) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst currentCount = this.popularKeys.get(key) || 0\r\n\t\tthis.popularKeys.set(key, currentCount + 1)\r\n\r\n\t\tif (this.popularKeys.size > 10000) {\r\n\t\t\tconst entries = Array.from(this.popularKeys.entries())\r\n\t\t\t\t.sort(([, a], [, b]) => b - a)\r\n\t\t\t\t.slice(0, 5000)\r\n\r\n\t\t\tthis.popularKeys.clear()\r\n\t\t\tentries.forEach(([k, v]) => this.popularKeys.set(k, v))\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Start periodic preloading\r\n\t */\r\n\tprivate startPreloading(): void {\r\n\t\tconst interval = this._configService.getOptional('cache.preloading.interval', 300000)\r\n\r\n\t\tsetInterval(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tawait this.preloadPopularKeys()\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t\t`Preloading failed: ${(error as Error).message}`,\r\n\t\t\t\t\t(error as Error).stack,\r\n\t\t\t\t\tMultiLayerCacheManager.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}, interval)\r\n\r\n\t\tCorrelatedLogger.debug(\r\n\t\t\t`Cache preloading started with ${interval}ms interval`,\r\n\t\t\tMultiLayerCacheManager.name,\r\n\t\t)\r\n\t}\r\n}\r\n"],"names":["ConfigService","CorrelatedLogger","MetricsService","Injectable","FileCacheLayer","MemoryCacheLayer","RedisCacheLayer","DefaultCacheKeyStrategy","MultiLayerCacheManager","_configService","metricsService","memoryCacheLayer","redisCacheLayer","fileCacheLayer","layers","popularKeys","Map","keyStrategy","preloadingEnabled","getOptional","onModuleInit","sort","a","b","getPriority","debug","length","map","l","getLayerName","join","name","startPreloading","get","namespace","identifier","params","key","generateKey","trackKeyAccess","layer","value","recordCacheOperation","backfillLayers","error","warn","message","set","ttl","setPromises","Promise","allSettled","delete","deletePromises","exists","clear","clearPromises","invalidateNamespace","getStats","layerStats","totalHits","totalMisses","layerHitDistribution","stats","hits","misses","keys","hitRate","errors","totalRequests","overallHitRate","preloadPopularKeys","Array","from","entries","slice","i","j","sourceLayer","sourceIndex","findIndex","backfillPromises","undefined","currentCount","size","forEach","k","v","interval","setInterval","stack"],"mappings":"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"}