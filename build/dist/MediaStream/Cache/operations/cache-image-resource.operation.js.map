{"version":3,"sources":["../../../../../src/MediaStream/Cache/operations/cache-image-resource.operation.ts"],"sourcesContent":["import type {\r\n\tResizeOptions,\r\n} from '@microservice/API/dto/cache-image-request.dto'\r\nimport type { ResourceIdentifierKP } from '@microservice/common/constants/key-properties.constant'\r\nimport { Buffer } from 'node:buffer'\r\nimport { createHash } from 'node:crypto'\r\nimport { access, readFile, unlink, writeFile } from 'node:fs/promises'\r\nimport * as path from 'node:path'\r\nimport { cwd } from 'node:process'\r\nimport CacheImageRequest, {\r\n\tBackgroundOptions,\r\n\tFitOptions,\r\n\tPositionOptions,\r\n\tSupportedResizeFormats,\r\n} from '@microservice/API/dto/cache-image-request.dto'\r\nimport UnableToFetchResourceException from '@microservice/API/exceptions/unable-to-fetch-resource.exception'\r\nimport { MultiLayerCacheManager } from '@microservice/Cache/services/multi-layer-cache.manager'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { PerformanceTracker } from '@microservice/Correlation/utils/performance-tracker.util'\r\nimport ResourceMetaData from '@microservice/HTTP/dto/resource-meta-data.dto'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport FetchResourceResponseJob from '@microservice/Queue/jobs/fetch-resource-response.job'\r\nimport GenerateResourceIdentityFromRequestJob from '@microservice/Queue/jobs/generate-resource-identity-from-request.job'\r\nimport StoreResourceResponseToFileJob from '@microservice/Queue/jobs/store-resource-response-to-file.job'\r\nimport WebpImageManipulationJob from '@microservice/Queue/jobs/webp-image-manipulation.job'\r\nimport { JobQueueManager } from '@microservice/Queue/services/job-queue.manager'\r\nimport { JobPriority } from '@microservice/Queue/types/job.types'\r\nimport ValidateCacheImageRequestRule from '@microservice/Validation/rules/validate-cache-image-request.rule'\r\nimport { InputSanitizationService } from '@microservice/Validation/services/input-sanitization.service'\r\nimport { Injectable, InternalServerErrorException, Scope } from '@nestjs/common'\r\n\r\n@Injectable({ scope: Scope.REQUEST })\r\nexport default class CacheImageResourceOperation {\r\n\tprivate readonly basePath = cwd()\r\n\r\n\tconstructor(\r\n\t\tprivate readonly validateCacheImageRequest: ValidateCacheImageRequestRule,\r\n\t\tprivate readonly fetchResourceResponseJob: FetchResourceResponseJob,\r\n\t\tprivate readonly webpImageManipulationJob: WebpImageManipulationJob,\r\n\t\tprivate readonly storeResourceResponseToFileJob: StoreResourceResponseToFileJob,\r\n\t\tprivate readonly generateResourceIdentityFromRequestJob: GenerateResourceIdentityFromRequestJob,\r\n\t\tprivate readonly cacheManager: MultiLayerCacheManager,\r\n\t\tprivate readonly inputSanitizationService: InputSanitizationService,\r\n\t\tprivate readonly jobQueueManager: JobQueueManager,\r\n\t\tprivate readonly metricsService: MetricsService,\r\n\t) { }\r\n\r\n\trequest!: CacheImageRequest\r\n\r\n\tid!: ResourceIdentifierKP\r\n\r\n\tmetaData!: ResourceMetaData\r\n\r\n\tget getResourcePath(): string {\r\n\t\treturn path.join(this.basePath, 'storage', `${this.id}.rsc`)\r\n\t}\r\n\r\n\tget getResourceTempPath(): string {\r\n\t\treturn path.join(this.basePath, 'storage', `${this.id}.rst`)\r\n\t}\r\n\r\n\tget getResourceMetaPath(): string {\r\n\t\treturn path.join(this.basePath, 'storage', `${this.id}.rsm`)\r\n\t}\r\n\r\n\tget resourceExists(): Promise<boolean> {\r\n\t\treturn (async () => {\r\n\t\t\tPerformanceTracker.startPhase('resource_exists_check')\r\n\r\n\t\t\ttry {\r\n\t\t\t\tCorrelatedLogger.debug(`Checking if resource exists in cache: ${this.id}`, CacheImageResourceOperation.name)\r\n\r\n\t\t\t\tconst cachedResource = await this.cacheManager.get<{ data: Buffer, metadata: ResourceMetaData }>('image', this.id)\r\n\t\t\t\tif (cachedResource) {\r\n\t\t\t\t\tif (!cachedResource.metadata || typeof cachedResource.metadata.dateCreated !== 'number') {\r\n\t\t\t\t\t\tCorrelatedLogger.warn(`Corrupted cache data found, deleting: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\t\tawait this.cacheManager.delete('image', this.id)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tconst isValid = cachedResource.metadata.dateCreated + cachedResource.metadata.privateTTL > Date.now()\r\n\t\t\t\t\t\tif (isValid) {\r\n\t\t\t\t\t\t\tCorrelatedLogger.debug(`Resource found in cache and is valid: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'hit', duration || 0)\r\n\t\t\t\t\t\t\treturn true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tCorrelatedLogger.debug(`Resource found in cache but expired: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\t\t\tawait this.cacheManager.delete('image', this.id)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst resourcePathExists = await access(this.getResourcePath).then(() => true).catch(() => false)\r\n\t\t\t\tif (!resourcePathExists) {\r\n\t\t\t\t\tCorrelatedLogger.debug(`Resource not found in filesystem: ${this.getResourcePath}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst resourceMetaPathExists = await access(this.getResourceMetaPath).then(() => true).catch(() => false)\r\n\t\t\t\tif (!resourceMetaPathExists) {\r\n\t\t\t\t\tCorrelatedLogger.warn(`Metadata path does not exist: ${this.getResourceMetaPath}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst headers = await this.getHeaders\r\n\r\n\t\t\t\tif (!headers) {\r\n\t\t\t\t\tCorrelatedLogger.warn('Metadata headers are missing or invalid', CacheImageResourceOperation.name)\r\n\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!headers.version || headers.version !== 1) {\r\n\t\t\t\t\tCorrelatedLogger.warn('Invalid or missing version in metadata', CacheImageResourceOperation.name)\r\n\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst isValid = headers.dateCreated + headers.privateTTL > Date.now()\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', isValid ? 'hit' : 'miss', duration || 0)\r\n\t\t\t\treturn isValid\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(`Error checking resource existence: ${(error as Error).message}`, CacheImageResourceOperation.name)\r\n\t\t\t\tthis.metricsService.recordError('cache_check', 'resource_exists')\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'error', duration || 0)\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t})()\r\n\t}\r\n\r\n\tget getHeaders(): Promise<ResourceMetaData> {\r\n\t\treturn (async (): Promise<ResourceMetaData> => {\r\n\t\t\tif (!this.metaData) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst cachedResource = await this.getCachedResource()\r\n\t\t\t\t\tif (cachedResource && cachedResource.metadata) {\r\n\t\t\t\t\t\tthis.metaData = cachedResource.metadata\r\n\t\t\t\t\t\treturn this.metaData\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst exists = await access(this.getResourceMetaPath).then(() => true).catch(() => false)\r\n\t\t\t\t\tif (exists) {\r\n\t\t\t\t\t\tconst content = await readFile(this.getResourceMetaPath, 'utf8')\r\n\t\t\t\t\t\tthis.metaData = new ResourceMetaData(JSON.parse(content))\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tCorrelatedLogger.warn('Metadata file does not exist.', CacheImageResourceOperation.name)\r\n\t\t\t\t\t\treturn new ResourceMetaData()\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tCorrelatedLogger.error(`Failed to read or parse resource metadata: ${error}`, '', CacheImageResourceOperation.name)\r\n\t\t\t\t\treturn new ResourceMetaData()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this.metaData\r\n\t\t})()\r\n\t}\r\n\r\n\tpublic async setup(cacheImageRequest: CacheImageRequest): Promise<void> {\r\n\t\tPerformanceTracker.startPhase('setup')\r\n\r\n\t\ttry {\r\n\t\t\tCorrelatedLogger.debug('Setting up cache image resource operation', CacheImageResourceOperation.name)\r\n\r\n\t\t\tthis.request = await this.inputSanitizationService.sanitize(cacheImageRequest) as CacheImageRequest\r\n\r\n\t\t\tif (this.request.resourceTarget && !this.inputSanitizationService.validateUrl(this.request.resourceTarget)) {\r\n\t\t\t\tthrow new Error(`Invalid or disallowed URL: ${this.request.resourceTarget}`)\r\n\t\t\t}\r\n\r\n\t\t\tif (this.request.resizeOptions?.width && this.request.resizeOptions?.height) {\r\n\t\t\t\tif (!this.inputSanitizationService.validateImageDimensions(this.request.resizeOptions.width, this.request.resizeOptions.height)) {\r\n\t\t\t\t\tthrow new Error(`Invalid image dimensions: ${this.request.resizeOptions.width}x${this.request.resizeOptions.height}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tawait this.validateCacheImageRequest.setup(this.request)\r\n\t\t\tawait this.validateCacheImageRequest.apply()\r\n\r\n\t\t\tthis.id = await this.generateResourceIdentityFromRequestJob.handle(this.request)\r\n\t\t\tthis.metaData = null as any\r\n\r\n\t\t\tCorrelatedLogger.debug(`Resource ID generated: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Setup failed: ${(error as Error).message}`, (error as Error).stack, CacheImageResourceOperation.name)\r\n\t\t\tthis.metricsService.recordError('validation', 'setup')\r\n\t\t\tthrow error\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tPerformanceTracker.endPhase('setup')\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async execute(): Promise<void> {\r\n\t\tPerformanceTracker.startPhase('execute')\r\n\r\n\t\ttry {\r\n\t\t\tCorrelatedLogger.debug('Executing cache image resource operation', CacheImageResourceOperation.name)\r\n\r\n\t\t\tif (await this.resourceExists) {\r\n\t\t\t\tCorrelatedLogger.log('Resource already exists in cache', CacheImageResourceOperation.name)\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('execute')\r\n\t\t\t\tthis.metricsService.recordImageProcessing('cache_check', 'cached', 'success', duration || 0)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tconst shouldUseQueue = this.shouldUseBackgroundProcessing()\r\n\r\n\t\t\tif (shouldUseQueue) {\r\n\t\t\t\tCorrelatedLogger.debug('Queuing image processing job for background processing', CacheImageResourceOperation.name)\r\n\t\t\t\tawait this.queueImageProcessing()\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tawait this.processImageSynchronously()\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Failed to execute CacheImageResourceOperation: ${(error as Error).message}`, (error as Error).stack, CacheImageResourceOperation.name)\r\n\t\t\tthis.metricsService.recordError('image_processing', 'execute')\r\n\t\t\tconst duration = PerformanceTracker.endPhase('execute')\r\n\t\t\tthis.metricsService.recordImageProcessing('execute', 'unknown', 'error', duration || 0)\r\n\t\t\tthrow new InternalServerErrorException('Error fetching or processing image.')\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tPerformanceTracker.endPhase('execute')\r\n\t\t}\r\n\t}\r\n\r\n\tpublic shouldUseBackgroundProcessing(): boolean {\r\n\t\tconst resizeOptions = this.request.resizeOptions\r\n\t\tif (!resizeOptions)\r\n\t\t\treturn false\r\n\r\n\t\tconst width = resizeOptions.width || 0\r\n\t\tconst height = resizeOptions.height || 0\r\n\t\tconst totalPixels = width * height\r\n\r\n\t\tif (resizeOptions.format === 'svg') {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\tif (totalPixels > 8000000) {\r\n\t\t\tCorrelatedLogger.warn(`Image is too large to be processed synchronously: ${totalPixels} pixels`, CacheImageResourceOperation.name)\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\r\n\tprivate async queueImageProcessing(): Promise<void> {\r\n\t\tconst priority = this.request.resizeOptions?.width && this.request.resizeOptions.width > 1920\r\n\t\t\t? JobPriority.LOW\r\n\t\t\t: JobPriority.NORMAL\r\n\r\n\t\tawait this.jobQueueManager.addImageProcessingJob({\r\n\t\t\timageUrl: this.request.resourceTarget,\r\n\t\t\twidth: this.request.resizeOptions?.width ?? undefined,\r\n\t\t\theight: this.request.resizeOptions?.height ?? undefined,\r\n\t\t\tquality: this.request.resizeOptions?.quality,\r\n\t\t\tformat: this.request.resizeOptions?.format as 'webp' | 'jpeg' | 'png',\r\n\t\t\tfit: this.request.resizeOptions?.fit,\r\n\t\t\tposition: this.request.resizeOptions?.position,\r\n\t\t\tbackground: this.request.resizeOptions?.background,\r\n\t\t\ttrimThreshold: this.request.resizeOptions?.trimThreshold ?? undefined,\r\n\t\t\tcacheKey: this.id,\r\n\t\t\tpriority,\r\n\t\t})\r\n\r\n\t\tCorrelatedLogger.debug(`Image processing job queued with priority: ${priority}`, CacheImageResourceOperation.name)\r\n\t}\r\n\r\n\tprivate async processImageSynchronously(): Promise<void> {\r\n\t\tPerformanceTracker.startPhase('sync_processing')\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await this.fetchResourceResponseJob.handle(this.request)\r\n\t\t\tif (!response || response.status === 404) {\r\n\t\t\t\tthrow new UnableToFetchResourceException(this.request.resourceTarget)\r\n\t\t\t}\r\n\r\n\t\t\tconst contentLength = response.headers['content-length']\r\n\t\t\tif (contentLength) {\r\n\t\t\t\tconst sizeBytes = Number.parseInt(contentLength, 10)\r\n\t\t\t\tconst format = this.getFormatFromUrl(this.request.resourceTarget)\r\n\t\t\t\tif (!this.inputSanitizationService.validateFileSize(sizeBytes, format)) {\r\n\t\t\t\t\tthrow new Error(`File size ${sizeBytes} bytes exceeds limit for format ${format}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tawait this.storeResourceResponseToFileJob.handle(this.request.resourceTarget, this.getResourceTempPath, response)\r\n\r\n\t\t\tlet processedData: Buffer\r\n\t\t\tlet metadata!: ResourceMetaData\r\n\r\n\t\t\tlet isSourceSvg = false\r\n\t\t\ttry {\r\n\t\t\t\tconst fileContent = await readFile(this.getResourceTempPath, 'utf8')\r\n\t\t\t\tisSourceSvg = fileContent.trim().startsWith('<svg') || fileContent.includes('xmlns=\"http://www.w3.org/2000/svg\"')\r\n\t\t\t\tCorrelatedLogger.debug(`Source file SVG detection: ${isSourceSvg}`, CacheImageResourceOperation.name)\r\n\t\t\t}\r\n\t\t\tcatch {\r\n\t\t\t\tisSourceSvg = false\r\n\t\t\t\tCorrelatedLogger.debug('Could not read file as text, assuming not SVG', CacheImageResourceOperation.name)\r\n\t\t\t}\r\n\r\n\t\t\tif (isSourceSvg) {\r\n\t\t\t\tconst result = await this.processSvgImage()\r\n\t\t\t\tprocessedData = result.data\r\n\t\t\t\tmetadata = result.metadata\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst result = await this.processRasterImage()\r\n\t\t\t\tprocessedData = result.data\r\n\t\t\t\tmetadata = result.metadata\r\n\t\t\t}\r\n\r\n\t\t\tawait this.cacheManager.set('image', this.id, {\r\n\t\t\t\tdata: processedData,\r\n\t\t\t\tmetadata,\r\n\t\t\t}, metadata.privateTTL)\r\n\r\n\t\t\tawait writeFile(this.getResourcePath, processedData)\r\n\t\t\tawait writeFile(this.getResourceMetaPath, JSON.stringify(metadata), 'utf8')\r\n\r\n\t\t\ttry {\r\n\t\t\t\tawait unlink(this.getResourceTempPath)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(`Failed to delete temporary file: ${(error as Error).message}`, CacheImageResourceOperation.name)\r\n\t\t\t}\r\n\r\n\t\t\tconst format = metadata.format || 'unknown'\r\n\t\t\tconst duration = PerformanceTracker.endPhase('sync_processing')\r\n\t\t\tthis.metricsService.recordImageProcessing('process', format, 'success', duration || 0)\r\n\t\t\tCorrelatedLogger.debug(`Image processed successfully: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst duration = PerformanceTracker.endPhase('sync_processing')\r\n\t\t\tthis.metricsService.recordImageProcessing('process', 'unknown', 'error', duration || 0)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async processSvgImage(): Promise<{ data: Buffer, metadata: ResourceMetaData }> {\r\n\t\tCorrelatedLogger.debug('Processing SVG format', CacheImageResourceOperation.name)\r\n\r\n\t\tconst svgContent = await readFile(this.getResourceTempPath, 'utf8')\r\n\t\tif (!svgContent.toLowerCase().includes('<svg')) {\r\n\t\t\tCorrelatedLogger.warn('The file is not a valid SVG. Serving default WebP image.', CacheImageResourceOperation.name)\r\n\t\t\treturn await this.processDefaultImage()\r\n\t\t}\r\n\r\n\t\tconst needsResizing = (this.request.resizeOptions?.width !== null && !Number.isNaN(this.request.resizeOptions?.width))\r\n\t\t\t|| (this.request.resizeOptions?.height !== null && !Number.isNaN(this.request.resizeOptions?.height))\r\n\r\n\t\tif (!needsResizing) {\r\n\t\t\tconst data = Buffer.from(svgContent, 'utf8')\r\n\t\t\tconst metadata = new ResourceMetaData({\r\n\t\t\t\tversion: 1,\r\n\t\t\t\tsize: data.length.toString(),\r\n\t\t\t\tformat: 'svg',\r\n\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t})\r\n\r\n\t\t\treturn { data, metadata }\r\n\t\t}\r\n\t\telse {\r\n\t\t\tCorrelatedLogger.debug('SVG needs resizing, converting to PNG for better quality', CacheImageResourceOperation.name)\r\n\t\t\tconst result = await this.webpImageManipulationJob.handle(\r\n\t\t\t\tthis.getResourceTempPath,\r\n\t\t\t\tthis.getResourcePath,\r\n\t\t\t\tthis.request.resizeOptions,\r\n\t\t\t)\r\n\r\n\t\t\tconst data = await readFile(this.getResourcePath)\r\n\t\t\tconst metadata = new ResourceMetaData({\r\n\t\t\t\tversion: 1,\r\n\t\t\t\tsize: result.size,\r\n\t\t\t\tformat: result.format,\r\n\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t})\r\n\r\n\t\t\treturn { data, metadata }\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async processRasterImage(): Promise<{ data: Buffer, metadata: ResourceMetaData }> {\r\n\t\tconst result = await this.webpImageManipulationJob.handle(\r\n\t\t\tthis.getResourceTempPath,\r\n\t\t\tthis.getResourcePath,\r\n\t\t\tthis.request.resizeOptions,\r\n\t\t)\r\n\r\n\t\tCorrelatedLogger.debug(`processRasterImage received result: ${JSON.stringify(result)}`, 'CacheImageResourceOperation')\r\n\r\n\t\tconst data = await readFile(this.getResourcePath)\r\n\r\n\t\tconst actualFormat = result.format\r\n\t\tconst requestedFormat = this.request.resizeOptions?.format\r\n\r\n\t\tif (requestedFormat === 'svg' && result.format !== 'svg') {\r\n\t\t\tCorrelatedLogger.debug(`SVG format requested but actual format is ${result.format}. Using actual format for content-type.`, 'CacheImageResourceOperation')\r\n\t\t}\r\n\r\n\t\tconst metadata = new ResourceMetaData({\r\n\t\t\tversion: 1,\r\n\t\t\tsize: result.size,\r\n\t\t\tformat: actualFormat,\r\n\t\t\tdateCreated: Date.now(),\r\n\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t})\r\n\r\n\t\tCorrelatedLogger.debug(`processRasterImage created metadata: ${JSON.stringify(metadata)}`, 'CacheImageResourceOperation')\r\n\r\n\t\treturn { data, metadata }\r\n\t}\r\n\r\n\tprivate async processDefaultImage(): Promise<{ data: Buffer, metadata: ResourceMetaData }> {\r\n\t\tconst optimizedPath = await this.optimizeAndServeDefaultImage(this.request.resizeOptions)\r\n\t\tconst data = await readFile(optimizedPath)\r\n\t\tconst metadata = new ResourceMetaData({\r\n\t\t\tversion: 1,\r\n\t\t\tsize: data.length.toString(),\r\n\t\t\tformat: 'webp',\r\n\t\t\tdateCreated: Date.now(),\r\n\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t})\r\n\r\n\t\treturn { data, metadata }\r\n\t}\r\n\r\n\tprivate getFormatFromUrl(url: string): string {\r\n\t\tconst extension = url.split('.').pop()?.toLowerCase()\r\n\t\treturn extension || 'unknown'\r\n\t}\r\n\r\n\tpublic async optimizeAndServeDefaultImage(resizeOptions: ResizeOptions): Promise<string> {\r\n\t\tconst resizeOptionsWithDefaults: ResizeOptions = {\r\n\t\t\twidth: resizeOptions.width || 800,\r\n\t\t\theight: resizeOptions.height || 600,\r\n\t\t\tfit: resizeOptions.fit || FitOptions.contain,\r\n\t\t\tposition: resizeOptions.position || PositionOptions.entropy,\r\n\t\t\tformat: resizeOptions.format || SupportedResizeFormats.webp,\r\n\t\t\tbackground: resizeOptions.background || BackgroundOptions.white,\r\n\t\t\ttrimThreshold: resizeOptions.trimThreshold || 5,\r\n\t\t\tquality: resizeOptions.quality || 80,\r\n\t\t}\r\n\r\n\t\tconst optionsString = this.createOptionsString(resizeOptionsWithDefaults)\r\n\t\tconst optimizedPath = path.join(this.basePath, 'storage', `default_optimized_${optionsString}.webp`)\r\n\r\n\t\ttry {\r\n\t\t\tawait access(optimizedPath)\r\n\t\t\treturn optimizedPath\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tif ((error as any).code === 'ENOENT') {\r\n\t\t\t\tconst result = await this.webpImageManipulationJob.handle(\r\n\t\t\t\t\tpath.join(this.basePath, 'public', 'default.png'),\r\n\t\t\t\t\toptimizedPath,\r\n\t\t\t\t\tresizeOptionsWithDefaults,\r\n\t\t\t\t)\r\n\r\n\t\t\t\tif (!result) {\r\n\t\t\t\t\tthrow new Error('Failed to optimize default image')\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn optimizedPath\r\n\t\t\t}\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tprivate createOptionsString(options: ResizeOptions): string {\r\n\t\tconst hash = createHash('md5')\r\n\t\thash.update(JSON.stringify(options))\r\n\t\treturn hash.digest('hex')\r\n\t}\r\n\r\n\t/**\r\n\t * Get cached resource data from multi-layer cache or filesystem\r\n\t */\r\n\tpublic async getCachedResource(): Promise<{ data: Buffer, metadata: ResourceMetaData } | null> {\r\n\t\tPerformanceTracker.startPhase('get_cached_resource')\r\n\r\n\t\ttry {\r\n\t\t\tlet cachedResource = await this.cacheManager.get<{ data: Buffer, metadata: ResourceMetaData }>('image', this.id)\r\n\r\n\t\t\tif (cachedResource && (!cachedResource.metadata || typeof cachedResource.metadata.dateCreated !== 'number')) {\r\n\t\t\t\tCorrelatedLogger.warn(`Corrupted cache data found in getCachedResource, deleting: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\tawait this.cacheManager.delete('image', this.id)\r\n\t\t\t\tcachedResource = null\r\n\t\t\t}\r\n\r\n\t\t\tif (!cachedResource) {\r\n\t\t\t\tconst cachedData = await this.cacheManager.get<string>('images', this.id)\r\n\t\t\t\tif (cachedData) {\r\n\t\t\t\t\tconst metadata = new ResourceMetaData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tsize: Buffer.from(cachedData, 'base64').length.toString(),\r\n\t\t\t\t\t\tformat: this.request.resizeOptions?.format || 'webp',\r\n\t\t\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tcachedResource = {\r\n\t\t\t\t\t\tdata: Buffer.from(cachedData, 'base64'),\r\n\t\t\t\t\t\tmetadata,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (cachedResource) {\r\n\t\t\t\tCorrelatedLogger.debug(`Resource retrieved from cache: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('get_cached_resource')\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'hit', duration || 0)\r\n\t\t\t\treturn cachedResource\r\n\t\t\t}\r\n\r\n\t\t\tconst resourceExists = await access(this.getResourcePath).then(() => true).catch(() => false)\r\n\t\t\tconst metadataExists = await access(this.getResourceMetaPath).then(() => true).catch(() => false)\r\n\r\n\t\t\tif (resourceExists && metadataExists) {\r\n\t\t\t\tconst data = await readFile(this.getResourcePath)\r\n\t\t\t\tconst metadataContent = await readFile(this.getResourceMetaPath, 'utf8')\r\n\t\t\t\tconst metadata = new ResourceMetaData(JSON.parse(metadataContent))\r\n\r\n\t\t\t\tawait this.cacheManager.set('image', this.id, { data, metadata }, metadata.privateTTL)\r\n\r\n\t\t\t\tCorrelatedLogger.debug(`Resource retrieved from filesystem and cached: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('get_cached_resource')\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'filesystem', 'hit', duration || 0)\r\n\t\t\t\treturn { data, metadata }\r\n\t\t\t}\r\n\r\n\t\t\tCorrelatedLogger.debug(`Resource not found: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\tconst duration = PerformanceTracker.endPhase('get_cached_resource')\r\n\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\treturn null\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Failed to get cached resource: ${(error as Error).message}`, (error as Error).stack, CacheImageResourceOperation.name)\r\n\t\t\tthis.metricsService.recordError('cache_retrieval', 'get_cached_resource')\r\n\t\t\tconst duration = PerformanceTracker.endPhase('get_cached_resource')\r\n\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'error', duration || 0)\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["Buffer","createHash","access","readFile","unlink","writeFile","path","cwd","BackgroundOptions","FitOptions","PositionOptions","SupportedResizeFormats","UnableToFetchResourceException","MultiLayerCacheManager","CorrelatedLogger","PerformanceTracker","ResourceMetaData","MetricsService","FetchResourceResponseJob","GenerateResourceIdentityFromRequestJob","StoreResourceResponseToFileJob","WebpImageManipulationJob","JobQueueManager","JobPriority","ValidateCacheImageRequestRule","InputSanitizationService","Injectable","InternalServerErrorException","Scope","CacheImageResourceOperation","getResourcePath","join","basePath","id","getResourceTempPath","getResourceMetaPath","resourceExists","startPhase","debug","name","cachedResource","cacheManager","get","metadata","dateCreated","warn","delete","isValid","privateTTL","Date","now","duration","endPhase","metricsService","recordCacheOperation","resourcePathExists","then","catch","resourceMetaPathExists","headers","getHeaders","version","error","message","recordError","metaData","getCachedResource","exists","content","JSON","parse","setup","cacheImageRequest","request","inputSanitizationService","sanitize","resourceTarget","validateUrl","Error","resizeOptions","width","height","validateImageDimensions","validateCacheImageRequest","apply","generateResourceIdentityFromRequestJob","handle","stack","execute","log","recordImageProcessing","shouldUseQueue","shouldUseBackgroundProcessing","queueImageProcessing","processImageSynchronously","totalPixels","format","priority","LOW","NORMAL","jobQueueManager","addImageProcessingJob","imageUrl","undefined","quality","fit","position","background","trimThreshold","cacheKey","response","fetchResourceResponseJob","status","contentLength","sizeBytes","Number","parseInt","getFormatFromUrl","validateFileSize","storeResourceResponseToFileJob","processedData","isSourceSvg","fileContent","trim","startsWith","includes","result","processSvgImage","data","processRasterImage","set","stringify","svgContent","toLowerCase","processDefaultImage","needsResizing","isNaN","from","size","length","toString","publicTTL","webpImageManipulationJob","actualFormat","requestedFormat","optimizedPath","optimizeAndServeDefaultImage","url","extension","split","pop","resizeOptionsWithDefaults","contain","entropy","webp","white","optionsString","createOptionsString","code","options","hash","update","digest","cachedData","metadataExists","metadataContent","scope","REQUEST"],"mappings":"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"}