{"version":3,"sources":["../../../../../src/MediaStream/Cache/operations/cache-image-resource.operation.ts"],"sourcesContent":["import type {\r\n\tResizeOptions,\r\n} from '@microservice/API/dto/cache-image-request.dto'\r\nimport type { ResourceIdentifierKP } from '@microservice/common/constants/key-properties.constant'\r\nimport { Buffer } from 'node:buffer'\r\nimport { createHash } from 'node:crypto'\r\nimport { access, readFile, unlink, writeFile } from 'node:fs/promises'\r\nimport * as path from 'node:path'\r\nimport { cwd } from 'node:process'\r\nimport CacheImageRequest, {\r\n\tBackgroundOptions,\r\n\tFitOptions,\r\n\tPositionOptions,\r\n\tSupportedResizeFormats,\r\n} from '@microservice/API/dto/cache-image-request.dto'\r\nimport UnableToFetchResourceException from '@microservice/API/exceptions/unable-to-fetch-resource.exception'\r\nimport { MultiLayerCacheManager } from '@microservice/Cache/services/multi-layer-cache.manager'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { PerformanceTracker } from '@microservice/Correlation/utils/performance-tracker.util'\r\nimport ResourceMetaData from '@microservice/HTTP/dto/resource-meta-data.dto'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport FetchResourceResponseJob from '@microservice/Queue/jobs/fetch-resource-response.job'\r\nimport GenerateResourceIdentityFromRequestJob from '@microservice/Queue/jobs/generate-resource-identity-from-request.job'\r\nimport StoreResourceResponseToFileJob from '@microservice/Queue/jobs/store-resource-response-to-file.job'\r\nimport WebpImageManipulationJob from '@microservice/Queue/jobs/webp-image-manipulation.job'\r\nimport { JobQueueManager } from '@microservice/Queue/services/job-queue.manager'\r\nimport { JobPriority } from '@microservice/Queue/types/job.types'\r\nimport ValidateCacheImageRequestRule from '@microservice/Validation/rules/validate-cache-image-request.rule'\r\nimport { InputSanitizationService } from '@microservice/Validation/services/input-sanitization.service'\r\nimport { Injectable, InternalServerErrorException, Scope } from '@nestjs/common'\r\n\r\n@Injectable({ scope: Scope.REQUEST })\r\nexport default class CacheImageResourceOperation {\r\n\tprivate readonly basePath = cwd()\r\n\r\n\tconstructor(\r\n\t\tprivate readonly validateCacheImageRequest: ValidateCacheImageRequestRule,\r\n\t\tprivate readonly fetchResourceResponseJob: FetchResourceResponseJob,\r\n\t\tprivate readonly webpImageManipulationJob: WebpImageManipulationJob,\r\n\t\tprivate readonly storeResourceResponseToFileJob: StoreResourceResponseToFileJob,\r\n\t\tprivate readonly generateResourceIdentityFromRequestJob: GenerateResourceIdentityFromRequestJob,\r\n\t\tprivate readonly cacheManager: MultiLayerCacheManager,\r\n\t\tprivate readonly inputSanitizationService: InputSanitizationService,\r\n\t\tprivate readonly jobQueueManager: JobQueueManager,\r\n\t\tprivate readonly metricsService: MetricsService,\r\n\t) { }\r\n\r\n\trequest!: CacheImageRequest\r\n\r\n\tid!: ResourceIdentifierKP\r\n\r\n\tmetaData!: ResourceMetaData\r\n\r\n\tget getResourcePath(): string {\r\n\t\treturn path.join(this.basePath, 'storage', `${this.id}.rsc`)\r\n\t}\r\n\r\n\tget getResourceTempPath(): string {\r\n\t\treturn path.join(this.basePath, 'storage', `${this.id}.rst`)\r\n\t}\r\n\r\n\tget getResourceMetaPath(): string {\r\n\t\treturn path.join(this.basePath, 'storage', `${this.id}.rsm`)\r\n\t}\r\n\r\n\tget resourceExists(): Promise<boolean> {\r\n\t\treturn (async () => {\r\n\t\t\tPerformanceTracker.startPhase('resource_exists_check')\r\n\r\n\t\t\ttry {\r\n\t\t\t\tCorrelatedLogger.debug(`Checking if resource exists in cache: ${this.id}`, CacheImageResourceOperation.name)\r\n\r\n\t\t\t\tconst cachedResource = await this.cacheManager.get<{ data: Buffer, metadata: ResourceMetaData }>('image', this.id)\r\n\t\t\t\tif (cachedResource) {\r\n\t\t\t\t\tif (!cachedResource.metadata || typeof cachedResource.metadata.dateCreated !== 'number') {\r\n\t\t\t\t\t\tCorrelatedLogger.warn(`Corrupted cache data found, deleting: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\t\tawait this.cacheManager.delete('image', this.id)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tconst isValid = cachedResource.metadata.dateCreated + cachedResource.metadata.privateTTL > Date.now()\r\n\t\t\t\t\t\tif (isValid) {\r\n\t\t\t\t\t\t\tCorrelatedLogger.debug(`Resource found in cache and is valid: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'hit', duration || 0)\r\n\t\t\t\t\t\t\treturn true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tCorrelatedLogger.debug(`Resource found in cache but expired: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\t\t\tawait this.cacheManager.delete('image', this.id)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst resourcePathExists = await access(this.getResourcePath).then(() => true).catch(() => false)\r\n\t\t\t\tif (!resourcePathExists) {\r\n\t\t\t\t\tCorrelatedLogger.debug(`Resource not found in filesystem: ${this.getResourcePath}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst resourceMetaPathExists = await access(this.getResourceMetaPath).then(() => true).catch(() => false)\r\n\t\t\t\tif (!resourceMetaPathExists) {\r\n\t\t\t\t\tCorrelatedLogger.warn(`Metadata path does not exist: ${this.getResourceMetaPath}`, CacheImageResourceOperation.name)\r\n\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst headers = await this.getHeaders\r\n\r\n\t\t\t\tif (!headers) {\r\n\t\t\t\t\tCorrelatedLogger.warn('Metadata headers are missing or invalid', CacheImageResourceOperation.name)\r\n\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!headers.version || headers.version !== 1) {\r\n\t\t\t\t\tCorrelatedLogger.warn('Invalid or missing version in metadata', CacheImageResourceOperation.name)\r\n\t\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst isValid = headers.dateCreated + headers.privateTTL > Date.now()\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', isValid ? 'hit' : 'miss', duration || 0)\r\n\t\t\t\treturn isValid\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(`Error checking resource existence: ${(error as Error).message}`, CacheImageResourceOperation.name)\r\n\t\t\t\tthis.metricsService.recordError('cache_check', 'resource_exists')\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('resource_exists_check')\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'error', duration || 0)\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t})()\r\n\t}\r\n\r\n\tget getHeaders(): Promise<ResourceMetaData> {\r\n\t\treturn (async (): Promise<ResourceMetaData> => {\r\n\t\t\tif (!this.metaData) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst cachedResource = await this.getCachedResource()\r\n\t\t\t\t\tif (cachedResource && cachedResource.metadata) {\r\n\t\t\t\t\t\tthis.metaData = cachedResource.metadata\r\n\t\t\t\t\t\treturn this.metaData\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst exists = await access(this.getResourceMetaPath).then(() => true).catch(() => false)\r\n\t\t\t\t\tif (exists) {\r\n\t\t\t\t\t\tconst content = await readFile(this.getResourceMetaPath, 'utf8')\r\n\t\t\t\t\t\tthis.metaData = new ResourceMetaData(JSON.parse(content))\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tCorrelatedLogger.warn('Metadata file does not exist.', CacheImageResourceOperation.name)\r\n\t\t\t\t\t\treturn new ResourceMetaData()\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\tCorrelatedLogger.error(`Failed to read or parse resource metadata: ${error}`, '', CacheImageResourceOperation.name)\r\n\t\t\t\t\treturn new ResourceMetaData()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this.metaData\r\n\t\t})()\r\n\t}\r\n\r\n\tpublic async setup(cacheImageRequest: CacheImageRequest): Promise<void> {\r\n\t\tPerformanceTracker.startPhase('setup')\r\n\r\n\t\ttry {\r\n\t\t\tCorrelatedLogger.debug('Setting up cache image resource operation', CacheImageResourceOperation.name)\r\n\r\n\t\t\tthis.request = await this.inputSanitizationService.sanitize(cacheImageRequest) as CacheImageRequest\r\n\r\n\t\t\tif (this.request.resourceTarget && !this.inputSanitizationService.validateUrl(this.request.resourceTarget)) {\r\n\t\t\t\tthrow new Error(`Invalid or disallowed URL: ${this.request.resourceTarget}`)\r\n\t\t\t}\r\n\r\n\t\t\tif (this.request.resizeOptions?.width && this.request.resizeOptions?.height) {\r\n\t\t\t\tif (!this.inputSanitizationService.validateImageDimensions(this.request.resizeOptions.width, this.request.resizeOptions.height)) {\r\n\t\t\t\t\tthrow new Error(`Invalid image dimensions: ${this.request.resizeOptions.width}x${this.request.resizeOptions.height}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tawait this.validateCacheImageRequest.setup(this.request)\r\n\t\t\tawait this.validateCacheImageRequest.apply()\r\n\r\n\t\t\tthis.id = await this.generateResourceIdentityFromRequestJob.handle(this.request)\r\n\t\t\tthis.metaData = null as any\r\n\r\n\t\t\tCorrelatedLogger.debug(`Resource ID generated: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Setup failed: ${(error as Error).message}`, (error as Error).stack, CacheImageResourceOperation.name)\r\n\t\t\tthis.metricsService.recordError('validation', 'setup')\r\n\t\t\tthrow error\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tPerformanceTracker.endPhase('setup')\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async execute(): Promise<void> {\r\n\t\tPerformanceTracker.startPhase('execute')\r\n\r\n\t\ttry {\r\n\t\t\tCorrelatedLogger.debug('Executing cache image resource operation', CacheImageResourceOperation.name)\r\n\r\n\t\t\tif (await this.resourceExists) {\r\n\t\t\t\tCorrelatedLogger.log('Resource already exists in cache', CacheImageResourceOperation.name)\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('execute')\r\n\t\t\t\tthis.metricsService.recordImageProcessing('cache_check', 'cached', 'success', duration || 0)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tconst shouldUseQueue = this.shouldUseBackgroundProcessing()\r\n\r\n\t\t\tif (shouldUseQueue) {\r\n\t\t\t\tCorrelatedLogger.debug('Queuing image processing job for background processing', CacheImageResourceOperation.name)\r\n\t\t\t\tawait this.queueImageProcessing()\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tawait this.processImageSynchronously()\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Failed to execute CacheImageResourceOperation: ${(error as Error).message}`, (error as Error).stack, CacheImageResourceOperation.name)\r\n\t\t\tthis.metricsService.recordError('image_processing', 'execute')\r\n\t\t\tconst duration = PerformanceTracker.endPhase('execute')\r\n\t\t\tthis.metricsService.recordImageProcessing('execute', 'unknown', 'error', duration || 0)\r\n\t\t\tthrow new InternalServerErrorException('Error fetching or processing image.')\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tPerformanceTracker.endPhase('execute')\r\n\t\t}\r\n\t}\r\n\r\n\tpublic shouldUseBackgroundProcessing(): boolean {\r\n\t\tconst resizeOptions = this.request.resizeOptions\r\n\t\tif (!resizeOptions)\r\n\t\t\treturn false\r\n\r\n\t\tconst width = resizeOptions.width || 0\r\n\t\tconst height = resizeOptions.height || 0\r\n\t\tconst totalPixels = width * height\r\n\r\n\t\tif (resizeOptions.format === 'svg') {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\tif (totalPixels > 8000000) {\r\n\t\t\tCorrelatedLogger.warn(`Image is too large to be processed synchronously: ${totalPixels} pixels`, CacheImageResourceOperation.name)\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\r\n\tprivate async queueImageProcessing(): Promise<void> {\r\n\t\tconst priority = this.request.resizeOptions?.width && this.request.resizeOptions.width > 1920\r\n\t\t\t? JobPriority.LOW\r\n\t\t\t: JobPriority.NORMAL\r\n\r\n\t\tawait this.jobQueueManager.addImageProcessingJob({\r\n\t\t\timageUrl: this.request.resourceTarget,\r\n\t\t\twidth: this.request.resizeOptions?.width ?? undefined,\r\n\t\t\theight: this.request.resizeOptions?.height ?? undefined,\r\n\t\t\tquality: this.request.resizeOptions?.quality,\r\n\t\t\tformat: this.request.resizeOptions?.format as 'webp' | 'jpeg' | 'png',\r\n\t\t\tfit: this.request.resizeOptions?.fit,\r\n\t\t\tposition: this.request.resizeOptions?.position,\r\n\t\t\tbackground: this.request.resizeOptions?.background,\r\n\t\t\ttrimThreshold: this.request.resizeOptions?.trimThreshold ?? undefined,\r\n\t\t\tcacheKey: this.id,\r\n\t\t\tpriority,\r\n\t\t})\r\n\r\n\t\tCorrelatedLogger.debug(`Image processing job queued with priority: ${priority}`, CacheImageResourceOperation.name)\r\n\t}\r\n\r\n\tprivate async processImageSynchronously(): Promise<void> {\r\n\t\tPerformanceTracker.startPhase('sync_processing')\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await this.fetchResourceResponseJob.handle(this.request)\r\n\t\t\tif (!response || response.status === 404) {\r\n\t\t\t\tthrow new UnableToFetchResourceException(this.request.resourceTarget)\r\n\t\t\t}\r\n\r\n\t\t\tconst contentLength = response.headers['content-length']\r\n\t\t\tif (contentLength) {\r\n\t\t\t\tconst sizeBytes = Number.parseInt(contentLength, 10)\r\n\t\t\t\tconst format = this.getFormatFromUrl(this.request.resourceTarget)\r\n\t\t\t\tif (!this.inputSanitizationService.validateFileSize(sizeBytes, format)) {\r\n\t\t\t\t\tthrow new Error(`File size ${sizeBytes} bytes exceeds limit for format ${format}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tawait this.storeResourceResponseToFileJob.handle(this.request.resourceTarget, this.getResourceTempPath, response)\r\n\r\n\t\t\tlet processedData: Buffer\r\n\t\t\tlet metadata!: ResourceMetaData\r\n\r\n\t\t\tlet isSourceSvg = false\r\n\t\t\ttry {\r\n\t\t\t\tconst fileContent = await readFile(this.getResourceTempPath, 'utf8')\r\n\t\t\t\tisSourceSvg = fileContent.trim().startsWith('<svg') || fileContent.includes('xmlns=\"http://www.w3.org/2000/svg\"')\r\n\t\t\t\tCorrelatedLogger.debug(`Source file SVG detection: ${isSourceSvg}`, CacheImageResourceOperation.name)\r\n\t\t\t}\r\n\t\t\tcatch {\r\n\t\t\t\tisSourceSvg = false\r\n\t\t\t\tCorrelatedLogger.debug('Could not read file as text, assuming not SVG', CacheImageResourceOperation.name)\r\n\t\t\t}\r\n\r\n\t\t\tif (isSourceSvg) {\r\n\t\t\t\tconst result = await this.processSvgImage()\r\n\t\t\t\tprocessedData = result.data\r\n\t\t\t\tmetadata = result.metadata\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst result = await this.processRasterImage()\r\n\t\t\t\tprocessedData = result.data\r\n\t\t\t\tmetadata = result.metadata\r\n\t\t\t}\r\n\r\n\t\t\tawait this.cacheManager.set('image', this.id, {\r\n\t\t\t\tdata: processedData,\r\n\t\t\t\tmetadata,\r\n\t\t\t}, metadata.privateTTL)\r\n\r\n\t\t\tawait writeFile(this.getResourcePath, processedData)\r\n\t\t\tawait writeFile(this.getResourceMetaPath, JSON.stringify(metadata), 'utf8')\r\n\r\n\t\t\ttry {\r\n\t\t\t\tawait unlink(this.getResourceTempPath)\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tCorrelatedLogger.warn(`Failed to delete temporary file: ${(error as Error).message}`, CacheImageResourceOperation.name)\r\n\t\t\t}\r\n\r\n\t\t\tconst format = metadata.format || 'unknown'\r\n\t\t\tconst duration = PerformanceTracker.endPhase('sync_processing')\r\n\t\t\tthis.metricsService.recordImageProcessing('process', format, 'success', duration || 0)\r\n\t\t\tCorrelatedLogger.debug(`Image processed successfully: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst duration = PerformanceTracker.endPhase('sync_processing')\r\n\t\t\tthis.metricsService.recordImageProcessing('process', 'unknown', 'error', duration || 0)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async processSvgImage(): Promise<{ data: Buffer, metadata: ResourceMetaData }> {\r\n\t\tCorrelatedLogger.debug('Processing SVG format', CacheImageResourceOperation.name)\r\n\r\n\t\tconst svgContent = await readFile(this.getResourceTempPath, 'utf8')\r\n\t\tif (!svgContent.toLowerCase().includes('<svg')) {\r\n\t\t\tCorrelatedLogger.warn('The file is not a valid SVG. Serving default WebP image.', CacheImageResourceOperation.name)\r\n\t\t\treturn await this.processDefaultImage()\r\n\t\t}\r\n\r\n\t\tconst needsResizing = (this.request.resizeOptions?.width !== null && !Number.isNaN(this.request.resizeOptions?.width))\r\n\t\t\t|| (this.request.resizeOptions?.height !== null && !Number.isNaN(this.request.resizeOptions?.height))\r\n\r\n\t\tif (!needsResizing) {\r\n\t\t\tconst data = Buffer.from(svgContent, 'utf8')\r\n\t\t\tconst metadata = new ResourceMetaData({\r\n\t\t\t\tversion: 1,\r\n\t\t\t\tsize: data.length.toString(),\r\n\t\t\t\tformat: 'svg',\r\n\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t})\r\n\r\n\t\t\treturn { data, metadata }\r\n\t\t}\r\n\t\telse {\r\n\t\t\tCorrelatedLogger.debug('SVG needs resizing, converting to PNG for better quality', CacheImageResourceOperation.name)\r\n\t\t\tconst result = await this.webpImageManipulationJob.handle(\r\n\t\t\t\tthis.getResourceTempPath,\r\n\t\t\t\tthis.getResourcePath,\r\n\t\t\t\tthis.request.resizeOptions,\r\n\t\t\t)\r\n\r\n\t\t\tconst data = await readFile(this.getResourcePath)\r\n\t\t\tconst metadata = new ResourceMetaData({\r\n\t\t\t\tversion: 1,\r\n\t\t\t\tsize: result.size,\r\n\t\t\t\tformat: result.format,\r\n\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t})\r\n\r\n\t\t\treturn { data, metadata }\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async processRasterImage(): Promise<{ data: Buffer, metadata: ResourceMetaData }> {\r\n\t\tconst result = await this.webpImageManipulationJob.handle(\r\n\t\t\tthis.getResourceTempPath,\r\n\t\t\tthis.getResourcePath,\r\n\t\t\tthis.request.resizeOptions,\r\n\t\t)\r\n\r\n\t\tCorrelatedLogger.debug(`processRasterImage received result: ${JSON.stringify(result)}`, 'CacheImageResourceOperation')\r\n\r\n\t\tconst data = await readFile(this.getResourcePath)\r\n\r\n\t\tconst actualFormat = result.format\r\n\t\tconst requestedFormat = this.request.resizeOptions?.format\r\n\r\n\t\tif (requestedFormat === 'svg' && result.format !== 'svg') {\r\n\t\t\tCorrelatedLogger.debug(`SVG format requested but actual format is ${result.format}. Using actual format for content-type.`, 'CacheImageResourceOperation')\r\n\t\t}\r\n\r\n\t\tconst metadata = new ResourceMetaData({\r\n\t\t\tversion: 1,\r\n\t\t\tsize: result.size,\r\n\t\t\tformat: actualFormat,\r\n\t\t\tdateCreated: Date.now(),\r\n\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t})\r\n\r\n\t\tCorrelatedLogger.debug(`processRasterImage created metadata: ${JSON.stringify(metadata)}`, 'CacheImageResourceOperation')\r\n\r\n\t\treturn { data, metadata }\r\n\t}\r\n\r\n\tprivate async processDefaultImage(): Promise<{ data: Buffer, metadata: ResourceMetaData }> {\r\n\t\tconst optimizedPath = await this.optimizeAndServeDefaultImage(this.request.resizeOptions)\r\n\t\tconst data = await readFile(optimizedPath)\r\n\t\tconst metadata = new ResourceMetaData({\r\n\t\t\tversion: 1,\r\n\t\t\tsize: data.length.toString(),\r\n\t\t\tformat: 'webp',\r\n\t\t\tdateCreated: Date.now(),\r\n\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t})\r\n\r\n\t\treturn { data, metadata }\r\n\t}\r\n\r\n\tprivate getFormatFromUrl(url: string): string {\r\n\t\tconst extension = url.split('.').pop()?.toLowerCase()\r\n\t\treturn extension || 'unknown'\r\n\t}\r\n\r\n\tpublic async optimizeAndServeDefaultImage(resizeOptions: ResizeOptions): Promise<string> {\r\n\t\tconst resizeOptionsWithDefaults: ResizeOptions = {\r\n\t\t\twidth: resizeOptions.width || 800,\r\n\t\t\theight: resizeOptions.height || 600,\r\n\t\t\tfit: resizeOptions.fit || FitOptions.contain,\r\n\t\t\tposition: resizeOptions.position || PositionOptions.entropy,\r\n\t\t\tformat: resizeOptions.format || SupportedResizeFormats.webp,\r\n\t\t\tbackground: resizeOptions.background || BackgroundOptions.white,\r\n\t\t\ttrimThreshold: resizeOptions.trimThreshold || 5,\r\n\t\t\tquality: resizeOptions.quality || 80,\r\n\t\t}\r\n\r\n\t\tconst optionsString = this.createOptionsString(resizeOptionsWithDefaults)\r\n\t\tconst optimizedPath = path.join(this.basePath, 'storage', `default_optimized_${optionsString}.webp`)\r\n\r\n\t\ttry {\r\n\t\t\tawait access(optimizedPath)\r\n\t\t\treturn optimizedPath\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tif ((error as any).code === 'ENOENT') {\r\n\t\t\t\tconst result = await this.webpImageManipulationJob.handle(\r\n\t\t\t\t\tpath.join(this.basePath, 'public', 'default.png'),\r\n\t\t\t\t\toptimizedPath,\r\n\t\t\t\t\tresizeOptionsWithDefaults,\r\n\t\t\t\t)\r\n\r\n\t\t\t\tif (!result) {\r\n\t\t\t\t\tthrow new Error('Failed to optimize default image')\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn optimizedPath\r\n\t\t\t}\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\tprivate createOptionsString(options: ResizeOptions): string {\r\n\t\tconst hash = createHash('md5')\r\n\t\thash.update(JSON.stringify(options))\r\n\t\treturn hash.digest('hex')\r\n\t}\r\n\r\n\t/**\r\n\t * Get cached resource data from multi-layer cache or filesystem\r\n\t */\r\n\tpublic async getCachedResource(): Promise<{ data: Buffer, metadata: ResourceMetaData } | null> {\r\n\t\tPerformanceTracker.startPhase('get_cached_resource')\r\n\r\n\t\ttry {\r\n\t\t\tlet cachedResource = await this.cacheManager.get<{ data: Buffer, metadata: ResourceMetaData }>('image', this.id)\r\n\r\n\t\t\tif (cachedResource && (!cachedResource.metadata || typeof cachedResource.metadata.dateCreated !== 'number')) {\r\n\t\t\t\tCorrelatedLogger.warn(`Corrupted cache data found in getCachedResource, deleting: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\tawait this.cacheManager.delete('image', this.id)\r\n\t\t\t\tcachedResource = null\r\n\t\t\t}\r\n\r\n\t\t\tif (!cachedResource) {\r\n\t\t\t\tconst cachedData = await this.cacheManager.get<string>('images', this.id)\r\n\t\t\t\tif (cachedData) {\r\n\t\t\t\t\tconst metadata = new ResourceMetaData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tsize: Buffer.from(cachedData, 'base64').length.toString(),\r\n\t\t\t\t\t\tformat: this.request.resizeOptions?.format || 'webp',\r\n\t\t\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tcachedResource = {\r\n\t\t\t\t\t\tdata: Buffer.from(cachedData, 'base64'),\r\n\t\t\t\t\t\tmetadata,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (cachedResource) {\r\n\t\t\t\tCorrelatedLogger.debug(`Resource retrieved from cache: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('get_cached_resource')\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'hit', duration || 0)\r\n\t\t\t\treturn cachedResource\r\n\t\t\t}\r\n\r\n\t\t\tconst resourceExists = await access(this.getResourcePath).then(() => true).catch(() => false)\r\n\t\t\tconst metadataExists = await access(this.getResourceMetaPath).then(() => true).catch(() => false)\r\n\r\n\t\t\tif (resourceExists && metadataExists) {\r\n\t\t\t\tconst data = await readFile(this.getResourcePath)\r\n\t\t\t\tconst metadataContent = await readFile(this.getResourceMetaPath, 'utf8')\r\n\t\t\t\tconst metadata = new ResourceMetaData(JSON.parse(metadataContent))\r\n\r\n\t\t\t\tawait this.cacheManager.set('image', this.id, { data, metadata }, metadata.privateTTL)\r\n\r\n\t\t\t\tCorrelatedLogger.debug(`Resource retrieved from filesystem and cached: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\t\tconst duration = PerformanceTracker.endPhase('get_cached_resource')\r\n\t\t\t\tthis.metricsService.recordCacheOperation('get', 'filesystem', 'hit', duration || 0)\r\n\t\t\t\treturn { data, metadata }\r\n\t\t\t}\r\n\r\n\t\t\tCorrelatedLogger.debug(`Resource not found: ${this.id}`, CacheImageResourceOperation.name)\r\n\t\t\tconst duration = PerformanceTracker.endPhase('get_cached_resource')\r\n\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'miss', duration || 0)\r\n\t\t\treturn null\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(`Failed to get cached resource: ${(error as Error).message}`, (error as Error).stack, CacheImageResourceOperation.name)\r\n\t\t\tthis.metricsService.recordError('cache_retrieval', 'get_cached_resource')\r\n\t\t\tconst duration = PerformanceTracker.endPhase('get_cached_resource')\r\n\t\t\tthis.metricsService.recordCacheOperation('get', 'multi-layer', 'error', duration || 0)\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["Buffer","createHash","access","readFile","unlink","writeFile","path","cwd","BackgroundOptions","FitOptions","PositionOptions","SupportedResizeFormats","UnableToFetchResourceException","MultiLayerCacheManager","CorrelatedLogger","PerformanceTracker","ResourceMetaData","MetricsService","FetchResourceResponseJob","GenerateResourceIdentityFromRequestJob","StoreResourceResponseToFileJob","WebpImageManipulationJob","JobQueueManager","JobPriority","ValidateCacheImageRequestRule","InputSanitizationService","Injectable","InternalServerErrorException","Scope","CacheImageResourceOperation","validateCacheImageRequest","fetchResourceResponseJob","webpImageManipulationJob","storeResourceResponseToFileJob","generateResourceIdentityFromRequestJob","cacheManager","inputSanitizationService","jobQueueManager","metricsService","basePath","getResourcePath","join","id","getResourceTempPath","getResourceMetaPath","resourceExists","startPhase","debug","name","cachedResource","get","metadata","dateCreated","warn","delete","isValid","privateTTL","Date","now","duration","endPhase","recordCacheOperation","resourcePathExists","then","catch","resourceMetaPathExists","headers","getHeaders","version","error","message","recordError","metaData","getCachedResource","exists","content","JSON","parse","setup","cacheImageRequest","request","sanitize","resourceTarget","validateUrl","Error","resizeOptions","width","height","validateImageDimensions","apply","handle","stack","execute","log","recordImageProcessing","shouldUseQueue","shouldUseBackgroundProcessing","queueImageProcessing","processImageSynchronously","totalPixels","format","priority","LOW","NORMAL","addImageProcessingJob","imageUrl","undefined","quality","fit","position","background","trimThreshold","cacheKey","response","status","contentLength","sizeBytes","Number","parseInt","getFormatFromUrl","validateFileSize","processedData","isSourceSvg","fileContent","trim","startsWith","includes","result","processSvgImage","data","processRasterImage","set","stringify","svgContent","toLowerCase","processDefaultImage","needsResizing","isNaN","from","size","length","toString","publicTTL","actualFormat","requestedFormat","optimizedPath","optimizeAndServeDefaultImage","url","extension","split","pop","resizeOptionsWithDefaults","contain","entropy","webp","white","optionsString","createOptionsString","code","options","hash","update","digest","cachedData","metadataExists","metadataContent","scope","REQUEST"],"mappings":"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"}