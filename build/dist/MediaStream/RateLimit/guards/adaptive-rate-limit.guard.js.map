{"version":3,"sources":["../../../../../src/MediaStream/RateLimit/guards/adaptive-rate-limit.guard.ts"],"sourcesContent":["import type { CanActivate, ExecutionContext } from '@nestjs/common'\r\nimport * as process from 'node:process'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { ThrottlerException } from '@nestjs/throttler'\r\nimport { RateLimitMetricsService } from '../services/rate-limit-metrics.service'\r\nimport { RateLimitService } from '../services/rate-limit.service'\r\n\r\n@Injectable()\r\nexport class AdaptiveRateLimitGuard implements CanActivate {\r\n\tprivate readonly _logger = new Logger(AdaptiveRateLimitGuard.name)\r\n\r\n\tconstructor(\r\n\t\tprivate readonly rateLimitService: RateLimitService,\r\n\t\tprivate readonly rateLimitMetricsService: RateLimitMetricsService,\r\n\t) { }\r\n\r\n\tasync canActivate(context: ExecutionContext): Promise<boolean> {\r\n\t\tif (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'dev') {\r\n\t\t\tthis._logger.debug('Skipping rate limiting in development mode')\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tconst request = context.switchToHttp().getRequest()\r\n\t\tconst response = context.switchToHttp().getResponse()\r\n\r\n\t\tif (this.shouldSkipRateLimit(request)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tconst userAgent = request.headers['user-agent'] || ''\r\n\t\tif (this.shouldBypassBot(userAgent)) {\r\n\t\t\tthis._logger.debug('Skipping rate limiting for bot', { userAgent })\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst clientIp = this.getClientIp(request)\r\n\t\t\tconst requestType = this.getRequestType(request)\r\n\t\t\tconst userAgent = request.headers['user-agent'] || ''\r\n\r\n\t\t\tconst rateLimitKey = this.rateLimitService.generateAdvancedKey(clientIp, userAgent, requestType)\r\n\r\n\t\t\tconst config = this.rateLimitService.getRateLimitConfig(requestType)\r\n\r\n\t\t\tconst adaptiveLimit = await this.rateLimitService.calculateAdaptiveLimit(config.max)\r\n\t\t\tconst adaptiveConfig = { ...config, max: adaptiveLimit }\r\n\r\n\t\t\tconst { allowed, info } = await this.rateLimitService.checkRateLimit(rateLimitKey, adaptiveConfig)\r\n\r\n\t\t\tthis.rateLimitService.recordRateLimitMetrics(requestType, allowed, info)\r\n\t\t\tthis.rateLimitMetricsService.recordRateLimitAttempt(requestType, clientIp, allowed)\r\n\r\n\t\t\tthis.addRateLimitHeaders(response, info)\r\n\r\n\t\t\tif (!allowed) {\r\n\t\t\t\tthis._logger.warn(`Rate limit exceeded for ${clientIp} on ${requestType}`, {\r\n\t\t\t\t\tclientIp,\r\n\t\t\t\t\trequestType,\r\n\t\t\t\t\tcurrent: info.current,\r\n\t\t\t\t\tlimit: info.limit,\r\n\t\t\t\t\tresetTime: info.resetTime,\r\n\t\t\t\t})\r\n\r\n\t\t\t\tthrow new ThrottlerException('Rate limit exceeded')\r\n\t\t\t}\r\n\r\n\t\t\tthis._logger.debug(`Rate limit check passed for ${clientIp} on ${requestType}`, {\r\n\t\t\t\tclientIp,\r\n\t\t\t\trequestType,\r\n\t\t\t\tcurrent: info.current,\r\n\t\t\t\tlimit: info.limit,\r\n\t\t\t\tremaining: info.remaining,\r\n\t\t\t})\r\n\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tif (error instanceof ThrottlerException) {\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\r\n\t\t\tthis._logger.error('Error in rate limit guard:', error)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determine if rate limiting should be skipped for this request\r\n\t */\r\n\tprivate shouldSkipRateLimit(request: any): boolean {\r\n\t\tconst url = request.url || ''\r\n\r\n\t\tif (this.isDomainWhitelisted(request)) {\r\n\t\t\tthis._logger.debug('Skipping rate limiting for whitelisted domain', {\r\n\t\t\t\treferer: request.headers.referer,\r\n\t\t\t\torigin: request.headers.origin,\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tif (url.startsWith('/health')) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tif (url.startsWith('/metrics')) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tif (url.match(/\\.(css|js|png|jpg|jpeg|gif|ico|svg)$/)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Check if bot bypass is enabled and user agent is a bot\r\n\t */\r\n\tprivate shouldBypassBot(userAgent: string): boolean {\r\n\t\tconst bypassBots = this.rateLimitService.getBypassBotsConfig()\r\n\t\tif (!bypassBots) {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn this.rateLimitService.isBot(userAgent)\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the request comes from a whitelisted domain\r\n\t */\r\n\tprivate isDomainWhitelisted(request: any): boolean {\r\n\t\ttry {\r\n\t\t\tconst whitelistedDomains = this.rateLimitService.getWhitelistedDomains()\r\n\r\n\t\t\tif (!whitelistedDomains || whitelistedDomains.length === 0) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\r\n\t\t\tconst referer = request.headers.referer\r\n\t\t\tif (referer) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst refererUrl = new URL(referer)\r\n\t\t\t\t\tconst refererDomain = refererUrl.hostname\r\n\r\n\t\t\t\t\tif (this.matchesDomain(refererDomain, whitelistedDomains)) {\r\n\t\t\t\t\t\treturn true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch {\r\n\t\t\t\t\t// Invalid referer URL, continue checking other headers\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst origin = request.headers.origin\r\n\t\t\tif (origin) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst originUrl = new URL(origin)\r\n\t\t\t\t\tconst originDomain = originUrl.hostname\r\n\r\n\t\t\t\t\tif (this.matchesDomain(originDomain, whitelistedDomains)) {\r\n\t\t\t\t\t\treturn true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch {\r\n\t\t\t\t\t// Invalid origin URL, continue\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst host = request.headers.host\r\n\t\t\tif (host) {\r\n\t\t\t\tconst hostDomain = host.split(':')[0]\r\n\t\t\t\tif (this.matchesDomain(hostDomain, whitelistedDomains)) {\r\n\t\t\t\t\treturn true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Error checking domain whitelist:', error)\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a domain matches any of the whitelisted domains\r\n\t * Supports exact matches and wildcard subdomains (*.example.com)\r\n\t */\r\n\tprivate matchesDomain(domain: string, whitelistedDomains: string[]): boolean {\r\n\t\tfor (const whitelistedDomain of whitelistedDomains) {\r\n\t\t\tif (domain === whitelistedDomain) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\r\n\t\t\tif (whitelistedDomain.startsWith('*.')) {\r\n\t\t\t\tconst baseDomain = whitelistedDomain.substring(2)\r\n\t\t\t\tif (domain.endsWith(`.${baseDomain}`) || domain === baseDomain) {\r\n\t\t\t\t\treturn true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (domain.endsWith(`.${whitelistedDomain}`)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Extract client IP address from request\r\n\t */\r\n\tprivate getClientIp(request: any): string {\r\n\t\treturn (\r\n\t\t\trequest.headers['x-forwarded-for']?.split(',')[0]\r\n\t\t\t|| request.headers['x-real-ip']\r\n\t\t\t|| request.connection?.remoteAddress\r\n\t\t\t|| request.socket?.remoteAddress\r\n\t\t\t|| request.ip\r\n\t\t\t|| 'unknown'\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * Determine request type for rate limiting\r\n\t */\r\n\tprivate getRequestType(request: any): string {\r\n\t\tconst url = request.url || ''\r\n\t\tconst method = request.method || 'GET'\r\n\r\n\t\tif (url.includes('/media/uploads/') || url.includes('/static/images/') || url.includes('/image-processing')) {\r\n\t\t\treturn 'image-processing'\r\n\t\t}\r\n\r\n\t\tif (url.startsWith('/health')) {\r\n\t\t\treturn 'health-check'\r\n\t\t}\r\n\r\n\t\treturn `${method.toLowerCase()}-default`\r\n\t}\r\n\r\n\t/**\r\n\t * Add rate limit headers to response\r\n\t */\r\n\tprivate addRateLimitHeaders(response: any, info: any): void {\r\n\t\tresponse.setHeader('X-RateLimit-Limit', info.limit.toString())\r\n\t\tresponse.setHeader('X-RateLimit-Remaining', info.remaining.toString())\r\n\t\tresponse.setHeader('X-RateLimit-Reset', Math.ceil(info.resetTime.getTime() / 1000).toString())\r\n\t\tresponse.setHeader('X-RateLimit-Used', info.current.toString())\r\n\t}\r\n}\r\n"],"names":["process","Injectable","Logger","ThrottlerException","RateLimitMetricsService","RateLimitService","AdaptiveRateLimitGuard","canActivate","context","env","NODE_ENV","_logger","debug","request","switchToHttp","getRequest","response","getResponse","shouldSkipRateLimit","userAgent","headers","shouldBypassBot","clientIp","getClientIp","requestType","getRequestType","rateLimitKey","rateLimitService","generateAdvancedKey","config","getRateLimitConfig","adaptiveLimit","calculateAdaptiveLimit","max","adaptiveConfig","allowed","info","checkRateLimit","recordRateLimitMetrics","rateLimitMetricsService","recordRateLimitAttempt","addRateLimitHeaders","warn","current","limit","resetTime","remaining","error","url","isDomainWhitelisted","referer","origin","startsWith","match","bypassBots","getBypassBotsConfig","isBot","whitelistedDomains","getWhitelistedDomains","length","refererUrl","URL","refererDomain","hostname","matchesDomain","originUrl","originDomain","host","hostDomain","split","domain","whitelistedDomain","baseDomain","substring","endsWith","connection","remoteAddress","socket","ip","method","includes","toLowerCase","setHeader","toString","Math","ceil","getTime","name"],"mappings":"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"}