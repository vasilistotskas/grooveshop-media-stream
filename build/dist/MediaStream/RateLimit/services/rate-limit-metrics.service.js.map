{"version":3,"sources":["../../../../../src/MediaStream/RateLimit/services/rate-limit-metrics.service.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport * as promClient from 'prom-client'\r\n\r\n@Injectable()\r\nexport class RateLimitMetricsService implements OnModuleInit {\r\n\tprivate readonly _logger = new Logger(RateLimitMetricsService.name)\r\n\tprivate readonly register: promClient.Registry\r\n\r\n\tprivate readonly rateLimitAttemptsTotal: promClient.Counter\r\n\tprivate readonly rateLimitBlockedTotal: promClient.Counter\r\n\tprivate readonly rateLimitCurrentRequests: promClient.Gauge\r\n\tprivate readonly rateLimitAdaptiveAdjustments: promClient.Counter\r\n\tprivate readonly rateLimitSystemLoad: promClient.Gauge\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t) {\r\n\t\tthis.register = new promClient.Registry()\r\n\r\n\t\tthis.rateLimitAttemptsTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_rate_limit_attempts_total',\r\n\t\t\thelp: 'Total number of rate limit attempts',\r\n\t\t\tlabelNames: ['request_type', 'client_ip', 'status'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.rateLimitBlockedTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_rate_limit_blocked_total',\r\n\t\t\thelp: 'Total number of blocked requests due to rate limiting',\r\n\t\t\tlabelNames: ['request_type', 'client_ip', 'reason'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.rateLimitCurrentRequests = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_rate_limit_current_requests',\r\n\t\t\thelp: 'Current number of requests in rate limit window',\r\n\t\t\tlabelNames: ['request_type', 'client_ip'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.rateLimitAdaptiveAdjustments = new promClient.Counter({\r\n\t\t\tname: 'mediastream_rate_limit_adaptive_adjustments_total',\r\n\t\t\thelp: 'Total number of adaptive rate limit adjustments',\r\n\t\t\tlabelNames: ['adjustment_type', 'reason'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.rateLimitSystemLoad = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_rate_limit_system_load',\r\n\t\t\thelp: 'System load metrics used for adaptive rate limiting',\r\n\t\t\tlabelNames: ['metric_type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tif (this._configService.get('monitoring.enabled')) {\r\n\t\t\tthis._logger.log('Rate limit metrics service initialized')\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Record a rate limit attempt\r\n\t */\r\n\trecordRateLimitAttempt(requestType: string, clientIp: string, allowed: boolean): void {\r\n\t\tconst status = allowed ? 'allowed' : 'blocked'\r\n\r\n\t\tthis.rateLimitAttemptsTotal.inc({\r\n\t\t\trequest_type: requestType,\r\n\t\t\tclient_ip: this.hashIp(clientIp),\r\n\t\t\tstatus,\r\n\t\t})\r\n\r\n\t\tif (!allowed) {\r\n\t\t\tthis.rateLimitBlockedTotal.inc({\r\n\t\t\t\trequest_type: requestType,\r\n\t\t\t\tclient_ip: this.hashIp(clientIp),\r\n\t\t\t\treason: 'rate_limit_exceeded',\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update current request count for a client\r\n\t */\r\n\tupdateCurrentRequests(requestType: string, clientIp: string, count: number): void {\r\n\t\tthis.rateLimitCurrentRequests.set({\r\n\t\t\trequest_type: requestType,\r\n\t\t\tclient_ip: this.hashIp(clientIp),\r\n\t\t}, count)\r\n\t}\r\n\r\n\t/**\r\n\t * Record adaptive rate limit adjustment\r\n\t */\r\n\trecordAdaptiveAdjustment(adjustmentType: 'increase' | 'decrease', reason: string): void {\r\n\t\tthis.rateLimitAdaptiveAdjustments.inc({\r\n\t\t\tadjustment_type: adjustmentType,\r\n\t\t\treason,\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Update system load metrics\r\n\t */\r\n\tupdateSystemLoadMetrics(cpuUsage: number, memoryUsage: number, activeConnections: number): void {\r\n\t\tthis.rateLimitSystemLoad.set({ metric_type: 'cpu_usage' }, cpuUsage)\r\n\t\tthis.rateLimitSystemLoad.set({ metric_type: 'memory_usage' }, memoryUsage)\r\n\t\tthis.rateLimitSystemLoad.set({ metric_type: 'active_connections' }, activeConnections)\r\n\t}\r\n\r\n\t/**\r\n\t * Get rate limiting statistics\r\n\t */\r\n\tasync getRateLimitStats(): Promise<{\r\n\t\ttotalAttempts: number\r\n\t\ttotalBlocked: number\r\n\t\tblockRate: number\r\n\t\ttopBlockedIps: Array<{ ip: string, count: number }>\r\n\t\ttopRequestTypes: Array<{ type: string, count: number }>\r\n\t}> {\r\n\t\ttry {\r\n\t\t\t// In a real implementation, this would query the metrics registry\r\n\t\t\t// For now, we'll return placeholder data\r\n\t\t\treturn {\r\n\t\t\t\ttotalAttempts: 0,\r\n\t\t\t\ttotalBlocked: 0,\r\n\t\t\t\tblockRate: 0,\r\n\t\t\t\ttopBlockedIps: [],\r\n\t\t\t\ttopRequestTypes: [],\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to get rate limit stats:', error)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get current rate limit configuration\r\n\t */\r\n\tgetCurrentRateLimitConfig(): {\r\n\t\tdefaultLimit: number\r\n\t\timageProcessingLimit: number\r\n\t\thealthCheckLimit: number\r\n\t\twindowMs: number\r\n\t} {\r\n\t\treturn {\r\n\t\t\tdefaultLimit: this._configService.getOptional('rateLimit.default.max', 100),\r\n\t\t\timageProcessingLimit: this._configService.getOptional('rateLimit.imageProcessing.max', 50),\r\n\t\t\thealthCheckLimit: this._configService.getOptional('rateLimit.healthCheck.max', 1000),\r\n\t\t\twindowMs: this._configService.getOptional('rateLimit.default.windowMs', 60000),\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hash IP address for privacy in metrics\r\n\t */\r\n\tprivate hashIp(ip: string): string {\r\n\t\tlet hash = 0\r\n\t\tfor (let i = 0; i < ip.length; i++) {\r\n\t\t\tconst char = ip.charCodeAt(i)\r\n\t\t\thash = ((hash << 5) - hash) + char\r\n\t\t\thash = hash & hash\r\n\t\t}\r\n\t\treturn `ip_${Math.abs(hash).toString(36)}`\r\n\t}\r\n\r\n\t/**\r\n\t * Reset metrics (useful for testing)\r\n\t */\r\n\tresetMetrics(): void {\r\n\t\tthis.rateLimitAttemptsTotal.reset()\r\n\t\tthis.rateLimitBlockedTotal.reset()\r\n\t\tthis.rateLimitCurrentRequests.reset()\r\n\t\tthis.rateLimitAdaptiveAdjustments.reset()\r\n\t\tthis.rateLimitSystemLoad.reset()\r\n\t}\r\n}\r\n"],"names":["ConfigService","Injectable","Logger","promClient","RateLimitMetricsService","_configService","_logger","name","register","Registry","rateLimitAttemptsTotal","Counter","help","labelNames","registers","rateLimitBlockedTotal","rateLimitCurrentRequests","Gauge","rateLimitAdaptiveAdjustments","rateLimitSystemLoad","onModuleInit","get","log","recordRateLimitAttempt","requestType","clientIp","allowed","status","inc","request_type","client_ip","hashIp","reason","updateCurrentRequests","count","set","recordAdaptiveAdjustment","adjustmentType","adjustment_type","updateSystemLoadMetrics","cpuUsage","memoryUsage","activeConnections","metric_type","getRateLimitStats","totalAttempts","totalBlocked","blockRate","topBlockedIps","topRequestTypes","error","getCurrentRateLimitConfig","defaultLimit","getOptional","imageProcessingLimit","healthCheckLimit","windowMs","ip","hash","i","length","char","charCodeAt","Math","abs","toString","resetMetrics","reset"],"mappings":"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"}