{"version":3,"sources":["../../../../../src/MediaStream/RateLimit/services/rate-limit.service.ts"],"sourcesContent":["import * as process from 'node:process'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\n\r\nexport interface RateLimitConfig {\r\n\twindowMs: number\r\n\tmax: number\r\n\tskipSuccessfulRequests: boolean\r\n\tskipFailedRequests: boolean\r\n\tkeyGenerator?: (req: any) => string\r\n}\r\n\r\nexport interface RateLimitInfo {\r\n\tlimit: number\r\n\tcurrent: number\r\n\tremaining: number\r\n\tresetTime: Date\r\n}\r\n\r\nexport interface SystemLoadInfo {\r\n\tcpuUsage: number\r\n\tmemoryUsage: number\r\n\tactiveConnections: number\r\n}\r\n\r\n@Injectable()\r\nexport class RateLimitService {\r\n\tprivate readonly _logger = new Logger(RateLimitService.name)\r\n\tprivate readonly requestCounts = new Map<string, { count: number, resetTime: number }>()\r\n\tprivate readonly systemLoadThresholds = {\r\n\t\tcpu: 80,\r\n\t\tmemory: 85,\r\n\t\tconnections: 1000,\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly metricsService: MetricsService,\r\n\t) {}\r\n\r\n\t/**\r\n\t * Generate rate limit key based on IP and request type\r\n\t */\r\n\tgenerateKey(ip: string, requestType: string): string {\r\n\t\treturn `${ip}:${requestType}`\r\n\t}\r\n\r\n\t/**\r\n\t * Generate key based on IP and user agent for more granular control\r\n\t */\r\n\tgenerateAdvancedKey(ip: string, userAgent: string, requestType: string): string {\r\n\t\tconst userAgentHash = this.simpleHash(userAgent || 'unknown')\r\n\t\treturn `${ip}:${userAgentHash}:${requestType}`\r\n\t}\r\n\r\n\t/**\r\n\t * Get rate limit configuration for specific request type\r\n\t */\r\n\tgetRateLimitConfig(requestType: string): RateLimitConfig {\r\n\t\tconst baseConfig = {\r\n\t\t\twindowMs: this._configService.getOptional('rateLimit.default.windowMs', 60000),\r\n\t\t\tmax: this._configService.getOptional('rateLimit.default.max', 500),\r\n\t\t\tskipSuccessfulRequests: false,\r\n\t\t\tskipFailedRequests: false,\r\n\t\t}\r\n\r\n\t\tswitch (requestType) {\r\n\t\t\tcase 'image-processing':\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...baseConfig,\r\n\t\t\t\t\twindowMs: this._configService.getOptional('rateLimit.imageProcessing.windowMs', 60000),\r\n\t\t\t\t\tmax: this._configService.getOptional('rateLimit.imageProcessing.max', 300),\r\n\t\t\t\t}\r\n\t\t\tcase 'health-check':\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...baseConfig,\r\n\t\t\t\t\twindowMs: this._configService.getOptional('rateLimit.healthCheck.windowMs', 10000),\r\n\t\t\t\t\tmax: this._configService.getOptional('rateLimit.healthCheck.max', 1000),\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn baseConfig\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check if user agent is a known bot/crawler\r\n\t */\r\n\tisBot(userAgent: string): boolean {\r\n\t\tif (!userAgent) {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\tconst botPatterns = [\r\n\t\t\t// Social Media Crawlers\r\n\t\t\t/facebook/i,\r\n\t\t\t/facebookexternalhit/i,\r\n\t\t\t/facebookcatalog/i,\r\n\t\t\t/Facebot/i,\r\n\t\t\t/Twitterbot/i,\r\n\t\t\t/LinkedInBot/i,\r\n\t\t\t/WhatsApp/i,\r\n\t\t\t/TelegramBot/i,\r\n\t\t\t/Slackbot/i,\r\n\t\t\t/DiscordBot/i,\r\n\t\t\t/Discordbot/i,\r\n\t\t\t/Slack-ImgProxy/i,\r\n\r\n\t\t\t// Search Engine Crawlers\r\n\t\t\t/Googlebot/i,\r\n\t\t\t/bingbot/i,\r\n\t\t\t/Baiduspider/i,\r\n\t\t\t/YandexBot/i,\r\n\t\t\t/DuckDuckBot/i,\r\n\t\t\t/Slurp/i, // Yahoo\r\n\t\t\t/Applebot/i,\r\n\r\n\t\t\t// SEO & Analytics Tools\r\n\t\t\t/AhrefsBot/i,\r\n\t\t\t/SemrushBot/i,\r\n\t\t\t/MJ12bot/i,\r\n\t\t\t/DotBot/i,\r\n\t\t\t/Screaming Frog/i,\r\n\t\t\t/SEOkicks/i,\r\n\r\n\t\t\t// Other Common Bots\r\n\t\t\t/PingdomBot/i,\r\n\t\t\t/UptimeRobot/i,\r\n\t\t\t/StatusCake/i,\r\n\t\t\t/Lighthouse/i,\r\n\t\t\t/PageSpeed/i,\r\n\t\t\t/GTmetrix/i,\r\n\t\t\t/HeadlessChrome/i,\r\n\t\t\t/PhantomJS/i,\r\n\t\t\t/Prerender/i,\r\n\t\t]\r\n\r\n\t\treturn botPatterns.some(pattern => pattern.test(userAgent))\r\n\t}\r\n\r\n\t/**\r\n\t * Check if request should be rate limited\r\n\t */\r\n\tasync checkRateLimit(key: string, config: RateLimitConfig): Promise<{ allowed: boolean, info: RateLimitInfo }> {\r\n\t\tconst now = Date.now()\r\n\t\tconst windowStart = now - config.windowMs\r\n\r\n\t\tthis.cleanupOldEntries(windowStart)\r\n\r\n\t\tlet entry = this.requestCounts.get(key)\r\n\t\tconst resetTime = new Date(now + config.windowMs)\r\n\r\n\t\tif (!entry || entry.resetTime <= now) {\r\n\t\t\tentry = { count: 1, resetTime: now + config.windowMs }\r\n\t\t\tthis.requestCounts.set(key, entry)\r\n\r\n\t\t\treturn {\r\n\t\t\t\tallowed: true,\r\n\t\t\t\tinfo: {\r\n\t\t\t\t\tlimit: config.max,\r\n\t\t\t\t\tcurrent: 1,\r\n\t\t\t\t\tremaining: config.max - 1,\r\n\t\t\t\t\tresetTime,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tentry.count += 1\r\n\t\tconst currentCount = entry.count\r\n\t\tconst allowed = currentCount <= config.max\r\n\r\n\t\treturn {\r\n\t\t\tallowed,\r\n\t\t\tinfo: {\r\n\t\t\t\tlimit: config.max,\r\n\t\t\t\tcurrent: currentCount,\r\n\t\t\t\tremaining: Math.max(0, config.max - currentCount),\r\n\t\t\t\tresetTime: new Date(entry.resetTime),\r\n\t\t\t},\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get current system load for adaptive rate limiting\r\n\t */\r\n\tasync getSystemLoad(): Promise<SystemLoadInfo> {\r\n\t\tconst memoryUsage = process.memoryUsage()\r\n\t\tconst memoryUsagePercent = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100\r\n\r\n\t\t// Note: CPU usage would require additional monitoring in a real implementation\r\n\t\t// For now, we'll use a placeholder\r\n\t\tconst cpuUsage = 0 // This would be implemented with actual CPU monitoring\r\n\r\n\t\treturn {\r\n\t\t\tcpuUsage,\r\n\t\t\tmemoryUsage: memoryUsagePercent,\r\n\t\t\tactiveConnections: 0, // This would be tracked by connection monitoring\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate adaptive rate limit based on system load\r\n\t */\r\n\tasync calculateAdaptiveLimit(baseLimit: number): Promise<number> {\r\n\t\tif (process.env.NODE_ENV === 'test') {\r\n\t\t\treturn baseLimit\r\n\t\t}\r\n\r\n\t\tconst systemLoad = await this.getSystemLoad()\r\n\r\n\t\tlet adaptiveLimit = baseLimit\r\n\r\n\t\tif (systemLoad.memoryUsage > this.systemLoadThresholds.memory) {\r\n\t\t\tconst reductionFactor = Math.min(0.5, (systemLoad.memoryUsage - this.systemLoadThresholds.memory) / 20)\r\n\t\t\tadaptiveLimit = Math.floor(adaptiveLimit * (1 - reductionFactor))\r\n\t\t}\r\n\r\n\t\tif (systemLoad.cpuUsage > this.systemLoadThresholds.cpu) {\r\n\t\t\tconst reductionFactor = Math.min(0.5, (systemLoad.cpuUsage - this.systemLoadThresholds.cpu) / 20)\r\n\t\t\tadaptiveLimit = Math.floor(adaptiveLimit * (1 - reductionFactor))\r\n\t\t}\r\n\r\n\t\treturn Math.max(1, adaptiveLimit)\r\n\t}\r\n\r\n\t/**\r\n\t * Record rate limit metrics\r\n\t */\r\n\trecordRateLimitMetrics(requestType: string, allowed: boolean, info: RateLimitInfo): void {\r\n\t\tif (!allowed) {\r\n\t\t\tthis.metricsService.recordError('rate_limit_exceeded', requestType)\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tthis.metricsService.getRegistry()\r\n\r\n\t\t\t// This would be implemented with custom Prometheus metrics\r\n\t\t\tthis._logger.debug('Rate limit metrics recorded', {\r\n\t\t\t\trequestType,\r\n\t\t\t\tallowed,\r\n\t\t\t\tcurrent: info.current,\r\n\t\t\t\tlimit: info.limit,\r\n\t\t\t\tremaining: info.remaining,\r\n\t\t\t})\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to record rate limit metrics:', error)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clean up old rate limit entries\r\n\t */\r\n\tprivate cleanupOldEntries(windowStart: number): void {\r\n\t\tfor (const [key, entry] of this.requestCounts.entries()) {\r\n\t\t\tif (entry.resetTime <= windowStart) {\r\n\t\t\t\tthis.requestCounts.delete(key)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simple hash function for user agent\r\n\t */\r\n\tprivate simpleHash(str: string): string {\r\n\t\tlet hash = 0\r\n\t\tfor (let i = 0; i < str.length; i++) {\r\n\t\t\tconst char = str.charCodeAt(i)\r\n\t\t\thash = ((hash << 5) - hash) + char\r\n\t\t\thash = hash & hash\r\n\t\t}\r\n\t\treturn Math.abs(hash).toString(36)\r\n\t}\r\n\r\n\t/**\r\n\t * Reset rate limit for a specific key (useful for testing)\r\n\t */\r\n\tresetRateLimit(key: string): void {\r\n\t\tthis.requestCounts.delete(key)\r\n\t}\r\n\r\n\t/**\r\n\t * Clear all rate limits (useful for testing)\r\n\t */\r\n\tclearAllRateLimits(): void {\r\n\t\tconst entriesCount = this.requestCounts.size\r\n\t\tthis.requestCounts.clear()\r\n\t\tif (process.env.NODE_ENV === 'test' && entriesCount > 0) {\r\n\t\t\tthis._logger.debug(`Cleared ${entriesCount} rate limit entries`)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get current rate limit status for a key\r\n\t */\r\n\tgetRateLimitStatus(key: string): RateLimitInfo | null {\r\n\t\tconst entry = this.requestCounts.get(key)\r\n\t\tif (!entry) {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlimit: 0, // Would need to be passed or stored\r\n\t\t\tcurrent: entry.count,\r\n\t\t\tremaining: 0, // Would need to be calculated\r\n\t\t\tresetTime: new Date(entry.resetTime),\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get whitelisted domains from configuration\r\n\t */\r\n\tgetWhitelistedDomains(): string[] {\r\n\t\tconst domainsString = this._configService.getOptional<string>('rateLimit.bypass.whitelistedDomains', '')\r\n\t\tif (!domainsString || typeof domainsString !== 'string') {\r\n\t\t\treturn []\r\n\t\t}\r\n\r\n\t\treturn domainsString\r\n\t\t\t.split(',')\r\n\t\t\t.map(domain => domain.trim())\r\n\t\t\t.filter(domain => domain.length > 0)\r\n\t}\r\n\r\n\t/**\r\n\t * Get bot bypass configuration\r\n\t */\r\n\tgetBypassBotsConfig(): boolean {\r\n\t\treturn this._configService.getOptional<boolean>('rateLimit.bypass.bots', true)\r\n\t}\r\n\r\n\t/**\r\n\t * Get debug information about current rate limit state (for testing)\r\n\t */\r\n\tgetDebugInfo(): { totalEntries: number, entries: Array<{ key: string, count: number, resetTime: number }> } {\r\n\t\tconst entries = Array.from(this.requestCounts.entries()).map(([key, entry]) => ({\r\n\t\t\tkey,\r\n\t\t\tcount: entry.count,\r\n\t\t\tresetTime: entry.resetTime,\r\n\t\t}))\r\n\r\n\t\treturn {\r\n\t\t\ttotalEntries: this.requestCounts.size,\r\n\t\t\tentries,\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["process","ConfigService","MetricsService","Injectable","Logger","RateLimitService","generateKey","ip","requestType","generateAdvancedKey","userAgent","userAgentHash","simpleHash","getRateLimitConfig","baseConfig","windowMs","_configService","getOptional","max","skipSuccessfulRequests","skipFailedRequests","isBot","botPatterns","some","pattern","test","checkRateLimit","key","config","now","Date","windowStart","cleanupOldEntries","entry","requestCounts","get","resetTime","count","set","allowed","info","limit","current","remaining","currentCount","Math","getSystemLoad","memoryUsage","memoryUsagePercent","heapUsed","heapTotal","cpuUsage","activeConnections","calculateAdaptiveLimit","baseLimit","env","NODE_ENV","systemLoad","adaptiveLimit","systemLoadThresholds","memory","reductionFactor","min","floor","cpu","recordRateLimitMetrics","metricsService","recordError","getRegistry","_logger","debug","error","entries","delete","str","hash","i","length","char","charCodeAt","abs","toString","resetRateLimit","clearAllRateLimits","entriesCount","size","clear","getRateLimitStatus","getWhitelistedDomains","domainsString","split","map","domain","trim","filter","getBypassBotsConfig","getDebugInfo","Array","from","totalEntries","name","Map","connections"],"mappings":"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"}