{"version":3,"sources":["../../../../../src/MediaStream/HTTP/utils/circuit-breaker.ts"],"sourcesContent":["import { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\n\r\nexport enum CircuitState {\r\n\tCLOSED = 'closed',\r\n\tOPEN = 'open',\r\n\tHALF_OPEN = 'half-open',\r\n}\r\n\r\nexport interface CircuitBreakerOptions {\r\n\tfailureThreshold: number\r\n\tresetTimeout: number\r\n\trollingWindow: number\r\n\tminimumRequests: number\r\n}\r\n\r\nexport class CircuitBreaker {\r\n\tprivate state: CircuitState = CircuitState.CLOSED\r\n\tprivate failureCount = 0\r\n\tprivate successCount = 0\r\n\tprivate lastStateChange: number = Date.now()\r\n\tprivate nextAttempt: number = 0\r\n\tprivate totalRequests = 0\r\n\tprivate readonly options: CircuitBreakerOptions\r\n\tprivate readonly requestWindow: Array<{ timestamp: number, success: boolean }> = []\r\n\r\n\tconstructor(options: CircuitBreakerOptions) {\r\n\t\tthis.options = {\r\n\t\t\tfailureThreshold: options.failureThreshold || 50,\r\n\t\t\tresetTimeout: options.resetTimeout || 30000,\r\n\t\t\trollingWindow: options.rollingWindow || 60000,\r\n\t\t\tminimumRequests: options.minimumRequests || 5,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Execute a function with circuit breaker protection\r\n\t */\r\n\tasync execute<T>(fn: () => Promise<T>, fallback?: () => Promise<T>): Promise<T> {\r\n\t\tif (this.isOpen()) {\r\n\t\t\tif (fallback) {\r\n\t\t\t\tCorrelatedLogger.warn('Circuit is open, using fallback', 'CircuitBreaker')\r\n\t\t\t\treturn fallback()\r\n\t\t\t}\r\n\t\t\tthrow new Error('Circuit breaker is open')\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst result = await fn()\r\n\t\t\tthis.recordSuccess()\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.recordFailure()\r\n\t\t\tif (fallback) {\r\n\t\t\t\tCorrelatedLogger.warn(`Request failed, using fallback: ${(error as Error).message}`, 'CircuitBreaker')\r\n\t\t\t\treturn fallback()\r\n\t\t\t}\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Record a successful request\r\n\t */\r\n\trecordSuccess(): void {\r\n\t\tthis.successCount++\r\n\t\tthis.totalRequests++\r\n\t\tthis.requestWindow.push({ timestamp: Date.now(), success: true })\r\n\t\tthis.pruneWindow()\r\n\r\n\t\tif (this.state === CircuitState.HALF_OPEN) {\r\n\t\t\tCorrelatedLogger.log('Circuit breaker reset (successful request in half-open state)', 'CircuitBreaker')\r\n\t\t\tthis.reset()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Record a failed request\r\n\t */\r\n\trecordFailure(): void {\r\n\t\tthis.failureCount++\r\n\t\tthis.totalRequests++\r\n\t\tthis.requestWindow.push({ timestamp: Date.now(), success: false })\r\n\t\tthis.pruneWindow()\r\n\r\n\t\tif (this.state === CircuitState.HALF_OPEN) {\r\n\t\t\tCorrelatedLogger.warn('Circuit breaker reopened (failed request in half-open state)', 'CircuitBreaker')\r\n\t\t\tthis.trip()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst windowSize = this.requestWindow.length\r\n\t\tif (windowSize < this.options.minimumRequests) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst failurePercentage = this.calculateFailurePercentage()\r\n\t\tif (failurePercentage >= this.options.failureThreshold) {\r\n\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t`Circuit breaker tripped (failure rate: ${failurePercentage.toFixed(2)}%)`,\r\n\t\t\t\t'CircuitBreaker',\r\n\t\t\t)\r\n\t\t\tthis.trip()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the circuit is open\r\n\t */\r\n\tisOpen(): boolean {\r\n\t\tif (this.state === CircuitState.OPEN) {\r\n\t\t\tconst now = Date.now()\r\n\t\t\tif (now >= this.nextAttempt) {\r\n\t\t\t\tCorrelatedLogger.log('Circuit breaker entering half-open state', 'CircuitBreaker')\r\n\t\t\t\tthis.state = CircuitState.HALF_OPEN\r\n\t\t\t\tthis.lastStateChange = now\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\treturn true\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current state of the circuit breaker\r\n\t */\r\n\tgetState(): CircuitState {\r\n\t\treturn this.state\r\n\t}\r\n\r\n\t/**\r\n\t * Get circuit breaker statistics\r\n\t */\r\n\tgetStats(): {\r\n\t\tstate: CircuitState\r\n\t\tfailureCount: number\r\n\t\tsuccessCount: number\r\n\t\ttotalRequests: number\r\n\t\tfailurePercentage: number\r\n\t\tlastStateChange: number\r\n\t\tnextAttempt: number\r\n\t} {\r\n\t\treturn {\r\n\t\t\tstate: this.state,\r\n\t\t\tfailureCount: this.failureCount,\r\n\t\t\tsuccessCount: this.successCount,\r\n\t\t\ttotalRequests: this.totalRequests,\r\n\t\t\tfailurePercentage: this.calculateFailurePercentage(),\r\n\t\t\tlastStateChange: this.lastStateChange,\r\n\t\t\tnextAttempt: this.nextAttempt,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reset the circuit breaker\r\n\t */\r\n\treset(): void {\r\n\t\tthis.state = CircuitState.CLOSED\r\n\t\tthis.failureCount = 0\r\n\t\tthis.successCount = 0\r\n\t\tthis.totalRequests = 0\r\n\t\tthis.lastStateChange = Date.now()\r\n\t\tthis.nextAttempt = 0\r\n\t\tthis.requestWindow.length = 0\r\n\t\tCorrelatedLogger.log('Circuit breaker reset', 'CircuitBreaker')\r\n\t}\r\n\r\n\t/**\r\n\t * Trip the circuit breaker\r\n\t */\r\n\tprivate trip(): void {\r\n\t\tthis.state = CircuitState.OPEN\r\n\t\tthis.lastStateChange = Date.now()\r\n\t\tthis.nextAttempt = Date.now() + this.options.resetTimeout\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the failure percentage\r\n\t */\r\n\tprivate calculateFailurePercentage(): number {\r\n\t\tthis.pruneWindow()\r\n\t\tconst windowSize = this.requestWindow.length\r\n\t\tif (windowSize === 0) {\r\n\t\t\treturn 0\r\n\t\t}\r\n\r\n\t\tconst failures = this.requestWindow.filter(r => !r.success).length\r\n\t\treturn (failures / windowSize) * 100\r\n\t}\r\n\r\n\t/**\r\n\t * Remove old entries from the request window\r\n\t */\r\n\tprivate pruneWindow(): void {\r\n\t\tconst now = Date.now()\r\n\t\tconst cutoff = now - this.options.rollingWindow\r\n\r\n\t\tlet i = 0\r\n\t\twhile (i < this.requestWindow.length && this.requestWindow[i].timestamp < cutoff) {\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\tif (i > 0) {\r\n\t\t\tthis.requestWindow.splice(0, i)\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["CorrelatedLogger","CircuitState","CircuitBreaker","options","state","failureCount","successCount","lastStateChange","Date","now","nextAttempt","totalRequests","requestWindow","failureThreshold","resetTimeout","rollingWindow","minimumRequests","execute","fn","fallback","isOpen","warn","Error","result","recordSuccess","error","recordFailure","message","push","timestamp","success","pruneWindow","log","reset","trip","windowSize","length","failurePercentage","calculateFailurePercentage","toFixed","getState","getStats","failures","filter","r","cutoff","i","splice"],"mappings":"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"}