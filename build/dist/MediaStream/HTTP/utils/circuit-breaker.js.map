{"version":3,"sources":["../../../../../src/MediaStream/HTTP/utils/circuit-breaker.ts"],"sourcesContent":["import { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\n\r\nexport enum CircuitState {\r\n\tCLOSED = 'closed',\r\n\tOPEN = 'open',\r\n\tHALF_OPEN = 'half-open',\r\n}\r\n\r\nexport interface CircuitBreakerOptions {\r\n\tfailureThreshold: number\r\n\tresetTimeout: number\r\n\trollingWindow: number\r\n\tminimumRequests: number\r\n}\r\n\r\nexport class CircuitBreaker {\r\n\tprivate state: CircuitState = CircuitState.CLOSED\r\n\tprivate failureCount = 0\r\n\tprivate successCount = 0\r\n\tprivate lastStateChange: number = Date.now()\r\n\tprivate nextAttempt: number = 0\r\n\tprivate totalRequests = 0\r\n\tprivate readonly options: CircuitBreakerOptions\r\n\tprivate readonly requestWindow: Array<{ timestamp: number, success: boolean }> = []\r\n\r\n\tconstructor(options: CircuitBreakerOptions) {\r\n\t\tthis.options = {\r\n\t\t\tfailureThreshold: options.failureThreshold || 50,\r\n\t\t\tresetTimeout: options.resetTimeout || 30000,\r\n\t\t\trollingWindow: options.rollingWindow || 60000,\r\n\t\t\tminimumRequests: options.minimumRequests || 5,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Execute a function with circuit breaker protection\r\n\t */\r\n\tasync execute<T>(fn: () => Promise<T>, fallback?: () => Promise<T>): Promise<T> {\r\n\t\tif (this.isOpen()) {\r\n\t\t\tif (fallback) {\r\n\t\t\t\tCorrelatedLogger.warn('Circuit is open, using fallback', 'CircuitBreaker')\r\n\t\t\t\treturn fallback()\r\n\t\t\t}\r\n\t\t\tthrow new Error('Circuit breaker is open')\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst result = await fn()\r\n\t\t\tthis.recordSuccess()\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.recordFailure()\r\n\t\t\tif (fallback) {\r\n\t\t\t\tCorrelatedLogger.warn(`Request failed, using fallback: ${(error as Error).message}`, 'CircuitBreaker')\r\n\t\t\t\treturn fallback()\r\n\t\t\t}\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Record a successful request\r\n\t */\r\n\trecordSuccess(): void {\r\n\t\tthis.successCount++\r\n\t\tthis.totalRequests++\r\n\t\tthis.requestWindow.push({ timestamp: Date.now(), success: true })\r\n\t\tthis.pruneWindow()\r\n\r\n\t\tif (this.state === CircuitState.HALF_OPEN) {\r\n\t\t\tCorrelatedLogger.log('Circuit breaker reset (successful request in half-open state)', 'CircuitBreaker')\r\n\t\t\tthis.reset()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Record a failed request\r\n\t */\r\n\trecordFailure(): void {\r\n\t\tthis.failureCount++\r\n\t\tthis.totalRequests++\r\n\t\tthis.requestWindow.push({ timestamp: Date.now(), success: false })\r\n\t\tthis.pruneWindow()\r\n\r\n\t\tif (this.state === CircuitState.HALF_OPEN) {\r\n\t\t\tCorrelatedLogger.warn('Circuit breaker reopened (failed request in half-open state)', 'CircuitBreaker')\r\n\t\t\tthis.trip()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst windowSize = this.requestWindow.length\r\n\t\tif (windowSize < this.options.minimumRequests) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst failurePercentage = this.calculateFailurePercentage()\r\n\t\tif (failurePercentage >= this.options.failureThreshold) {\r\n\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t`Circuit breaker tripped (failure rate: ${failurePercentage.toFixed(2)}%)`,\r\n\t\t\t\t'CircuitBreaker',\r\n\t\t\t)\r\n\t\t\tthis.trip()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the circuit is open\r\n\t */\r\n\tisOpen(): boolean {\r\n\t\tif (this.state === CircuitState.OPEN) {\r\n\t\t\tconst now = Date.now()\r\n\t\t\tif (now >= this.nextAttempt) {\r\n\t\t\t\tCorrelatedLogger.log('Circuit breaker entering half-open state', 'CircuitBreaker')\r\n\t\t\t\tthis.state = CircuitState.HALF_OPEN\r\n\t\t\t\tthis.lastStateChange = now\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\treturn true\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current state of the circuit breaker\r\n\t */\r\n\tgetState(): CircuitState {\r\n\t\treturn this.state\r\n\t}\r\n\r\n\t/**\r\n\t * Get circuit breaker statistics\r\n\t */\r\n\tgetStats(): {\r\n\t\tstate: CircuitState\r\n\t\tfailureCount: number\r\n\t\tsuccessCount: number\r\n\t\ttotalRequests: number\r\n\t\tfailurePercentage: number\r\n\t\tlastStateChange: number\r\n\t\tnextAttempt: number\r\n\t} {\r\n\t\treturn {\r\n\t\t\tstate: this.state,\r\n\t\t\tfailureCount: this.failureCount,\r\n\t\t\tsuccessCount: this.successCount,\r\n\t\t\ttotalRequests: this.totalRequests,\r\n\t\t\tfailurePercentage: this.calculateFailurePercentage(),\r\n\t\t\tlastStateChange: this.lastStateChange,\r\n\t\t\tnextAttempt: this.nextAttempt,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reset the circuit breaker\r\n\t */\r\n\treset(): void {\r\n\t\tthis.state = CircuitState.CLOSED\r\n\t\tthis.failureCount = 0\r\n\t\tthis.successCount = 0\r\n\t\tthis.totalRequests = 0\r\n\t\tthis.lastStateChange = Date.now()\r\n\t\tthis.nextAttempt = 0\r\n\t\tthis.requestWindow.length = 0\r\n\t\tCorrelatedLogger.log('Circuit breaker reset', 'CircuitBreaker')\r\n\t}\r\n\r\n\t/**\r\n\t * Trip the circuit breaker\r\n\t */\r\n\tprivate trip(): void {\r\n\t\tthis.state = CircuitState.OPEN\r\n\t\tthis.lastStateChange = Date.now()\r\n\t\tthis.nextAttempt = Date.now() + this.options.resetTimeout\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the failure percentage\r\n\t */\r\n\tprivate calculateFailurePercentage(): number {\r\n\t\tthis.pruneWindow()\r\n\t\tconst windowSize = this.requestWindow.length\r\n\t\tif (windowSize === 0) {\r\n\t\t\treturn 0\r\n\t\t}\r\n\r\n\t\tconst failures = this.requestWindow.filter(r => !r.success).length\r\n\t\treturn (failures / windowSize) * 100\r\n\t}\r\n\r\n\t/**\r\n\t * Remove old entries from the request window\r\n\t */\r\n\tprivate pruneWindow(): void {\r\n\t\tconst now = Date.now()\r\n\t\tconst cutoff = now - this.options.rollingWindow\r\n\r\n\t\tlet i = 0\r\n\t\twhile (i < this.requestWindow.length && this.requestWindow[i].timestamp < cutoff) {\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\tif (i > 0) {\r\n\t\t\tthis.requestWindow.splice(0, i)\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["CorrelatedLogger","CircuitState","CircuitBreaker","execute","fn","fallback","isOpen","warn","Error","result","recordSuccess","error","recordFailure","message","successCount","totalRequests","requestWindow","push","timestamp","Date","now","success","pruneWindow","state","log","reset","failureCount","trip","windowSize","length","options","minimumRequests","failurePercentage","calculateFailurePercentage","failureThreshold","toFixed","nextAttempt","lastStateChange","getState","getStats","resetTimeout","failures","filter","r","cutoff","rollingWindow","i","splice"],"mappings":"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"}