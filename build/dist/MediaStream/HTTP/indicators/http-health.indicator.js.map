{"version":3,"sources":["../../../../../src/MediaStream/HTTP/indicators/http-health.indicator.ts"],"sourcesContent":["import type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { BaseHealthIndicator } from '@microservice/Health/base/base-health-indicator'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { HttpClientService } from '../services/http-client.service'\r\n\r\n@Injectable()\r\nexport class HttpHealthIndicator extends BaseHealthIndicator {\r\n\tprivate readonly healthCheckUrls: string[]\r\n\tprivate readonly timeout: number\r\n\r\n\tconstructor(\r\n\t\tprivate readonly httpClient: HttpClientService,\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t) {\r\n\t\tsuper('http')\r\n\t\tthis.healthCheckUrls = this._configService.getOptional('http.healthCheck.urls', [])\r\n\t\tthis.timeout = this._configService.getOptional('http.healthCheck.timeout', 5000)\r\n\t}\r\n\r\n\tprotected async performHealthCheck(): Promise<HealthIndicatorResult> {\r\n\t\tconst stats = this.httpClient.getStats()\r\n\t\tconst circuitBreakerOpen = this.httpClient.isCircuitOpen()\r\n\r\n\t\tif (!this.healthCheckUrls || this.healthCheckUrls.length === 0) {\r\n\t\t\tif (circuitBreakerOpen) {\r\n\t\t\t\treturn this.createUnhealthyResult('Circuit breaker is open', {\r\n\t\t\t\t\tcircuitBreaker: 'open',\r\n\t\t\t\t\tchecks: [],\r\n\t\t\t\t\tstats,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\treturn this.createHealthyResult({\r\n\t\t\t\tcircuitBreaker: 'closed',\r\n\t\t\t\tchecks: [],\r\n\t\t\t\tstats,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst results = await Promise.allSettled(\r\n\t\t\t\tthis.healthCheckUrls.map(async (url) => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst startTime = Date.now()\r\n\t\t\t\t\t\tconst response = await this.httpClient.get(url, { timeout: this.timeout })\r\n\t\t\t\t\t\tconst responseTime = Date.now() - startTime\r\n\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\tstatus: response.status,\r\n\t\t\t\t\t\t\tresponseTime,\r\n\t\t\t\t\t\t\tsuccess: response.status >= 200 && response.status < 300,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\terror: (error as Error).message,\r\n\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\r\n\t\t\tconst checks = results.map((result) => {\r\n\t\t\t\tif (result.status === 'fulfilled') {\r\n\t\t\t\t\treturn result.value\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\turl: 'unknown',\r\n\t\t\t\t\t\terror: result.reason.message,\r\n\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tconst successCount = checks.filter(check => check.success).length\r\n\t\t\tconst isHealthy = successCount === checks.length && !circuitBreakerOpen\r\n\r\n\t\t\tif (!isHealthy) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`HTTP health check failed: ${successCount}/${checks.length} endpoints healthy, circuit breaker: ${circuitBreakerOpen}`,\r\n\t\t\t\t\tHttpHealthIndicator.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tif (!isHealthy) {\r\n\t\t\t\treturn this.createUnhealthyResult(`${successCount}/${checks.length} endpoints healthy, circuit breaker: ${circuitBreakerOpen}`, {\r\n\t\t\t\t\tcircuitBreaker: circuitBreakerOpen ? 'open' : 'closed',\r\n\t\t\t\t\tchecks,\r\n\t\t\t\t\tstats,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\treturn this.createHealthyResult({\r\n\t\t\t\tcircuitBreaker: circuitBreakerOpen ? 'open' : 'closed',\r\n\t\t\t\tchecks,\r\n\t\t\t\tstats,\r\n\t\t\t})\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t`HTTP health check error: ${(error as Error).message}`,\r\n\t\t\t\t(error as Error).stack,\r\n\t\t\t\tHttpHealthIndicator.name,\r\n\t\t\t)\r\n\r\n\t\t\treturn this.createUnhealthyResult((error as Error).message, {\r\n\t\t\t\tcircuitBreaker: circuitBreakerOpen ? 'open' : 'closed',\r\n\t\t\t\tchecks: [{\r\n\t\t\t\t\turl: 'unknown',\r\n\t\t\t\t\terror: (error as Error).message,\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t}],\r\n\t\t\t\tstats,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getDescription(): string {\r\n\t\treturn 'Monitors HTTP connection health including circuit breaker status and external endpoint connectivity'\r\n\t}\r\n}\r\n"],"names":["ConfigService","CorrelatedLogger","BaseHealthIndicator","Injectable","HttpClientService","HttpHealthIndicator","httpClient","_configService","healthCheckUrls","getOptional","timeout","performHealthCheck","stats","getStats","circuitBreakerOpen","isCircuitOpen","length","createUnhealthyResult","circuitBreaker","checks","createHealthyResult","results","Promise","allSettled","map","url","startTime","Date","now","response","get","responseTime","status","success","error","message","result","value","reason","successCount","filter","check","isHealthy","warn","name","stack","getDescription"],"mappings":"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"}