{"version":3,"sources":["../../../../../src/MediaStream/HTTP/indicators/http-health.indicator.ts"],"sourcesContent":["import type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { BaseHealthIndicator } from '@microservice/Health/base/base-health-indicator'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { HttpClientService } from '../services/http-client.service'\r\n\r\n@Injectable()\r\nexport class HttpHealthIndicator extends BaseHealthIndicator {\r\n\tprivate readonly healthCheckUrls: string[]\r\n\tprivate readonly timeout: number\r\n\r\n\tconstructor(\r\n\t\tprivate readonly httpClient: HttpClientService,\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t) {\r\n\t\tsuper('http')\r\n\t\tthis.healthCheckUrls = this._configService.getOptional('http.healthCheck.urls', [])\r\n\t\tthis.timeout = this._configService.getOptional('http.healthCheck.timeout', 5000)\r\n\t}\r\n\r\n\tprotected async performHealthCheck(): Promise<HealthIndicatorResult> {\r\n\t\tconst stats = this.httpClient.getStats()\r\n\t\tconst circuitBreakerOpen = this.httpClient.isCircuitOpen()\r\n\r\n\t\tif (!this.healthCheckUrls || this.healthCheckUrls.length === 0) {\r\n\t\t\tif (circuitBreakerOpen) {\r\n\t\t\t\treturn this.createUnhealthyResult('Circuit breaker is open', {\r\n\t\t\t\t\tcircuitBreaker: 'open',\r\n\t\t\t\t\tchecks: [],\r\n\t\t\t\t\tstats,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\treturn this.createHealthyResult({\r\n\t\t\t\tcircuitBreaker: 'closed',\r\n\t\t\t\tchecks: [],\r\n\t\t\t\tstats,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst results = await Promise.allSettled(\r\n\t\t\t\tthis.healthCheckUrls.map(async (url) => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst startTime = Date.now()\r\n\t\t\t\t\t\tconst response = await this.httpClient.get(url, { timeout: this.timeout })\r\n\t\t\t\t\t\tconst responseTime = Date.now() - startTime\r\n\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\tstatus: response.status,\r\n\t\t\t\t\t\t\tresponseTime,\r\n\t\t\t\t\t\t\tsuccess: response.status >= 200 && response.status < 300,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (error: unknown) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\terror: (error as Error).message,\r\n\t\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\r\n\t\t\tconst checks = results.map((result) => {\r\n\t\t\t\tif (result.status === 'fulfilled') {\r\n\t\t\t\t\treturn result.value\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\turl: 'unknown',\r\n\t\t\t\t\t\terror: result.reason.message,\r\n\t\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tconst successCount = checks.filter(check => check.success).length\r\n\t\t\tconst isHealthy = successCount === checks.length && !circuitBreakerOpen\r\n\r\n\t\t\tif (!isHealthy) {\r\n\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t`HTTP health check failed: ${successCount}/${checks.length} endpoints healthy, circuit breaker: ${circuitBreakerOpen}`,\r\n\t\t\t\t\tHttpHealthIndicator.name,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tif (!isHealthy) {\r\n\t\t\t\treturn this.createUnhealthyResult(`${successCount}/${checks.length} endpoints healthy, circuit breaker: ${circuitBreakerOpen}`, {\r\n\t\t\t\t\tcircuitBreaker: circuitBreakerOpen ? 'open' : 'closed',\r\n\t\t\t\t\tchecks,\r\n\t\t\t\t\tstats,\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\treturn this.createHealthyResult({\r\n\t\t\t\tcircuitBreaker: circuitBreakerOpen ? 'open' : 'closed',\r\n\t\t\t\tchecks,\r\n\t\t\t\tstats,\r\n\t\t\t})\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t`HTTP health check error: ${(error as Error).message}`,\r\n\t\t\t\t(error as Error).stack,\r\n\t\t\t\tHttpHealthIndicator.name,\r\n\t\t\t)\r\n\r\n\t\t\treturn this.createUnhealthyResult((error as Error).message, {\r\n\t\t\t\tcircuitBreaker: circuitBreakerOpen ? 'open' : 'closed',\r\n\t\t\t\tchecks: [{\r\n\t\t\t\t\turl: 'unknown',\r\n\t\t\t\t\terror: (error as Error).message,\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t}],\r\n\t\t\t\tstats,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getDescription(): string {\r\n\t\treturn 'Monitors HTTP connection health including circuit breaker status and external endpoint connectivity'\r\n\t}\r\n}\r\n"],"names":["ConfigService","CorrelatedLogger","BaseHealthIndicator","Injectable","HttpClientService","HttpHealthIndicator","performHealthCheck","stats","httpClient","getStats","circuitBreakerOpen","isCircuitOpen","healthCheckUrls","length","createUnhealthyResult","circuitBreaker","checks","createHealthyResult","results","Promise","allSettled","map","url","startTime","Date","now","response","get","timeout","responseTime","status","success","error","message","result","value","reason","successCount","filter","check","isHealthy","warn","name","stack","getDescription","_configService","getOptional"],"mappings":"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"}