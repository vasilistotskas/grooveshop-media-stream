{"version":3,"sources":["../../../../../src/MediaStream/HTTP/services/http-client.service.ts"],"sourcesContent":["import type { OnModuleDestroy, OnModuleInit } from '@nestjs/common'\r\nimport type { AxiosRequestConfig, AxiosResponse } from 'axios'\r\nimport type { HttpClientStats, IHttpClient } from '../interfaces/http-client.interface'\r\nimport * as http from 'node:http'\r\nimport { Agent as HttpAgent } from 'node:http'\r\nimport * as https from 'node:https'\r\nimport { Agent as HttpsAgent } from 'node:https'\r\nimport { performance } from 'node:perf_hooks'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\nimport { HttpService } from '@nestjs/axios'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { lastValueFrom, throwError, timer } from 'rxjs'\r\nimport { retry, tap } from 'rxjs/operators'\r\nimport { CircuitBreaker } from '../utils/circuit-breaker'\r\n\r\n@Injectable()\r\nexport class HttpClientService implements IHttpClient, OnModuleInit, OnModuleDestroy {\r\n\tprivate readonly circuitBreaker: CircuitBreaker\r\n\tprivate readonly httpAgent: HttpAgent\r\n\tprivate readonly httpsAgent: HttpsAgent\r\n\tprivate readonly stats: HttpClientStats = {\r\n\t\ttotalRequests: 0,\r\n\t\tsuccessfulRequests: 0,\r\n\t\tfailedRequests: 0,\r\n\t\tretriedRequests: 0,\r\n\t\taverageResponseTime: 0,\r\n\t\tcircuitBreakerState: 'closed',\r\n\t\tactiveRequests: 0,\r\n\t\tqueueSize: 0,\r\n\t}\r\n\r\n\tprivate totalResponseTime = 0\r\n\tprivate readonly maxRetries: number\r\n\tprivate readonly retryDelay: number\r\n\tprivate readonly maxRetryDelay: number\r\n\tprivate readonly timeout: number\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _httpService: HttpService,\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t) {\r\n\t\tthis.maxRetries = this._configService.getOptional('http.retry.retries', 3)\r\n\t\tthis.retryDelay = this._configService.getOptional('http.retry.retryDelay', 1000)\r\n\t\tthis.maxRetryDelay = this._configService.getOptional('http.retry.maxRetryDelay', 10000)\r\n\t\tthis.timeout = this._configService.getOptional('http.connectionPool.timeout', 30000)\r\n\r\n\t\tthis.circuitBreaker = new CircuitBreaker({\r\n\t\t\tfailureThreshold: this._configService.getOptional('http.circuitBreaker.failureThreshold', 50),\r\n\t\t\tresetTimeout: this._configService.getOptional('http.circuitBreaker.resetTimeout', 30000),\r\n\t\t\trollingWindow: this._configService.getOptional('http.circuitBreaker.monitoringPeriod', 60000),\r\n\t\t\tminimumRequests: this._configService.getOptional('http.circuitBreaker.minimumRequests', 10),\r\n\t\t})\r\n\r\n\t\tconst maxSockets = this._configService.getOptional('http.connectionPool.maxSockets', 50)\r\n\t\tconst keepAliveMsecs = this._configService.getOptional('http.connectionPool.keepAliveMsecs', 1000)\r\n\r\n\t\tthis.httpAgent = new http.Agent({\r\n\t\t\tkeepAlive: true,\r\n\t\t\tkeepAliveMsecs,\r\n\t\t\tmaxSockets,\r\n\t\t})\r\n\r\n\t\tthis.httpsAgent = new https.Agent({\r\n\t\t\tkeepAlive: true,\r\n\t\t\tkeepAliveMsecs,\r\n\t\t\tmaxSockets,\r\n\t\t})\r\n\r\n\t\tthis.configureAxios()\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tCorrelatedLogger.log('HTTP client service initialized', HttpClientService.name)\r\n\t}\r\n\r\n\tasync onModuleDestroy(): Promise<void> {\r\n\t\tthis.httpAgent.destroy()\r\n\t\tthis.httpsAgent.destroy()\r\n\t\tCorrelatedLogger.log('HTTP client service destroyed', HttpClientService.name)\r\n\t}\r\n\r\n\t/**\r\n\t * Send a GET request\r\n\t */\r\n\tasync get<T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n\t\tconst encodedUrl = this.encodeUrl(url)\r\n\t\treturn this.executeRequest(() => this._httpService.get<T>(encodedUrl, this.prepareConfig(config)))\r\n\t}\r\n\r\n\t/**\r\n\t * Send a POST request\r\n\t */\r\n\tasync post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n\t\treturn this.executeRequest(() => this._httpService.post<T>(url, data, this.prepareConfig(config)))\r\n\t}\r\n\r\n\t/**\r\n\t * Send a PUT request\r\n\t */\r\n\tasync put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n\t\treturn this.executeRequest(() => this._httpService.put<T>(url, data, this.prepareConfig(config)))\r\n\t}\r\n\r\n\t/**\r\n\t * Send a DELETE request\r\n\t */\r\n\tasync delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n\t\treturn this.executeRequest(() => this._httpService.delete<T>(url, this.prepareConfig(config)))\r\n\t}\r\n\r\n\t/**\r\n\t * Send a HEAD request\r\n\t */\r\n\tasync head<T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n\t\treturn this.executeRequest(() => this._httpService.head<T>(url, this.prepareConfig(config)))\r\n\t}\r\n\r\n\t/**\r\n\t * Send a PATCH request\r\n\t */\r\n\tasync patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n\t\treturn this.executeRequest(() => this._httpService.patch<T>(url, data, this.prepareConfig(config)))\r\n\t}\r\n\r\n\t/**\r\n\t * Send a request with custom config\r\n\t */\r\n\tasync request<T = any>(config: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n\t\treturn this.executeRequest(() => this._httpService.request<T>(this.prepareConfig(config)))\r\n\t}\r\n\r\n\t/**\r\n\t * Get client statistics\r\n\t */\r\n\tgetStats(): HttpClientStats {\r\n\t\treturn {\r\n\t\t\t...this.stats,\r\n\t\t\tcircuitBreakerState: this.circuitBreaker.getState(),\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reset client statistics\r\n\t */\r\n\tresetStats(): void {\r\n\t\tthis.stats.totalRequests = 0\r\n\t\tthis.stats.successfulRequests = 0\r\n\t\tthis.stats.failedRequests = 0\r\n\t\tthis.stats.retriedRequests = 0\r\n\t\tthis.stats.averageResponseTime = 0\r\n\t\tthis.totalResponseTime = 0\r\n\t\tCorrelatedLogger.debug('HTTP client statistics reset', HttpClientService.name)\r\n\t}\r\n\r\n\t/**\r\n\t * Check if the circuit breaker is open\r\n\t */\r\n\tisCircuitOpen(): boolean {\r\n\t\treturn this.circuitBreaker.isOpen()\r\n\t}\r\n\r\n\t/**\r\n\t * Reset the circuit breaker\r\n\t */\r\n\tresetCircuitBreaker(): void {\r\n\t\tthis.circuitBreaker.reset()\r\n\t}\r\n\r\n\t/**\r\n\t * Execute a request with circuit breaker and retry logic\r\n\t */\r\n\tprivate async executeRequest<T>(requestFn: () => any): Promise<AxiosResponse<T>> {\r\n\t\tif (this.circuitBreaker.isOpen()) {\r\n\t\t\tthrow new Error('Circuit breaker is open')\r\n\t\t}\r\n\r\n\t\tconst startTime = performance.now()\r\n\t\tthis.stats.activeRequests++\r\n\t\tthis.stats.totalRequests++\r\n\r\n\t\ttry {\r\n\t\t\tconst response: AxiosResponse<T> = await lastValueFrom(\r\n\t\t\t\trequestFn().pipe(\r\n\t\t\t\t\tretry({\r\n\t\t\t\t\t\tcount: this.maxRetries,\r\n\t\t\t\t\t\tdelay: (error, retryCount) => {\r\n\t\t\t\t\t\t\tif (!this.isRetryableError(error)) {\r\n\t\t\t\t\t\t\t\treturn throwError(() => error)\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis.stats.retriedRequests++\r\n\r\n\t\t\t\t\t\t\tconst delayMs = Math.min(\r\n\t\t\t\t\t\t\t\tthis.retryDelay * 2 ** (retryCount - 1),\r\n\t\t\t\t\t\t\t\tthis.maxRetryDelay,\r\n\t\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t\t\t\t\t`Retrying request (attempt ${retryCount}/${this.maxRetries}) after ${delayMs}ms: ${(error as Error).message}`,\r\n\t\t\t\t\t\t\t\tHttpClientService.name,\r\n\t\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\t\treturn timer(delayMs)\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}),\r\n\t\t\t\t\ttap({\r\n\t\t\t\t\t\terror: (error: unknown) => {\r\n\t\t\t\t\t\t\tthis.stats.failedRequests++\r\n\t\t\t\t\t\t\tthis.circuitBreaker.recordFailure()\r\n\t\t\t\t\t\t\tCorrelatedLogger.error(\r\n\t\t\t\t\t\t\t\t`HTTP request failed: ${(error as Error).message}`,\r\n\t\t\t\t\t\t\t\t(error as Error).stack,\r\n\t\t\t\t\t\t\t\tHttpClientService.name,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnext: (response: AxiosResponse<T>) => {\r\n\t\t\t\t\t\t\tthis.stats.successfulRequests++\r\n\t\t\t\t\t\t\tthis.circuitBreaker.recordSuccess()\r\n\t\t\t\t\t\t\tCorrelatedLogger.debug(\r\n\t\t\t\t\t\t\t\t`HTTP request succeeded: ${response.config?.method?.toUpperCase()} ${response.config?.url} ${response.status}`,\r\n\t\t\t\t\t\t\t\tHttpClientService.name,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}),\r\n\t\t\t\t),\r\n\t\t\t)\r\n\r\n\t\t\tconst responseTime = performance.now() - startTime\r\n\t\t\tthis.totalResponseTime += responseTime\r\n\t\t\tthis.stats.averageResponseTime = this.totalResponseTime / this.stats.successfulRequests\r\n\r\n\t\t\treturn response\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst responseTime = performance.now() - startTime\r\n\t\t\tthis.totalResponseTime += responseTime\r\n\r\n\t\t\tthrow error\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tthis.stats.activeRequests--\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check if an error is retryable\r\n\t */\r\n\tprivate isRetryableError(error: any): boolean {\r\n\t\tif ((error as any).code && ['ECONNRESET', 'ETIMEDOUT', 'ECONNREFUSED', 'ENOTFOUND'].includes((error as any).code)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tif (error.response && [408, 429, 500, 502, 503, 504].includes(error.response.status)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare request configuration\r\n\t */\r\n\tprivate prepareConfig(config: AxiosRequestConfig = {}): AxiosRequestConfig {\r\n\t\treturn {\r\n\t\t\t...config,\r\n\t\t\ttimeout: config.timeout || this.timeout,\r\n\t\t\thttpAgent: this.httpAgent,\r\n\t\t\thttpsAgent: this.httpsAgent,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Configure axios defaults\r\n\t */\r\n\tprivate configureAxios(): void {\r\n\t\tthis._httpService.axiosRef.defaults.timeout = this.timeout\r\n\t}\r\n\r\n\t/**\r\n\t * Encode URL to handle non-ASCII characters properly\r\n\t */\r\n\tprivate encodeUrl(url: string): string {\r\n\t\ttry {\r\n\t\t\tconst urlObj = new URL(url)\r\n\r\n\t\t\tconst pathSegments = urlObj.pathname.split('/').map((segment) => {\r\n\t\t\t// eslint-disable-next-line no-control-regex\r\n\t\t\t\tif (/[^\\u0000-\\u007F]/.test(segment)) {\r\n\t\t\t\t\treturn encodeURIComponent(segment)\r\n\t\t\t\t}\r\n\t\t\t\treturn segment\r\n\t\t\t})\r\n\r\n\t\t\turlObj.pathname = pathSegments.join('/')\r\n\r\n\t\t\treturn urlObj.toString()\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tCorrelatedLogger.warn(`Failed to encode URL: ${url} - ${(error as Error).message}`, HttpClientService.name)\r\n\t\t\treturn url\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["http","https","performance","ConfigService","CorrelatedLogger","HttpService","Injectable","lastValueFrom","throwError","timer","retry","tap","CircuitBreaker","HttpClientService","onModuleInit","log","name","onModuleDestroy","httpAgent","destroy","httpsAgent","get","url","config","encodedUrl","encodeUrl","executeRequest","_httpService","prepareConfig","post","data","put","delete","head","patch","request","getStats","stats","circuitBreakerState","circuitBreaker","getState","resetStats","totalRequests","successfulRequests","failedRequests","retriedRequests","averageResponseTime","totalResponseTime","debug","isCircuitOpen","isOpen","resetCircuitBreaker","reset","requestFn","Error","startTime","now","activeRequests","response","pipe","count","maxRetries","delay","error","retryCount","isRetryableError","delayMs","Math","min","retryDelay","maxRetryDelay","warn","message","recordFailure","stack","next","recordSuccess","method","toUpperCase","status","responseTime","code","includes","timeout","configureAxios","axiosRef","defaults","urlObj","URL","pathSegments","pathname","split","map","segment","test","encodeURIComponent","join","toString","_configService","queueSize","getOptional","failureThreshold","resetTimeout","rollingWindow","minimumRequests","maxSockets","keepAliveMsecs","Agent","keepAlive"],"mappings":"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"}