{"version":3,"sources":["../../../../../src/MediaStream/Health/indicators/memory-health.indicator.ts"],"sourcesContent":["import type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport type { HealthCheckOptions } from '../interfaces/health-indicator.interface'\r\nimport * as os from 'node:os'\r\nimport * as process from 'node:process'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { BaseHealthIndicator } from '../base/base-health-indicator'\r\n\r\nexport interface MemoryInfo {\r\n\ttotalMemory: number\r\n\tfreeMemory: number\r\n\tusedMemory: number\r\n\tmemoryUsagePercentage: number\r\n\tprocessMemory: NodeJS.MemoryUsage\r\n\theapUsagePercentage: number\r\n}\r\n\r\n@Injectable()\r\nexport class MemoryHealthIndicator extends BaseHealthIndicator {\r\n\tprivate readonly _warningThreshold: number\r\n\tprivate readonly _criticalThreshold: number\r\n\tprivate readonly heapWarningThreshold: number\r\n\tprivate readonly heapCriticalThreshold: number\r\n\r\n\tconstructor() {\r\n\t\tconst options: HealthCheckOptions = {\r\n\t\t\ttimeout: 1000,\r\n\t\t\tthreshold: 0.95,\r\n\t\t}\r\n\r\n\t\tsuper('memory', options)\r\n\r\n\t\tthis._warningThreshold = 0.85\r\n\t\tthis._criticalThreshold = 0.95\r\n\t\tthis.heapWarningThreshold = 0.90\r\n\t\tthis.heapCriticalThreshold = 0.98\r\n\t}\r\n\r\n\tprotected async performHealthCheck(): Promise<HealthIndicatorResult> {\r\n\t\treturn this.executeWithTimeout(async () => {\r\n\t\t\tconst memoryInfo = this.getMemoryInfo()\r\n\r\n\t\t\tif (memoryInfo.memoryUsagePercentage >= this._criticalThreshold) {\r\n\t\t\t\treturn this.createUnhealthyResult(\r\n\t\t\t\t\t`System memory critically high: ${(memoryInfo.memoryUsagePercentage * 100).toFixed(1)}% used`,\r\n\t\t\t\t\tmemoryInfo,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tif (memoryInfo.heapUsagePercentage >= this.heapCriticalThreshold) {\r\n\t\t\t\treturn this.createUnhealthyResult(\r\n\t\t\t\t\t`Heap memory critically high: ${(memoryInfo.heapUsagePercentage * 100).toFixed(1)}% used`,\r\n\t\t\t\t\tmemoryInfo,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tlet detailStatus = 'healthy'\r\n\t\t\tif (memoryInfo.memoryUsagePercentage >= this._warningThreshold\r\n\t\t\t\t|| memoryInfo.heapUsagePercentage >= this.heapWarningThreshold) {\r\n\t\t\t\tdetailStatus = 'warning'\r\n\t\t\t}\r\n\r\n\t\t\treturn this.createHealthyResult({\r\n\t\t\t\t...memoryInfo,\r\n\t\t\t\tdetailStatus,\r\n\t\t\t\tthresholds: {\r\n\t\t\t\t\tsystemMemoryWarning: this._warningThreshold,\r\n\t\t\t\t\tsystemMemoryCritical: this._criticalThreshold,\r\n\t\t\t\t\theapMemoryWarning: this.heapWarningThreshold,\r\n\t\t\t\t\theapMemoryCritical: this.heapCriticalThreshold,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tprotected getDescription(): string {\r\n\t\treturn 'Monitors system and process memory usage'\r\n\t}\r\n\r\n\tprivate getMemoryInfo(): MemoryInfo {\r\n\t\tconst totalMemory = os.totalmem()\r\n\t\tconst freeMemory = os.freemem()\r\n\t\tconst usedMemory = totalMemory - freeMemory\r\n\t\tconst memoryUsagePercentage = usedMemory / totalMemory\r\n\r\n\t\tconst processMemory = process.memoryUsage()\r\n\t\tconst heapUsagePercentage = processMemory.heapUsed / processMemory.rss\r\n\r\n\t\treturn {\r\n\t\t\ttotalMemory: this.formatBytes(totalMemory),\r\n\t\t\tfreeMemory: this.formatBytes(freeMemory),\r\n\t\t\tusedMemory: this.formatBytes(usedMemory),\r\n\t\t\tmemoryUsagePercentage,\r\n\t\t\tprocessMemory: {\r\n\t\t\t\trss: this.formatBytes(processMemory.rss),\r\n\t\t\t\theapTotal: this.formatBytes(processMemory.heapTotal),\r\n\t\t\t\theapUsed: this.formatBytes(processMemory.heapUsed),\r\n\t\t\t\texternal: this.formatBytes(processMemory.external),\r\n\t\t\t\tarrayBuffers: this.formatBytes(processMemory.arrayBuffers),\r\n\t\t\t},\r\n\t\t\theapUsagePercentage,\r\n\t\t}\r\n\t}\r\n\r\n\tprivate formatBytes(bytes: number): number {\r\n\t\treturn Math.round(bytes / (1024 * 1024))\r\n\t}\r\n\r\n\t/**\r\n\t * Get current memory information without health check wrapper\r\n\t */\r\n\tgetCurrentMemoryInfo(): MemoryInfo {\r\n\t\treturn this.getMemoryInfo()\r\n\t}\r\n\r\n\t/**\r\n\t * Force garbage collection if available (for testing/debugging)\r\n\t */\r\n\tforceGarbageCollection(): boolean {\r\n\t\tif (globalThis.gc) {\r\n\t\t\tglobalThis.gc()\r\n\t\t\treturn true\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n}\r\n"],"names":["os","process","Injectable","BaseHealthIndicator","MemoryHealthIndicator","performHealthCheck","executeWithTimeout","memoryInfo","getMemoryInfo","memoryUsagePercentage","_criticalThreshold","createUnhealthyResult","toFixed","heapUsagePercentage","heapCriticalThreshold","detailStatus","_warningThreshold","heapWarningThreshold","createHealthyResult","thresholds","systemMemoryWarning","systemMemoryCritical","heapMemoryWarning","heapMemoryCritical","getDescription","totalMemory","totalmem","freeMemory","freemem","usedMemory","processMemory","memoryUsage","heapUsed","rss","formatBytes","heapTotal","external","arrayBuffers","bytes","Math","round","getCurrentMemoryInfo","forceGarbageCollection","globalThis","gc","options","timeout","threshold"],"mappings":"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"}