{"version":3,"sources":["../../../../../src/MediaStream/Health/indicators/disk-space-health.indicator.ts"],"sourcesContent":["import type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport type { HealthCheckOptions } from '../interfaces/health-indicator.interface'\r\nimport { promises as fs } from 'node:fs'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { BaseHealthIndicator } from '../base/base-health-indicator'\r\n\r\nexport interface DiskSpaceInfo {\r\n\ttotal: number\r\n\tfree: number\r\n\tused: number\r\n\tusedPercentage: number\r\n\tpath: string\r\n}\r\n\r\n@Injectable()\r\nexport class DiskSpaceHealthIndicator extends BaseHealthIndicator {\r\n\tprivate readonly storagePath: string\r\n\tprivate readonly _warningThreshold: number\r\n\tprivate readonly _criticalThreshold: number\r\n\r\n\tconstructor(private readonly _configService: ConfigService) {\r\n\t\tconst options: HealthCheckOptions = {\r\n\t\t\ttimeout: 3000,\r\n\t\t\tthreshold: 0.9,\r\n\t\t}\r\n\r\n\t\tsuper('disk_space', options)\r\n\r\n\t\tthis.storagePath = this._configService.get('cache.file.directory')\r\n\t\tthis._warningThreshold = 0.8\r\n\t\tthis._criticalThreshold = 0.9\r\n\t}\r\n\r\n\tprotected async performHealthCheck(): Promise<HealthIndicatorResult> {\r\n\t\treturn this.executeWithTimeout(async () => {\r\n\t\t\tconst diskInfo = await this.getDiskSpaceInfo()\r\n\r\n\t\t\tif (diskInfo.usedPercentage >= this._criticalThreshold) {\r\n\t\t\t\treturn this.createUnhealthyResult(\r\n\t\t\t\t\t`Disk space critically low: ${(diskInfo.usedPercentage * 100).toFixed(1)}% used`,\r\n\t\t\t\t\tdiskInfo,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tconst detailStatus = diskInfo.usedPercentage >= this._warningThreshold ? 'warning' : 'healthy'\r\n\r\n\t\t\treturn this.createHealthyResult({\r\n\t\t\t\t...diskInfo,\r\n\t\t\t\tdetailStatus,\r\n\t\t\t\twarningThreshold: this._warningThreshold,\r\n\t\t\t\tcriticalThreshold: this._criticalThreshold,\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tprotected getDescription(): string {\r\n\t\treturn `Monitors disk space usage for storage directory: ${this.storagePath}`\r\n\t}\r\n\r\n\tprivate async getDiskSpaceInfo(): Promise<DiskSpaceInfo> {\r\n\t\ttry {\r\n\t\t\tawait fs.mkdir(this.storagePath, { recursive: true })\r\n\r\n\t\t\tconst stats = await fs.statfs(this.storagePath)\r\n\r\n\t\t\tconst total = stats.blocks * stats.bsize\r\n\t\t\tconst free = stats.bavail * stats.bsize\r\n\t\t\tconst used = total - free\r\n\t\t\tconst usedPercentage = used / total\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttotal: this.formatBytes(total),\r\n\t\t\t\tfree: this.formatBytes(free),\r\n\t\t\t\tused: this.formatBytes(used),\r\n\t\t\t\tusedPercentage,\r\n\t\t\t\tpath: this.storagePath,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\t// Fallback for systems that don't support statvfs\r\n\t\t\tconsole.error(error)\r\n\t\t\treturn this.getFallbackDiskInfo()\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async getFallbackDiskInfo(): Promise<DiskSpaceInfo> {\r\n\t\ttry {\r\n\t\t\treturn {\r\n\t\t\t\ttotal: 0,\r\n\t\t\t\tfree: 0,\r\n\t\t\t\tused: 0,\r\n\t\t\t\tusedPercentage: 0,\r\n\t\t\t\tpath: this.storagePath,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconsole.error(error)\r\n\t\t\tthrow new Error(`Unable to access storage directory: ${this.storagePath}`)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate formatBytes(bytes: number): number {\r\n\t\treturn Math.round(bytes / (1024 * 1024))\r\n\t}\r\n\r\n\t/**\r\n\t * Get current disk space information without health check wrapper\r\n\t */\r\n\tasync getCurrentDiskInfo(): Promise<DiskSpaceInfo> {\r\n\t\treturn this.getDiskSpaceInfo()\r\n\t}\r\n}\r\n"],"names":["promises","fs","ConfigService","Injectable","BaseHealthIndicator","DiskSpaceHealthIndicator","performHealthCheck","executeWithTimeout","diskInfo","getDiskSpaceInfo","usedPercentage","_criticalThreshold","createUnhealthyResult","toFixed","detailStatus","_warningThreshold","createHealthyResult","warningThreshold","criticalThreshold","getDescription","storagePath","mkdir","recursive","stats","statfs","total","blocks","bsize","free","bavail","used","formatBytes","path","error","console","getFallbackDiskInfo","Error","bytes","Math","round","getCurrentDiskInfo","_configService","options","timeout","threshold","get"],"mappings":";;;;;;;;;AAEA,SAASA,YAAYC,EAAE,QAAQ,UAAS;AACxC,SAASC,aAAa,QAAQ,iCAAqC;AACnE,SAASC,UAAU,QAAQ,iBAAgB;AAC3C,SAASC,mBAAmB,QAAQ,mCAA+B;AAWnE,OAAO,MAAMC,iCAAiCD;IAkB7C,MAAgBE,qBAAqD;QACpE,OAAO,IAAI,CAACC,kBAAkB,CAAC;YAC9B,MAAMC,WAAW,MAAM,IAAI,CAACC,gBAAgB;YAE5C,IAAID,SAASE,cAAc,IAAI,IAAI,CAACC,kBAAkB,EAAE;gBACvD,OAAO,IAAI,CAACC,qBAAqB,CAChC,CAAC,2BAA2B,EAAE,AAACJ,CAAAA,SAASE,cAAc,GAAG,GAAE,EAAGG,OAAO,CAAC,GAAG,MAAM,CAAC,EAChFL;YAEF;YAEA,MAAMM,eAAeN,SAASE,cAAc,IAAI,IAAI,CAACK,iBAAiB,GAAG,YAAY;YAErF,OAAO,IAAI,CAACC,mBAAmB,CAAC;gBAC/B,GAAGR,QAAQ;gBACXM;gBACAG,kBAAkB,IAAI,CAACF,iBAAiB;gBACxCG,mBAAmB,IAAI,CAACP,kBAAkB;YAC3C;QACD;IACD;IAEUQ,iBAAyB;QAClC,OAAO,CAAC,iDAAiD,EAAE,IAAI,CAACC,WAAW,EAAE;IAC9E;IAEA,MAAcX,mBAA2C;QACxD,IAAI;YACH,MAAMR,GAAGoB,KAAK,CAAC,IAAI,CAACD,WAAW,EAAE;gBAAEE,WAAW;YAAK;YAEnD,MAAMC,QAAQ,MAAMtB,GAAGuB,MAAM,CAAC,IAAI,CAACJ,WAAW;YAE9C,MAAMK,QAAQF,MAAMG,MAAM,GAAGH,MAAMI,KAAK;YACxC,MAAMC,OAAOL,MAAMM,MAAM,GAAGN,MAAMI,KAAK;YACvC,MAAMG,OAAOL,QAAQG;YACrB,MAAMlB,iBAAiBoB,OAAOL;YAE9B,OAAO;gBACNA,OAAO,IAAI,CAACM,WAAW,CAACN;gBACxBG,MAAM,IAAI,CAACG,WAAW,CAACH;gBACvBE,MAAM,IAAI,CAACC,WAAW,CAACD;gBACvBpB;gBACAsB,MAAM,IAAI,CAACZ,WAAW;YACvB;QACD,EACA,OAAOa,OAAgB;YACtB,kDAAkD;YAClDC,QAAQD,KAAK,CAACA;YACd,OAAO,IAAI,CAACE,mBAAmB;QAChC;IACD;IAEA,MAAcA,sBAA8C;QAC3D,IAAI;YACH,OAAO;gBACNV,OAAO;gBACPG,MAAM;gBACNE,MAAM;gBACNpB,gBAAgB;gBAChBsB,MAAM,IAAI,CAACZ,WAAW;YACvB;QACD,EACA,OAAOa,OAAgB;YACtBC,QAAQD,KAAK,CAACA;YACd,MAAM,IAAIG,MAAM,CAAC,oCAAoC,EAAE,IAAI,CAAChB,WAAW,EAAE;QAC1E;IACD;IAEQW,YAAYM,KAAa,EAAU;QAC1C,OAAOC,KAAKC,KAAK,CAACF,QAAS,CAAA,OAAO,IAAG;IACtC;IAEA;;EAEC,GACD,MAAMG,qBAA6C;QAClD,OAAO,IAAI,CAAC/B,gBAAgB;IAC7B;IA1FA,YAAY,AAAiBgC,cAA6B,CAAE;QAC3D,MAAMC,UAA8B;YACnCC,SAAS;YACTC,WAAW;QACZ;QAEA,KAAK,CAAC,cAAcF,eANQD,iBAAAA;QAQ5B,IAAI,CAACrB,WAAW,GAAG,IAAI,CAACqB,cAAc,CAACI,GAAG,CAAC;QAC3C,IAAI,CAAC9B,iBAAiB,GAAG;QACzB,IAAI,CAACJ,kBAAkB,GAAG;IAC3B;AAgFD"}