{"version":3,"sources":["../../../../../src/MediaStream/Health/base/base-health-indicator.ts"],"sourcesContent":["import type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport type { HealthCheckOptions, HealthMetrics, IHealthIndicator } from '../interfaces/health-indicator.interface'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\n\r\n@Injectable()\r\nexport abstract class BaseHealthIndicator implements IHealthIndicator {\r\n\tprotected readonly logger: Logger\r\n\tprotected readonly options: HealthCheckOptions\r\n\tprivate lastCheck?: HealthMetrics\r\n\r\n\tconstructor(\r\n\t\tpublic readonly key: string,\r\n\t\toptions: HealthCheckOptions = {},\r\n\t) {\r\n\t\tthis.logger = new Logger(`${this.constructor.name}`)\r\n\t\tthis.options = {\r\n\t\t\ttimeout: 5000,\r\n\t\t\tretries: 3,\r\n\t\t\tthreshold: 0.8,\r\n\t\t\t...options,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Public method to check health with error handling and metrics\r\n\t */\r\n\tasync isHealthy(): Promise<HealthIndicatorResult> {\r\n\t\tconst startTime = Date.now()\r\n\r\n\t\ttry {\r\n\t\t\tconst result = await this.performHealthCheck()\r\n\t\t\tconst responseTime = Date.now() - startTime\r\n\r\n\t\t\tthis.lastCheck = {\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tstatus: 'healthy',\r\n\t\t\t\tresponseTime,\r\n\t\t\t\tdetails: result[this.key] || {},\r\n\t\t\t}\r\n\r\n\t\t\tthis.logger.debug(`Health check passed for ${this.key} in ${responseTime}ms`)\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst responseTime = Date.now() - startTime\r\n\r\n\t\t\tthis.lastCheck = {\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tstatus: 'unhealthy',\r\n\t\t\t\tresponseTime,\r\n\t\t\t\tdetails: { error: error instanceof Error ? (error as Error).message : 'Unknown error' },\r\n\t\t\t}\r\n\r\n\t\t\tthis.logger.warn(`Health check failed for ${this.key}: ${error instanceof Error ? (error as Error).message : 'Unknown error'}`)\r\n\r\n\t\t\treturn {\r\n\t\t\t\t[this.key]: {\r\n\t\t\t\t\tstatus: 'down',\r\n\t\t\t\t\tmessage: error instanceof Error ? (error as Error).message : 'Health check failed',\r\n\t\t\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\t\t\tresponseTime,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get details about this health indicator including last check results\r\n\t */\r\n\tgetDetails(): Record<string, any> {\r\n\t\treturn {\r\n\t\t\tkey: this.key,\r\n\t\t\toptions: this.options,\r\n\t\t\tlastCheck: this.lastCheck,\r\n\t\t\tdescription: this.getDescription(),\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the last health check metrics\r\n\t */\r\n\tgetLastCheck(): HealthMetrics | undefined {\r\n\t\treturn this.lastCheck\r\n\t}\r\n\r\n\t/**\r\n\t * Abstract method that subclasses must implement to perform the actual health check\r\n\t */\r\n\tprotected abstract performHealthCheck(): Promise<HealthIndicatorResult>\r\n\r\n\t/**\r\n\t * Abstract method that subclasses should implement to provide a description\r\n\t */\r\n\tprotected abstract getDescription(): string\r\n\r\n\t/**\r\n\t * Helper method to create a healthy result\r\n\t */\r\n\tprotected createHealthyResult(details: Record<string, any> = {}): HealthIndicatorResult {\r\n\t\treturn {\r\n\t\t\t[this.key]: {\r\n\t\t\t\tstatus: 'up',\r\n\t\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\t\t...details,\r\n\t\t\t},\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Helper method to create an unhealthy result\r\n\t */\r\n\tprotected createUnhealthyResult(message: string, _details: Record<string, any> = {}): HealthIndicatorResult {\r\n\t\tthrow new Error(`${this.key} health check failed: ${message}`)\r\n\t}\r\n\r\n\t/**\r\n\t * Helper method to execute with timeout\r\n\t */\r\n\tprotected async executeWithTimeout<T>(\r\n\t\toperation: () => Promise<T>,\r\n\t\ttimeoutMs: number = this.options.timeout || 5000,\r\n\t): Promise<T> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst timer = setTimeout(() => {\r\n\t\t\t\treject(new Error(`Health check timeout after ${timeoutMs}ms`))\r\n\t\t\t}, timeoutMs)\r\n\r\n\t\t\toperation()\r\n\t\t\t\t.then(resolve)\r\n\t\t\t\t.catch(reject)\r\n\t\t\t\t.finally(() => clearTimeout(timer))\r\n\t\t})\r\n\t}\r\n}\r\n"],"names":["Injectable","Logger","BaseHealthIndicator","key","options","logger","name","timeout","retries","threshold","isHealthy","startTime","Date","now","result","performHealthCheck","responseTime","lastCheck","timestamp","status","details","debug","error","Error","message","warn","toISOString","getDetails","description","getDescription","getLastCheck","createHealthyResult","createUnhealthyResult","_details","executeWithTimeout","operation","timeoutMs","Promise","resolve","reject","timer","setTimeout","then","catch","finally","clearTimeout"],"mappings":"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"}