{"version":3,"sources":["../../../../../src/MediaStream/Health/controllers/health.controller.ts"],"sourcesContent":["import type { DiskSpaceInfo } from '@microservice/Health/indicators/disk-space-health.indicator'\r\nimport type { MemoryInfo } from '@microservice/Health/indicators/memory-health.indicator'\r\nimport type {\r\n\tHealthCheckResult,\r\n\tHealthCheckStatus,\r\n\tHealthIndicatorResult,\r\n} from '@nestjs/terminus'\r\nimport * as process from 'node:process'\r\nimport { CacheHealthIndicator } from '@microservice/Cache/indicators/cache-health.indicator'\r\nimport { RedisHealthIndicator } from '@microservice/Cache/indicators/redis-health.indicator'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { DiskSpaceHealthIndicator } from '@microservice/Health/indicators/disk-space-health.indicator'\r\nimport { MemoryHealthIndicator } from '@microservice/Health/indicators/memory-health.indicator'\r\nimport { HttpHealthIndicator } from '@microservice/HTTP/indicators/http-health.indicator'\r\nimport { HttpClientService } from '@microservice/HTTP/services/http-client.service'\r\nimport { AlertingHealthIndicator } from '@microservice/Monitoring/indicators/alerting-health.indicator'\r\nimport { SystemHealthIndicator } from '@microservice/Monitoring/indicators/system-health.indicator'\r\nimport { JobQueueHealthIndicator } from '@microservice/Queue/indicators/job-queue-health.indicator'\r\nimport { StorageHealthIndicator } from '@microservice/Storage/indicators/storage-health.indicator'\r\nimport { Controller, Get, Post } from '@nestjs/common'\r\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus'\r\n\r\n@Controller('health')\r\nexport class HealthController {\r\n\tconstructor(\r\n\t\tprivate readonly health: HealthCheckService,\r\n\t\tprivate readonly diskSpaceIndicator: DiskSpaceHealthIndicator,\r\n\t\tprivate readonly memoryIndicator: MemoryHealthIndicator,\r\n\t\tprivate readonly httpHealthIndicator: HttpHealthIndicator,\r\n\t\tprivate readonly cacheHealthIndicator: CacheHealthIndicator,\r\n\t\tprivate readonly redisHealthIndicator: RedisHealthIndicator,\r\n\t\tprivate readonly alertingHealthIndicator: AlertingHealthIndicator,\r\n\t\tprivate readonly systemHealthIndicator: SystemHealthIndicator,\r\n\t\tprivate readonly jobQueueHealthIndicator: JobQueueHealthIndicator,\r\n\t\tprivate readonly storageHealthIndicator: StorageHealthIndicator,\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly httpClientService: HttpClientService,\r\n\t) {}\r\n\r\n\t@Get()\r\n\t@HealthCheck()\r\n\tasync check(): Promise<HealthCheckResult> {\r\n\t\treturn this.health.check([\r\n\t\t\t() => this.diskSpaceIndicator.isHealthy(),\r\n\t\t\t() => this.memoryIndicator.isHealthy(),\r\n\t\t\t() => this.httpHealthIndicator.isHealthy(),\r\n\t\t\t() => this.cacheHealthIndicator.isHealthy(),\r\n\t\t\t() => this.redisHealthIndicator.isHealthy(),\r\n\t\t\t() => this.alertingHealthIndicator.isHealthy(),\r\n\t\t\t() => this.systemHealthIndicator.isHealthy(),\r\n\t\t\t() => this.jobQueueHealthIndicator.isHealthy(),\r\n\t\t\t() => this.storageHealthIndicator.isHealthy(),\r\n\t\t])\r\n\t}\r\n\r\n\t@Get('detailed')\r\n\tasync getDetailedHealth(): Promise<{\r\n\t\tstatus: HealthCheckStatus\r\n\t\tinfo: HealthIndicatorResult\r\n\t\terror: HealthIndicatorResult\r\n\t\tdetails: HealthIndicatorResult\r\n\t\ttimestamp: string\r\n\t\tuptime: number\r\n\t\tversion: string\r\n\t\tenvironment: string\r\n\t\tsystemInfo: {\r\n\t\t\tplatform: NodeJS.Platform\r\n\t\t\tarch: NodeJS.Architecture\r\n\t\t\tnodeVersion: string\r\n\t\t\tpid: number\r\n\t\t}\r\n\t\tresources: {\r\n\t\t\tdisk: DiskSpaceInfo\r\n\t\t\tmemory: MemoryInfo\r\n\t\t}\r\n\t\tconfiguration: {\r\n\t\t\tmonitoring: {\r\n\t\t\t\tenabled: boolean\r\n\t\t\t\tmetricsPort: number\r\n\t\t\t}\r\n\t\t\tcache: {\r\n\t\t\t\tfileDirectory: string\r\n\t\t\t\tmemoryMaxSize: number\r\n\t\t\t}\r\n\t\t}\r\n\t}> {\r\n\t\tconst healthResults = await this.health.check([\r\n\t\t\t() => this.diskSpaceIndicator.isHealthy(),\r\n\t\t\t() => this.memoryIndicator.isHealthy(),\r\n\t\t\t() => this.httpHealthIndicator.isHealthy(),\r\n\t\t\t() => this.cacheHealthIndicator.isHealthy(),\r\n\t\t\t() => this.redisHealthIndicator.isHealthy(),\r\n\t\t\t() => this.alertingHealthIndicator.isHealthy(),\r\n\t\t\t() => this.systemHealthIndicator.isHealthy(),\r\n\t\t\t() => this.jobQueueHealthIndicator.isHealthy(),\r\n\t\t\t() => this.storageHealthIndicator.isHealthy(),\r\n\t\t])\r\n\r\n\t\tconst diskInfo = await this.diskSpaceIndicator.getCurrentDiskInfo()\r\n\t\tconst memoryInfo = this.memoryIndicator.getCurrentMemoryInfo()\r\n\r\n\t\treturn {\r\n\t\t\tstatus: healthResults.status,\r\n\t\t\tinfo: healthResults.info || {},\r\n\t\t\terror: healthResults.error || {},\r\n\t\t\tdetails: healthResults.details,\r\n\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\tuptime: process.uptime(),\r\n\t\t\tversion: process.version,\r\n\t\t\tenvironment: process.env.NODE_ENV || 'development',\r\n\t\t\tsystemInfo: {\r\n\t\t\t\tplatform: process.platform,\r\n\t\t\t\tarch: process.arch,\r\n\t\t\t\tnodeVersion: process.version,\r\n\t\t\t\tpid: process.pid,\r\n\t\t\t},\r\n\t\t\tresources: {\r\n\t\t\t\tdisk: diskInfo,\r\n\t\t\t\tmemory: memoryInfo,\r\n\t\t\t},\r\n\t\t\tconfiguration: {\r\n\t\t\t\tmonitoring: {\r\n\t\t\t\t\tenabled: this._configService.get('monitoring.enabled'),\r\n\t\t\t\t\tmetricsPort: this._configService.get('monitoring.metricsPort'),\r\n\t\t\t\t},\r\n\t\t\t\tcache: {\r\n\t\t\t\t\tfileDirectory: this._configService.get('cache.file.directory'),\r\n\t\t\t\t\tmemoryMaxSize: this._configService.get('cache.memory.maxSize'),\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t}\r\n\t}\r\n\r\n\t@Get('ready')\r\n\tasync readiness(): Promise<{ status: string, timestamp: string, checks?: any, error?: string }> {\r\n\t\ttry {\r\n\t\t\tconst result = await this.health.check([\r\n\t\t\t\t() => this.diskSpaceIndicator.isHealthy(),\r\n\t\t\t\t() => this.memoryIndicator.isHealthy(),\r\n\t\t\t\t() => this.httpHealthIndicator.isHealthy(),\r\n\t\t\t\t() => this.cacheHealthIndicator.isHealthy(),\r\n\t\t\t\t() => this.redisHealthIndicator.isHealthy(),\r\n\t\t\t\t() => this.alertingHealthIndicator.isHealthy(),\r\n\t\t\t\t() => this.systemHealthIndicator.isHealthy(),\r\n\t\t\t\t() => this.jobQueueHealthIndicator.isHealthy(),\r\n\t\t\t\t() => this.storageHealthIndicator.isHealthy(),\r\n\t\t\t])\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 'ready',\r\n\t\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\t\tchecks: result.details,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 'not ready',\r\n\t\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\t\terror: error instanceof Error ? (error as Error).message : 'Unknown error',\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@Get('live')\r\n\tasync liveness(): Promise<{ status: string, timestamp: string, uptime: number, pid: number }> {\r\n\t\treturn {\r\n\t\t\tstatus: 'alive',\r\n\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\tuptime: process.uptime(),\r\n\t\t\tpid: process.pid,\r\n\t\t}\r\n\t}\r\n\r\n\t@Get('circuit-breaker')\r\n\tasync circuitBreakerStatus(): Promise<{\r\n\t\ttimestamp: string\r\n\t\tcircuitBreaker: {\r\n\t\t\tisOpen: boolean\r\n\t\t\tstats: any\r\n\t\t}\r\n\t\thttpClient: {\r\n\t\t\tstats: any\r\n\t\t}\r\n\t}> {\r\n\t\tconst isOpen = this.httpClientService.isCircuitOpen()\r\n\t\tconst httpStats = this.httpClientService.getStats()\r\n\r\n\t\treturn {\r\n\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\tcircuitBreaker: {\r\n\t\t\t\tisOpen,\r\n\t\t\t\tstats: httpStats,\r\n\t\t\t},\r\n\t\t\thttpClient: {\r\n\t\t\t\tstats: httpStats,\r\n\t\t\t},\r\n\t\t}\r\n\t}\r\n\r\n\t@Post('circuit-breaker/reset')\r\n\tasync resetCircuitBreaker(): Promise<{\r\n\t\ttimestamp: string\r\n\t\tmessage: string\r\n\t\tpreviousState: any\r\n\t}> {\r\n\t\tconst previousStats = this.httpClientService.getStats()\r\n\r\n\t\tthis.httpClientService.resetCircuitBreaker()\r\n\t\tthis.httpClientService.resetStats()\r\n\r\n\t\treturn {\r\n\t\t\ttimestamp: new Date().toISOString(),\r\n\t\t\tmessage: 'Circuit breaker has been reset successfully',\r\n\t\t\tpreviousState: previousStats,\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["process","CacheHealthIndicator","RedisHealthIndicator","ConfigService","DiskSpaceHealthIndicator","MemoryHealthIndicator","HttpHealthIndicator","HttpClientService","AlertingHealthIndicator","SystemHealthIndicator","JobQueueHealthIndicator","StorageHealthIndicator","Controller","Get","Post","HealthCheck","HealthCheckService","HealthController","check","health","diskSpaceIndicator","isHealthy","memoryIndicator","httpHealthIndicator","cacheHealthIndicator","redisHealthIndicator","alertingHealthIndicator","systemHealthIndicator","jobQueueHealthIndicator","storageHealthIndicator","getDetailedHealth","healthResults","diskInfo","getCurrentDiskInfo","memoryInfo","getCurrentMemoryInfo","status","info","error","details","timestamp","Date","toISOString","uptime","version","environment","env","NODE_ENV","systemInfo","platform","arch","nodeVersion","pid","resources","disk","memory","configuration","monitoring","enabled","_configService","get","metricsPort","cache","fileDirectory","memoryMaxSize","readiness","result","checks","Error","message","liveness","circuitBreakerStatus","isOpen","httpClientService","isCircuitOpen","httpStats","getStats","circuitBreaker","stats","httpClient","resetCircuitBreaker","previousStats","resetStats","previousState"],"mappings":"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"}