{"version":3,"sources":["../../../../../src/MediaStream/Metrics/controllers/metrics.controller.ts"],"sourcesContent":["import { Controller, Get, Header, HttpCode, HttpStatus } from '@nestjs/common'\r\nimport { MetricsService } from '../services/metrics.service'\r\n\r\n@Controller('metrics')\r\nexport class MetricsController {\r\n\tconstructor(private readonly metricsService: MetricsService) {}\r\n\r\n\t/**\r\n\t * Prometheus metrics endpoint\r\n\t * Returns metrics in Prometheus format for scraping\r\n\t */\r\n\t@Get()\r\n\t@HttpCode(HttpStatus.OK)\r\n\t@Header('Content-Type', 'text/plain; version=0.0.4; charset=utf-8')\r\n\tasync getMetrics(): Promise<string> {\r\n\t\treturn await this.metricsService.getMetrics()\r\n\t}\r\n\r\n\t/**\r\n\t * Health check for metrics endpoint\r\n\t */\r\n\t@Get('health')\r\n\t@HttpCode(HttpStatus.OK)\r\n\tgetMetricsHealth(): { status: string, timestamp: number, service: string, registry: { metricsCount: number } } {\r\n\t\treturn {\r\n\t\t\tstatus: 'healthy',\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tservice: 'metrics',\r\n\t\t\tregistry: {\r\n\t\t\t\tmetricsCount: this.metricsService.getRegistry().getMetricsAsArray().length,\r\n\t\t\t},\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["Controller","Get","Header","HttpCode","HttpStatus","MetricsService","MetricsController","metricsService","getMetrics","getMetricsHealth","status","timestamp","Date","now","service","registry","metricsCount","getRegistry","getMetricsAsArray","length","OK"],"mappings":";;;;;;;;;AAAA,SAASA,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,iBAAgB;AAC9E,SAASC,cAAc,QAAQ,iCAA6B;AAG5D,OAAO,MAAMC;IACZ,YAAY,AAAiBC,cAA8B,CAAE;aAAhCA,iBAAAA;IAAiC;IAE9D;;;EAGC,GACD,MAGMC,aAA8B;QACnC,OAAO,MAAM,IAAI,CAACD,cAAc,CAACC,UAAU;IAC5C;IAEA;;EAEC,GACD,AAEAC,mBAA+G;QAC9G,OAAO;YACNC,QAAQ;YACRC,WAAWC,KAAKC,GAAG;YACnBC,SAAS;YACTC,UAAU;gBACTC,cAAc,IAAI,CAACT,cAAc,CAACU,WAAW,GAAGC,iBAAiB,GAAGC,MAAM;YAC3E;QACD;IACD;AACD;;;wBArBsBC;;;;;;;;wBAUAA"}