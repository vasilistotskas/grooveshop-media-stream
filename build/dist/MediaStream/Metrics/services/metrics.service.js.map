{"version":3,"sources":["../../../../../src/MediaStream/Metrics/services/metrics.service.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport * as fs from 'node:fs'\r\nimport * as os from 'node:os'\r\nimport * as process from 'node:process'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport * as promClient from 'prom-client'\r\n\r\n@Injectable()\r\nexport class MetricsService implements OnModuleInit {\r\n\tprivate readonly _logger = new Logger(MetricsService.name)\r\n\tprivate readonly register: promClient.Registry\r\n\r\n\tprivate readonly httpRequestsTotal: promClient.Counter\r\n\tprivate readonly httpRequestDuration: promClient.Histogram\r\n\tprivate readonly httpRequestSize: promClient.Histogram\r\n\tprivate readonly httpResponseSize: promClient.Histogram\r\n\r\n\tprivate readonly memoryUsage: promClient.Gauge\r\n\tprivate readonly diskSpaceUsage: promClient.Gauge\r\n\tprivate readonly cpuUsage: promClient.Gauge\r\n\tprivate readonly loadAverage: promClient.Gauge\r\n\tprivate readonly fileDescriptors: promClient.Gauge\r\n\tprivate readonly networkConnections: promClient.Gauge\r\n\r\n\tprivate readonly cacheHitRatio: promClient.Gauge\r\n\tprivate readonly cacheSize: promClient.Gauge\r\n\tprivate readonly cacheEvictions: promClient.Counter\r\n\tprivate readonly cacheOperationsTotal: promClient.Counter\r\n\tprivate readonly cacheOperationDuration: promClient.Histogram\r\n\r\n\tprivate readonly imageProcessingDuration: promClient.Histogram\r\n\tprivate readonly imageProcessingTotal: promClient.Counter\r\n\tprivate readonly imageProcessingQueueSize: promClient.Gauge\r\n\tprivate readonly imageProcessingErrors: promClient.Counter\r\n\r\n\tprivate readonly activeConnections: promClient.Gauge\r\n\tprivate readonly errorTotal: promClient.Counter\r\n\tprivate readonly requestsInFlight: promClient.Gauge\r\n\tprivate readonly uptime: promClient.Gauge\r\n\r\n\tprivate readonly gcDuration: promClient.Histogram\r\n\tprivate readonly eventLoopLag: promClient.Histogram\r\n\r\n\tprivate startTime: number = Date.now()\r\n\tprivate requestsInFlightCount: number = 0\r\n\tprivate systemMetricsInterval?: NodeJS.Timeout\r\n\tprivate performanceMetricsInterval?: NodeJS.Timeout\r\n\r\n\tconstructor(private readonly _configService: ConfigService) {\r\n\t\tthis.register = new promClient.Registry()\r\n\r\n\t\tpromClient.collectDefaultMetrics({\r\n\t\t\tregister: this.register,\r\n\t\t\tprefix: 'mediastream_',\r\n\t\t})\r\n\r\n\t\tthis.httpRequestsTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_http_requests_total',\r\n\t\t\thelp: 'Total number of HTTP requests',\r\n\t\t\tlabelNames: ['method', 'route', 'status_code'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.httpRequestDuration = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_http_request_duration_seconds',\r\n\t\t\thelp: 'Duration of HTTP requests in seconds',\r\n\t\t\tlabelNames: ['method', 'route', 'status_code'],\r\n\t\t\tbuckets: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.httpRequestSize = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_http_request_size_bytes',\r\n\t\t\thelp: 'Size of HTTP requests in bytes',\r\n\t\t\tlabelNames: ['method', 'route'],\r\n\t\t\tbuckets: [100, 1000, 10000, 100000, 1000000, 10000000],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.httpResponseSize = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_http_response_size_bytes',\r\n\t\t\thelp: 'Size of HTTP responses in bytes',\r\n\t\t\tlabelNames: ['method', 'route', 'status_code'],\r\n\t\t\tbuckets: [100, 1000, 10000, 100000, 1000000, 10000000],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.memoryUsage = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_memory_usage_bytes',\r\n\t\t\thelp: 'Memory usage in bytes',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.diskSpaceUsage = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_disk_space_usage_bytes',\r\n\t\t\thelp: 'Disk space usage in bytes',\r\n\t\t\tlabelNames: ['type', 'path'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cpuUsage = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_cpu_usage_percent',\r\n\t\t\thelp: 'CPU usage percentage',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.loadAverage = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_load_average',\r\n\t\t\thelp: 'System load average',\r\n\t\t\tlabelNames: ['period'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.fileDescriptors = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_file_descriptors',\r\n\t\t\thelp: 'Number of open file descriptors',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.networkConnections = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_network_connections',\r\n\t\t\thelp: 'Number of network connections',\r\n\t\t\tlabelNames: ['state'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.activeConnections = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_active_connections',\r\n\t\t\thelp: 'Number of active connections',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.requestsInFlight = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_requests_in_flight',\r\n\t\t\thelp: 'Number of requests currently being processed',\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.uptime = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_uptime_seconds',\r\n\t\t\thelp: 'Application uptime in seconds',\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.imageProcessingQueueSize = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_image_processing_queue_size',\r\n\t\t\thelp: 'Number of items in image processing queue',\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.imageProcessingErrors = new promClient.Counter({\r\n\t\t\tname: 'mediastream_image_processing_errors_total',\r\n\t\t\thelp: 'Total number of image processing errors',\r\n\t\t\tlabelNames: ['operation', 'error_type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.gcDuration = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_gc_duration_seconds',\r\n\t\t\thelp: 'Garbage collection duration in seconds',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tbuckets: [0.001, 0.01, 0.1, 1, 10],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.eventLoopLag = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_event_loop_lag_seconds',\r\n\t\t\thelp: 'Event loop lag in seconds',\r\n\t\t\tbuckets: [0.001, 0.01, 0.1, 1, 10],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheHitRatio = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_cache_hit_ratio',\r\n\t\t\thelp: 'Cache hit ratio (0-1)',\r\n\t\t\tlabelNames: ['cache_type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheSize = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_cache_size_bytes',\r\n\t\t\thelp: 'Cache size in bytes',\r\n\t\t\tlabelNames: ['cache_type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheEvictions = new promClient.Counter({\r\n\t\t\tname: 'mediastream_cache_evictions_total',\r\n\t\t\thelp: 'Total number of cache evictions',\r\n\t\t\tlabelNames: ['cache_type', 'reason'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheOperationDuration = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_cache_operation_duration_seconds',\r\n\t\t\thelp: 'Duration of cache operations in seconds',\r\n\t\t\tlabelNames: ['operation', 'cache_type', 'status'],\r\n\t\t\tbuckets: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.imageProcessingDuration = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_image_processing_duration_seconds',\r\n\t\t\thelp: 'Duration of image processing operations in seconds',\r\n\t\t\tlabelNames: ['operation', 'format', 'status'],\r\n\t\t\tbuckets: [0.1, 0.5, 1, 2, 5, 10, 30],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.imageProcessingTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_image_processing_total',\r\n\t\t\thelp: 'Total number of image processing operations',\r\n\t\t\tlabelNames: ['operation', 'format', 'status'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheOperationsTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_cache_operations_total',\r\n\t\t\thelp: 'Total number of cache operations',\r\n\t\t\tlabelNames: ['operation', 'cache_type', 'status'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.errorTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_errors_total',\r\n\t\t\thelp: 'Total number of errors',\r\n\t\t\tlabelNames: ['type', 'operation'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tconst isTestEnv = process.env.NODE_ENV === 'test'\r\n\t\tconst monitoringEnabled = this._configService.get('monitoring.enabled')\r\n\r\n\t\tif (monitoringEnabled && !isTestEnv) {\r\n\t\t\tthis._logger.log('Metrics collection initialized')\r\n\t\t\tthis.startPeriodicMetricsCollection()\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._logger.log(`Metrics collection disabled${isTestEnv ? ' (test environment)' : ''}`)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get all metrics in Prometheus format\r\n\t */\r\n\tasync getMetrics(): Promise<string> {\r\n\t\treturn this.register.metrics()\r\n\t}\r\n\r\n\t/**\r\n\t * Get metrics registry for custom integrations\r\n\t */\r\n\tgetRegistry(): promClient.Registry {\r\n\t\treturn this.register\r\n\t}\r\n\r\n\t/**\r\n\t * Record HTTP request metrics\r\n\t */\r\n\trecordHttpRequest(method: string, route: string, statusCode: number, duration: number, requestSize?: number, responseSize?: number): void {\r\n\t\tconst statusCodeStr = statusCode.toString()\r\n\t\tthis.httpRequestsTotal.inc({ method, route, status_code: statusCodeStr })\r\n\t\tthis.httpRequestDuration.observe({ method, route, status_code: statusCodeStr }, duration)\r\n\r\n\t\tif (requestSize !== undefined) {\r\n\t\t\tthis.httpRequestSize.observe({ method, route }, requestSize)\r\n\t\t}\r\n\r\n\t\tif (responseSize !== undefined) {\r\n\t\t\tthis.httpResponseSize.observe({ method, route, status_code: statusCodeStr }, responseSize)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Track requests in flight\r\n\t */\r\n\tincrementRequestsInFlight(): void {\r\n\t\tthis.requestsInFlightCount++\r\n\t\tthis.requestsInFlight.set(this.requestsInFlightCount)\r\n\t}\r\n\r\n\t/**\r\n\t * Decrement requests in flight\r\n\t */\r\n\tdecrementRequestsInFlight(): void {\r\n\t\tthis.requestsInFlightCount = Math.max(0, this.requestsInFlightCount - 1)\r\n\t\tthis.requestsInFlight.set(this.requestsInFlightCount)\r\n\t}\r\n\r\n\t/**\r\n\t * Record image processing metrics\r\n\t */\r\n\trecordImageProcessing(operation: string, format: string, status: 'success' | 'error', duration: number): void {\r\n\t\tthis.imageProcessingTotal.inc({ operation, format, status })\r\n\t\tthis.imageProcessingDuration.observe({ operation, format, status }, duration)\r\n\r\n\t\tif (status === 'error') {\r\n\t\t\tthis.imageProcessingErrors.inc({ operation, error_type: 'processing' })\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update image processing queue size\r\n\t */\r\n\tupdateImageProcessingQueueSize(size: number): void {\r\n\t\tthis.imageProcessingQueueSize.set(size)\r\n\t}\r\n\r\n\t/**\r\n\t * Record image processing error\r\n\t */\r\n\trecordImageProcessingError(operation: string, errorType: string): void {\r\n\t\tthis.imageProcessingErrors.inc({ operation, error_type: errorType })\r\n\t}\r\n\r\n\t/**\r\n\t * Record cache operation metrics\r\n\t */\r\n\trecordCacheOperation(operation: 'get' | 'set' | 'delete' | 'clear' | 'expire' | 'flush' | 'warmup', cacheType: string, status: 'hit' | 'miss' | 'success' | 'error', duration?: number): void {\r\n\t\tthis.cacheOperationsTotal.inc({ operation, cache_type: cacheType, status })\r\n\r\n\t\tif (duration !== undefined) {\r\n\t\t\tthis.cacheOperationDuration.observe({ operation, cache_type: cacheType, status }, duration)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Record cache eviction\r\n\t */\r\n\trecordCacheEviction(cacheType: string, reason: 'size' | 'ttl' | 'manual' | 'memory'): void {\r\n\t\tthis.cacheEvictions.inc({ cache_type: cacheType, reason })\r\n\t}\r\n\r\n\t/**\r\n\t * Update cache size metrics\r\n\t */\r\n\tupdateCacheSize(cacheType: string, sizeBytes: number): void {\r\n\t\tthis.cacheSize.set({ cache_type: cacheType }, sizeBytes)\r\n\t}\r\n\r\n\t/**\r\n\t * Record error metrics\r\n\t */\r\n\trecordError(type: string, operation: string): void {\r\n\t\tthis.errorTotal.inc({ type, operation })\r\n\t}\r\n\r\n\t/**\r\n\t * Update memory usage metrics\r\n\t */\r\n\tupdateMemoryMetrics(memoryInfo: { rss: number, heapTotal: number, heapUsed: number, external: number }): void {\r\n\t\tthis.memoryUsage.set({ type: 'rss' }, memoryInfo.rss)\r\n\t\tthis.memoryUsage.set({ type: 'heap_total' }, memoryInfo.heapTotal)\r\n\t\tthis.memoryUsage.set({ type: 'heap_used' }, memoryInfo.heapUsed)\r\n\t\tthis.memoryUsage.set({ type: 'external' }, memoryInfo.external)\r\n\t}\r\n\r\n\t/**\r\n\t * Update disk space metrics\r\n\t */\r\n\tupdateDiskSpaceMetrics(path: string, total: number, used: number, free: number): void {\r\n\t\tthis.diskSpaceUsage.set({ type: 'total', path }, total)\r\n\t\tthis.diskSpaceUsage.set({ type: 'used', path }, used)\r\n\t\tthis.diskSpaceUsage.set({ type: 'free', path }, free)\r\n\t}\r\n\r\n\t/**\r\n\t * Update cache hit ratio metrics\r\n\t */\r\n\tupdateCacheHitRatio(cacheType: string, ratio: number): void {\r\n\t\tthis.cacheHitRatio.set({ cache_type: cacheType }, ratio)\r\n\t}\r\n\r\n\t/**\r\n\t * Update active connections metrics\r\n\t */\r\n\tupdateActiveConnections(type: string, count: number): void {\r\n\t\tthis.activeConnections.set({ type }, count)\r\n\t}\r\n\r\n\t/**\r\n\t * Update CPU usage metrics\r\n\t */\r\n\tupdateCpuUsage(userPercent: number, systemPercent: number): void {\r\n\t\tthis.cpuUsage.set({ type: 'user' }, userPercent)\r\n\t\tthis.cpuUsage.set({ type: 'system' }, systemPercent)\r\n\t\tthis.cpuUsage.set({ type: 'total' }, userPercent + systemPercent)\r\n\t}\r\n\r\n\t/**\r\n\t * Update load average metrics\r\n\t */\r\n\tupdateLoadAverage(load1: number, load5: number, load15: number): void {\r\n\t\tthis.loadAverage.set({ period: '1m' }, load1)\r\n\t\tthis.loadAverage.set({ period: '5m' }, load5)\r\n\t\tthis.loadAverage.set({ period: '15m' }, load15)\r\n\t}\r\n\r\n\t/**\r\n\t * Update file descriptor metrics\r\n\t */\r\n\tupdateFileDescriptors(open: number, max: number): void {\r\n\t\tthis.fileDescriptors.set({ type: 'open' }, open)\r\n\t\tthis.fileDescriptors.set({ type: 'max' }, max)\r\n\t}\r\n\r\n\t/**\r\n\t * Update network connection metrics\r\n\t */\r\n\tupdateNetworkConnections(established: number, listening: number, timeWait: number): void {\r\n\t\tthis.networkConnections.set({ state: 'established' }, established)\r\n\t\tthis.networkConnections.set({ state: 'listening' }, listening)\r\n\t\tthis.networkConnections.set({ state: 'time_wait' }, timeWait)\r\n\t}\r\n\r\n\t/**\r\n\t * Record garbage collection metrics\r\n\t */\r\n\trecordGarbageCollection(type: string, duration: number): void {\r\n\t\tthis.gcDuration.observe({ type }, duration)\r\n\t}\r\n\r\n\t/**\r\n\t * Record event loop lag\r\n\t */\r\n\trecordEventLoopLag(lag: number): void {\r\n\t\tthis.eventLoopLag.observe(lag)\r\n\t}\r\n\r\n\t/**\r\n\t * Reset all metrics (useful for testing)\r\n\t */\r\n\treset(): void {\r\n\t\tthis.register.resetMetrics()\r\n\t}\r\n\r\n\t/**\r\n\t * Stop all metric collection intervals (useful for testing and shutdown)\r\n\t */\r\n\tstopMetricsCollection(): void {\r\n\t\tif (this.systemMetricsInterval) {\r\n\t\t\tclearInterval(this.systemMetricsInterval)\r\n\t\t\tthis.systemMetricsInterval = undefined\r\n\t\t}\r\n\r\n\t\tif (this.performanceMetricsInterval) {\r\n\t\t\tclearInterval(this.performanceMetricsInterval)\r\n\t\t\tthis.performanceMetricsInterval = undefined\r\n\t\t}\r\n\r\n\t\tthis._logger.log('Stopped periodic metrics collection')\r\n\t}\r\n\r\n\tprivate startPeriodicMetricsCollection(): void {\r\n\t\tthis.systemMetricsInterval = setInterval(() => {\r\n\t\t\tthis.collectSystemMetrics()\r\n\t\t}, 30000)\r\n\r\n\t\tthis.performanceMetricsInterval = setInterval(() => {\r\n\t\t\tthis.collectPerformanceMetrics()\r\n\t\t}, 10000)\r\n\r\n\t\tthis._logger.log('Started periodic metrics collection')\r\n\t}\r\n\r\n\tprivate collectSystemMetrics(): void {\r\n\t\ttry {\r\n\t\t\tconst memoryUsage = process.memoryUsage()\r\n\t\t\tthis.updateMemoryMetrics({\r\n\t\t\t\trss: memoryUsage.rss,\r\n\t\t\t\theapTotal: memoryUsage.heapTotal,\r\n\t\t\t\theapUsed: memoryUsage.heapUsed,\r\n\t\t\t\texternal: memoryUsage.external,\r\n\t\t\t})\r\n\r\n\t\t\tconst cpuUsage = process.cpuUsage()\r\n\t\t\tconst totalCpuTime = cpuUsage.user + cpuUsage.system\r\n\t\t\tconst userPercent = totalCpuTime > 0 ? (cpuUsage.user / totalCpuTime) * 100 : 0\r\n\t\t\tconst systemPercent = totalCpuTime > 0 ? (cpuUsage.system / totalCpuTime) * 100 : 0\r\n\t\t\tthis.updateCpuUsage(userPercent, systemPercent)\r\n\r\n\t\t\tconst loadAvg = os.loadavg()\r\n\t\t\tthis.updateLoadAverage(loadAvg[0], loadAvg[1], loadAvg[2])\r\n\r\n\t\t\tconst uptimeSeconds = (Date.now() - this.startTime) / 1000\r\n\t\t\tthis.uptime.set(uptimeSeconds)\r\n\r\n\t\t\tthis.collectDiskSpaceMetrics()\r\n\r\n\t\t\tthis._logger.debug('System metrics collected')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to collect system metrics:', error)\r\n\t\t\tthis.recordError('metrics_collection', 'system_metrics')\r\n\t\t}\r\n\t}\r\n\r\n\tprivate collectPerformanceMetrics(): void {\r\n\t\ttry {\r\n\t\t\tconst start = process.hrtime.bigint()\r\n\t\t\tsetImmediate(() => {\r\n\t\t\t\tconst lag = Number(process.hrtime.bigint() - start) / 1e9\r\n\t\t\t\tthis.recordEventLoopLag(lag)\r\n\t\t\t})\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to collect performance metrics:', error)\r\n\t\t\tthis.recordError('metrics_collection', 'performance_metrics')\r\n\t\t}\r\n\t}\r\n\r\n\tprivate collectDiskSpaceMetrics(): void {\r\n\t\ttry {\r\n\t\t\tconst storagePaths = ['./storage', './public', './build']\r\n\r\n\t\t\tfor (const path of storagePaths) {\r\n\t\t\t\tif (fs.existsSync(path)) {\r\n\t\t\t\t\tconst stats = fs.statSync(path)\r\n\t\t\t\t\tif (stats.isDirectory()) {\r\n\t\t\t\t\t\tconst diskUsage = this.getDiskUsage(path)\r\n\t\t\t\t\t\tif (diskUsage) {\r\n\t\t\t\t\t\t\tthis.updateDiskSpaceMetrics(path, diskUsage.total, diskUsage.used, diskUsage.free)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to collect disk space metrics:', error)\r\n\t\t\tthis.recordError('metrics_collection', 'disk_space')\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getDiskUsage(path: string): { total: number, used: number, free: number } | null {\r\n\t\ttry {\r\n\t\t\t// In production, you'd use a library like 'node-disk-info' or 'statvfs'\r\n\t\t\tconst size = this.getDirectorySize(path)\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttotal: size * 2,\r\n\t\t\t\tused: size,\r\n\t\t\t\tfree: size,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getDirectorySize(dirPath: string): number {\r\n\t\ttry {\r\n\t\t\tlet totalSize = 0\r\n\t\t\tconst files = fs.readdirSync(dirPath)\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tconst filePath = `${dirPath}/${file}`\r\n\t\t\t\tconst stats = fs.statSync(filePath)\r\n\r\n\t\t\t\tif (stats.isDirectory()) {\r\n\t\t\t\t\ttotalSize += this.getDirectorySize(filePath)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttotalSize += stats.size\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn totalSize\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["fs","os","process","ConfigService","Injectable","Logger","promClient","MetricsService","_configService","_logger","name","startTime","Date","now","requestsInFlightCount","register","Registry","collectDefaultMetrics","prefix","httpRequestsTotal","Counter","help","labelNames","registers","httpRequestDuration","Histogram","buckets","httpRequestSize","httpResponseSize","memoryUsage","Gauge","diskSpaceUsage","cpuUsage","loadAverage","fileDescriptors","networkConnections","activeConnections","requestsInFlight","uptime","imageProcessingQueueSize","imageProcessingErrors","gcDuration","eventLoopLag","cacheHitRatio","cacheSize","cacheEvictions","cacheOperationDuration","imageProcessingDuration","imageProcessingTotal","cacheOperationsTotal","errorTotal","onModuleInit","isTestEnv","env","NODE_ENV","monitoringEnabled","get","log","startPeriodicMetricsCollection","getMetrics","metrics","getRegistry","recordHttpRequest","method","route","statusCode","duration","requestSize","responseSize","statusCodeStr","toString","inc","status_code","observe","undefined","incrementRequestsInFlight","set","decrementRequestsInFlight","Math","max","recordImageProcessing","operation","format","status","error_type","updateImageProcessingQueueSize","size","recordImageProcessingError","errorType","recordCacheOperation","cacheType","cache_type","recordCacheEviction","reason","updateCacheSize","sizeBytes","recordError","type","updateMemoryMetrics","memoryInfo","rss","heapTotal","heapUsed","external","updateDiskSpaceMetrics","path","total","used","free","updateCacheHitRatio","ratio","updateActiveConnections","count","updateCpuUsage","userPercent","systemPercent","updateLoadAverage","load1","load5","load15","period","updateFileDescriptors","open","updateNetworkConnections","established","listening","timeWait","state","recordGarbageCollection","recordEventLoopLag","lag","reset","resetMetrics","stopMetricsCollection","systemMetricsInterval","clearInterval","performanceMetricsInterval","setInterval","collectSystemMetrics","collectPerformanceMetrics","totalCpuTime","user","system","loadAvg","loadavg","uptimeSeconds","collectDiskSpaceMetrics","debug","error","start","hrtime","bigint","setImmediate","Number","storagePaths","existsSync","stats","statSync","isDirectory","diskUsage","getDiskUsage","getDirectorySize","dirPath","totalSize","files","readdirSync","file","filePath"],"mappings":"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"}