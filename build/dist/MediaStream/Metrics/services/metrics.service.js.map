{"version":3,"sources":["../../../../../src/MediaStream/Metrics/services/metrics.service.ts"],"sourcesContent":["import type { OnModuleInit } from '@nestjs/common'\r\nimport * as fs from 'node:fs'\r\nimport * as os from 'node:os'\r\nimport * as process from 'node:process'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport * as promClient from 'prom-client'\r\n\r\n@Injectable()\r\nexport class MetricsService implements OnModuleInit {\r\n\tprivate readonly _logger = new Logger(MetricsService.name)\r\n\tprivate readonly register: promClient.Registry\r\n\r\n\tprivate readonly httpRequestsTotal: promClient.Counter\r\n\tprivate readonly httpRequestDuration: promClient.Histogram\r\n\tprivate readonly httpRequestSize: promClient.Histogram\r\n\tprivate readonly httpResponseSize: promClient.Histogram\r\n\r\n\tprivate readonly memoryUsage: promClient.Gauge\r\n\tprivate readonly diskSpaceUsage: promClient.Gauge\r\n\tprivate readonly cpuUsage: promClient.Gauge\r\n\tprivate readonly loadAverage: promClient.Gauge\r\n\tprivate readonly fileDescriptors: promClient.Gauge\r\n\tprivate readonly networkConnections: promClient.Gauge\r\n\r\n\tprivate readonly cacheHitRatio: promClient.Gauge\r\n\tprivate readonly cacheSize: promClient.Gauge\r\n\tprivate readonly cacheEvictions: promClient.Counter\r\n\tprivate readonly cacheOperationsTotal: promClient.Counter\r\n\tprivate readonly cacheOperationDuration: promClient.Histogram\r\n\r\n\tprivate readonly imageProcessingDuration: promClient.Histogram\r\n\tprivate readonly imageProcessingTotal: promClient.Counter\r\n\tprivate readonly imageProcessingQueueSize: promClient.Gauge\r\n\tprivate readonly imageProcessingErrors: promClient.Counter\r\n\r\n\tprivate readonly activeConnections: promClient.Gauge\r\n\tprivate readonly errorTotal: promClient.Counter\r\n\tprivate readonly requestsInFlight: promClient.Gauge\r\n\tprivate readonly uptime: promClient.Gauge\r\n\r\n\tprivate readonly gcDuration: promClient.Histogram\r\n\tprivate readonly eventLoopLag: promClient.Histogram\r\n\r\n\tprivate startTime: number = Date.now()\r\n\tprivate requestsInFlightCount: number = 0\r\n\tprivate systemMetricsInterval?: NodeJS.Timeout\r\n\tprivate performanceMetricsInterval?: NodeJS.Timeout\r\n\r\n\tconstructor(private readonly _configService: ConfigService) {\r\n\t\tthis.register = new promClient.Registry()\r\n\r\n\t\tpromClient.collectDefaultMetrics({\r\n\t\t\tregister: this.register,\r\n\t\t\tprefix: 'mediastream_',\r\n\t\t})\r\n\r\n\t\tthis.httpRequestsTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_http_requests_total',\r\n\t\t\thelp: 'Total number of HTTP requests',\r\n\t\t\tlabelNames: ['method', 'route', 'status_code'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.httpRequestDuration = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_http_request_duration_seconds',\r\n\t\t\thelp: 'Duration of HTTP requests in seconds',\r\n\t\t\tlabelNames: ['method', 'route', 'status_code'],\r\n\t\t\tbuckets: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.httpRequestSize = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_http_request_size_bytes',\r\n\t\t\thelp: 'Size of HTTP requests in bytes',\r\n\t\t\tlabelNames: ['method', 'route'],\r\n\t\t\tbuckets: [100, 1000, 10000, 100000, 1000000, 10000000],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.httpResponseSize = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_http_response_size_bytes',\r\n\t\t\thelp: 'Size of HTTP responses in bytes',\r\n\t\t\tlabelNames: ['method', 'route', 'status_code'],\r\n\t\t\tbuckets: [100, 1000, 10000, 100000, 1000000, 10000000],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.memoryUsage = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_memory_usage_bytes',\r\n\t\t\thelp: 'Memory usage in bytes',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.diskSpaceUsage = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_disk_space_usage_bytes',\r\n\t\t\thelp: 'Disk space usage in bytes',\r\n\t\t\tlabelNames: ['type', 'path'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cpuUsage = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_cpu_usage_percent',\r\n\t\t\thelp: 'CPU usage percentage',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.loadAverage = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_load_average',\r\n\t\t\thelp: 'System load average',\r\n\t\t\tlabelNames: ['period'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.fileDescriptors = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_file_descriptors',\r\n\t\t\thelp: 'Number of open file descriptors',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.networkConnections = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_network_connections',\r\n\t\t\thelp: 'Number of network connections',\r\n\t\t\tlabelNames: ['state'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.activeConnections = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_active_connections',\r\n\t\t\thelp: 'Number of active connections',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.requestsInFlight = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_requests_in_flight',\r\n\t\t\thelp: 'Number of requests currently being processed',\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.uptime = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_uptime_seconds',\r\n\t\t\thelp: 'Application uptime in seconds',\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.imageProcessingQueueSize = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_image_processing_queue_size',\r\n\t\t\thelp: 'Number of items in image processing queue',\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.imageProcessingErrors = new promClient.Counter({\r\n\t\t\tname: 'mediastream_image_processing_errors_total',\r\n\t\t\thelp: 'Total number of image processing errors',\r\n\t\t\tlabelNames: ['operation', 'error_type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.gcDuration = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_gc_duration_seconds',\r\n\t\t\thelp: 'Garbage collection duration in seconds',\r\n\t\t\tlabelNames: ['type'],\r\n\t\t\tbuckets: [0.001, 0.01, 0.1, 1, 10],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.eventLoopLag = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_event_loop_lag_seconds',\r\n\t\t\thelp: 'Event loop lag in seconds',\r\n\t\t\tbuckets: [0.001, 0.01, 0.1, 1, 10],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheHitRatio = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_cache_hit_ratio',\r\n\t\t\thelp: 'Cache hit ratio (0-1)',\r\n\t\t\tlabelNames: ['cache_type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheSize = new promClient.Gauge({\r\n\t\t\tname: 'mediastream_cache_size_bytes',\r\n\t\t\thelp: 'Cache size in bytes',\r\n\t\t\tlabelNames: ['cache_type'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheEvictions = new promClient.Counter({\r\n\t\t\tname: 'mediastream_cache_evictions_total',\r\n\t\t\thelp: 'Total number of cache evictions',\r\n\t\t\tlabelNames: ['cache_type', 'reason'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheOperationDuration = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_cache_operation_duration_seconds',\r\n\t\t\thelp: 'Duration of cache operations in seconds',\r\n\t\t\tlabelNames: ['operation', 'cache_type', 'status'],\r\n\t\t\tbuckets: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.imageProcessingDuration = new promClient.Histogram({\r\n\t\t\tname: 'mediastream_image_processing_duration_seconds',\r\n\t\t\thelp: 'Duration of image processing operations in seconds',\r\n\t\t\tlabelNames: ['operation', 'format', 'status'],\r\n\t\t\tbuckets: [0.1, 0.5, 1, 2, 5, 10, 30],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.imageProcessingTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_image_processing_total',\r\n\t\t\thelp: 'Total number of image processing operations',\r\n\t\t\tlabelNames: ['operation', 'format', 'status'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.cacheOperationsTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_cache_operations_total',\r\n\t\t\thelp: 'Total number of cache operations',\r\n\t\t\tlabelNames: ['operation', 'cache_type', 'status'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\r\n\t\tthis.errorTotal = new promClient.Counter({\r\n\t\t\tname: 'mediastream_errors_total',\r\n\t\t\thelp: 'Total number of errors',\r\n\t\t\tlabelNames: ['type', 'operation'],\r\n\t\t\tregisters: [this.register],\r\n\t\t})\r\n\t}\r\n\r\n\tasync onModuleInit(): Promise<void> {\r\n\t\tconst isTestEnv = process.env.NODE_ENV === 'test'\r\n\t\tconst monitoringEnabled = this._configService.get('monitoring.enabled')\r\n\r\n\t\tif (monitoringEnabled && !isTestEnv) {\r\n\t\t\tthis._logger.log('Metrics collection initialized')\r\n\t\t\tthis.startPeriodicMetricsCollection()\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._logger.log(`Metrics collection disabled${isTestEnv ? ' (test environment)' : ''}`)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get all metrics in Prometheus format\r\n\t */\r\n\tasync getMetrics(): Promise<string> {\r\n\t\treturn this.register.metrics()\r\n\t}\r\n\r\n\t/**\r\n\t * Get metrics registry for custom integrations\r\n\t */\r\n\tgetRegistry(): promClient.Registry {\r\n\t\treturn this.register\r\n\t}\r\n\r\n\t/**\r\n\t * Record HTTP request metrics\r\n\t */\r\n\trecordHttpRequest(method: string, route: string, statusCode: number, duration: number, requestSize?: number, responseSize?: number): void {\r\n\t\tconst statusCodeStr = statusCode.toString()\r\n\t\tthis.httpRequestsTotal.inc({ method, route, status_code: statusCodeStr })\r\n\t\tthis.httpRequestDuration.observe({ method, route, status_code: statusCodeStr }, duration)\r\n\r\n\t\tif (requestSize !== undefined) {\r\n\t\t\tthis.httpRequestSize.observe({ method, route }, requestSize)\r\n\t\t}\r\n\r\n\t\tif (responseSize !== undefined) {\r\n\t\t\tthis.httpResponseSize.observe({ method, route, status_code: statusCodeStr }, responseSize)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Track requests in flight\r\n\t */\r\n\tincrementRequestsInFlight(): void {\r\n\t\tthis.requestsInFlightCount++\r\n\t\tthis.requestsInFlight.set(this.requestsInFlightCount)\r\n\t}\r\n\r\n\t/**\r\n\t * Decrement requests in flight\r\n\t */\r\n\tdecrementRequestsInFlight(): void {\r\n\t\tthis.requestsInFlightCount = Math.max(0, this.requestsInFlightCount - 1)\r\n\t\tthis.requestsInFlight.set(this.requestsInFlightCount)\r\n\t}\r\n\r\n\t/**\r\n\t * Record image processing metrics\r\n\t */\r\n\trecordImageProcessing(operation: string, format: string, status: 'success' | 'error', duration: number): void {\r\n\t\tthis.imageProcessingTotal.inc({ operation, format, status })\r\n\t\tthis.imageProcessingDuration.observe({ operation, format, status }, duration)\r\n\r\n\t\tif (status === 'error') {\r\n\t\t\tthis.imageProcessingErrors.inc({ operation, error_type: 'processing' })\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update image processing queue size\r\n\t */\r\n\tupdateImageProcessingQueueSize(size: number): void {\r\n\t\tthis.imageProcessingQueueSize.set(size)\r\n\t}\r\n\r\n\t/**\r\n\t * Record image processing error\r\n\t */\r\n\trecordImageProcessingError(operation: string, errorType: string): void {\r\n\t\tthis.imageProcessingErrors.inc({ operation, error_type: errorType })\r\n\t}\r\n\r\n\t/**\r\n\t * Record cache operation metrics\r\n\t */\r\n\trecordCacheOperation(operation: 'get' | 'set' | 'delete' | 'clear' | 'expire' | 'flush' | 'warmup', cacheType: string, status: 'hit' | 'miss' | 'success' | 'error', duration?: number): void {\r\n\t\tthis.cacheOperationsTotal.inc({ operation, cache_type: cacheType, status })\r\n\r\n\t\tif (duration !== undefined) {\r\n\t\t\tthis.cacheOperationDuration.observe({ operation, cache_type: cacheType, status }, duration)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Record cache eviction\r\n\t */\r\n\trecordCacheEviction(cacheType: string, reason: 'size' | 'ttl' | 'manual' | 'memory'): void {\r\n\t\tthis.cacheEvictions.inc({ cache_type: cacheType, reason })\r\n\t}\r\n\r\n\t/**\r\n\t * Update cache size metrics\r\n\t */\r\n\tupdateCacheSize(cacheType: string, sizeBytes: number): void {\r\n\t\tthis.cacheSize.set({ cache_type: cacheType }, sizeBytes)\r\n\t}\r\n\r\n\t/**\r\n\t * Record error metrics\r\n\t */\r\n\trecordError(type: string, operation: string): void {\r\n\t\tthis.errorTotal.inc({ type, operation })\r\n\t}\r\n\r\n\t/**\r\n\t * Update memory usage metrics\r\n\t */\r\n\tupdateMemoryMetrics(memoryInfo: { rss: number, heapTotal: number, heapUsed: number, external: number }): void {\r\n\t\tthis.memoryUsage.set({ type: 'rss' }, memoryInfo.rss)\r\n\t\tthis.memoryUsage.set({ type: 'heap_total' }, memoryInfo.heapTotal)\r\n\t\tthis.memoryUsage.set({ type: 'heap_used' }, memoryInfo.heapUsed)\r\n\t\tthis.memoryUsage.set({ type: 'external' }, memoryInfo.external)\r\n\t}\r\n\r\n\t/**\r\n\t * Update disk space metrics\r\n\t */\r\n\tupdateDiskSpaceMetrics(path: string, total: number, used: number, free: number): void {\r\n\t\tthis.diskSpaceUsage.set({ type: 'total', path }, total)\r\n\t\tthis.diskSpaceUsage.set({ type: 'used', path }, used)\r\n\t\tthis.diskSpaceUsage.set({ type: 'free', path }, free)\r\n\t}\r\n\r\n\t/**\r\n\t * Update cache hit ratio metrics\r\n\t */\r\n\tupdateCacheHitRatio(cacheType: string, ratio: number): void {\r\n\t\tthis.cacheHitRatio.set({ cache_type: cacheType }, ratio)\r\n\t}\r\n\r\n\t/**\r\n\t * Update active connections metrics\r\n\t */\r\n\tupdateActiveConnections(type: string, count: number): void {\r\n\t\tthis.activeConnections.set({ type }, count)\r\n\t}\r\n\r\n\t/**\r\n\t * Update CPU usage metrics\r\n\t */\r\n\tupdateCpuUsage(userPercent: number, systemPercent: number): void {\r\n\t\tthis.cpuUsage.set({ type: 'user' }, userPercent)\r\n\t\tthis.cpuUsage.set({ type: 'system' }, systemPercent)\r\n\t\tthis.cpuUsage.set({ type: 'total' }, userPercent + systemPercent)\r\n\t}\r\n\r\n\t/**\r\n\t * Update load average metrics\r\n\t */\r\n\tupdateLoadAverage(load1: number, load5: number, load15: number): void {\r\n\t\tthis.loadAverage.set({ period: '1m' }, load1)\r\n\t\tthis.loadAverage.set({ period: '5m' }, load5)\r\n\t\tthis.loadAverage.set({ period: '15m' }, load15)\r\n\t}\r\n\r\n\t/**\r\n\t * Update file descriptor metrics\r\n\t */\r\n\tupdateFileDescriptors(open: number, max: number): void {\r\n\t\tthis.fileDescriptors.set({ type: 'open' }, open)\r\n\t\tthis.fileDescriptors.set({ type: 'max' }, max)\r\n\t}\r\n\r\n\t/**\r\n\t * Update network connection metrics\r\n\t */\r\n\tupdateNetworkConnections(established: number, listening: number, timeWait: number): void {\r\n\t\tthis.networkConnections.set({ state: 'established' }, established)\r\n\t\tthis.networkConnections.set({ state: 'listening' }, listening)\r\n\t\tthis.networkConnections.set({ state: 'time_wait' }, timeWait)\r\n\t}\r\n\r\n\t/**\r\n\t * Record garbage collection metrics\r\n\t */\r\n\trecordGarbageCollection(type: string, duration: number): void {\r\n\t\tthis.gcDuration.observe({ type }, duration)\r\n\t}\r\n\r\n\t/**\r\n\t * Record event loop lag\r\n\t */\r\n\trecordEventLoopLag(lag: number): void {\r\n\t\tthis.eventLoopLag.observe(lag)\r\n\t}\r\n\r\n\t/**\r\n\t * Reset all metrics (useful for testing)\r\n\t */\r\n\treset(): void {\r\n\t\tthis.register.resetMetrics()\r\n\t}\r\n\r\n\t/**\r\n\t * Stop all metric collection intervals (useful for testing and shutdown)\r\n\t */\r\n\tstopMetricsCollection(): void {\r\n\t\tif (this.systemMetricsInterval) {\r\n\t\t\tclearInterval(this.systemMetricsInterval)\r\n\t\t\tthis.systemMetricsInterval = undefined\r\n\t\t}\r\n\r\n\t\tif (this.performanceMetricsInterval) {\r\n\t\t\tclearInterval(this.performanceMetricsInterval)\r\n\t\t\tthis.performanceMetricsInterval = undefined\r\n\t\t}\r\n\r\n\t\tthis._logger.log('Stopped periodic metrics collection')\r\n\t}\r\n\r\n\tprivate startPeriodicMetricsCollection(): void {\r\n\t\tthis.systemMetricsInterval = setInterval(() => {\r\n\t\t\tthis.collectSystemMetrics()\r\n\t\t}, 30000)\r\n\r\n\t\tthis.performanceMetricsInterval = setInterval(() => {\r\n\t\t\tthis.collectPerformanceMetrics()\r\n\t\t}, 10000)\r\n\r\n\t\tthis._logger.log('Started periodic metrics collection')\r\n\t}\r\n\r\n\tprivate collectSystemMetrics(): void {\r\n\t\ttry {\r\n\t\t\tconst memoryUsage = process.memoryUsage()\r\n\t\t\tthis.updateMemoryMetrics({\r\n\t\t\t\trss: memoryUsage.rss,\r\n\t\t\t\theapTotal: memoryUsage.heapTotal,\r\n\t\t\t\theapUsed: memoryUsage.heapUsed,\r\n\t\t\t\texternal: memoryUsage.external,\r\n\t\t\t})\r\n\r\n\t\t\tconst cpuUsage = process.cpuUsage()\r\n\t\t\tconst totalCpuTime = cpuUsage.user + cpuUsage.system\r\n\t\t\tconst userPercent = totalCpuTime > 0 ? (cpuUsage.user / totalCpuTime) * 100 : 0\r\n\t\t\tconst systemPercent = totalCpuTime > 0 ? (cpuUsage.system / totalCpuTime) * 100 : 0\r\n\t\t\tthis.updateCpuUsage(userPercent, systemPercent)\r\n\r\n\t\t\tconst loadAvg = os.loadavg()\r\n\t\t\tthis.updateLoadAverage(loadAvg[0], loadAvg[1], loadAvg[2])\r\n\r\n\t\t\tconst uptimeSeconds = (Date.now() - this.startTime) / 1000\r\n\t\t\tthis.uptime.set(uptimeSeconds)\r\n\r\n\t\t\tthis.collectDiskSpaceMetrics()\r\n\r\n\t\t\tthis._logger.debug('System metrics collected')\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to collect system metrics:', error)\r\n\t\t\tthis.recordError('metrics_collection', 'system_metrics')\r\n\t\t}\r\n\t}\r\n\r\n\tprivate collectPerformanceMetrics(): void {\r\n\t\ttry {\r\n\t\t\tconst start = process.hrtime.bigint()\r\n\t\t\tsetImmediate(() => {\r\n\t\t\t\tconst lag = Number(process.hrtime.bigint() - start) / 1e9\r\n\t\t\t\tthis.recordEventLoopLag(lag)\r\n\t\t\t})\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to collect performance metrics:', error)\r\n\t\t\tthis.recordError('metrics_collection', 'performance_metrics')\r\n\t\t}\r\n\t}\r\n\r\n\tprivate collectDiskSpaceMetrics(): void {\r\n\t\ttry {\r\n\t\t\tconst storagePaths = ['./storage', './public', './build']\r\n\r\n\t\t\tfor (const path of storagePaths) {\r\n\t\t\t\tif (fs.existsSync(path)) {\r\n\t\t\t\t\tconst stats = fs.statSync(path)\r\n\t\t\t\t\tif (stats.isDirectory()) {\r\n\t\t\t\t\t\tconst diskUsage = this.getDiskUsage(path)\r\n\t\t\t\t\t\tif (diskUsage) {\r\n\t\t\t\t\t\t\tthis.updateDiskSpaceMetrics(path, diskUsage.total, diskUsage.used, diskUsage.free)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis._logger.error('Failed to collect disk space metrics:', error)\r\n\t\t\tthis.recordError('metrics_collection', 'disk_space')\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getDiskUsage(path: string): { total: number, used: number, free: number } | null {\r\n\t\ttry {\r\n\t\t\t// In production, you'd use a library like 'node-disk-info' or 'statvfs'\r\n\t\t\tconst size = this.getDirectorySize(path)\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttotal: size * 2,\r\n\t\t\t\tused: size,\r\n\t\t\t\tfree: size,\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getDirectorySize(dirPath: string): number {\r\n\t\ttry {\r\n\t\t\tlet totalSize = 0\r\n\t\t\tconst files = fs.readdirSync(dirPath)\r\n\r\n\t\t\tfor (const file of files) {\r\n\t\t\t\tconst filePath = `${dirPath}/${file}`\r\n\t\t\t\tconst stats = fs.statSync(filePath)\r\n\r\n\t\t\t\tif (stats.isDirectory()) {\r\n\t\t\t\t\ttotalSize += this.getDirectorySize(filePath)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttotalSize += stats.size\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn totalSize\r\n\t\t}\r\n\t\tcatch {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["fs","os","process","ConfigService","Injectable","Logger","promClient","MetricsService","onModuleInit","isTestEnv","env","NODE_ENV","monitoringEnabled","_configService","get","_logger","log","startPeriodicMetricsCollection","getMetrics","register","metrics","getRegistry","recordHttpRequest","method","route","statusCode","duration","requestSize","responseSize","statusCodeStr","toString","httpRequestsTotal","inc","status_code","httpRequestDuration","observe","undefined","httpRequestSize","httpResponseSize","incrementRequestsInFlight","requestsInFlightCount","requestsInFlight","set","decrementRequestsInFlight","Math","max","recordImageProcessing","operation","format","status","imageProcessingTotal","imageProcessingDuration","imageProcessingErrors","error_type","updateImageProcessingQueueSize","size","imageProcessingQueueSize","recordImageProcessingError","errorType","recordCacheOperation","cacheType","cacheOperationsTotal","cache_type","cacheOperationDuration","recordCacheEviction","reason","cacheEvictions","updateCacheSize","sizeBytes","cacheSize","recordError","type","errorTotal","updateMemoryMetrics","memoryInfo","memoryUsage","rss","heapTotal","heapUsed","external","updateDiskSpaceMetrics","path","total","used","free","diskSpaceUsage","updateCacheHitRatio","ratio","cacheHitRatio","updateActiveConnections","count","activeConnections","updateCpuUsage","userPercent","systemPercent","cpuUsage","updateLoadAverage","load1","load5","load15","loadAverage","period","updateFileDescriptors","open","fileDescriptors","updateNetworkConnections","established","listening","timeWait","networkConnections","state","recordGarbageCollection","gcDuration","recordEventLoopLag","lag","eventLoopLag","reset","resetMetrics","stopMetricsCollection","systemMetricsInterval","clearInterval","performanceMetricsInterval","setInterval","collectSystemMetrics","collectPerformanceMetrics","totalCpuTime","user","system","loadAvg","loadavg","uptimeSeconds","Date","now","startTime","uptime","collectDiskSpaceMetrics","debug","error","start","hrtime","bigint","setImmediate","Number","storagePaths","existsSync","stats","statSync","isDirectory","diskUsage","getDiskUsage","getDirectorySize","dirPath","totalSize","files","readdirSync","file","filePath","name","Registry","collectDefaultMetrics","prefix","Counter","help","labelNames","registers","Histogram","buckets","Gauge"],"mappings":"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"}