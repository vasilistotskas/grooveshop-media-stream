{"version":3,"sources":["../../../../../src/MediaStream/Monitoring/services/performance-monitoring.service.ts"],"sourcesContent":["import type { MonitoringConfig, PerformanceMetrics } from '../interfaces/monitoring.interface'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { MonitoringService } from './monitoring.service'\r\n\r\n@Injectable()\r\nexport class PerformanceMonitoringService {\r\n\tprivate readonly _logger = new Logger(PerformanceMonitoringService.name)\r\n\tprivate readonly performanceData = new Map<string, PerformanceMetrics[]>()\r\n\tprivate readonly config: MonitoringConfig\r\n\tprivate readonly activeOperations = new Map<string, { startTime: number, metadata?: any }>()\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly _correlationService: CorrelationService,\r\n\t\tprivate readonly monitoringService: MonitoringService,\r\n\t) {\r\n\t\tthis.config = this._configService.get<MonitoringConfig>('monitoring', {\r\n\t\t\tenabled: true,\r\n\t\t\tmetricsRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\talertsRetentionMs: 7 * 24 * 60 * 60 * 1000,\r\n\t\t\tperformanceRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\thealthCheckIntervalMs: 30 * 1000,\r\n\t\t\talertCooldownMs: 5 * 60 * 1000,\r\n\t\t\texternalIntegrations: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t\tendpoints: [],\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\tif (this.config.enabled) {\r\n\t\t\tthis.startPerformanceCleanup()\r\n\t\t\tthis._logger.log('Performance monitoring service initialized')\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Start tracking a performance operation\r\n\t */\r\n\tstartOperation(operationName: string, metadata?: any): string {\r\n\t\tif (!this.config.enabled)\r\n\t\t\treturn ''\r\n\r\n\t\tconst operationId = `${operationName}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n\t\tthis.activeOperations.set(operationId, {\r\n\t\t\tstartTime: Date.now(),\r\n\t\t\tmetadata,\r\n\t\t})\r\n\r\n\t\tthis._logger.debug(`Started tracking operation: ${operationName}`, {\r\n\t\t\tcorrelationId: this._correlationService.getCorrelationId(),\r\n\t\t\toperationId,\r\n\t\t\toperationName,\r\n\t\t})\r\n\r\n\t\treturn operationId\r\n\t}\r\n\r\n\t/**\r\n\t * End tracking a performance operation\r\n\t */\r\n\tendOperation(operationId: string, success: boolean = true, errorMessage?: string): void {\r\n\t\tif (!this.config.enabled || !operationId)\r\n\t\t\treturn\r\n\r\n\t\tconst operation = this.activeOperations.get(operationId)\r\n\t\tif (!operation) {\r\n\t\t\tthis._logger.warn(`Operation not found: ${operationId}`)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst duration = Date.now() - operation.startTime\r\n\t\tconst operationName = operationId.replace(/-\\d+-[a-z0-9]+$/, '')\r\n\r\n\t\tconst performanceMetric: PerformanceMetrics = {\r\n\t\t\toperationName,\r\n\t\t\tduration,\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tsuccess,\r\n\t\t\terrorMessage,\r\n\t\t\tmetadata: operation.metadata,\r\n\t\t}\r\n\r\n\t\tthis.recordPerformanceMetric(performanceMetric)\r\n\t\tthis.activeOperations.delete(operationId)\r\n\r\n\t\tthis.monitoringService.recordTimer(`performance.${operationName}.duration`, duration)\r\n\t\tthis.monitoringService.incrementCounter(`performance.${operationName}.total`)\r\n\t\tif (success) {\r\n\t\t\tthis.monitoringService.incrementCounter(`performance.${operationName}.success`)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.monitoringService.incrementCounter(`performance.${operationName}.error`)\r\n\t\t}\r\n\r\n\t\tthis._logger.debug(`Completed operation: ${operationName}`, {\r\n\t\t\tcorrelationId: this._correlationService.getCorrelationId(),\r\n\t\t\toperationId,\r\n\t\t\tduration,\r\n\t\t\tsuccess,\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Track a synchronous operation\r\n\t */\r\n\ttrackOperation<T>(operationName: string, operation: () => T, metadata?: any): T {\r\n\t\tconst operationId = this.startOperation(operationName, metadata)\r\n\t\ttry {\r\n\t\t\tconst result = operation()\r\n\t\t\tthis.endOperation(operationId, true)\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\r\n\t\t\tthis.endOperation(operationId, false, errorMessage)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Track an asynchronous operation\r\n\t */\r\n\tasync trackAsyncOperation<T>(\r\n\t\toperationName: string,\r\n\t\toperation: () => Promise<T>,\r\n\t\tmetadata?: any,\r\n\t): Promise<T> {\r\n\t\tconst operationId = this.startOperation(operationName, metadata)\r\n\t\ttry {\r\n\t\t\tconst result = await operation()\r\n\t\t\tthis.endOperation(operationId, true)\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\r\n\t\t\tthis.endOperation(operationId, false, errorMessage)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get performance metrics for an operation\r\n\t */\r\n\tgetPerformanceMetrics(operationName: string, since?: number): PerformanceMetrics[] {\r\n\t\tconst metrics = this.performanceData.get(operationName) || []\r\n\t\tif (since) {\r\n\t\t\treturn metrics.filter(m => m.timestamp >= since)\r\n\t\t}\r\n\t\treturn [...metrics]\r\n\t}\r\n\r\n\t/**\r\n\t * Get performance statistics for an operation\r\n\t */\r\n\tgetPerformanceStats(operationName: string, since?: number): {\r\n\t\ttotalOperations: number\r\n\t\tsuccessfulOperations: number\r\n\t\tfailedOperations: number\r\n\t\tsuccessRate: number\r\n\t\taverageDuration: number\r\n\t\tminDuration: number\r\n\t\tmaxDuration: number\r\n\t\tp50Duration: number\r\n\t\tp95Duration: number\r\n\t\tp99Duration: number\r\n\t} {\r\n\t\tconst metrics = this.getPerformanceMetrics(operationName, since)\r\n\t\tif (metrics.length === 0) {\r\n\t\t\treturn {\r\n\t\t\t\ttotalOperations: 0,\r\n\t\t\t\tsuccessfulOperations: 0,\r\n\t\t\t\tfailedOperations: 0,\r\n\t\t\t\tsuccessRate: 0,\r\n\t\t\t\taverageDuration: 0,\r\n\t\t\t\tminDuration: 0,\r\n\t\t\t\tmaxDuration: 0,\r\n\t\t\t\tp50Duration: 0,\r\n\t\t\t\tp95Duration: 0,\r\n\t\t\t\tp99Duration: 0,\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst successful = metrics.filter(m => m.success)\r\n\t\tconst failed = metrics.filter(m => !m.success)\r\n\t\tconst durations = metrics.map(m => m.duration).sort((a: any, b: any) => a - b)\r\n\t\tconst totalDuration = durations.reduce((sum: any, d: any) => sum + d, 0)\r\n\r\n\t\treturn {\r\n\t\t\ttotalOperations: metrics.length,\r\n\t\t\tsuccessfulOperations: successful.length,\r\n\t\t\tfailedOperations: failed.length,\r\n\t\t\tsuccessRate: (successful.length / metrics.length) * 100,\r\n\t\t\taverageDuration: totalDuration / metrics.length,\r\n\t\t\tminDuration: durations[0] || 0,\r\n\t\t\tmaxDuration: durations[durations.length - 1] || 0,\r\n\t\t\tp50Duration: this.getPercentile(durations, 50),\r\n\t\t\tp95Duration: this.getPercentile(durations, 95),\r\n\t\t\tp99Duration: this.getPercentile(durations, 99),\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get all tracked operation names\r\n\t */\r\n\tgetTrackedOperations(): string[] {\r\n\t\treturn Array.from(this.performanceData.keys())\r\n\t}\r\n\r\n\t/**\r\n\t * Get currently active operations\r\n\t */\r\n\tgetActiveOperations(): Array<{\r\n\t\toperationId: string\r\n\t\toperationName: string\r\n\t\tstartTime: number\r\n\t\tduration: number\r\n\t\tmetadata?: any\r\n\t}> {\r\n\t\tconst now = Date.now()\r\n\t\tconst activeOps: Array<{\r\n\t\t\toperationId: string\r\n\t\t\toperationName: string\r\n\t\t\tstartTime: number\r\n\t\t\tduration: number\r\n\t\t\tmetadata?: any\r\n\t\t}> = []\r\n\r\n\t\tfor (const [operationId, operation] of this.activeOperations.entries()) {\r\n\t\t\tconst operationName = operationId.replace(/-\\d+-[a-z0-9]+$/, '')\r\n\t\t\tactiveOps.push({\r\n\t\t\t\toperationId,\r\n\t\t\t\toperationName,\r\n\t\t\t\tstartTime: operation.startTime,\r\n\t\t\t\tduration: now - operation.startTime,\r\n\t\t\t\tmetadata: operation.metadata,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn activeOps\r\n\t}\r\n\r\n\t/**\r\n\t * Get performance overview\r\n\t */\r\n\tgetPerformanceOverview(since?: number): {\r\n\t\ttotalOperations: number\r\n\t\taverageResponseTime: number\r\n\t\tsuccessRate: number\r\n\t\tslowestOperations: Array<{ name: string, avgDuration: number }>\r\n\t\tmostFrequentOperations: Array<{ name: string, count: number }>\r\n\t\terrorRates: Array<{ name: string, errorRate: number }>\r\n\t} {\r\n\t\tconst operations = this.getTrackedOperations()\r\n\t\tlet totalOps = 0\r\n\t\tlet totalDuration = 0\r\n\t\tlet totalSuccessful = 0\r\n\r\n\t\tconst operationStats: Array<{\r\n\t\t\tname: string\r\n\t\t\tcount: number\r\n\t\t\tavgDuration: number\r\n\t\t\terrorRate: number\r\n\t\t}> = []\r\n\r\n\t\tfor (const operationName of operations) {\r\n\t\t\tconst stats = this.getPerformanceStats(operationName, since)\r\n\t\t\ttotalOps += stats.totalOperations\r\n\t\t\ttotalDuration += stats.averageDuration * stats.totalOperations\r\n\t\t\ttotalSuccessful += stats.successfulOperations\r\n\r\n\t\t\toperationStats.push({\r\n\t\t\t\tname: operationName,\r\n\t\t\t\tcount: stats.totalOperations,\r\n\t\t\t\tavgDuration: stats.averageDuration,\r\n\t\t\t\terrorRate: 100 - stats.successRate,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tconst slowestOperations = [...operationStats]\r\n\t\t\t.sort((a: any, b: any) => b.avgDuration - a.avgDuration)\r\n\t\t\t.slice(0, 5)\r\n\t\t\t.map(op => ({ name: op.name, avgDuration: op.avgDuration }))\r\n\r\n\t\tconst mostFrequentOperations = [...operationStats]\r\n\t\t\t.sort((a: any, b: any) => b.count - a.count)\r\n\t\t\t.slice(0, 5)\r\n\t\t\t.map(op => ({ name: op.name, count: op.count }))\r\n\r\n\t\tconst errorRates = [...operationStats]\r\n\t\t\t.filter(op => op.errorRate > 0)\r\n\t\t\t.sort((a: any, b: any) => b.errorRate - a.errorRate)\r\n\t\t\t.slice(0, 5)\r\n\t\t\t.map(op => ({ name: op.name, errorRate: op.errorRate }))\r\n\r\n\t\treturn {\r\n\t\t\ttotalOperations: totalOps,\r\n\t\t\taverageResponseTime: totalOps > 0 ? totalDuration / totalOps : 0,\r\n\t\t\tsuccessRate: totalOps > 0 ? (totalSuccessful / totalOps) * 100 : 0,\r\n\t\t\tslowestOperations,\r\n\t\t\tmostFrequentOperations,\r\n\t\t\terrorRates,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Record a performance metric\r\n\t */\r\n\tprivate recordPerformanceMetric(metric: PerformanceMetrics): void {\r\n\t\tif (!this.performanceData.has(metric.operationName)) {\r\n\t\t\tthis.performanceData.set(metric.operationName, [])\r\n\t\t}\r\n\r\n\t\tconst metrics = this.performanceData.get(metric.operationName)!\r\n\t\tmetrics.push(metric)\r\n\r\n\t\tconst maxMetricsPerOperation = 10000\r\n\t\tif (metrics.length > maxMetricsPerOperation) {\r\n\t\t\tmetrics.splice(0, metrics.length - maxMetricsPerOperation)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate percentile from sorted array\r\n\t */\r\n\tprivate getPercentile(sortedArray: number[], percentile: number): number {\r\n\t\tif (sortedArray.length === 0)\r\n\t\t\treturn 0\r\n\t\tconst index = Math.ceil((percentile / 100) * sortedArray.length) - 1\r\n\t\treturn sortedArray[Math.max(0, Math.min(index, sortedArray.length - 1))]\r\n\t}\r\n\r\n\t/**\r\n\t * Start performance data cleanup\r\n\t */\r\n\tprivate startPerformanceCleanup(): void {\r\n\t\tconst cleanupInterval = Math.min(this.config.performanceRetentionMs / 10, 60 * 60 * 1000)\r\n\t\tsetInterval(() => {\r\n\t\t\tthis.cleanupOldPerformanceData()\r\n\t\t}, cleanupInterval)\r\n\t}\r\n\r\n\t/**\r\n\t * Clean up old performance data\r\n\t */\r\n\tprivate cleanupOldPerformanceData(): void {\r\n\t\tconst cutoffTime = Date.now() - this.config.performanceRetentionMs\r\n\t\tlet removedCount = 0\r\n\r\n\t\tfor (const [operationName, metrics] of this.performanceData.entries()) {\r\n\t\t\tconst originalLength = metrics.length\r\n\t\t\tconst filteredMetrics = metrics.filter(m => m.timestamp >= cutoffTime)\r\n\t\t\tif (filteredMetrics.length !== originalLength) {\r\n\t\t\t\tthis.performanceData.set(operationName, filteredMetrics)\r\n\t\t\t\tremovedCount += originalLength - filteredMetrics.length\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (removedCount > 0) {\r\n\t\t\tthis._logger.debug(`Cleaned up ${removedCount} old performance metrics`)\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["CorrelationService","Injectable","Logger","ConfigService","MonitoringService","PerformanceMonitoringService","_configService","_correlationService","monitoringService","_logger","name","performanceData","Map","activeOperations","config","get","enabled","metricsRetentionMs","alertsRetentionMs","performanceRetentionMs","healthCheckIntervalMs","alertCooldownMs","externalIntegrations","endpoints","startPerformanceCleanup","log","startOperation","operationName","metadata","operationId","Date","now","Math","random","toString","substr","set","startTime","debug","correlationId","getCorrelationId","endOperation","success","errorMessage","operation","warn","duration","replace","performanceMetric","timestamp","recordPerformanceMetric","delete","recordTimer","incrementCounter","trackOperation","result","error","Error","message","String","trackAsyncOperation","getPerformanceMetrics","since","metrics","filter","m","getPerformanceStats","length","totalOperations","successfulOperations","failedOperations","successRate","averageDuration","minDuration","maxDuration","p50Duration","p95Duration","p99Duration","successful","failed","durations","map","sort","a","b","totalDuration","reduce","sum","d","getPercentile","getTrackedOperations","Array","from","keys","getActiveOperations","activeOps","entries","push","getPerformanceOverview","operations","totalOps","totalSuccessful","operationStats","stats","count","avgDuration","errorRate","slowestOperations","slice","op","mostFrequentOperations","errorRates","averageResponseTime","metric","has","maxMetricsPerOperation","splice","sortedArray","percentile","index","ceil","max","min","cleanupInterval","setInterval","cleanupOldPerformanceData","cutoffTime","removedCount","originalLength","filteredMetrics"],"mappings":"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"}