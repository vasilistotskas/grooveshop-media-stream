{"version":3,"sources":["../../../../../src/MediaStream/Monitoring/services/performance-monitoring.service.ts"],"sourcesContent":["import type { MonitoringConfig, PerformanceMetrics } from '../interfaces/monitoring.interface'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { MonitoringService } from './monitoring.service'\r\n\r\n@Injectable()\r\nexport class PerformanceMonitoringService {\r\n\tprivate readonly _logger = new Logger(PerformanceMonitoringService.name)\r\n\tprivate readonly performanceData = new Map<string, PerformanceMetrics[]>()\r\n\tprivate readonly config: MonitoringConfig\r\n\tprivate readonly activeOperations = new Map<string, { startTime: number, metadata?: any }>()\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly _correlationService: CorrelationService,\r\n\t\tprivate readonly monitoringService: MonitoringService,\r\n\t) {\r\n\t\tthis.config = this._configService.get<MonitoringConfig>('monitoring', {\r\n\t\t\tenabled: true,\r\n\t\t\tmetricsRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\talertsRetentionMs: 7 * 24 * 60 * 60 * 1000,\r\n\t\t\tperformanceRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\thealthCheckIntervalMs: 30 * 1000,\r\n\t\t\talertCooldownMs: 5 * 60 * 1000,\r\n\t\t\texternalIntegrations: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t\tendpoints: [],\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\tif (this.config.enabled) {\r\n\t\t\tthis.startPerformanceCleanup()\r\n\t\t\tthis._logger.log('Performance monitoring service initialized')\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Start tracking a performance operation\r\n\t */\r\n\tstartOperation(operationName: string, metadata?: any): string {\r\n\t\tif (!this.config.enabled)\r\n\t\t\treturn ''\r\n\r\n\t\tconst operationId = `${operationName}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n\t\tthis.activeOperations.set(operationId, {\r\n\t\t\tstartTime: Date.now(),\r\n\t\t\tmetadata,\r\n\t\t})\r\n\r\n\t\tthis._logger.debug(`Started tracking operation: ${operationName}`, {\r\n\t\t\tcorrelationId: this._correlationService.getCorrelationId(),\r\n\t\t\toperationId,\r\n\t\t\toperationName,\r\n\t\t})\r\n\r\n\t\treturn operationId\r\n\t}\r\n\r\n\t/**\r\n\t * End tracking a performance operation\r\n\t */\r\n\tendOperation(operationId: string, success: boolean = true, errorMessage?: string): void {\r\n\t\tif (!this.config.enabled || !operationId)\r\n\t\t\treturn\r\n\r\n\t\tconst operation = this.activeOperations.get(operationId)\r\n\t\tif (!operation) {\r\n\t\t\tthis._logger.warn(`Operation not found: ${operationId}`)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst duration = Date.now() - operation.startTime\r\n\t\tconst operationName = operationId.replace(/-\\d+-[a-z0-9]+$/, '')\r\n\r\n\t\tconst performanceMetric: PerformanceMetrics = {\r\n\t\t\toperationName,\r\n\t\t\tduration,\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tsuccess,\r\n\t\t\terrorMessage,\r\n\t\t\tmetadata: operation.metadata,\r\n\t\t}\r\n\r\n\t\tthis.recordPerformanceMetric(performanceMetric)\r\n\t\tthis.activeOperations.delete(operationId)\r\n\r\n\t\tthis.monitoringService.recordTimer(`performance.${operationName}.duration`, duration)\r\n\t\tthis.monitoringService.incrementCounter(`performance.${operationName}.total`)\r\n\t\tif (success) {\r\n\t\t\tthis.monitoringService.incrementCounter(`performance.${operationName}.success`)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.monitoringService.incrementCounter(`performance.${operationName}.error`)\r\n\t\t}\r\n\r\n\t\tthis._logger.debug(`Completed operation: ${operationName}`, {\r\n\t\t\tcorrelationId: this._correlationService.getCorrelationId(),\r\n\t\t\toperationId,\r\n\t\t\tduration,\r\n\t\t\tsuccess,\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Track a synchronous operation\r\n\t */\r\n\ttrackOperation<T>(operationName: string, operation: () => T, metadata?: any): T {\r\n\t\tconst operationId = this.startOperation(operationName, metadata)\r\n\t\ttry {\r\n\t\t\tconst result = operation()\r\n\t\t\tthis.endOperation(operationId, true)\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\r\n\t\t\tthis.endOperation(operationId, false, errorMessage)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Track an asynchronous operation\r\n\t */\r\n\tasync trackAsyncOperation<T>(\r\n\t\toperationName: string,\r\n\t\toperation: () => Promise<T>,\r\n\t\tmetadata?: any,\r\n\t): Promise<T> {\r\n\t\tconst operationId = this.startOperation(operationName, metadata)\r\n\t\ttry {\r\n\t\t\tconst result = await operation()\r\n\t\t\tthis.endOperation(operationId, true)\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\r\n\t\t\tthis.endOperation(operationId, false, errorMessage)\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get performance metrics for an operation\r\n\t */\r\n\tgetPerformanceMetrics(operationName: string, since?: number): PerformanceMetrics[] {\r\n\t\tconst metrics = this.performanceData.get(operationName) || []\r\n\t\tif (since) {\r\n\t\t\treturn metrics.filter(m => m.timestamp >= since)\r\n\t\t}\r\n\t\treturn [...metrics]\r\n\t}\r\n\r\n\t/**\r\n\t * Get performance statistics for an operation\r\n\t */\r\n\tgetPerformanceStats(operationName: string, since?: number): {\r\n\t\ttotalOperations: number\r\n\t\tsuccessfulOperations: number\r\n\t\tfailedOperations: number\r\n\t\tsuccessRate: number\r\n\t\taverageDuration: number\r\n\t\tminDuration: number\r\n\t\tmaxDuration: number\r\n\t\tp50Duration: number\r\n\t\tp95Duration: number\r\n\t\tp99Duration: number\r\n\t} {\r\n\t\tconst metrics = this.getPerformanceMetrics(operationName, since)\r\n\t\tif (metrics.length === 0) {\r\n\t\t\treturn {\r\n\t\t\t\ttotalOperations: 0,\r\n\t\t\t\tsuccessfulOperations: 0,\r\n\t\t\t\tfailedOperations: 0,\r\n\t\t\t\tsuccessRate: 0,\r\n\t\t\t\taverageDuration: 0,\r\n\t\t\t\tminDuration: 0,\r\n\t\t\t\tmaxDuration: 0,\r\n\t\t\t\tp50Duration: 0,\r\n\t\t\t\tp95Duration: 0,\r\n\t\t\t\tp99Duration: 0,\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst successful = metrics.filter(m => m.success)\r\n\t\tconst failed = metrics.filter(m => !m.success)\r\n\t\tconst durations = metrics.map(m => m.duration).sort((a: any, b: any) => a - b)\r\n\t\tconst totalDuration = durations.reduce((sum: any, d: any) => sum + d, 0)\r\n\r\n\t\treturn {\r\n\t\t\ttotalOperations: metrics.length,\r\n\t\t\tsuccessfulOperations: successful.length,\r\n\t\t\tfailedOperations: failed.length,\r\n\t\t\tsuccessRate: (successful.length / metrics.length) * 100,\r\n\t\t\taverageDuration: totalDuration / metrics.length,\r\n\t\t\tminDuration: durations[0] || 0,\r\n\t\t\tmaxDuration: durations[durations.length - 1] || 0,\r\n\t\t\tp50Duration: this.getPercentile(durations, 50),\r\n\t\t\tp95Duration: this.getPercentile(durations, 95),\r\n\t\t\tp99Duration: this.getPercentile(durations, 99),\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get all tracked operation names\r\n\t */\r\n\tgetTrackedOperations(): string[] {\r\n\t\treturn Array.from(this.performanceData.keys())\r\n\t}\r\n\r\n\t/**\r\n\t * Get currently active operations\r\n\t */\r\n\tgetActiveOperations(): Array<{\r\n\t\toperationId: string\r\n\t\toperationName: string\r\n\t\tstartTime: number\r\n\t\tduration: number\r\n\t\tmetadata?: any\r\n\t}> {\r\n\t\tconst now = Date.now()\r\n\t\tconst activeOps: Array<{\r\n\t\t\toperationId: string\r\n\t\t\toperationName: string\r\n\t\t\tstartTime: number\r\n\t\t\tduration: number\r\n\t\t\tmetadata?: any\r\n\t\t}> = []\r\n\r\n\t\tfor (const [operationId, operation] of this.activeOperations.entries()) {\r\n\t\t\tconst operationName = operationId.replace(/-\\d+-[a-z0-9]+$/, '')\r\n\t\t\tactiveOps.push({\r\n\t\t\t\toperationId,\r\n\t\t\t\toperationName,\r\n\t\t\t\tstartTime: operation.startTime,\r\n\t\t\t\tduration: now - operation.startTime,\r\n\t\t\t\tmetadata: operation.metadata,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn activeOps\r\n\t}\r\n\r\n\t/**\r\n\t * Get performance overview\r\n\t */\r\n\tgetPerformanceOverview(since?: number): {\r\n\t\ttotalOperations: number\r\n\t\taverageResponseTime: number\r\n\t\tsuccessRate: number\r\n\t\tslowestOperations: Array<{ name: string, avgDuration: number }>\r\n\t\tmostFrequentOperations: Array<{ name: string, count: number }>\r\n\t\terrorRates: Array<{ name: string, errorRate: number }>\r\n\t} {\r\n\t\tconst operations = this.getTrackedOperations()\r\n\t\tlet totalOps = 0\r\n\t\tlet totalDuration = 0\r\n\t\tlet totalSuccessful = 0\r\n\r\n\t\tconst operationStats: Array<{\r\n\t\t\tname: string\r\n\t\t\tcount: number\r\n\t\t\tavgDuration: number\r\n\t\t\terrorRate: number\r\n\t\t}> = []\r\n\r\n\t\tfor (const operationName of operations) {\r\n\t\t\tconst stats = this.getPerformanceStats(operationName, since)\r\n\t\t\ttotalOps += stats.totalOperations\r\n\t\t\ttotalDuration += stats.averageDuration * stats.totalOperations\r\n\t\t\ttotalSuccessful += stats.successfulOperations\r\n\r\n\t\t\toperationStats.push({\r\n\t\t\t\tname: operationName,\r\n\t\t\t\tcount: stats.totalOperations,\r\n\t\t\t\tavgDuration: stats.averageDuration,\r\n\t\t\t\terrorRate: 100 - stats.successRate,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tconst slowestOperations = [...operationStats]\r\n\t\t\t.sort((a: any, b: any) => b.avgDuration - a.avgDuration)\r\n\t\t\t.slice(0, 5)\r\n\t\t\t.map(op => ({ name: op.name, avgDuration: op.avgDuration }))\r\n\r\n\t\tconst mostFrequentOperations = [...operationStats]\r\n\t\t\t.sort((a: any, b: any) => b.count - a.count)\r\n\t\t\t.slice(0, 5)\r\n\t\t\t.map(op => ({ name: op.name, count: op.count }))\r\n\r\n\t\tconst errorRates = [...operationStats]\r\n\t\t\t.filter(op => op.errorRate > 0)\r\n\t\t\t.sort((a: any, b: any) => b.errorRate - a.errorRate)\r\n\t\t\t.slice(0, 5)\r\n\t\t\t.map(op => ({ name: op.name, errorRate: op.errorRate }))\r\n\r\n\t\treturn {\r\n\t\t\ttotalOperations: totalOps,\r\n\t\t\taverageResponseTime: totalOps > 0 ? totalDuration / totalOps : 0,\r\n\t\t\tsuccessRate: totalOps > 0 ? (totalSuccessful / totalOps) * 100 : 0,\r\n\t\t\tslowestOperations,\r\n\t\t\tmostFrequentOperations,\r\n\t\t\terrorRates,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Record a performance metric\r\n\t */\r\n\tprivate recordPerformanceMetric(metric: PerformanceMetrics): void {\r\n\t\tif (!this.performanceData.has(metric.operationName)) {\r\n\t\t\tthis.performanceData.set(metric.operationName, [])\r\n\t\t}\r\n\r\n\t\tconst metrics = this.performanceData.get(metric.operationName)!\r\n\t\tmetrics.push(metric)\r\n\r\n\t\tconst maxMetricsPerOperation = 10000\r\n\t\tif (metrics.length > maxMetricsPerOperation) {\r\n\t\t\tmetrics.splice(0, metrics.length - maxMetricsPerOperation)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate percentile from sorted array\r\n\t */\r\n\tprivate getPercentile(sortedArray: number[], percentile: number): number {\r\n\t\tif (sortedArray.length === 0)\r\n\t\t\treturn 0\r\n\t\tconst index = Math.ceil((percentile / 100) * sortedArray.length) - 1\r\n\t\treturn sortedArray[Math.max(0, Math.min(index, sortedArray.length - 1))]\r\n\t}\r\n\r\n\t/**\r\n\t * Start performance data cleanup\r\n\t */\r\n\tprivate startPerformanceCleanup(): void {\r\n\t\tconst cleanupInterval = Math.min(this.config.performanceRetentionMs / 10, 60 * 60 * 1000)\r\n\t\tsetInterval(() => {\r\n\t\t\tthis.cleanupOldPerformanceData()\r\n\t\t}, cleanupInterval)\r\n\t}\r\n\r\n\t/**\r\n\t * Clean up old performance data\r\n\t */\r\n\tprivate cleanupOldPerformanceData(): void {\r\n\t\tconst cutoffTime = Date.now() - this.config.performanceRetentionMs\r\n\t\tlet removedCount = 0\r\n\r\n\t\tfor (const [operationName, metrics] of this.performanceData.entries()) {\r\n\t\t\tconst originalLength = metrics.length\r\n\t\t\tconst filteredMetrics = metrics.filter(m => m.timestamp >= cutoffTime)\r\n\t\t\tif (filteredMetrics.length !== originalLength) {\r\n\t\t\t\tthis.performanceData.set(operationName, filteredMetrics)\r\n\t\t\t\tremovedCount += originalLength - filteredMetrics.length\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (removedCount > 0) {\r\n\t\t\tthis._logger.debug(`Cleaned up ${removedCount} old performance metrics`)\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["CorrelationService","Injectable","Logger","ConfigService","MonitoringService","PerformanceMonitoringService","startOperation","operationName","metadata","config","enabled","operationId","Date","now","Math","random","toString","substr","activeOperations","set","startTime","_logger","debug","correlationId","_correlationService","getCorrelationId","endOperation","success","errorMessage","operation","get","warn","duration","replace","performanceMetric","timestamp","recordPerformanceMetric","delete","monitoringService","recordTimer","incrementCounter","trackOperation","result","error","Error","message","String","trackAsyncOperation","getPerformanceMetrics","since","metrics","performanceData","filter","m","getPerformanceStats","length","totalOperations","successfulOperations","failedOperations","successRate","averageDuration","minDuration","maxDuration","p50Duration","p95Duration","p99Duration","successful","failed","durations","map","sort","a","b","totalDuration","reduce","sum","d","getPercentile","getTrackedOperations","Array","from","keys","getActiveOperations","activeOps","entries","push","getPerformanceOverview","operations","totalOps","totalSuccessful","operationStats","stats","name","count","avgDuration","errorRate","slowestOperations","slice","op","mostFrequentOperations","errorRates","averageResponseTime","metric","has","maxMetricsPerOperation","splice","sortedArray","percentile","index","ceil","max","min","startPerformanceCleanup","cleanupInterval","performanceRetentionMs","setInterval","cleanupOldPerformanceData","cutoffTime","removedCount","originalLength","filteredMetrics","_configService","Map","metricsRetentionMs","alertsRetentionMs","healthCheckIntervalMs","alertCooldownMs","externalIntegrations","endpoints","log"],"mappings":"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"}