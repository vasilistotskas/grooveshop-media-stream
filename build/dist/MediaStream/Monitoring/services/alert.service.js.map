{"version":3,"sources":["../../../../../src/MediaStream/Monitoring/services/alert.service.ts"],"sourcesContent":["import type {\r\n\tAlert,\r\n\tAlertRule,\r\n\tMonitoringConfig,\r\n} from '../interfaces/monitoring.interface'\r\nimport * as process from 'node:process'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { Injectable, Logger } from '@nestjs/common'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { AlertCondition, AlertSeverity } from '../interfaces/monitoring.interface'\r\nimport { MonitoringService } from './monitoring.service'\r\n\r\n@Injectable()\r\nexport class AlertService {\r\n\tprivate readonly _logger = new Logger(AlertService.name)\r\n\tprivate readonly alertRules = new Map<string, AlertRule>()\r\n\tprivate readonly activeAlerts = new Map<string, Alert>()\r\n\tprivate readonly alertHistory: Alert[] = []\r\n\tprivate readonly config: MonitoringConfig\r\n\tprivate readonly alertCooldowns = new Map<string, number>()\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _configService: ConfigService,\r\n\t\tprivate readonly _correlationService: CorrelationService,\r\n\t\tprivate readonly monitoringService: MonitoringService,\r\n\t) {\r\n\t\tthis.config = this._configService.get<MonitoringConfig>('monitoring', {\r\n\t\t\tenabled: true,\r\n\t\t\tmetricsRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\talertsRetentionMs: 7 * 24 * 60 * 60 * 1000,\r\n\t\t\tperformanceRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\thealthCheckIntervalMs: 30 * 1000,\r\n\t\t\talertCooldownMs: 5 * 60 * 1000,\r\n\t\t\texternalIntegrations: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t\tendpoints: [],\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\tif (this.config.enabled) {\r\n\t\t\tthis.initializeDefaultRules()\r\n\t\t\tif (process.env.NODE_ENV !== 'test') {\r\n\t\t\t\tthis.startAlertEvaluation()\r\n\t\t\t}\r\n\t\t\tthis.startAlertCleanup()\r\n\t\t\tthis._logger.log('Alert service initialized')\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Add or update an alert rule\r\n\t */\r\n\taddAlertRule(rule: AlertRule): void {\r\n\t\tthis.alertRules.set(rule.id, rule)\r\n\t\tthis._logger.log(`Alert rule added: ${rule.name}`, {\r\n\t\t\tcorrelationId: this._correlationService.getCorrelationId(),\r\n\t\t\truleId: rule.id,\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Remove an alert rule\r\n\t */\r\n\tremoveAlertRule(ruleId: string): boolean {\r\n\t\tconst removed = this.alertRules.delete(ruleId)\r\n\t\tif (removed) {\r\n\t\t\tthis._logger.log(`Alert rule removed: ${ruleId}`)\r\n\t\t}\r\n\t\treturn removed\r\n\t}\r\n\r\n\t/**\r\n\t * Get all alert rules\r\n\t */\r\n\tgetAlertRules(): AlertRule[] {\r\n\t\treturn Array.from(this.alertRules.values())\r\n\t}\r\n\r\n\t/**\r\n\t * Get active alerts\r\n\t */\r\n\tgetActiveAlerts(): Alert[] {\r\n\t\treturn Array.from(this.activeAlerts.values())\r\n\t}\r\n\r\n\t/**\r\n\t * Get alert history\r\n\t */\r\n\tgetAlertHistory(since?: number): Alert[] {\r\n\t\tif (since) {\r\n\t\t\treturn this.alertHistory.filter(alert => alert.timestamp >= since)\r\n\t\t}\r\n\t\treturn [...this.alertHistory]\r\n\t}\r\n\r\n\t/**\r\n\t * Manually trigger an alert\r\n\t */\r\n\ttriggerAlert(\r\n\t\truleName: string,\r\n\t\tmessage: string,\r\n\t\tseverity: AlertSeverity,\r\n\t\tmetadata?: Record<string, any>,\r\n\t): void {\r\n\t\tconst alert: Alert = {\r\n\t\t\tid: `manual-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n\t\t\truleId: 'manual',\r\n\t\t\truleName,\r\n\t\t\tmessage,\r\n\t\t\tseverity,\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tresolved: false,\r\n\t\t\tmetadata,\r\n\t\t}\r\n\r\n\t\tthis.processAlert(alert)\r\n\t}\r\n\r\n\t/**\r\n\t * Resolve an alert\r\n\t */\r\n\tresolveAlert(alertId: string): boolean {\r\n\t\tconst alert = this.activeAlerts.get(alertId)\r\n\t\tif (alert && !alert.resolved) {\r\n\t\t\talert.resolved = true\r\n\t\t\talert.resolvedAt = Date.now()\r\n\t\t\tthis.activeAlerts.delete(alertId)\r\n\r\n\t\t\tconst historyAlert = this.alertHistory.find(a => a.id === alertId)\r\n\t\t\tif (historyAlert) {\r\n\t\t\t\thistoryAlert.resolved = true\r\n\t\t\t\thistoryAlert.resolvedAt = alert.resolvedAt\r\n\t\t\t}\r\n\r\n\t\t\tthis._logger.log(`Alert resolved: ${alert.ruleName}`, {\r\n\t\t\t\tcorrelationId: this._correlationService.getCorrelationId(),\r\n\t\t\t\talertId,\r\n\t\t\t\tduration: alert.resolvedAt - alert.timestamp,\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Manually evaluate alerts (for testing)\r\n\t */\r\n\tevaluateAlertsNow(): void {\r\n\t\tthis.evaluateAlerts()\r\n\t}\r\n\r\n\t/**\r\n\t * Get alert statistics\r\n\t */\r\n\tgetAlertStats(): {\r\n\t\ttotalRules: number\r\n\t\tactiveAlerts: number\r\n\t\talertsBySeverity: Record<AlertSeverity, number>\r\n\t\talertsLast24h: number\r\n\t\taverageResolutionTime: number\r\n\t} {\r\n\t\tconst activeAlerts = this.getActiveAlerts()\r\n\t\tconst last24h = Date.now() - 24 * 60 * 60 * 1000\r\n\t\tconst recentAlerts = this.getAlertHistory(last24h)\r\n\r\n\t\tconst alertsBySeverity: Record<AlertSeverity, number> = {\r\n\t\t\t[AlertSeverity.LOW]: 0,\r\n\t\t\t[AlertSeverity.MEDIUM]: 0,\r\n\t\t\t[AlertSeverity.HIGH]: 0,\r\n\t\t\t[AlertSeverity.CRITICAL]: 0,\r\n\t\t}\r\n\r\n\t\tactiveAlerts.forEach((alert) => {\r\n\t\t\talertsBySeverity[alert.severity]++\r\n\t\t})\r\n\r\n\t\tconst resolvedAlerts = this.alertHistory.filter(a => a.resolved && a.resolvedAt)\r\n\t\tconst totalResolutionTime = resolvedAlerts.reduce((sum: any, alert: any) => {\r\n\t\t\treturn sum + (alert.resolvedAt! - alert.timestamp)\r\n\t\t}, 0)\r\n\t\tconst averageResolutionTime = resolvedAlerts.length > 0\r\n\t\t\t? totalResolutionTime / resolvedAlerts.length\r\n\t\t\t: 0\r\n\r\n\t\treturn {\r\n\t\t\ttotalRules: this.alertRules.size,\r\n\t\t\tactiveAlerts: activeAlerts.length,\r\n\t\t\talertsBySeverity,\r\n\t\t\talertsLast24h: recentAlerts.length,\r\n\t\t\taverageResolutionTime,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize default alert rules\r\n\t */\r\n\tprivate initializeDefaultRules(): void {\r\n\t\tconst defaultRules: AlertRule[] = [\r\n\t\t\t{\r\n\t\t\t\tid: 'high-memory-usage',\r\n\t\t\t\tname: 'High Memory Usage',\r\n\t\t\t\tdescription: 'Memory usage is above 85%',\r\n\t\t\t\tmetric: 'system.memory.usage_percent',\r\n\t\t\t\tcondition: AlertCondition.GREATER_THAN,\r\n\t\t\t\tthreshold: 85,\r\n\t\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tcooldownMs: this.config.alertCooldownMs,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: 'critical-memory-usage',\r\n\t\t\t\tname: 'Critical Memory Usage',\r\n\t\t\t\tdescription: 'Memory usage is above 95%',\r\n\t\t\t\tmetric: 'system.memory.usage_percent',\r\n\t\t\t\tcondition: AlertCondition.GREATER_THAN,\r\n\t\t\t\tthreshold: 95,\r\n\t\t\t\tseverity: AlertSeverity.CRITICAL,\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tcooldownMs: this.config.alertCooldownMs,\r\n\t\t\t},\r\n\t\t]\r\n\r\n\t\tdefaultRules.forEach(rule => this.addAlertRule(rule))\r\n\t}\r\n\r\n\t/**\r\n\t * Start periodic alert evaluation\r\n\t */\r\n\tprivate startAlertEvaluation(): void {\r\n\t\tconst evaluationInterval = 30 * 1000\r\n\t\tsetInterval(() => {\r\n\t\t\tthis.evaluateAlerts()\r\n\t\t}, evaluationInterval)\r\n\t}\r\n\r\n\t/**\r\n\t * Evaluate all alert rules\r\n\t */\r\n\tprivate evaluateAlerts(): void {\r\n\t\tconst now = Date.now()\r\n\t\tconst evaluationWindow = 5 * 60 * 1000\r\n\r\n\t\tfor (const rule of this.alertRules.values()) {\r\n\t\t\tif (!rule.enabled)\r\n\t\t\t\tcontinue\r\n\r\n\t\t\tconst lastAlert = this.alertCooldowns.get(rule.id)\r\n\t\t\tif (lastAlert && (now - lastAlert) < rule.cooldownMs) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst shouldAlert = this.evaluateRule(rule, evaluationWindow)\r\n\t\t\t\tif (shouldAlert) {\r\n\t\t\t\t\tthis.createAlert(rule)\r\n\t\t\t\t\tthis.alertCooldowns.set(rule.id, now)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\tthis._logger.error(`Error evaluating alert rule ${rule.name}:`, error)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Evaluate a single alert rule\r\n\t */\r\n\tprivate evaluateRule(rule: AlertRule, windowMs: number): boolean {\r\n\t\tconst since = Date.now() - windowMs\r\n\t\tconst aggregatedMetrics = this.monitoringService.getAggregatedMetrics(rule.metric, since)\r\n\r\n\t\tif (aggregatedMetrics.count === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\tconst value = aggregatedMetrics.latest\r\n\r\n\t\tswitch (rule.condition) {\r\n\t\t\tcase AlertCondition.GREATER_THAN:\r\n\t\t\t\treturn value > rule.threshold\r\n\t\t\tcase AlertCondition.LESS_THAN:\r\n\t\t\t\treturn value < rule.threshold\r\n\t\t\tcase AlertCondition.EQUALS:\r\n\t\t\t\treturn value === rule.threshold\r\n\t\t\tcase AlertCondition.NOT_EQUALS:\r\n\t\t\t\treturn value !== rule.threshold\r\n\t\t\tcase AlertCondition.GREATER_THAN_OR_EQUAL:\r\n\t\t\t\treturn value >= rule.threshold\r\n\t\t\tcase AlertCondition.LESS_THAN_OR_EQUAL:\r\n\t\t\t\treturn value <= rule.threshold\r\n\t\t\tdefault:\r\n\t\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create an alert from a rule\r\n\t */\r\n\tprivate createAlert(rule: AlertRule): void {\r\n\t\tconst alert: Alert = {\r\n\t\t\tid: `${rule.id}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n\t\t\truleId: rule.id,\r\n\t\t\truleName: rule.name,\r\n\t\t\tmessage: rule.description,\r\n\t\t\tseverity: rule.severity,\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tresolved: false,\r\n\t\t\tmetadata: {\r\n\t\t\t\tmetric: rule.metric,\r\n\t\t\t\tthreshold: rule.threshold,\r\n\t\t\t\tcondition: rule.condition,\r\n\t\t\t\ttags: rule.tags,\r\n\t\t\t},\r\n\t\t}\r\n\r\n\t\tthis.processAlert(alert)\r\n\t}\r\n\r\n\t/**\r\n\t * Process an alert (add to active alerts and history)\r\n\t */\r\n\tprivate processAlert(alert: Alert): void {\r\n\t\tthis.activeAlerts.set(alert.id, alert)\r\n\t\tthis.alertHistory.push(alert)\r\n\r\n\t\tthis._logger.warn(`Alert triggered: ${alert.ruleName}`, {\r\n\t\t\tcorrelationId: this._correlationService.getCorrelationId(),\r\n\t\t\talert,\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Start alert cleanup process\r\n\t */\r\n\tprivate startAlertCleanup(): void {\r\n\t\tconst cleanupInterval = 60 * 60 * 1000\r\n\t\tsetInterval(() => {\r\n\t\t\tthis.cleanupOldAlerts()\r\n\t\t}, cleanupInterval)\r\n\t}\r\n\r\n\t/**\r\n\t * Clean up old alerts based on retention policy\r\n\t */\r\n\tprivate cleanupOldAlerts(): void {\r\n\t\tconst cutoffTime = Date.now() - this.config.alertsRetentionMs\r\n\t\tconst originalLength = this.alertHistory.length\r\n\r\n\t\tconst filteredHistory = this.alertHistory.filter(alert => alert.timestamp >= cutoffTime)\r\n\t\tthis.alertHistory.splice(0, this.alertHistory.length, ...filteredHistory)\r\n\r\n\t\tconst removedCount = originalLength - this.alertHistory.length\r\n\t\tif (removedCount > 0) {\r\n\t\t\tthis._logger.debug(`Cleaned up ${removedCount} old alerts`)\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["process","CorrelationService","Injectable","Logger","ConfigService","AlertCondition","AlertSeverity","MonitoringService","AlertService","_configService","_correlationService","monitoringService","_logger","name","alertRules","Map","activeAlerts","alertHistory","alertCooldowns","config","get","enabled","metricsRetentionMs","alertsRetentionMs","performanceRetentionMs","healthCheckIntervalMs","alertCooldownMs","externalIntegrations","endpoints","initializeDefaultRules","env","NODE_ENV","startAlertEvaluation","startAlertCleanup","log","addAlertRule","rule","set","id","correlationId","getCorrelationId","ruleId","removeAlertRule","removed","delete","getAlertRules","Array","from","values","getActiveAlerts","getAlertHistory","since","filter","alert","timestamp","triggerAlert","ruleName","message","severity","metadata","Date","now","Math","random","toString","substr","resolved","processAlert","resolveAlert","alertId","resolvedAt","historyAlert","find","a","duration","evaluateAlertsNow","evaluateAlerts","getAlertStats","last24h","recentAlerts","alertsBySeverity","LOW","MEDIUM","HIGH","CRITICAL","forEach","resolvedAlerts","totalResolutionTime","reduce","sum","averageResolutionTime","length","totalRules","size","alertsLast24h","defaultRules","description","metric","condition","GREATER_THAN","threshold","cooldownMs","evaluationInterval","setInterval","evaluationWindow","lastAlert","shouldAlert","evaluateRule","createAlert","error","windowMs","aggregatedMetrics","getAggregatedMetrics","count","value","latest","LESS_THAN","EQUALS","NOT_EQUALS","GREATER_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","tags","push","warn","cleanupInterval","cleanupOldAlerts","cutoffTime","originalLength","filteredHistory","splice","removedCount","debug"],"mappings":"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"}