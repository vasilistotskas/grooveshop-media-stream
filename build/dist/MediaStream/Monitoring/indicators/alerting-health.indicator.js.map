{"version":3,"sources":["../../../../../src/MediaStream/Monitoring/indicators/alerting-health.indicator.ts"],"sourcesContent":["import type { HealthIndicatorResult } from '@nestjs/terminus'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { HealthIndicatorService } from '@nestjs/terminus'\r\nimport { AlertSeverity } from '../interfaces/monitoring.interface'\r\nimport { AlertService } from '../services/alert.service'\r\n\r\n@Injectable()\r\nexport class AlertingHealthIndicator {\r\n\tconstructor(\r\n\t\tprivate readonly alertService: AlertService,\r\n\t\tprivate readonly healthIndicatorService: HealthIndicatorService,\r\n\t) {}\r\n\r\n\tget key(): string {\r\n\t\treturn 'alerting'\r\n\t}\r\n\r\n\tasync isHealthy(key: string = 'alerting'): Promise<HealthIndicatorResult> {\r\n\t\ttry {\r\n\t\t\tconst alertStats = this.alertService.getAlertStats()\r\n\t\t\tconst activeAlerts = this.alertService.getActiveAlerts()\r\n\r\n\t\t\tconst criticalAlerts = activeAlerts.filter(alert => alert.severity === AlertSeverity.CRITICAL)\r\n\t\t\tconst highAlerts = activeAlerts.filter(alert => alert.severity === AlertSeverity.HIGH)\r\n\r\n\t\t\tconst isHealthy = criticalAlerts.length === 0 && highAlerts.length < 3\r\n\r\n\t\t\tconst details = {\r\n\t\t\t\ttotalRules: alertStats.totalRules,\r\n\t\t\t\tactiveAlerts: alertStats.activeAlerts,\r\n\t\t\t\tcriticalAlerts: criticalAlerts.length,\r\n\t\t\t\thighAlerts: highAlerts.length,\r\n\t\t\t\talertsBySeverity: alertStats.alertsBySeverity,\r\n\t\t\t\talertsLast24h: alertStats.alertsLast24h,\r\n\t\t\t\taverageResolutionTime: alertStats.averageResolutionTime,\r\n\t\t\t\trecentCriticalAlerts: criticalAlerts.slice(0, 5).map(alert => ({\r\n\t\t\t\t\tid: alert.id,\r\n\t\t\t\t\truleName: alert.ruleName,\r\n\t\t\t\t\tmessage: alert.message,\r\n\t\t\t\t\ttimestamp: alert.timestamp,\r\n\t\t\t\t})),\r\n\t\t\t}\r\n\r\n\t\t\tif (!isHealthy) {\r\n\t\t\t\tconst message = criticalAlerts.length > 0\r\n\t\t\t\t\t? `${criticalAlerts.length} critical alerts active`\r\n\t\t\t\t\t: `${highAlerts.length} high severity alerts active`\r\n\t\t\t\treturn this.healthIndicatorService.check(key).down({ ...details, message })\r\n\t\t\t}\r\n\r\n\t\t\treturn this.healthIndicatorService.check(key).up(details)\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\treturn this.healthIndicatorService.check(key).down({\r\n\t\t\t\terror: (error as Error).message,\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tmessage: 'Alerting health check failed',\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get detailed alerting status\r\n\t */\r\n\tasync getDetailedStatus(): Promise<{\r\n\t\thealthy: boolean\r\n\t\talertStats: any\r\n\t\tactiveAlerts: any[]\r\n\t\trecentAlerts: any[]\r\n\t}> {\r\n\t\ttry {\r\n\t\t\tconst alertStats = this.alertService.getAlertStats()\r\n\t\t\tconst activeAlerts = this.alertService.getActiveAlerts()\r\n\t\t\tconst recentAlerts = this.alertService.getAlertHistory(Date.now() - 24 * 60 * 60 * 1000)\r\n\r\n\t\t\tconst criticalAlerts = activeAlerts.filter(alert => alert.severity === AlertSeverity.CRITICAL)\r\n\t\t\tconst healthy = criticalAlerts.length === 0\r\n\r\n\t\t\treturn {\r\n\t\t\t\thealthy,\r\n\t\t\t\talertStats,\r\n\t\t\t\tactiveAlerts,\r\n\t\t\t\trecentAlerts: recentAlerts.slice(0, 10),\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tconsole.error('Alerting health check failed', error)\r\n\t\t\treturn {\r\n\t\t\t\thealthy: false,\r\n\t\t\t\talertStats: null,\r\n\t\t\t\tactiveAlerts: [],\r\n\t\t\t\trecentAlerts: [],\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get alert severity distribution\r\n\t */\r\n\tgetAlertSeverityDistribution(): Record<AlertSeverity, number> {\r\n\t\tconst alertStats = this.alertService.getAlertStats()\r\n\t\treturn alertStats.alertsBySeverity\r\n\t}\r\n\r\n\t/**\r\n\t * Check if alerting system is functioning properly\r\n\t */\r\n\tasync checkAlertingSystem(): Promise<{\r\n\t\trulesConfigured: boolean\r\n\t\talertsProcessing: boolean\r\n\t\trecentActivity: boolean\r\n\t}> {\r\n\t\tconst alertStats = this.alertService.getAlertStats()\r\n\t\tconst recentAlerts = this.alertService.getAlertHistory(Date.now() - 60 * 60 * 1000)\r\n\r\n\t\treturn {\r\n\t\t\trulesConfigured: alertStats.totalRules > 0,\r\n\t\t\talertsProcessing: true, // Assume processing is working if no errors\r\n\t\t\trecentActivity: recentAlerts.length > 0 || alertStats.activeAlerts > 0,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get health indicator description\r\n\t */\r\n\tgetDescription(): string {\r\n\t\treturn 'Monitors alerting system health including active alerts, alert rules, and system responsiveness'\r\n\t}\r\n}\r\n"],"names":["Injectable","HealthIndicatorService","AlertSeverity","AlertService","AlertingHealthIndicator","alertService","healthIndicatorService","key","isHealthy","alertStats","getAlertStats","activeAlerts","getActiveAlerts","criticalAlerts","filter","alert","severity","CRITICAL","highAlerts","HIGH","length","details","totalRules","alertsBySeverity","alertsLast24h","averageResolutionTime","recentCriticalAlerts","slice","map","id","ruleName","message","timestamp","check","down","up","error","Date","now","getDetailedStatus","recentAlerts","getAlertHistory","healthy","console","getAlertSeverityDistribution","checkAlertingSystem","rulesConfigured","alertsProcessing","recentActivity","getDescription"],"mappings":"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"}