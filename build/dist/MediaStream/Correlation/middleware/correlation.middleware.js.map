{"version":3,"sources":["../../../../../src/MediaStream/Correlation/middleware/correlation.middleware.ts"],"sourcesContent":["import type { NestMiddleware } from '@nestjs/common'\r\nimport type { NextFunction, Request, Response } from 'express'\r\nimport type { RequestContext } from '../interfaces/correlation.interface'\r\nimport * as process from 'node:process'\r\nimport { Injectable } from '@nestjs/common'\r\nimport { CorrelationService } from '../services/correlation.service'\r\n\r\nexport const CORRELATION_ID_HEADER = 'x-correlation-id'\r\n\r\n@Injectable()\r\nexport class CorrelationMiddleware implements NestMiddleware {\r\n\tconstructor(private readonly _correlationService: CorrelationService) {}\r\n\r\n\tuse(req: Request, res: Response, next: NextFunction): void {\r\n\t\tconst correlationId\r\n\t\t\t= (req.headers[CORRELATION_ID_HEADER] as string) || this._correlationService.generateCorrelationId()\r\n\r\n\t\tconst context: RequestContext = {\r\n\t\t\tcorrelationId,\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tclientIp: this.getClientIp(req),\r\n\t\t\tuserAgent: req.headers['user-agent'],\r\n\t\t\tmethod: req.method,\r\n\t\t\turl: req.url,\r\n\t\t\tstartTime: process.hrtime.bigint(),\r\n\t\t}\r\n\r\n\t\tres.setHeader(CORRELATION_ID_HEADER, correlationId)\r\n\r\n\t\tthis._correlationService.runWithContext(context, () => {\r\n\t\t\tnext()\r\n\t\t})\r\n\t}\r\n\r\n\tprivate getClientIp(req: Request): string {\r\n\t\treturn (\r\n\t\t\t(req.headers['x-forwarded-for'] as string)?.split(',')[0]?.trim()\r\n\t\t\t|| (req.headers['x-real-ip'] as string)\r\n\t\t\t|| req.connection.remoteAddress\r\n\t\t\t|| req.socket.remoteAddress\r\n\t\t\t|| 'unknown'\r\n\t\t)\r\n\t}\r\n}\r\n"],"names":["process","Injectable","CorrelationService","CORRELATION_ID_HEADER","CorrelationMiddleware","_correlationService","use","req","res","next","correlationId","headers","generateCorrelationId","context","timestamp","Date","now","clientIp","getClientIp","userAgent","method","url","startTime","hrtime","bigint","setHeader","runWithContext","split","trim","connection","remoteAddress","socket"],"mappings":";;;;;;;;;AAGA,YAAYA,aAAa,eAAc;AACvC,SAASC,UAAU,QAAQ,iBAAgB;AAC3C,SAASC,kBAAkB,QAAQ,qCAAiC;AAEpE,OAAO,MAAMC,wBAAwB,mBAAkB;AAGvD,OAAO,MAAMC;IACZ,YAAY,AAAiBC,mBAAuC,CAAE;aAAzCA,sBAAAA;IAA0C;IAEvEC,IAAIC,GAAY,EAAEC,GAAa,EAAEC,IAAkB,EAAQ;QAC1D,MAAMC,gBACH,AAACH,IAAII,OAAO,CAACR,sBAAsB,IAAe,IAAI,CAACE,mBAAmB,CAACO,qBAAqB;QAEnG,MAAMC,UAA0B;YAC/BH;YACAI,WAAWC,KAAKC,GAAG;YACnBC,UAAU,IAAI,CAACC,WAAW,CAACX;YAC3BY,WAAWZ,IAAII,OAAO,CAAC,aAAa;YACpCS,QAAQb,IAAIa,MAAM;YAClBC,KAAKd,IAAIc,GAAG;YACZC,WAAWtB,QAAQuB,MAAM,CAACC,MAAM;QACjC;QAEAhB,IAAIiB,SAAS,CAACtB,uBAAuBO;QAErC,IAAI,CAACL,mBAAmB,CAACqB,cAAc,CAACb,SAAS;YAChDJ;QACD;IACD;IAEQS,YAAYX,GAAY,EAAU;QACzC,OACC,AAACA,IAAII,OAAO,CAAC,kBAAkB,EAAagB,MAAM,IAAI,CAAC,EAAE,EAAEC,UACvDrB,IAAII,OAAO,CAAC,YAAY,IACzBJ,IAAIsB,UAAU,CAACC,aAAa,IAC5BvB,IAAIwB,MAAM,CAACD,aAAa,IACxB;IAEL;AACD"}