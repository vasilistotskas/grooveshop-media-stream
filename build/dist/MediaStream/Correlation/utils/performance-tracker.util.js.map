{"version":3,"sources":["../../../../../src/MediaStream/Correlation/utils/performance-tracker.util.ts"],"sourcesContent":["import * as process from 'node:process'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\r\n\r\nexport interface PerformancePhase {\r\n\tname: string\r\n\tstartTime: bigint\r\n\tendTime?: bigint\r\n\tduration?: number\r\n\tmetadata?: Record<string, any>\r\n}\r\n\r\nexport class PerformanceTracker {\r\n\tprivate static phases = new Map<string, PerformancePhase[]>()\r\n\r\n\tprivate static getCorrelationService(): CorrelationService {\r\n\t\treturn new CorrelationService()\r\n\t}\r\n\r\n\t/**\r\n\t * Start tracking a performance phase\r\n\t */\r\n\tstatic startPhase(phaseName: string, metadata?: Record<string, any>): void {\r\n\t\tconst correlationId = this.getCorrelationService().getCorrelationId()\r\n\t\tif (!correlationId)\r\n\t\t\treturn\r\n\r\n\t\tconst phase: PerformancePhase = {\r\n\t\t\tname: phaseName,\r\n\t\t\tstartTime: process.hrtime.bigint(),\r\n\t\t\tmetadata,\r\n\t\t}\r\n\r\n\t\tif (!this.phases.has(correlationId)) {\r\n\t\t\tthis.phases.set(correlationId, [])\r\n\t\t}\r\n\r\n\t\tthis.phases.get(correlationId)!.push(phase)\r\n\r\n\t\tCorrelatedLogger.debug(\r\n\t\t\t`Performance phase started: ${phaseName}${metadata ? ` (${JSON.stringify(metadata)})` : ''}`,\r\n\t\t\t'PerformanceTracker',\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * End tracking a performance phase\r\n\t */\r\n\tstatic endPhase(phaseName: string, metadata?: Record<string, any>): number | null {\r\n\t\tconst correlationId = this.getCorrelationService().getCorrelationId()\r\n\t\tif (!correlationId)\r\n\t\t\treturn null\r\n\r\n\t\tconst phases = this.phases.get(correlationId)\r\n\t\tif (!phases)\r\n\t\t\treturn null\r\n\r\n\t\tconst phase = phases\r\n\t\t\t.slice()\r\n\t\t\t.reverse()\r\n\t\t\t.find(p => p.name === phaseName && !p.endTime)\r\n\r\n\t\tif (!phase) {\r\n\t\t\tCorrelatedLogger.warn(\r\n\t\t\t\t`Performance phase not found or already ended: ${phaseName}`,\r\n\t\t\t\t'PerformanceTracker',\r\n\t\t\t)\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\tphase.endTime = process.hrtime.bigint()\r\n\t\tphase.duration = Number(phase.endTime - phase.startTime) / 1_000_000\r\n\r\n\t\tif (metadata) {\r\n\t\t\tphase.metadata = { ...phase.metadata, ...metadata }\r\n\t\t}\r\n\r\n\t\tconst logLevel = phase.duration > 1000 ? 'warn' : 'debug'\r\n\t\tconst logger = logLevel === 'warn' ? CorrelatedLogger.warn : CorrelatedLogger.debug\r\n\r\n\t\tlogger(\r\n\t\t\t`Performance phase completed: ${phaseName} - ${phase.duration.toFixed(2)}ms${\r\n\t\t\t\tphase.metadata ? ` (${JSON.stringify(phase.metadata)})` : ''\r\n\t\t\t}`,\r\n\t\t\t'PerformanceTracker',\r\n\t\t)\r\n\r\n\t\treturn phase.duration\r\n\t}\r\n\r\n\t/**\r\n\t * Get all performance phases for the current request\r\n\t */\r\n\tstatic getPhases(): PerformancePhase[] {\r\n\t\tconst correlationId = this.getCorrelationService().getCorrelationId()\r\n\t\tif (!correlationId)\r\n\t\t\treturn []\r\n\r\n\t\treturn this.phases.get(correlationId) || []\r\n\t}\r\n\r\n\t/**\r\n\t * Get performance summary for the current request\r\n\t */\r\n\tstatic getSummary(): {\r\n\t\ttotalPhases: number\r\n\t\tcompletedPhases: number\r\n\t\ttotalDuration: number\r\n\t\tslowestPhase?: PerformancePhase\r\n\t\tphases: PerformancePhase[]\r\n\t} {\r\n\t\tconst phases = this.getPhases()\r\n\t\tconst completedPhases = phases.filter(p => p.duration !== undefined)\r\n\t\tconst totalDuration = completedPhases.reduce((sum: any, p: any) => sum + (p.duration || 0), 0)\r\n\t\tconst slowestPhase = completedPhases.reduce((slowest: any, current: any) =>\r\n\t\t\t!slowest || (current.duration || 0) > (slowest.duration || 0) ? current : slowest, undefined as PerformancePhase | undefined)\r\n\r\n\t\treturn {\r\n\t\t\ttotalPhases: phases.length,\r\n\t\t\tcompletedPhases: completedPhases.length,\r\n\t\t\ttotalDuration,\r\n\t\t\tslowestPhase,\r\n\t\t\tphases,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clear performance data for the current request\r\n\t */\r\n\tstatic clearPhases(): void {\r\n\t\tconst correlationId = this.getCorrelationService().getCorrelationId()\r\n\t\tif (correlationId) {\r\n\t\t\tthis.phases.delete(correlationId)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measure the execution time of a function\r\n\t */\r\n\tstatic async measure<T>(\r\n\t\tphaseName: string,\r\n\t\tfn: () => Promise<T> | T,\r\n\t\tmetadata?: Record<string, any>,\r\n\t): Promise<T> {\r\n\t\tthis.startPhase(phaseName, metadata)\r\n\t\ttry {\r\n\t\t\tconst result = await fn()\r\n\t\t\tthis.endPhase(phaseName, { success: true })\r\n\t\t\treturn result\r\n\t\t}\r\n\t\tcatch (error: unknown) {\r\n\t\t\tthis.endPhase(phaseName, {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\terror: error instanceof Error ? (error as Error).message : 'Unknown error',\r\n\t\t\t})\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create a decorator for measuring method execution time\r\n\t */\r\n\tstatic measureMethod(phaseName?: string, metadata?: Record<string, any>) {\r\n\t\treturn function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\r\n\t\t\tconst method = descriptor.value\r\n\t\t\tconst actualPhaseName = phaseName || `${target.constructor.name}.${propertyName}`\r\n\r\n\t\t\tdescriptor.value = async function (...args: any[]) {\r\n\t\t\t\treturn PerformanceTracker.measure(\r\n\t\t\t\t\tactualPhaseName,\r\n\t\t\t\t\t() => method.apply(this, args),\r\n\t\t\t\t\tmetadata,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Log performance summary at the end of a request\r\n\t */\r\n\tstatic logSummary(): void {\r\n\t\tconst summary = this.getSummary()\r\n\t\tif (summary.totalPhases === 0)\r\n\t\t\treturn\r\n\r\n\t\tconst context = this.getCorrelationService().getContext()\r\n\t\tconst requestDuration = context?.duration\r\n\r\n\t\tCorrelatedLogger.log(\r\n\t\t\t`Performance Summary: ${summary.completedPhases}/${summary.totalPhases} phases completed, `\r\n\t\t\t+ `total phase time: ${summary.totalDuration.toFixed(2)}ms${\r\n\t\t\t\trequestDuration ? `, request time: ${requestDuration.toFixed(2)}ms` : ''\r\n\t\t\t}${summary.slowestPhase ? `, slowest: ${summary.slowestPhase.name} (${summary.slowestPhase.duration?.toFixed(2)}ms)` : ''}`,\r\n\t\t\t'PerformanceTracker',\r\n\t\t)\r\n\r\n\t\tthis.clearPhases()\r\n\t}\r\n}\r\n"],"names":["process","CorrelationService","CorrelatedLogger","PerformanceTracker","getCorrelationService","startPhase","phaseName","metadata","correlationId","getCorrelationId","phase","name","startTime","hrtime","bigint","phases","has","set","get","push","debug","JSON","stringify","endPhase","slice","reverse","find","p","endTime","warn","duration","Number","logLevel","logger","toFixed","getPhases","getSummary","completedPhases","filter","undefined","totalDuration","reduce","sum","slowestPhase","slowest","current","totalPhases","length","clearPhases","delete","measure","fn","result","success","error","Error","message","measureMethod","target","propertyName","descriptor","method","value","actualPhaseName","args","apply","logSummary","summary","context","getContext","requestDuration","log","Map"],"mappings":"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"}