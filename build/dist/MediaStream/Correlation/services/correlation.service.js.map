{"version":3,"sources":["../../../../../src/MediaStream/Correlation/services/correlation.service.ts"],"sourcesContent":["import type { CorrelationService as ICorrelationService, RequestContext } from '../interfaces/correlation.interface'\r\nimport { AsyncLocalStorage } from 'node:async_hooks'\r\nimport { randomUUID } from 'node:crypto'\r\nimport { Injectable } from '@nestjs/common'\r\n\r\n@Injectable()\r\nexport class CorrelationService implements ICorrelationService {\r\n\tprivate readonly asyncLocalStorage = new AsyncLocalStorage<RequestContext>()\r\n\r\n\t/**\r\n\t * Generate a new correlation ID using UUID v4\r\n\t */\r\n\tgenerateCorrelationId(): string {\r\n\t\treturn randomUUID()\r\n\t}\r\n\r\n\t/**\r\n\t * Set the request context for the current async context\r\n\t */\r\n\tsetContext(context: RequestContext): void {\r\n\t\tthis.asyncLocalStorage.enterWith(context)\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current request context\r\n\t */\r\n\tgetContext(): RequestContext | null {\r\n\t\treturn this.asyncLocalStorage.getStore() || null\r\n\t}\r\n\r\n\t/**\r\n\t * Get the correlation ID from the current context\r\n\t */\r\n\tgetCorrelationId(): string | null {\r\n\t\tconst context = this.getContext()\r\n\t\treturn context?.correlationId || null\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the current context (mainly for testing)\r\n\t */\r\n\tclearContext(): void {\r\n\t\tthis.asyncLocalStorage.disable()\r\n\t}\r\n\r\n\t/**\r\n\t * Run a function within a specific correlation context\r\n\t */\r\n\trunWithContext<T>(context: RequestContext, fn: () => T): T {\r\n\t\treturn this.asyncLocalStorage.run(context, fn)\r\n\t}\r\n\r\n\t/**\r\n\t * Update the current context with additional data\r\n\t */\r\n\tupdateContext(updates: Partial<RequestContext>): void {\r\n\t\tconst currentContext = this.getContext()\r\n\t\tif (currentContext) {\r\n\t\t\tconst updatedContext = { ...currentContext, ...updates }\r\n\t\t\tthis.setContext(updatedContext)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the client IP from the current context\r\n\t */\r\n\tgetClientIp(): string {\r\n\t\tconst context = this.getContext()\r\n\t\treturn context?.clientIp || 'unknown'\r\n\t}\r\n\r\n\t/**\r\n\t * Get the user agent from the current context\r\n\t */\r\n\tgetUserAgent(): string {\r\n\t\tconst context = this.getContext()\r\n\t\treturn context?.userAgent || 'unknown'\r\n\t}\r\n}\r\n"],"names":["AsyncLocalStorage","randomUUID","Injectable","CorrelationService","generateCorrelationId","setContext","context","asyncLocalStorage","enterWith","getContext","getStore","getCorrelationId","correlationId","clearContext","disable","runWithContext","fn","run","updateContext","updates","currentContext","updatedContext","getClientIp","clientIp","getUserAgent","userAgent"],"mappings":";;;;;;AACA,SAASA,iBAAiB,QAAQ,mBAAkB;AACpD,SAASC,UAAU,QAAQ,cAAa;AACxC,SAASC,UAAU,QAAQ,iBAAgB;AAG3C,OAAO,MAAMC;IAGZ;;EAEC,GACDC,wBAAgC;QAC/B,OAAOH;IACR;IAEA;;EAEC,GACDI,WAAWC,OAAuB,EAAQ;QACzC,IAAI,CAACC,iBAAiB,CAACC,SAAS,CAACF;IAClC;IAEA;;EAEC,GACDG,aAAoC;QACnC,OAAO,IAAI,CAACF,iBAAiB,CAACG,QAAQ,MAAM;IAC7C;IAEA;;EAEC,GACDC,mBAAkC;QACjC,MAAML,UAAU,IAAI,CAACG,UAAU;QAC/B,OAAOH,SAASM,iBAAiB;IAClC;IAEA;;EAEC,GACDC,eAAqB;QACpB,IAAI,CAACN,iBAAiB,CAACO,OAAO;IAC/B;IAEA;;EAEC,GACDC,eAAkBT,OAAuB,EAAEU,EAAW,EAAK;QAC1D,OAAO,IAAI,CAACT,iBAAiB,CAACU,GAAG,CAACX,SAASU;IAC5C;IAEA;;EAEC,GACDE,cAAcC,OAAgC,EAAQ;QACrD,MAAMC,iBAAiB,IAAI,CAACX,UAAU;QACtC,IAAIW,gBAAgB;YACnB,MAAMC,iBAAiB;gBAAE,GAAGD,cAAc;gBAAE,GAAGD,OAAO;YAAC;YACvD,IAAI,CAACd,UAAU,CAACgB;QACjB;IACD;IAEA;;EAEC,GACDC,cAAsB;QACrB,MAAMhB,UAAU,IAAI,CAACG,UAAU;QAC/B,OAAOH,SAASiB,YAAY;IAC7B;IAEA;;EAEC,GACDC,eAAuB;QACtB,MAAMlB,UAAU,IAAI,CAACG,UAAU;QAC/B,OAAOH,SAASmB,aAAa;IAC9B;;aAtEiBlB,oBAAoB,IAAIP;;AAuE1C"}