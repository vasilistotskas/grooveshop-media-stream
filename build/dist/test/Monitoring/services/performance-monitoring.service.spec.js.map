{"version":3,"sources":["../../../../../src/test/Monitoring/services/performance-monitoring.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { MonitoringService } from '@microservice/Monitoring/services/monitoring.service'\r\nimport { PerformanceMonitoringService } from '@microservice/Monitoring/services/performance-monitoring.service'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('performanceMonitoringService', () => {\r\n\tlet service: PerformanceMonitoringService\r\n\tlet monitoringService: MockedObject<MonitoringService>\r\n\tlet configService: MockedObject<ConfigService>\r\n\tlet correlationService: MockedObject<CorrelationService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockReturnValue({\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tmetricsRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\t\talertsRetentionMs: 7 * 24 * 60 * 60 * 1000,\r\n\t\t\t\tperformanceRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\t\thealthCheckIntervalMs: 30 * 1000,\r\n\t\t\t\talertCooldownMs: 5 * 60 * 1000,\r\n\t\t\t\texternalIntegrations: {\r\n\t\t\t\t\tenabled: false,\r\n\t\t\t\t\tendpoints: [],\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst mockCorrelationService = {\r\n\t\t\tgetCorrelationId: vi.fn().mockReturnValue('test-correlation-id'),\r\n\t\t}\r\n\r\n\t\tconst mockMonitoringService = {\r\n\t\t\trecordTimer: vi.fn(),\r\n\t\t\tincrementCounter: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tPerformanceMonitoringService,\r\n\t\t\t\t{ provide: ConfigService, useValue: mockConfigService },\r\n\t\t\t\t{ provide: CorrelationService, useValue: mockCorrelationService },\r\n\t\t\t\t{ provide: MonitoringService, useValue: mockMonitoringService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<PerformanceMonitoringService>(PerformanceMonitoringService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\t\tcorrelationService = module.get(CorrelationService)\r\n\t\tmonitoringService = module.get(MonitoringService)\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(service).toBeDefined()\r\n\t})\r\n\r\n\tdescribe('startOperation and endOperation', () => {\r\n\t\tit('should track operation duration', async () => {\r\n\t\t\tconst operationId = service.startOperation('test-operation', { userId: '123' })\r\n\t\t\texpect(operationId).toBeTruthy()\r\n\r\n\t\t\t// Simulate some processing time\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 10))\r\n\t\t\tservice.endOperation(operationId, true)\r\n\r\n\t\t\tconst metrics = service.getPerformanceMetrics('test-operation')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].operationName).toBe('test-operation')\r\n\t\t\texpect(metrics[0].success).toBe(true)\r\n\t\t\texpect(metrics[0].duration).toBeGreaterThan(0)\r\n\t\t\texpect(metrics[0].metadata).toEqual({ userId: '123' })\r\n\t\t})\r\n\r\n\t\tit('should handle operation failure', () => {\r\n\t\t\tconst operationId = service.startOperation('failing-operation')\r\n\t\t\tservice.endOperation(operationId, false, 'Test error message')\r\n\r\n\t\t\tconst metrics = service.getPerformanceMetrics('failing-operation')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].success).toBe(false)\r\n\t\t\texpect(metrics[0].errorMessage).toBe('Test error message')\r\n\t\t})\r\n\r\n\t\tit('should handle non-existent operation ID gracefully', () => {\r\n\t\t\texpect(() => {\r\n\t\t\t\tservice.endOperation('non-existent-id', true)\r\n\t\t\t}).not.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should not track when disabled', () => {\r\n\t\t\tconfigService.get.mockReturnValue({ enabled: false })\r\n\t\t\tconst disabledService = new PerformanceMonitoringService(\r\n\t\t\t\tconfigService,\r\n\t\t\t\tcorrelationService,\r\n\t\t\t\tmonitoringService,\r\n\t\t\t)\r\n\r\n\t\t\tconst operationId = disabledService.startOperation('test-operation')\r\n\t\t\texpect(operationId).toBe('')\r\n\r\n\t\t\tdisabledService.endOperation(operationId, true)\r\n\t\t\tconst metrics = disabledService.getPerformanceMetrics('test-operation')\r\n\t\t\texpect(metrics).toHaveLength(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('trackOperation', () => {\r\n\t\tit('should track synchronous operation', () => {\r\n\t\t\tconst result = service.trackOperation('sync-operation', () => {\r\n\t\t\t\treturn 'test-result'\r\n\t\t\t}, { type: 'sync' })\r\n\r\n\t\t\texpect(result).toBe('test-result')\r\n\r\n\t\t\tconst metrics = service.getPerformanceMetrics('sync-operation')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].success).toBe(true)\r\n\t\t\texpect(metrics[0].metadata).toEqual({ type: 'sync' })\r\n\t\t})\r\n\r\n\t\tit('should track synchronous operation failure', () => {\r\n\t\t\texpect(() => {\r\n\t\t\t\tservice.trackOperation('failing-sync-operation', () => {\r\n\t\t\t\t\tthrow new Error('Sync operation failed')\r\n\t\t\t\t})\r\n\t\t\t}).toThrow('Sync operation failed')\r\n\r\n\t\t\tconst metrics = service.getPerformanceMetrics('failing-sync-operation')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].success).toBe(false)\r\n\t\t\texpect(metrics[0].errorMessage).toBe('Sync operation failed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('trackAsyncOperation', () => {\r\n\t\tit('should track asynchronous operation', async () => {\r\n\t\t\tconst result = await service.trackAsyncOperation('async-operation', async () => {\r\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 10))\r\n\t\t\t\treturn 'async-result'\r\n\t\t\t}, { type: 'async' })\r\n\r\n\t\t\texpect(result).toBe('async-result')\r\n\r\n\t\t\tconst metrics = service.getPerformanceMetrics('async-operation')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].success).toBe(true)\r\n\t\t\texpect(metrics[0].duration).toBeGreaterThan(5)\r\n\t\t\texpect(metrics[0].metadata).toEqual({ type: 'async' })\r\n\t\t})\r\n\r\n\t\tit('should track asynchronous operation failure', async () => {\r\n\t\t\tawait expect(\r\n\t\t\t\tservice.trackAsyncOperation('failing-async-operation', async () => {\r\n\t\t\t\t\tthrow new Error('Async operation failed')\r\n\t\t\t\t}),\r\n\t\t\t).rejects.toThrow('Async operation failed')\r\n\r\n\t\t\tconst metrics = service.getPerformanceMetrics('failing-async-operation')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].success).toBe(false)\r\n\t\t\texpect(metrics[0].errorMessage).toBe('Async operation failed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getPerformanceStats', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\t// Add some test performance data\r\n\t\t\tconst op1 = service.startOperation('test-stats')\r\n\t\t\t// Add a small delay to ensure duration > 0\r\n\t\t\tconst startTime = Date.now()\r\n\t\t\twhile (Date.now() - startTime < 1) { /* wait */ }\r\n\t\t\tservice.endOperation(op1, true)\r\n\r\n\t\t\tconst op2 = service.startOperation('test-stats')\r\n\t\t\tconst startTime2 = Date.now()\r\n\t\t\twhile (Date.now() - startTime2 < 1) { /* wait */ }\r\n\t\t\tservice.endOperation(op2, true)\r\n\r\n\t\t\tconst op3 = service.startOperation('test-stats')\r\n\t\t\tconst startTime3 = Date.now()\r\n\t\t\twhile (Date.now() - startTime3 < 1) { /* wait */ }\r\n\t\t\tservice.endOperation(op3, false, 'Test error')\r\n\t\t})\r\n\r\n\t\tit('should return performance statistics', () => {\r\n\t\t\tconst stats = service.getPerformanceStats('test-stats')\r\n\r\n\t\t\texpect(stats.totalOperations).toBe(3)\r\n\t\t\texpect(stats.successfulOperations).toBe(2)\r\n\t\t\texpect(stats.failedOperations).toBe(1)\r\n\t\t\texpect(stats.successRate).toBeCloseTo(66.67, 1)\r\n\t\t\texpect(stats.averageDuration).toBeGreaterThan(0)\r\n\t\t\texpect(stats.minDuration).toBeGreaterThan(0)\r\n\t\t\texpect(stats.maxDuration).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should return empty stats for non-existent operation', () => {\r\n\t\t\tconst stats = service.getPerformanceStats('non-existent')\r\n\r\n\t\t\texpect(stats.totalOperations).toBe(0)\r\n\t\t\texpect(stats.successfulOperations).toBe(0)\r\n\t\t\texpect(stats.failedOperations).toBe(0)\r\n\t\t\texpect(stats.successRate).toBe(0)\r\n\t\t\texpect(stats.averageDuration).toBe(0)\r\n\t\t})\r\n\r\n\t\tit('should filter by time range', () => {\r\n\t\t\tconst futureTime = Date.now() + 60000\r\n\t\t\tconst stats = service.getPerformanceStats('test-stats', futureTime)\r\n\r\n\t\t\texpect(stats.totalOperations).toBe(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getActiveOperations', () => {\r\n\t\tit('should return active operations', async () => {\r\n\t\t\tconst op1 = service.startOperation('active-op-1', { user: 'test1' })\r\n\t\t\tconst op2 = service.startOperation('active-op-2', { user: 'test2' })\r\n\r\n\t\t\t// Wait a bit to ensure duration > 0\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 10))\r\n\t\t\tconst activeOps = service.getActiveOperations()\r\n\t\t\texpect(activeOps).toHaveLength(2)\r\n\r\n\t\t\tconst op1Data = activeOps.find(op => op.operationId === op1)\r\n\t\t\texpect(op1Data).toBeDefined()\r\n\t\t\texpect(op1Data!.operationName).toBe('active-op-1')\r\n\t\t\texpect(op1Data!.metadata).toEqual({ user: 'test1' })\r\n\t\t\texpect(op1Data!.duration).toBeGreaterThan(0)\r\n\r\n\t\t\t// End one operation\r\n\t\t\tservice.endOperation(op1, true)\r\n\r\n\t\t\tconst remainingOps = service.getActiveOperations()\r\n\t\t\texpect(remainingOps).toHaveLength(1)\r\n\t\t\texpect(remainingOps[0].operationId).toBe(op2)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getPerformanceOverview', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\t// Create diverse performance data\r\n\t\t\tservice.trackOperation('fast-operation', () => 'result')\r\n\t\t\tservice.trackOperation('slow-operation', () => {\r\n\t\t\t\t// Simulate slow operation\r\n\t\t\t\tconst start = Date.now()\r\n\t\t\t\twhile (Date.now() - start < 50) { /* busy wait */ }\r\n\t\t\t\treturn 'result'\r\n\t\t\t})\r\n\r\n\t\t\ttry {\r\n\t\t\t\tservice.trackOperation('error-operation', () => {\r\n\t\t\t\t\tthrow new Error('Test error')\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tcatch (e: unknown) {\r\n\t\t\t\tconst error = e as Error\r\n\t\t\t\tconsole.error(`Error tracking operation: ${error.message}, ${error}`)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should return performance overview', () => {\r\n\t\t\tconst overview = service.getPerformanceOverview()\r\n\r\n\t\t\texpect(overview.totalOperations).toBe(3)\r\n\t\t\texpect(overview.averageResponseTime).toBeGreaterThan(0)\r\n\t\t\texpect(overview.successRate).toBeCloseTo(66.67, 1)\r\n\t\t\texpect(overview.slowestOperations).toBeDefined()\r\n\t\t\texpect(overview.mostFrequentOperations).toBeDefined()\r\n\t\t\texpect(overview.errorRates).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should sort operations correctly', () => {\r\n\t\t\tconst overview = service.getPerformanceOverview()\r\n\r\n\t\t\t// Should have slow-operation as slowest\r\n\t\t\texpect(overview.slowestOperations[0].name).toBe('slow-operation')\r\n\r\n\t\t\t// Should have error-operation in error rates\r\n\t\t\tconst errorOp = overview.errorRates.find(op => op.name === 'error-operation')\r\n\t\t\texpect(errorOp).toBeDefined()\r\n\t\t\texpect(errorOp!.errorRate).toBe(100)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getTrackedOperations', () => {\r\n\t\tit('should return list of tracked operation names', () => {\r\n\t\t\tservice.trackOperation('operation-1', () => 'result')\r\n\t\t\tservice.trackOperation('operation-2', () => 'result')\r\n\r\n\t\t\tconst operations = service.getTrackedOperations()\r\n\t\t\texpect(operations).toContain('operation-1')\r\n\t\t\texpect(operations).toContain('operation-2')\r\n\t\t\texpect(operations).toHaveLength(2)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('integration with MonitoringService', () => {\r\n\t\tit('should record metrics to monitoring service', () => {\r\n\t\t\tconst operationId = service.startOperation('monitored-operation')\r\n\t\t\tservice.endOperation(operationId, true)\r\n\r\n\t\t\texpect(monitoringService.recordTimer).toHaveBeenCalledWith(\r\n\t\t\t\t'performance.monitored-operation.duration',\r\n\t\t\t\texpect.any(Number),\r\n\t\t\t)\r\n\t\t\texpect(monitoringService.incrementCounter).toHaveBeenCalledWith(\r\n\t\t\t\t'performance.monitored-operation.total',\r\n\t\t\t)\r\n\t\t\texpect(monitoringService.incrementCounter).toHaveBeenCalledWith(\r\n\t\t\t\t'performance.monitored-operation.success',\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should record error metrics', () => {\r\n\t\t\tconst operationId = service.startOperation('error-operation')\r\n\t\t\tservice.endOperation(operationId, false, 'Test error')\r\n\r\n\t\t\texpect(monitoringService.incrementCounter).toHaveBeenCalledWith(\r\n\t\t\t\t'performance.error-operation.error',\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CorrelationService","MonitoringService","PerformanceMonitoringService","ConfigService","Test","beforeEach","describe","expect","it","vi","service","monitoringService","configService","correlationService","mockConfigService","get","fn","mockReturnValue","enabled","metricsRetentionMs","alertsRetentionMs","performanceRetentionMs","healthCheckIntervalMs","alertCooldownMs","externalIntegrations","endpoints","mockCorrelationService","getCorrelationId","mockMonitoringService","recordTimer","incrementCounter","module","createTestingModule","providers","provide","useValue","compile","toBeDefined","operationId","startOperation","userId","toBeTruthy","Promise","resolve","setTimeout","endOperation","metrics","getPerformanceMetrics","toHaveLength","operationName","toBe","success","duration","toBeGreaterThan","metadata","toEqual","errorMessage","not","toThrow","disabledService","result","trackOperation","type","Error","trackAsyncOperation","rejects","op1","startTime","Date","now","op2","startTime2","op3","startTime3","stats","getPerformanceStats","totalOperations","successfulOperations","failedOperations","successRate","toBeCloseTo","averageDuration","minDuration","maxDuration","futureTime","user","activeOps","getActiveOperations","op1Data","find","op","remainingOps","start","e","error","console","message","overview","getPerformanceOverview","averageResponseTime","slowestOperations","mostFrequentOperations","errorRates","name","errorOp","errorRate","operations","getTrackedOperations","toContain","toHaveBeenCalledWith","any","Number"],"mappings":"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"}