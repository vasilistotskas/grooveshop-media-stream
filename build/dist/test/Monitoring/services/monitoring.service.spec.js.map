{"version":3,"sources":["../../../../../src/test/Monitoring/services/monitoring.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { MetricType } from '@microservice/Monitoring/interfaces/monitoring.interface'\r\nimport { MonitoringService } from '@microservice/Monitoring/services/monitoring.service'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('monitoringService', () => {\r\n\tlet service: MonitoringService\r\n\tlet configService: MockedObject<ConfigService>\r\n\tlet correlationService: MockedObject<CorrelationService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockReturnValue({\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tmetricsRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\t\talertsRetentionMs: 7 * 24 * 60 * 60 * 1000,\r\n\t\t\t\tperformanceRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\t\thealthCheckIntervalMs: 30 * 1000,\r\n\t\t\t\talertCooldownMs: 5 * 60 * 1000,\r\n\t\t\t\texternalIntegrations: {\r\n\t\t\t\t\tenabled: false,\r\n\t\t\t\t\tendpoints: [],\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst mockCorrelationService = {\r\n\t\t\tgetCorrelationId: vi.fn().mockReturnValue('test-correlation-id'),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tMonitoringService,\r\n\t\t\t\t{ provide: ConfigService, useValue: mockConfigService },\r\n\t\t\t\t{ provide: CorrelationService, useValue: mockCorrelationService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<MonitoringService>(MonitoringService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\t\tcorrelationService = module.get(CorrelationService)\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(service).toBeDefined()\r\n\t})\r\n\r\n\tdescribe('recordMetric', () => {\r\n\t\tit('should record a metric successfully', () => {\r\n\t\t\tservice.recordMetric('test.metric', 100, MetricType.GAUGE, { tag: 'value' })\r\n\r\n\t\t\tconst metrics = service.getMetrics('test.metric')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0]).toMatchObject({\r\n\t\t\t\tname: 'test.metric',\r\n\t\t\t\tvalue: 100,\r\n\t\t\t\ttype: MetricType.GAUGE,\r\n\t\t\t\ttags: { tag: 'value' },\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should not record metrics when disabled', () => {\r\n\t\t\tconfigService.get.mockReturnValue({ enabled: false })\r\n\t\t\tconst disabledService = new MonitoringService(configService, correlationService)\r\n\r\n\t\t\tdisabledService.recordMetric('test.metric', 100, MetricType.GAUGE)\r\n\r\n\t\t\tconst metrics = disabledService.getMetrics('test.metric')\r\n\t\t\texpect(metrics).toHaveLength(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('incrementCounter', () => {\r\n\t\tit('should increment counter with default value', () => {\r\n\t\t\tservice.incrementCounter('test.counter')\r\n\r\n\t\t\tconst metrics = service.getMetrics('test.counter')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].value).toBe(1)\r\n\t\t\texpect(metrics[0].type).toBe(MetricType.COUNTER)\r\n\t\t})\r\n\r\n\t\tit('should increment counter with custom value', () => {\r\n\t\t\tservice.incrementCounter('test.counter', 5)\r\n\r\n\t\t\tconst metrics = service.getMetrics('test.counter')\r\n\t\t\texpect(metrics[0].value).toBe(5)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('recordGauge', () => {\r\n\t\tit('should record gauge metric', () => {\r\n\t\t\tservice.recordGauge('test.gauge', 75.5)\r\n\r\n\t\t\tconst metrics = service.getMetrics('test.gauge')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].value).toBe(75.5)\r\n\t\t\texpect(metrics[0].type).toBe(MetricType.GAUGE)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('recordHistogram', () => {\r\n\t\tit('should record histogram metric', () => {\r\n\t\t\tservice.recordHistogram('test.histogram', 250)\r\n\r\n\t\t\tconst metrics = service.getMetrics('test.histogram')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].value).toBe(250)\r\n\t\t\texpect(metrics[0].type).toBe(MetricType.HISTOGRAM)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('recordTimer', () => {\r\n\t\tit('should record timer metric', () => {\r\n\t\t\tservice.recordTimer('test.timer', 1500)\r\n\r\n\t\t\tconst metrics = service.getMetrics('test.timer')\r\n\t\t\texpect(metrics).toHaveLength(1)\r\n\t\t\texpect(metrics[0].value).toBe(1500)\r\n\t\t\texpect(metrics[0].type).toBe(MetricType.TIMER)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getAggregatedMetrics', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\t// Add some test metrics\r\n\t\t\tservice.recordMetric('test.aggregated', 10, MetricType.GAUGE)\r\n\t\t\tservice.recordMetric('test.aggregated', 20, MetricType.GAUGE)\r\n\t\t\tservice.recordMetric('test.aggregated', 30, MetricType.GAUGE)\r\n\t\t})\r\n\r\n\t\tit('should return aggregated statistics', () => {\r\n\t\t\tconst aggregated = service.getAggregatedMetrics('test.aggregated', 0)\r\n\r\n\t\t\texpect(aggregated.count).toBe(3)\r\n\t\t\texpect(aggregated.sum).toBe(60)\r\n\t\t\texpect(aggregated.avg).toBe(20)\r\n\t\t\texpect(aggregated.min).toBe(10)\r\n\t\t\texpect(aggregated.max).toBe(30)\r\n\t\t\texpect(aggregated.latest).toBe(30)\r\n\t\t})\r\n\r\n\t\tit('should return empty stats for non-existent metric', () => {\r\n\t\t\tconst aggregated = service.getAggregatedMetrics('non.existent', 0)\r\n\r\n\t\t\texpect(aggregated.count).toBe(0)\r\n\t\t\texpect(aggregated.sum).toBe(0)\r\n\t\t\texpect(aggregated.avg).toBe(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getSystemHealth', () => {\r\n\t\tit('should return system health status', async () => {\r\n\t\t\tconst health = await service.getSystemHealth()\r\n\r\n\t\t\texpect(health).toHaveProperty('status')\r\n\t\t\texpect(health).toHaveProperty('timestamp')\r\n\t\t\texpect(health).toHaveProperty('components')\r\n\t\t\texpect(health).toHaveProperty('overallScore')\r\n\t\t\texpect(health.components).toHaveLength(4) // memory, disk, network, cache\r\n\t\t})\r\n\r\n\t\tit('should include all required components', async () => {\r\n\t\t\tconst health = await service.getSystemHealth()\r\n\t\t\tconst componentNames = health.components.map(c => c.name)\r\n\r\n\t\t\texpect(componentNames).toContain('memory')\r\n\t\t\texpect(componentNames).toContain('disk')\r\n\t\t\texpect(componentNames).toContain('network')\r\n\t\t\texpect(componentNames).toContain('cache')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getStats', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tservice.recordMetric('test.counter', 1, MetricType.COUNTER)\r\n\t\t\tservice.recordMetric('test.gauge', 50, MetricType.GAUGE)\r\n\t\t\tservice.recordMetric('test.timer', 100, MetricType.TIMER)\r\n\t\t})\r\n\r\n\t\tit('should return monitoring statistics', () => {\r\n\t\t\tconst stats = service.getStats()\r\n\r\n\t\t\texpect(stats).toHaveProperty('totalMetrics')\r\n\t\t\texpect(stats).toHaveProperty('metricTypes')\r\n\t\t\texpect(stats).toHaveProperty('oldestMetric')\r\n\t\t\texpect(stats).toHaveProperty('newestMetric')\r\n\t\t\texpect(stats).toHaveProperty('memoryUsage')\r\n\r\n\t\t\texpect(stats.totalMetrics).toBe(3)\r\n\t\t\texpect(stats.metricTypes).toHaveProperty('counter', 1)\r\n\t\t\texpect(stats.metricTypes).toHaveProperty('gauge', 1)\r\n\t\t\texpect(stats.metricTypes).toHaveProperty('timer', 1)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getMetricNames', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tservice.recordMetric('metric.one', 1, MetricType.COUNTER)\r\n\t\t\tservice.recordMetric('metric.two', 2, MetricType.GAUGE)\r\n\t\t})\r\n\r\n\t\tit('should return all metric names', () => {\r\n\t\t\tconst names = service.getMetricNames()\r\n\r\n\t\t\texpect(names).toContain('metric.one')\r\n\t\t\texpect(names).toContain('metric.two')\r\n\t\t\texpect(names).toHaveLength(2)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CorrelationService","MetricType","MonitoringService","ConfigService","Test","beforeEach","describe","expect","it","vi","service","configService","correlationService","mockConfigService","get","fn","mockReturnValue","enabled","metricsRetentionMs","alertsRetentionMs","performanceRetentionMs","healthCheckIntervalMs","alertCooldownMs","externalIntegrations","endpoints","mockCorrelationService","getCorrelationId","module","createTestingModule","providers","provide","useValue","compile","toBeDefined","recordMetric","GAUGE","tag","metrics","getMetrics","toHaveLength","toMatchObject","name","value","type","tags","disabledService","incrementCounter","toBe","COUNTER","recordGauge","recordHistogram","HISTOGRAM","recordTimer","TIMER","aggregated","getAggregatedMetrics","count","sum","avg","min","max","latest","health","getSystemHealth","toHaveProperty","components","componentNames","map","c","toContain","stats","getStats","totalMetrics","metricTypes","names","getMetricNames"],"mappings":"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"}