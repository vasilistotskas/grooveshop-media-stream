{"version":3,"sources":["../../../../../src/test/Monitoring/services/alert.service.spec.ts"],"sourcesContent":["import type { AlertRule } from '@microservice/Monitoring/interfaces/monitoring.interface'\r\nimport type { MockedObject } from 'vitest'\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport {\r\n\tAlertCondition,\r\n\r\n\tAlertSeverity,\r\n} from '@microservice/Monitoring/interfaces/monitoring.interface'\r\nimport { AlertService } from '@microservice/Monitoring/services/alert.service'\r\nimport { MonitoringService } from '@microservice/Monitoring/services/monitoring.service'\r\nimport { ConfigService } from '@nestjs/config'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\ndescribe('alertService', () => {\r\n\tlet service: AlertService\r\n\tlet monitoringService: MockedObject<MonitoringService>\r\n\r\n\tconst mockAlertRule: AlertRule = {\r\n\t\tid: 'test-rule',\r\n\t\tname: 'Test Rule',\r\n\t\tdescription: 'Test alert rule',\r\n\t\tmetric: 'test.metric',\r\n\t\tcondition: AlertCondition.GREATER_THAN,\r\n\t\tthreshold: 100,\r\n\t\tseverity: AlertSeverity.HIGH,\r\n\t\tenabled: true,\r\n\t\tcooldownMs: 60000,\r\n\t}\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockReturnValue({\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tmetricsRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\t\talertsRetentionMs: 7 * 24 * 60 * 60 * 1000,\r\n\t\t\t\tperformanceRetentionMs: 24 * 60 * 60 * 1000,\r\n\t\t\t\thealthCheckIntervalMs: 30 * 1000,\r\n\t\t\t\talertCooldownMs: 5 * 60 * 1000,\r\n\t\t\t\texternalIntegrations: {\r\n\t\t\t\t\tenabled: false,\r\n\t\t\t\t\tendpoints: [],\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst mockCorrelationService = {\r\n\t\t\tgetCorrelationId: vi.fn().mockReturnValue('test-correlation-id'),\r\n\t\t}\r\n\r\n\t\tconst mockMonitoringService = {\r\n\t\t\tgetAggregatedMetrics: vi.fn().mockReturnValue({\r\n\t\t\t\tcount: 1,\r\n\t\t\t\tsum: 150,\r\n\t\t\t\tavg: 150,\r\n\t\t\t\tmin: 150,\r\n\t\t\t\tmax: 150,\r\n\t\t\t\tlatest: 150,\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tAlertService,\r\n\t\t\t\t{ provide: ConfigService, useValue: mockConfigService },\r\n\t\t\t\t{ provide: CorrelationService, useValue: mockCorrelationService },\r\n\t\t\t\t{ provide: MonitoringService, useValue: mockMonitoringService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<AlertService>(AlertService)\r\n\t\tmonitoringService = module.get(MonitoringService)\r\n\r\n\t\t// Clear any default rules for clean testing\r\n\t\tservice.getAlertRules().forEach(rule => service.removeAlertRule(rule.id))\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(service).toBeDefined()\r\n\t})\r\n\r\n\tdescribe('addAlertRule', () => {\r\n\t\tit('should add alert rule successfully', () => {\r\n\t\t\tservice.addAlertRule(mockAlertRule)\r\n\r\n\t\t\tconst rules = service.getAlertRules()\r\n\t\t\texpect(rules).toHaveLength(1)\r\n\t\t\texpect(rules[0]).toEqual(mockAlertRule)\r\n\t\t})\r\n\r\n\t\tit('should update existing rule', () => {\r\n\t\t\tservice.addAlertRule(mockAlertRule)\r\n\r\n\t\t\tconst updatedRule = { ...mockAlertRule, threshold: 200 }\r\n\t\t\tservice.addAlertRule(updatedRule)\r\n\r\n\t\t\tconst rules = service.getAlertRules()\r\n\t\t\texpect(rules).toHaveLength(1)\r\n\t\t\texpect(rules[0].threshold).toBe(200)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('removeAlertRule', () => {\r\n\t\tit('should remove alert rule successfully', () => {\r\n\t\t\tservice.addAlertRule(mockAlertRule)\r\n\t\t\texpect(service.getAlertRules()).toHaveLength(1)\r\n\r\n\t\t\tconst removed = service.removeAlertRule(mockAlertRule.id)\r\n\t\t\texpect(removed).toBe(true)\r\n\t\t\texpect(service.getAlertRules()).toHaveLength(0)\r\n\t\t})\r\n\r\n\t\tit('should return false for non-existent rule', () => {\r\n\t\t\tconst removed = service.removeAlertRule('non-existent')\r\n\t\t\texpect(removed).toBe(false)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('triggerAlert', () => {\r\n\t\tit('should trigger manual alert', () => {\r\n\t\t\tservice.triggerAlert('Manual Test', 'Test message', AlertSeverity.MEDIUM)\r\n\r\n\t\t\tconst activeAlerts = service.getActiveAlerts()\r\n\t\t\texpect(activeAlerts).toHaveLength(1)\r\n\t\t\texpect(activeAlerts[0].ruleName).toBe('Manual Test')\r\n\t\t\texpect(activeAlerts[0].message).toBe('Test message')\r\n\t\t\texpect(activeAlerts[0].severity).toBe(AlertSeverity.MEDIUM)\r\n\t\t})\r\n\r\n\t\tit('should add alert to history', () => {\r\n\t\t\tservice.triggerAlert('Manual Test', 'Test message', AlertSeverity.LOW)\r\n\r\n\t\t\tconst history = service.getAlertHistory()\r\n\t\t\texpect(history).toHaveLength(1)\r\n\t\t\texpect(history[0].ruleName).toBe('Manual Test')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('resolveAlert', () => {\r\n\t\tit('should resolve active alert', () => {\r\n\t\t\tservice.triggerAlert('Test Alert', 'Test message', AlertSeverity.HIGH)\r\n\t\t\tconst activeAlerts = service.getActiveAlerts()\r\n\t\t\tconst alertId = activeAlerts[0].id\r\n\r\n\t\t\tconst resolved = service.resolveAlert(alertId)\r\n\t\t\texpect(resolved).toBe(true)\r\n\t\t\texpect(service.getActiveAlerts()).toHaveLength(0)\r\n\r\n\t\t\tconst history = service.getAlertHistory()\r\n\t\t\texpect(history[0].resolved).toBe(true)\r\n\t\t\texpect(history[0].resolvedAt).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should return false for non-existent alert', () => {\r\n\t\t\tconst resolved = service.resolveAlert('non-existent')\r\n\t\t\texpect(resolved).toBe(false)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getAlertStats', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tservice.triggerAlert('Critical Alert', 'Critical message', AlertSeverity.CRITICAL)\r\n\t\t\tservice.triggerAlert('High Alert', 'High message', AlertSeverity.HIGH)\r\n\t\t\tservice.triggerAlert('Medium Alert', 'Medium message', AlertSeverity.MEDIUM)\r\n\t\t})\r\n\r\n\t\tit('should return alert statistics', () => {\r\n\t\t\tconst stats = service.getAlertStats()\r\n\r\n\t\t\texpect(stats.activeAlerts).toBe(3)\r\n\t\t\texpect(stats.alertsBySeverity[AlertSeverity.CRITICAL]).toBe(1)\r\n\t\t\texpect(stats.alertsBySeverity[AlertSeverity.HIGH]).toBe(1)\r\n\t\t\texpect(stats.alertsBySeverity[AlertSeverity.MEDIUM]).toBe(1)\r\n\t\t\texpect(stats.alertsLast24h).toBe(3)\r\n\t\t})\r\n\r\n\t\tit('should calculate average resolution time', async () => {\r\n\t\t\tconst activeAlerts = service.getActiveAlerts()\r\n\t\t\texpect(activeAlerts.length).toBeGreaterThan(0)\r\n\r\n\t\t\t// Wait a small amount to ensure measurable resolution time\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 1))\r\n\r\n\t\t\t// Resolve one alert\r\n\t\t\tconst resolved = service.resolveAlert(activeAlerts[0].id)\r\n\t\t\texpect(resolved).toBe(true)\r\n\r\n\t\t\tconst stats = service.getAlertStats()\r\n\t\t\texpect(stats.averageResolutionTime).toBeGreaterThanOrEqual(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('alert evaluation', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tservice.addAlertRule(mockAlertRule)\r\n\t\t})\r\n\r\n\t\tit('should trigger alert when threshold exceeded', () => {\r\n\t\t\t// Mock metrics that exceed threshold\r\n\t\t\tmonitoringService.getAggregatedMetrics.mockReturnValue({\r\n\t\t\t\tcount: 1,\r\n\t\t\t\tsum: 150,\r\n\t\t\t\tavg: 150,\r\n\t\t\t\tmin: 150,\r\n\t\t\t\tmax: 150,\r\n\t\t\t\tlatest: 150, // Above threshold of 100\r\n\t\t\t})\r\n\r\n\t\t\t// Manually trigger alert evaluation\r\n\t\t\tservice.evaluateAlertsNow()\r\n\r\n\t\t\tconst activeAlerts = service.getActiveAlerts()\r\n\t\t\texpect(activeAlerts.length).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should not trigger alert when threshold not exceeded', async () => {\r\n\t\t\t// Mock metrics below threshold\r\n\t\t\tmonitoringService.getAggregatedMetrics.mockReturnValue({\r\n\t\t\t\tcount: 1,\r\n\t\t\t\tsum: 50,\r\n\t\t\t\tavg: 50,\r\n\t\t\t\tmin: 50,\r\n\t\t\t\tmax: 50,\r\n\t\t\t\tlatest: 50, // Below threshold of 100\r\n\t\t\t})\r\n\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 100))\r\n\t\t\tconst activeAlerts = service.getActiveAlerts()\r\n\t\t\texpect(activeAlerts).toHaveLength(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('alert conditions', () => {\r\n\t\tconst testCases = [\r\n\t\t\t{ condition: AlertCondition.GREATER_THAN, threshold: 100, value: 150, shouldAlert: true },\r\n\t\t\t{ condition: AlertCondition.GREATER_THAN, threshold: 100, value: 50, shouldAlert: false },\r\n\t\t\t{ condition: AlertCondition.LESS_THAN, threshold: 100, value: 50, shouldAlert: true },\r\n\t\t\t{ condition: AlertCondition.LESS_THAN, threshold: 100, value: 150, shouldAlert: false },\r\n\t\t\t{ condition: AlertCondition.EQUALS, threshold: 100, value: 100, shouldAlert: true },\r\n\t\t\t{ condition: AlertCondition.EQUALS, threshold: 100, value: 99, shouldAlert: false },\r\n\t\t\t{ condition: AlertCondition.GREATER_THAN_OR_EQUAL, threshold: 100, value: 100, shouldAlert: true },\r\n\t\t\t{ condition: AlertCondition.LESS_THAN_OR_EQUAL, threshold: 100, value: 100, shouldAlert: true },\r\n\t\t]\r\n\r\n\t\ttestCases.forEach(({ condition, threshold, value, shouldAlert }) => {\r\n\t\t\tit(`should ${shouldAlert ? 'trigger' : 'not trigger'} alert for ${condition} condition`, () => {\r\n\t\t\t\tconst rule = { ...mockAlertRule, condition, threshold }\r\n\t\t\t\tservice.addAlertRule(rule)\r\n\r\n\t\t\t\tmonitoringService.getAggregatedMetrics.mockReturnValue({\r\n\t\t\t\t\tcount: 1,\r\n\t\t\t\t\tsum: value,\r\n\t\t\t\t\tavg: value,\r\n\t\t\t\t\tmin: value,\r\n\t\t\t\t\tmax: value,\r\n\t\t\t\t\tlatest: value,\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Manually trigger alert evaluation\r\n\t\t\t\tservice.evaluateAlertsNow()\r\n\r\n\t\t\t\tconst activeAlerts = service.getActiveAlerts()\r\n\t\t\t\tif (shouldAlert) {\r\n\t\t\t\t\texpect(activeAlerts.length).toBeGreaterThan(0)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\texpect(activeAlerts).toHaveLength(0)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CorrelationService","AlertCondition","AlertSeverity","AlertService","MonitoringService","ConfigService","Test","beforeEach","describe","expect","it","vi","service","monitoringService","mockAlertRule","id","name","description","metric","condition","GREATER_THAN","threshold","severity","HIGH","enabled","cooldownMs","mockConfigService","get","fn","mockReturnValue","metricsRetentionMs","alertsRetentionMs","performanceRetentionMs","healthCheckIntervalMs","alertCooldownMs","externalIntegrations","endpoints","mockCorrelationService","getCorrelationId","mockMonitoringService","getAggregatedMetrics","count","sum","avg","min","max","latest","module","createTestingModule","providers","provide","useValue","compile","getAlertRules","forEach","rule","removeAlertRule","toBeDefined","addAlertRule","rules","toHaveLength","toEqual","updatedRule","toBe","removed","triggerAlert","MEDIUM","activeAlerts","getActiveAlerts","ruleName","message","LOW","history","getAlertHistory","alertId","resolved","resolveAlert","resolvedAt","CRITICAL","stats","getAlertStats","alertsBySeverity","alertsLast24h","length","toBeGreaterThan","Promise","resolve","setTimeout","averageResolutionTime","toBeGreaterThanOrEqual","evaluateAlertsNow","testCases","value","shouldAlert","LESS_THAN","EQUALS","GREATER_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL"],"mappings":"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"}