{"version":3,"sources":["../../../../../src/test/Monitoring/controllers/monitoring.controller.spec.ts"],"sourcesContent":["import type { SystemHealth } from '@microservice/Monitoring/interfaces/monitoring.interface'\r\nimport type { MockedObject } from 'vitest'\nimport { MonitoringController } from '@microservice/Monitoring/controllers/monitoring.controller'\r\nimport { AlertCondition, AlertSeverity } from '@microservice/Monitoring/interfaces/monitoring.interface'\r\nimport { AlertService } from '@microservice/Monitoring/services/alert.service'\r\nimport { MonitoringService } from '@microservice/Monitoring/services/monitoring.service'\r\nimport { PerformanceMonitoringService } from '@microservice/Monitoring/services/performance-monitoring.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('monitoringController', () => {\r\n\tlet controller: MonitoringController\r\n\tlet monitoringService: MockedObject<MonitoringService>\r\n\tlet alertService: MockedObject<AlertService>\r\n\tlet performanceService: MockedObject<PerformanceMonitoringService>\r\n\r\n\tconst mockSystemHealth: SystemHealth = {\r\n\t\tstatus: 'healthy',\r\n\t\ttimestamp: Date.now(),\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\tname: 'memory',\r\n\t\t\t\tstatus: 'healthy',\r\n\t\t\t\tscore: 85,\r\n\t\t\t\tmetrics: { usagePercent: 65 },\r\n\t\t\t\tlastCheck: Date.now(),\r\n\t\t\t},\r\n\t\t],\r\n\t\toverallScore: 85,\r\n\t}\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockMonitoringService = {\r\n\t\t\tgetSystemHealth: vi.fn().mockResolvedValue(mockSystemHealth),\r\n\t\t\tgetStats: vi.fn().mockReturnValue({\r\n\t\t\t\ttotalMetrics: 100,\r\n\t\t\t\tmetricTypes: { counter: 50, gauge: 30, timer: 20 },\r\n\t\t\t\toldestMetric: Date.now() - 86400000,\r\n\t\t\t\tnewestMetric: Date.now(),\r\n\t\t\t\tmemoryUsage: 1024000,\r\n\t\t\t}),\r\n\t\t\tgetMetrics: vi.fn().mockReturnValue([]),\r\n\t\t\tgetAggregatedMetrics: vi.fn().mockReturnValue({\r\n\t\t\t\tcount: 10,\r\n\t\t\t\tsum: 1000,\r\n\t\t\t\tavg: 100,\r\n\t\t\t\tmin: 50,\r\n\t\t\t\tmax: 200,\r\n\t\t\t\tlatest: 150,\r\n\t\t\t}),\r\n\t\t\tgetMetricNames: vi.fn().mockReturnValue(['metric.one', 'metric.two']),\r\n\t\t}\r\n\r\n\t\tconst mockAlertService = {\r\n\t\t\tgetAlertStats: vi.fn().mockReturnValue({\r\n\t\t\t\ttotalRules: 5,\r\n\t\t\t\tactiveAlerts: 2,\r\n\t\t\t\talertsBySeverity: {\r\n\t\t\t\t\tlow: 0,\r\n\t\t\t\t\tmedium: 1,\r\n\t\t\t\t\thigh: 1,\r\n\t\t\t\t\tcritical: 0,\r\n\t\t\t\t},\r\n\t\t\t\talertsLast24h: 3,\r\n\t\t\t\taverageResolutionTime: 300000,\r\n\t\t\t}),\r\n\t\t\tgetAlertRules: vi.fn().mockReturnValue([]),\r\n\t\t\taddAlertRule: vi.fn(),\r\n\t\t\tgetActiveAlerts: vi.fn().mockReturnValue([]),\r\n\t\t\tgetAlertHistory: vi.fn().mockReturnValue([]),\r\n\t\t\ttriggerAlert: vi.fn(),\r\n\t\t\tresolveAlert: vi.fn().mockReturnValue(true),\r\n\t\t}\r\n\r\n\t\tconst mockPerformanceService = {\r\n\t\t\tgetPerformanceOverview: vi.fn().mockReturnValue({\r\n\t\t\t\ttotalOperations: 1000,\r\n\t\t\t\taverageResponseTime: 150,\r\n\t\t\t\tsuccessRate: 95.5,\r\n\t\t\t\tslowestOperations: [],\r\n\t\t\t\tmostFrequentOperations: [],\r\n\t\t\t\terrorRates: [],\r\n\t\t\t}),\r\n\t\t\tgetPerformanceMetrics: vi.fn().mockReturnValue([]),\r\n\t\t\tgetPerformanceStats: vi.fn().mockReturnValue({\r\n\t\t\t\ttotalOperations: 100,\r\n\t\t\t\tsuccessfulOperations: 95,\r\n\t\t\t\tfailedOperations: 5,\r\n\t\t\t\tsuccessRate: 95,\r\n\t\t\t\taverageDuration: 150,\r\n\t\t\t\tminDuration: 50,\r\n\t\t\t\tmaxDuration: 500,\r\n\t\t\t\tp50Duration: 120,\r\n\t\t\t\tp95Duration: 300,\r\n\t\t\t\tp99Duration: 450,\r\n\t\t\t}),\r\n\t\t\tgetTrackedOperations: vi.fn().mockReturnValue(['operation1', 'operation2']),\r\n\t\t\tgetActiveOperations: vi.fn().mockReturnValue([]),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tcontrollers: [MonitoringController],\r\n\t\t\tproviders: [\r\n\t\t\t\t{ provide: MonitoringService, useValue: mockMonitoringService },\r\n\t\t\t\t{ provide: AlertService, useValue: mockAlertService },\r\n\t\t\t\t{ provide: PerformanceMonitoringService, useValue: mockPerformanceService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tcontroller = module.get<MonitoringController>(MonitoringController)\r\n\t\tmonitoringService = module.get(MonitoringService)\r\n\t\talertService = module.get(AlertService)\r\n\t\tperformanceService = module.get(PerformanceMonitoringService)\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(controller).toBeDefined()\r\n\t})\r\n\r\n\tdescribe('getSystemHealth', () => {\r\n\t\tit('should return system health', async () => {\r\n\t\t\tconst result = await controller.getSystemHealth()\r\n\r\n\t\t\texpect(result).toEqual(mockSystemHealth)\r\n\t\t\texpect(monitoringService.getSystemHealth).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDashboard', () => {\r\n\t\tit('should return dashboard data', async () => {\r\n\t\t\tconst result = await controller.getDashboard()\r\n\r\n\t\t\texpect(result).toHaveProperty('timestamp')\r\n\t\t\texpect(result).toHaveProperty('systemHealth')\r\n\t\t\texpect(result).toHaveProperty('alerts')\r\n\t\t\texpect(result).toHaveProperty('performance')\r\n\t\t\texpect(result).toHaveProperty('monitoring')\r\n\r\n\t\t\texpect(monitoringService.getSystemHealth).toHaveBeenCalled()\r\n\t\t\texpect(alertService.getAlertStats).toHaveBeenCalled()\r\n\t\t\texpect(performanceService.getPerformanceOverview).toHaveBeenCalled()\r\n\t\t\texpect(monitoringService.getStats).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should use custom time range', async () => {\r\n\t\t\tconst since = '1640995200000' // Jan 1, 2022\r\n\t\t\tawait controller.getDashboard(since)\r\n\r\n\t\t\texpect(performanceService.getPerformanceOverview).toHaveBeenCalledWith(1640995200000)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getMetrics', () => {\r\n\t\tit('should return metrics by name', () => {\r\n\t\t\tconst result = controller.getMetrics('test.metric')\r\n\r\n\t\t\texpect(result).toHaveProperty('name', 'test.metric')\r\n\t\t\texpect(result).toHaveProperty('metrics')\r\n\t\t\texpect(monitoringService.getMetrics).toHaveBeenCalledWith('test.metric', undefined)\r\n\t\t})\r\n\r\n\t\tit('should return aggregated metrics when requested', () => {\r\n\t\t\tcontroller.getMetrics('test.metric', '1640995200000', 'true')\r\n\r\n\t\t\texpect(monitoringService.getAggregatedMetrics).toHaveBeenCalledWith('test.metric', 1640995200000)\r\n\t\t})\r\n\r\n\t\tit('should filter by time range', () => {\r\n\t\t\tcontroller.getMetrics('test.metric', '1640995200000')\r\n\r\n\t\t\texpect(monitoringService.getMetrics).toHaveBeenCalledWith('test.metric', 1640995200000)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getMetricNames', () => {\r\n\t\tit('should return all metric names', () => {\r\n\t\t\tconst result = controller.getMetricNames()\r\n\r\n\t\t\texpect(result).toHaveProperty('metrics')\r\n\t\t\texpect(monitoringService.getMetricNames).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('alert endpoints', () => {\r\n\t\tdescribe('getAlertRules', () => {\r\n\t\t\tit('should return alert rules', () => {\r\n\t\t\t\tconst result = controller.getAlertRules()\r\n\r\n\t\t\t\texpect(result).toHaveProperty('rules')\r\n\t\t\t\texpect(alertService.getAlertRules).toHaveBeenCalled()\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('addAlertRule', () => {\r\n\t\t\tit('should add alert rule', () => {\r\n\t\t\t\tconst rule = {\r\n\t\t\t\t\tid: 'test-rule',\r\n\t\t\t\t\tname: 'Test Rule',\r\n\t\t\t\t\tdescription: 'Test description',\r\n\t\t\t\t\tmetric: 'test.metric',\r\n\t\t\t\t\tcondition: AlertCondition.GREATER_THAN,\r\n\t\t\t\t\tthreshold: 100,\r\n\t\t\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tcooldownMs: 60000,\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst result = controller.addAlertRule(rule)\r\n\r\n\t\t\t\texpect(result.success).toBe(true)\r\n\t\t\t\texpect(alertService.addAlertRule).toHaveBeenCalledWith(rule)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('getActiveAlerts', () => {\r\n\t\t\tit('should return active alerts', () => {\r\n\t\t\t\tconst result = controller.getActiveAlerts()\r\n\r\n\t\t\t\texpect(result).toHaveProperty('alerts')\r\n\t\t\t\texpect(alertService.getActiveAlerts).toHaveBeenCalled()\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('getAlertHistory', () => {\r\n\t\t\tit('should return alert history', () => {\r\n\t\t\t\tconst result = controller.getAlertHistory()\r\n\r\n\t\t\t\texpect(result).toHaveProperty('alerts')\r\n\t\t\t\texpect(alertService.getAlertHistory).toHaveBeenCalledWith(undefined)\r\n\t\t\t})\r\n\r\n\t\t\tit('should filter by time range', () => {\r\n\t\t\t\tcontroller.getAlertHistory('1640995200000')\r\n\r\n\t\t\t\texpect(alertService.getAlertHistory).toHaveBeenCalledWith(1640995200000)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('triggerAlert', () => {\r\n\t\t\tit('should trigger manual alert', () => {\r\n\t\t\t\tconst alertData = {\r\n\t\t\t\t\truleName: 'Manual Alert',\r\n\t\t\t\t\tmessage: 'Test message',\r\n\t\t\t\t\tseverity: AlertSeverity.MEDIUM,\r\n\t\t\t\t\tmetadata: { source: 'manual' },\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst result = controller.triggerAlert(alertData)\r\n\r\n\t\t\t\texpect(result.success).toBe(true)\r\n\t\t\t\texpect(alertService.triggerAlert).toHaveBeenCalledWith(\r\n\t\t\t\t\t'Manual Alert',\r\n\t\t\t\t\t'Test message',\r\n\t\t\t\t\tAlertSeverity.MEDIUM,\r\n\t\t\t\t\t{ source: 'manual' },\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('resolveAlert', () => {\r\n\t\t\tit('should resolve alert', () => {\r\n\t\t\t\tconst result = controller.resolveAlert('alert-123')\r\n\r\n\t\t\t\texpect(result.success).toBe(true)\r\n\t\t\t\texpect(alertService.resolveAlert).toHaveBeenCalledWith('alert-123')\r\n\t\t\t})\r\n\r\n\t\t\tit('should handle non-existent alert', () => {\r\n\t\t\t\talertService.resolveAlert.mockReturnValue(false)\r\n\r\n\t\t\t\tconst result = controller.resolveAlert('non-existent')\r\n\r\n\t\t\t\texpect(result.success).toBe(false)\r\n\t\t\t\texpect(result.message).toContain('not found')\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('performance endpoints', () => {\r\n\t\tdescribe('getPerformanceMetrics', () => {\r\n\t\t\tit('should return performance metrics', () => {\r\n\t\t\t\tconst result = controller.getPerformanceMetrics('test-operation')\r\n\r\n\t\t\t\texpect(result).toHaveProperty('operationName', 'test-operation')\r\n\t\t\t\texpect(result).toHaveProperty('metrics')\r\n\t\t\t\texpect(performanceService.getPerformanceMetrics).toHaveBeenCalledWith('test-operation', undefined)\r\n\t\t\t})\r\n\r\n\t\t\tit('should return performance stats when requested', () => {\r\n\t\t\t\tcontroller.getPerformanceMetrics('test-operation', undefined, 'true')\r\n\r\n\t\t\t\texpect(performanceService.getPerformanceStats).toHaveBeenCalledWith('test-operation', undefined)\r\n\t\t\t})\r\n\r\n\t\t\tit('should filter by time range', () => {\r\n\t\t\t\tcontroller.getPerformanceMetrics('test-operation', '1640995200000')\r\n\r\n\t\t\t\texpect(performanceService.getPerformanceMetrics).toHaveBeenCalledWith('test-operation', 1640995200000)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('getTrackedOperations', () => {\r\n\t\t\tit('should return tracked operations', () => {\r\n\t\t\t\tconst result = controller.getTrackedOperations()\r\n\r\n\t\t\t\texpect(result).toHaveProperty('operations')\r\n\t\t\t\texpect(result).toHaveProperty('activeOperations')\r\n\t\t\t\texpect(performanceService.getTrackedOperations).toHaveBeenCalled()\r\n\t\t\t\texpect(performanceService.getActiveOperations).toHaveBeenCalled()\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('getPerformanceOverview', () => {\r\n\t\t\tit('should return performance overview', () => {\r\n\t\t\t\tcontroller.getPerformanceOverview()\r\n\r\n\t\t\t\texpect(performanceService.getPerformanceOverview).toHaveBeenCalledWith(undefined)\r\n\t\t\t})\r\n\r\n\t\t\tit('should filter by time range', () => {\r\n\t\t\t\tcontroller.getPerformanceOverview('1640995200000')\r\n\r\n\t\t\t\texpect(performanceService.getPerformanceOverview).toHaveBeenCalledWith(1640995200000)\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getMonitoringStats', () => {\r\n\t\tit('should return monitoring statistics', () => {\r\n\t\t\tconst result = controller.getMonitoringStats()\r\n\r\n\t\t\texpect(result).toHaveProperty('monitoring')\r\n\t\t\texpect(result).toHaveProperty('alerts')\r\n\t\t\texpect(monitoringService.getStats).toHaveBeenCalled()\r\n\t\t\texpect(alertService.getAlertStats).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["MonitoringController","AlertCondition","AlertSeverity","AlertService","MonitoringService","PerformanceMonitoringService","Test","beforeEach","describe","expect","it","vi","controller","monitoringService","alertService","performanceService","mockSystemHealth","status","timestamp","Date","now","components","name","score","metrics","usagePercent","lastCheck","overallScore","mockMonitoringService","getSystemHealth","fn","mockResolvedValue","getStats","mockReturnValue","totalMetrics","metricTypes","counter","gauge","timer","oldestMetric","newestMetric","memoryUsage","getMetrics","getAggregatedMetrics","count","sum","avg","min","max","latest","getMetricNames","mockAlertService","getAlertStats","totalRules","activeAlerts","alertsBySeverity","low","medium","high","critical","alertsLast24h","averageResolutionTime","getAlertRules","addAlertRule","getActiveAlerts","getAlertHistory","triggerAlert","resolveAlert","mockPerformanceService","getPerformanceOverview","totalOperations","averageResponseTime","successRate","slowestOperations","mostFrequentOperations","errorRates","getPerformanceMetrics","getPerformanceStats","successfulOperations","failedOperations","averageDuration","minDuration","maxDuration","p50Duration","p95Duration","p99Duration","getTrackedOperations","getActiveOperations","module","createTestingModule","controllers","providers","provide","useValue","compile","get","toBeDefined","result","toEqual","toHaveBeenCalled","getDashboard","toHaveProperty","since","toHaveBeenCalledWith","undefined","rule","id","description","metric","condition","GREATER_THAN","threshold","severity","HIGH","enabled","cooldownMs","success","toBe","alertData","ruleName","message","MEDIUM","metadata","source","toContain","getMonitoringStats"],"mappings":"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"}