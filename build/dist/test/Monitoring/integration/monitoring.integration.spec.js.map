{"version":3,"sources":["../../../../../src/test/Monitoring/integration/monitoring.integration.spec.ts"],"sourcesContent":["import { CorrelationModule } from '@microservice/Correlation/correlation.module'\r\nimport { MetricsModule } from '@microservice/Metrics/metrics.module'\r\nimport { MonitoringController } from '@microservice/Monitoring/controllers/monitoring.controller'\r\nimport {\r\n\tAlertCondition,\r\n\tAlertSeverity,\r\n} from '@microservice/Monitoring/interfaces/monitoring.interface'\r\nimport { MonitoringModule } from '@microservice/Monitoring/monitoring.module'\r\nimport { AlertService } from '@microservice/Monitoring/services/alert.service'\r\nimport { MonitoringService } from '@microservice/Monitoring/services/monitoring.service'\r\nimport { PerformanceMonitoringService } from '@microservice/Monitoring/services/performance-monitoring.service'\r\nimport { ConfigModule } from '@nestjs/config'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { afterAll, beforeAll, describe, expect, it } from 'vitest'\n\r\ndescribe('monitoring Integration', () => {\r\n\tlet app: TestingModule\r\n\tlet monitoringService: MonitoringService\r\n\tlet alertService: AlertService\r\n\tlet performanceService: PerformanceMonitoringService\r\n\tlet controller: MonitoringController\r\n\r\n\tbeforeAll(async () => {\r\n\t\tapp = await Test.createTestingModule({\r\n\t\t\timports: [\r\n\t\t\t\tConfigModule.forRoot({\r\n\t\t\t\t\tisGlobal: true,\r\n\t\t\t\t\tload: [\r\n\t\t\t\t\t\t() => ({\r\n\t\t\t\t\t\t\tmonitoring: {\r\n\t\t\t\t\t\t\t\tenabled: true,\r\n\t\t\t\t\t\t\t\tmetricsRetentionMs: 60000, // 1 minute for testing\r\n\t\t\t\t\t\t\t\talertsRetentionMs: 300000, // 5 minutes for testing\r\n\t\t\t\t\t\t\t\tperformanceRetentionMs: 60000,\r\n\t\t\t\t\t\t\t\thealthCheckIntervalMs: 1000, // 1 second for testing\r\n\t\t\t\t\t\t\t\talertCooldownMs: 5000, // 5 seconds for testing\r\n\t\t\t\t\t\t\t\texternalIntegrations: {\r\n\t\t\t\t\t\t\t\t\tenabled: false,\r\n\t\t\t\t\t\t\t\t\tendpoints: [],\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t],\r\n\t\t\t\t}),\r\n\t\t\t\tCorrelationModule,\r\n\t\t\t\tMetricsModule,\r\n\t\t\t\tMonitoringModule,\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tmonitoringService = app.get<MonitoringService>(MonitoringService)\r\n\t\talertService = app.get<AlertService>(AlertService)\r\n\t\tperformanceService = app.get<PerformanceMonitoringService>(PerformanceMonitoringService)\r\n\t\tcontroller = app.get<MonitoringController>(MonitoringController)\r\n\t})\r\n\r\n\tafterAll(async () => {\r\n\t\tawait app.close()\r\n\t})\r\n\r\n\tdescribe('end-to-End Monitoring Flow', () => {\r\n\t\tit('should record metrics and trigger alerts', async () => {\r\n\t\t\t// 1. Record some metrics\r\n\t\t\tmonitoringService.recordGauge('test.cpu.usage', 85)\r\n\t\t\tmonitoringService.recordGauge('test.memory.usage', 95)\r\n\t\t\tmonitoringService.incrementCounter('test.requests.total', 100)\r\n\t\t\tmonitoringService.recordTimer('test.response.time', 250)\r\n\r\n\t\t\t// 2. Verify metrics are recorded\r\n\t\t\tconst cpuMetrics = monitoringService.getMetrics('test.cpu.usage')\r\n\t\t\texpect(cpuMetrics).toHaveLength(1)\r\n\t\t\texpect(cpuMetrics[0].value).toBe(85)\r\n\r\n\t\t\tconst aggregatedRequests = monitoringService.getAggregatedMetrics('test.requests.total', 0)\r\n\t\t\texpect(aggregatedRequests.sum).toBe(100)\r\n\r\n\t\t\t// 3. Add alert rule\r\n\t\t\talertService.addAlertRule({\r\n\t\t\t\tid: 'high-cpu-test',\r\n\t\t\t\tname: 'High CPU Usage Test',\r\n\t\t\t\tdescription: 'CPU usage above 80%',\r\n\t\t\t\tmetric: 'test.cpu.usage',\r\n\t\t\t\tcondition: AlertCondition.GREATER_THAN,\r\n\t\t\t\tthreshold: 80,\r\n\t\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tcooldownMs: 1000,\r\n\t\t\t})\r\n\r\n\t\t\t// 4. Manually trigger alert evaluation\r\n\t\t\talertService.evaluateAlertsNow()\r\n\r\n\t\t\t// 5. Check if alert was triggered\r\n\t\t\tconst activeAlerts = alertService.getActiveAlerts()\r\n\t\t\texpect(activeAlerts.length).toBeGreaterThan(0)\r\n\r\n\t\t\tconst cpuAlert = activeAlerts.find(alert => alert.ruleId === 'high-cpu-test')\r\n\t\t\texpect(cpuAlert).toBeDefined()\r\n\t\t\texpect(cpuAlert!.severity).toBe(AlertSeverity.HIGH)\r\n\t\t})\r\n\r\n\t\tit('should track performance operations end-to-end', async () => {\r\n\t\t\t// 1. Track a successful operation\r\n\t\t\tconst result1 = await performanceService.trackAsyncOperation('image-processing', async () => {\r\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 100))\r\n\t\t\t\treturn 'processed-image.jpg'\r\n\t\t\t}, { imageSize: '1024x768' })\r\n\r\n\t\t\texpect(result1).toBe('processed-image.jpg')\r\n\r\n\t\t\t// 2. Track a failed operation\r\n\t\t\ttry {\r\n\t\t\t\tawait performanceService.trackAsyncOperation('image-processing', async () => {\r\n\t\t\t\t\tthrow new Error('Processing failed')\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tcatch (error: unknown) {\r\n\t\t\t\texpect((error as Error).message).toBe('Processing failed')\r\n\t\t\t}\r\n\r\n\t\t\t// 3. Get performance statistics\r\n\t\t\tconst stats = performanceService.getPerformanceStats('image-processing')\r\n\t\t\texpect(stats.totalOperations).toBe(2)\r\n\t\t\texpect(stats.successfulOperations).toBe(1)\r\n\t\t\texpect(stats.failedOperations).toBe(1)\r\n\t\t\texpect(stats.successRate).toBe(50)\r\n\t\t\texpect(stats.averageDuration).toBeGreaterThanOrEqual(25)\r\n\t\t})\r\n\r\n\t\tit('should provide comprehensive system health', async () => {\r\n\t\t\t// 1. Record various system metrics\r\n\t\t\tmonitoringService.recordGauge('system.memory.usage_percent', 75)\r\n\t\t\tmonitoringService.recordGauge('cache.hit_rate', 85)\r\n\t\t\tmonitoringService.incrementCounter('cache.hits', 850)\r\n\t\t\tmonitoringService.incrementCounter('cache.misses', 150)\r\n\r\n\t\t\t// 2. Get system health\r\n\t\t\tconst systemHealth = await monitoringService.getSystemHealth()\r\n\r\n\t\t\texpect(systemHealth.status).toMatch(/healthy|degraded|unhealthy/)\r\n\t\t\texpect(systemHealth.components).toHaveLength(4) // memory, disk, network, cache\r\n\t\t\texpect(systemHealth.overallScore).toBeGreaterThan(0)\r\n\r\n\t\t\t// 3. Check individual components\r\n\t\t\tconst memoryComponent = systemHealth.components.find(c => c.name === 'memory')\r\n\t\t\texpect(memoryComponent).toBeDefined()\r\n\t\t\texpect(memoryComponent!.metrics).toHaveProperty('usagePercent')\r\n\r\n\t\t\tconst cacheComponent = systemHealth.components.find(c => c.name === 'cache')\r\n\t\t\texpect(cacheComponent).toBeDefined()\r\n\t\t\texpect(cacheComponent!.metrics).toHaveProperty('hitRate')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('controller Integration', () => {\r\n\t\tit('should provide dashboard data', async () => {\r\n\t\t\t// 1. Generate some activity\r\n\t\t\tmonitoringService.recordGauge('dashboard.test.metric', 42)\r\n\t\t\tperformanceService.trackOperation('dashboard-operation', () => 'result')\r\n\t\t\talertService.triggerAlert('Dashboard Test', 'Test alert for dashboard', AlertSeverity.MEDIUM)\r\n\r\n\t\t\t// 2. Get dashboard data\r\n\t\t\tconst dashboard = await controller.getDashboard()\r\n\r\n\t\t\texpect(dashboard).toHaveProperty('timestamp')\r\n\t\t\texpect(dashboard).toHaveProperty('systemHealth')\r\n\t\t\texpect(dashboard).toHaveProperty('alerts')\r\n\t\t\texpect(dashboard).toHaveProperty('performance')\r\n\t\t\texpect(dashboard).toHaveProperty('monitoring')\r\n\r\n\t\t\t// 3. Verify dashboard content\r\n\t\t\texpect(dashboard.systemHealth.status).toMatch(/healthy|degraded|unhealthy/)\r\n\t\t\texpect(dashboard.alerts.activeAlerts.length).toBeGreaterThan(0)\r\n\t\t\texpect(dashboard.performance.totalOperations).toBeGreaterThan(0)\r\n\t\t\texpect(dashboard.monitoring.totalMetrics).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should handle metric queries', () => {\r\n\t\t\t// 1. Record test metrics\r\n\t\t\tmonitoringService.recordHistogram('api.response.size', 1024)\r\n\t\t\tmonitoringService.recordHistogram('api.response.size', 2048)\r\n\t\t\tmonitoringService.recordHistogram('api.response.size', 512)\r\n\r\n\t\t\t// 2. Query metrics\r\n\t\t\tconst metrics = controller.getMetrics('api.response.size')\r\n\t\t\texpect((metrics as any).name).toBe('api.response.size')\r\n\t\t\texpect((metrics as any).metrics).toHaveLength(3)\r\n\r\n\t\t\t// 3. Query aggregated metrics\r\n\t\t\tconst aggregated = controller.getMetrics('api.response.size', '0', 'true')\r\n\t\t\texpect((aggregated as any).count).toBe(3)\r\n\t\t\texpect((aggregated as any).sum).toBe(3584)\r\n\t\t\texpect((aggregated as any).avg).toBeCloseTo(1194.67, 1)\r\n\t\t})\r\n\r\n\t\tit('should manage alert rules through controller', () => {\r\n\t\t\t// 1. Add alert rule via controller\r\n\t\t\tconst ruleResponse = controller.addAlertRule({\r\n\t\t\t\tid: 'controller-test-rule',\r\n\t\t\t\tname: 'Controller Test Rule',\r\n\t\t\t\tdescription: 'Test rule added via controller',\r\n\t\t\t\tmetric: 'controller.test.metric',\r\n\t\t\t\tcondition: AlertCondition.GREATER_THAN,\r\n\t\t\t\tthreshold: 100,\r\n\t\t\t\tseverity: AlertSeverity.MEDIUM,\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tcooldownMs: 60000,\r\n\t\t\t})\r\n\r\n\t\t\texpect(ruleResponse.success).toBe(true)\r\n\r\n\t\t\t// 2. Verify rule was added\r\n\t\t\tconst rules = controller.getAlertRules()\r\n\t\t\tconst addedRule = rules.rules.find(r => r.id === 'controller-test-rule')\r\n\t\t\texpect(addedRule).toBeDefined()\r\n\t\t\texpect(addedRule!.name).toBe('Controller Test Rule')\r\n\r\n\t\t\t// 3. Trigger manual alert\r\n\t\t\tconst alertResponse = controller.triggerAlert({\r\n\t\t\t\truleName: 'Manual Controller Alert',\r\n\t\t\t\tmessage: 'Manually triggered alert',\r\n\t\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\t\tmetadata: { source: 'controller-test' },\r\n\t\t\t})\r\n\r\n\t\t\texpect(alertResponse.success).toBe(true)\r\n\r\n\t\t\t// 4. Verify alert was created\r\n\t\t\tconst activeAlerts = controller.getActiveAlerts()\r\n\t\t\tconst manualAlert = activeAlerts.alerts.find(a => a.ruleName === 'Manual Controller Alert')\r\n\t\t\texpect(manualAlert).toBeDefined()\r\n\t\t\texpect(manualAlert!.severity).toBe(AlertSeverity.HIGH)\r\n\r\n\t\t\t// 5. Resolve alert\r\n\t\t\tconst resolveResponse = controller.resolveAlert(manualAlert!.id)\r\n\t\t\texpect(resolveResponse.success).toBe(true)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('performance Monitoring Integration', () => {\r\n\t\tit('should track multiple concurrent operations', async () => {\r\n\t\t\tconst operations = [\r\n\t\t\t\tperformanceService.trackAsyncOperation('concurrent-op-1', async () => {\r\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 50))\r\n\t\t\t\t\treturn 'result-1'\r\n\t\t\t\t}),\r\n\t\t\t\tperformanceService.trackAsyncOperation('concurrent-op-2', async () => {\r\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 75))\r\n\t\t\t\t\treturn 'result-2'\r\n\t\t\t\t}),\r\n\t\t\t\tperformanceService.trackAsyncOperation('concurrent-op-3', async () => {\r\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 25))\r\n\t\t\t\t\treturn 'result-3'\r\n\t\t\t\t}),\r\n\t\t\t]\r\n\r\n\t\t\tconst results = await Promise.all(operations)\r\n\t\t\texpect(results).toEqual(['result-1', 'result-2', 'result-3'])\r\n\r\n\t\t\t// Check that all operations were tracked\r\n\t\t\tconst trackedOps = performanceService.getTrackedOperations()\r\n\t\t\texpect(trackedOps).toContain('concurrent-op-1')\r\n\t\t\texpect(trackedOps).toContain('concurrent-op-2')\r\n\t\t\texpect(trackedOps).toContain('concurrent-op-3')\r\n\r\n\t\t\t// Verify performance overview\r\n\t\t\tconst overview = performanceService.getPerformanceOverview()\r\n\t\t\texpect(overview.totalOperations).toBeGreaterThan(3)\r\n\t\t\texpect(overview.successRate).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should handle active operations tracking', () => {\r\n\t\t\t// Start some long-running operations\r\n\t\t\tconst op1 = performanceService.startOperation('long-running-1', { priority: 'high' })\r\n\t\t\tconst op2 = performanceService.startOperation('long-running-2', { priority: 'low' })\r\n\r\n\t\t\t// Check active operations\r\n\t\t\tconst activeOps = performanceService.getActiveOperations()\r\n\t\t\texpect(activeOps).toHaveLength(2)\r\n\r\n\t\t\tconst op1Data = activeOps.find(op => op.operationId === op1)\r\n\t\t\texpect(op1Data).toBeDefined()\r\n\t\t\texpect(op1Data!.operationName).toBe('long-running-1')\r\n\t\t\texpect(op1Data!.metadata).toEqual({ priority: 'high' })\r\n\r\n\t\t\t// End one operation\r\n\t\t\tperformanceService.endOperation(op1, true)\r\n\r\n\t\t\t// Verify only one active operation remains\r\n\t\t\tconst remainingOps = performanceService.getActiveOperations()\r\n\t\t\texpect(remainingOps).toHaveLength(1)\r\n\t\t\texpect(remainingOps[0].operationId).toBe(op2)\r\n\r\n\t\t\t// Clean up\r\n\t\t\tperformanceService.endOperation(op2, true)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('alert System Integration', () => {\r\n\t\tit('should handle alert lifecycle', async () => {\r\n\t\t\t// 1. Create alert rule\r\n\t\t\talertService.addAlertRule({\r\n\t\t\t\tid: 'lifecycle-test',\r\n\t\t\t\tname: 'Lifecycle Test Rule',\r\n\t\t\t\tdescription: 'Test alert lifecycle',\r\n\t\t\t\tmetric: 'lifecycle.test.metric',\r\n\t\t\t\tcondition: AlertCondition.GREATER_THAN,\r\n\t\t\t\tthreshold: 50,\r\n\t\t\t\tseverity: AlertSeverity.MEDIUM,\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tcooldownMs: 1000,\r\n\t\t\t})\r\n\r\n\t\t\t// 2. Record metric that should trigger alert\r\n\t\t\tmonitoringService.recordGauge('lifecycle.test.metric', 75)\r\n\r\n\t\t\t// 3. Manually trigger alert evaluation\r\n\t\t\talertService.evaluateAlertsNow()\r\n\r\n\t\t\t// 4. Verify alert was triggered\r\n\t\t\tlet activeAlerts = alertService.getActiveAlerts()\r\n\t\t\tconst triggeredAlert = activeAlerts.find(a => a.ruleId === 'lifecycle-test')\r\n\t\t\texpect(triggeredAlert).toBeDefined()\r\n\r\n\t\t\t// 5. Resolve alert\r\n\t\t\tconst resolved = alertService.resolveAlert(triggeredAlert!.id)\r\n\t\t\texpect(resolved).toBe(true)\r\n\r\n\t\t\t// 6. Verify alert is no longer active\r\n\t\t\tactiveAlerts = alertService.getActiveAlerts()\r\n\t\t\tconst stillActive = activeAlerts.find(a => a.id === triggeredAlert!.id)\r\n\t\t\texpect(stillActive).toBeUndefined()\r\n\r\n\t\t\t// 7. Verify alert is in history\r\n\t\t\tconst history = alertService.getAlertHistory()\r\n\t\t\tconst historicalAlert = history.find(a => a.id === triggeredAlert!.id)\r\n\t\t\texpect(historicalAlert).toBeDefined()\r\n\t\t\texpect(historicalAlert!.resolved).toBe(true)\r\n\t\t\texpect(historicalAlert!.resolvedAt).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should respect alert cooldown periods', async () => {\r\n\t\t\t// 1. Create rule with short cooldown\r\n\t\t\talertService.addAlertRule({\r\n\t\t\t\tid: 'cooldown-test',\r\n\t\t\t\tname: 'Cooldown Test Rule',\r\n\t\t\t\tdescription: 'Test alert cooldown',\r\n\t\t\t\tmetric: 'cooldown.test.metric',\r\n\t\t\t\tcondition: AlertCondition.GREATER_THAN,\r\n\t\t\t\tthreshold: 30,\r\n\t\t\t\tseverity: AlertSeverity.LOW,\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tcooldownMs: 3000, // 3 seconds\r\n\t\t\t})\r\n\r\n\t\t\t// 2. Trigger first alert\r\n\t\t\tmonitoringService.recordGauge('cooldown.test.metric', 50)\r\n\t\t\talertService.evaluateAlertsNow()\r\n\r\n\t\t\tconst firstAlerts = alertService.getActiveAlerts()\r\n\t\t\tconst firstAlert = firstAlerts.find(a => a.ruleId === 'cooldown-test')\r\n\t\t\texpect(firstAlert).toBeDefined()\r\n\r\n\t\t\t// 3. Try to trigger another alert immediately (should be blocked by cooldown)\r\n\t\t\tmonitoringService.recordGauge('cooldown.test.metric', 60)\r\n\t\t\talertService.evaluateAlertsNow()\r\n\r\n\t\t\tconst secondAlerts = alertService.getActiveAlerts()\r\n\t\t\tconst duplicateAlerts = secondAlerts.filter(a => a.ruleId === 'cooldown-test')\r\n\t\t\texpect(duplicateAlerts).toHaveLength(1) // Should still be just one alert\r\n\r\n\t\t\t// 4. Wait for cooldown to expire and trigger again\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 3500)) // Wait for 3.5 seconds (cooldown is 3 seconds)\r\n\t\t\tmonitoringService.recordGauge('cooldown.test.metric', 70)\r\n\t\t\talertService.evaluateAlertsNow()\r\n\r\n\t\t\tconst thirdAlerts = alertService.getActiveAlerts()\r\n\t\t\tconst newAlerts = thirdAlerts.filter(a => a.ruleId === 'cooldown-test')\r\n\t\t\texpect(newAlerts.length).toBeGreaterThan(1) // Should have new alert after cooldown\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('monitoring Statistics', () => {\r\n\t\tit('should provide comprehensive monitoring statistics', () => {\r\n\t\t\t// Generate diverse metrics\r\n\t\t\tmonitoringService.incrementCounter('stats.test.counter', 10)\r\n\t\t\tmonitoringService.recordGauge('stats.test.gauge', 85.5)\r\n\t\t\tmonitoringService.recordTimer('stats.test.timer', 150)\r\n\t\t\tmonitoringService.recordHistogram('stats.test.histogram', 1024)\r\n\r\n\t\t\tconst stats = monitoringService.getStats()\r\n\r\n\t\t\texpect(stats.totalMetrics).toBeGreaterThan(0)\r\n\t\t\texpect(stats.metricTypes).toHaveProperty('counter')\r\n\t\t\texpect(stats.metricTypes).toHaveProperty('gauge')\r\n\t\t\texpect(stats.metricTypes).toHaveProperty('timer')\r\n\t\t\texpect(stats.metricTypes).toHaveProperty('histogram')\r\n\t\t\texpect(stats.memoryUsage).toBeGreaterThan(0)\r\n\t\t\texpect(stats.oldestMetric).toBeLessThanOrEqual(stats.newestMetric)\r\n\t\t})\r\n\r\n\t\tit('should provide alert statistics', () => {\r\n\t\t\t// Trigger some test alerts\r\n\t\t\talertService.triggerAlert('Stats Test 1', 'Test message 1', AlertSeverity.LOW)\r\n\t\t\talertService.triggerAlert('Stats Test 2', 'Test message 2', AlertSeverity.HIGH)\r\n\r\n\t\t\tconst stats = alertService.getAlertStats()\r\n\r\n\t\t\texpect(stats.totalRules).toBeGreaterThan(0)\r\n\t\t\texpect(stats.activeAlerts).toBeGreaterThan(0)\r\n\t\t\texpect(stats.alertsBySeverity).toHaveProperty(AlertSeverity.LOW)\r\n\t\t\texpect(stats.alertsBySeverity).toHaveProperty(AlertSeverity.HIGH)\r\n\t\t\texpect(stats.alertsLast24h).toBeGreaterThan(0)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CorrelationModule","MetricsModule","MonitoringController","AlertCondition","AlertSeverity","MonitoringModule","AlertService","MonitoringService","PerformanceMonitoringService","ConfigModule","Test","afterAll","beforeAll","describe","expect","it","app","monitoringService","alertService","performanceService","controller","createTestingModule","imports","forRoot","isGlobal","load","monitoring","enabled","metricsRetentionMs","alertsRetentionMs","performanceRetentionMs","healthCheckIntervalMs","alertCooldownMs","externalIntegrations","endpoints","compile","get","close","recordGauge","incrementCounter","recordTimer","cpuMetrics","getMetrics","toHaveLength","value","toBe","aggregatedRequests","getAggregatedMetrics","sum","addAlertRule","id","name","description","metric","condition","GREATER_THAN","threshold","severity","HIGH","cooldownMs","evaluateAlertsNow","activeAlerts","getActiveAlerts","length","toBeGreaterThan","cpuAlert","find","alert","ruleId","toBeDefined","result1","trackAsyncOperation","Promise","resolve","setTimeout","imageSize","Error","error","message","stats","getPerformanceStats","totalOperations","successfulOperations","failedOperations","successRate","averageDuration","toBeGreaterThanOrEqual","systemHealth","getSystemHealth","status","toMatch","components","overallScore","memoryComponent","c","metrics","toHaveProperty","cacheComponent","trackOperation","triggerAlert","MEDIUM","dashboard","getDashboard","alerts","performance","totalMetrics","recordHistogram","aggregated","count","avg","toBeCloseTo","ruleResponse","success","rules","getAlertRules","addedRule","r","alertResponse","ruleName","metadata","source","manualAlert","a","resolveResponse","resolveAlert","operations","results","all","toEqual","trackedOps","getTrackedOperations","toContain","overview","getPerformanceOverview","op1","startOperation","priority","op2","activeOps","getActiveOperations","op1Data","op","operationId","operationName","endOperation","remainingOps","triggeredAlert","resolved","stillActive","toBeUndefined","history","getAlertHistory","historicalAlert","resolvedAt","LOW","firstAlerts","firstAlert","secondAlerts","duplicateAlerts","filter","thirdAlerts","newAlerts","getStats","metricTypes","memoryUsage","oldestMetric","toBeLessThanOrEqual","newestMetric","getAlertStats","totalRules","alertsBySeverity","alertsLast24h"],"mappings":"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"}