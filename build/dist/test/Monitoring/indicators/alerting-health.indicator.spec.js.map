{"version":3,"sources":["../../../../../src/test/Monitoring/indicators/alerting-health.indicator.spec.ts"],"sourcesContent":["import type { Alert } from '@microservice/Monitoring/interfaces/monitoring.interface'\r\nimport type { MockedObject } from 'vitest'\nimport { AlertingHealthIndicator } from '@microservice/Monitoring/indicators/alerting-health.indicator'\r\nimport { AlertSeverity } from '@microservice/Monitoring/interfaces/monitoring.interface'\r\nimport { AlertService } from '@microservice/Monitoring/services/alert.service'\r\nimport { HealthIndicatorService } from '@nestjs/terminus'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\ndescribe('alertingHealthIndicator', () => {\r\n\tlet indicator: AlertingHealthIndicator\r\n\tlet alertService: MockedObject<AlertService>\r\n\r\n\tconst mockAlertStats = {\r\n\t\ttotalRules: 5,\r\n\t\tactiveAlerts: 2,\r\n\t\talertsBySeverity: {\r\n\t\t\t[AlertSeverity.LOW]: 0,\r\n\t\t\t[AlertSeverity.MEDIUM]: 1,\r\n\t\t\t[AlertSeverity.HIGH]: 1,\r\n\t\t\t[AlertSeverity.CRITICAL]: 0,\r\n\t\t},\r\n\t\talertsLast24h: 3,\r\n\t\taverageResolutionTime: 300000,\r\n\t}\r\n\r\n\tconst mockActiveAlerts: Alert[] = [\r\n\t\t{\r\n\t\t\tid: 'alert-1',\r\n\t\t\truleId: 'rule-1',\r\n\t\t\truleName: 'High Memory Usage',\r\n\t\t\tmessage: 'Memory usage is above threshold',\r\n\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tresolved: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'alert-2',\r\n\t\t\truleId: 'rule-2',\r\n\t\t\truleName: 'Slow Response Time',\r\n\t\t\tmessage: 'Response time is above threshold',\r\n\t\t\tseverity: AlertSeverity.MEDIUM,\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tresolved: false,\r\n\t\t},\r\n\t]\r\n\r\n\tconst mockCriticalAlerts: Alert[] = [\r\n\t\t{\r\n\t\t\tid: 'critical-alert-1',\r\n\t\t\truleId: 'critical-rule-1',\r\n\t\t\truleName: 'Critical Memory Usage',\r\n\t\t\tmessage: 'Memory usage is critically high',\r\n\t\t\tseverity: AlertSeverity.CRITICAL,\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tresolved: false,\r\n\t\t},\r\n\t]\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockAlertService = {\r\n\t\t\tgetAlertStats: vi.fn().mockReturnValue(mockAlertStats),\r\n\t\t\tgetActiveAlerts: vi.fn().mockReturnValue(mockActiveAlerts),\r\n\t\t\tgetAlertHistory: vi.fn().mockReturnValue([]),\r\n\t\t}\r\n\r\n\t\tconst mockHealthIndicatorService = {\r\n\t\t\tcheck: vi.fn(key => ({\r\n\t\t\t\tup: vi.fn(details => ({\r\n\t\t\t\t\t[key]: {\r\n\t\t\t\t\t\tstatus: 'up',\r\n\t\t\t\t\t\t...details,\r\n\t\t\t\t\t},\r\n\t\t\t\t})),\r\n\t\t\t\tdown: vi.fn(details => ({\r\n\t\t\t\t\t[key]: {\r\n\t\t\t\t\t\tstatus: 'down',\r\n\t\t\t\t\t\t...details,\r\n\t\t\t\t\t},\r\n\t\t\t\t})),\r\n\t\t\t})),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tAlertingHealthIndicator,\r\n\t\t\t\t{ provide: AlertService, useValue: mockAlertService },\r\n\t\t\t\t{ provide: HealthIndicatorService, useValue: mockHealthIndicatorService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tindicator = module.get<AlertingHealthIndicator>(AlertingHealthIndicator)\r\n\t\talertService = module.get(AlertService)\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(indicator).toBeDefined()\r\n\t})\r\n\r\n\tdescribe('isHealthy', () => {\r\n\t\tit('should return healthy status when no critical alerts', async () => {\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('alerting')\r\n\t\t\texpect(result.alerting.status).toBe('up')\r\n\t\t\texpect(result.alerting).toHaveProperty('totalRules', 5)\r\n\t\t\texpect(result.alerting).toHaveProperty('activeAlerts', 2)\r\n\t\t\texpect(result.alerting).toHaveProperty('criticalAlerts', 0)\r\n\t\t\texpect(result.alerting).toHaveProperty('highAlerts', 1)\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when critical alerts exist', async () => {\r\n\t\t\tconst criticalAlertStats = {\r\n\t\t\t\t...mockAlertStats,\r\n\t\t\t\talertsBySeverity: {\r\n\t\t\t\t\t...mockAlertStats.alertsBySeverity,\r\n\t\t\t\t\t[AlertSeverity.CRITICAL]: 1,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\r\n\t\t\talertService.getAlertStats.mockReturnValue(criticalAlertStats)\r\n\t\t\talertService.getActiveAlerts.mockReturnValue(mockCriticalAlerts)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.alerting.status).toBe('down')\r\n\t\t\texpect(result.alerting.message).toContain('critical alerts active')\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when too many high alerts', async () => {\r\n\t\t\tconst manyHighAlerts: Alert[] = [\r\n\t\t\t\t...mockActiveAlerts,\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'high-alert-2',\r\n\t\t\t\t\truleId: 'high-rule-2',\r\n\t\t\t\t\truleName: 'High CPU Usage',\r\n\t\t\t\t\tmessage: 'CPU usage is high',\r\n\t\t\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\t\tresolved: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'high-alert-3',\r\n\t\t\t\t\truleId: 'high-rule-3',\r\n\t\t\t\t\truleName: 'High Disk Usage',\r\n\t\t\t\t\tmessage: 'Disk usage is high',\r\n\t\t\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\t\tresolved: false,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\r\n\t\t\tconst highAlertStats = {\r\n\t\t\t\t...mockAlertStats,\r\n\t\t\t\tactiveAlerts: 4,\r\n\t\t\t\talertsBySeverity: {\r\n\t\t\t\t\t...mockAlertStats.alertsBySeverity,\r\n\t\t\t\t\t[AlertSeverity.HIGH]: 3,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\r\n\t\t\talertService.getAlertStats.mockReturnValue(highAlertStats)\r\n\t\t\talertService.getActiveAlerts.mockReturnValue(manyHighAlerts)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.alerting.status).toBe('down')\r\n\t\t\texpect(result.alerting.message).toContain('high severity alerts active')\r\n\t\t})\r\n\r\n\t\tit('should use custom key', async () => {\r\n\t\t\tconst result = await indicator.isHealthy('custom-alerting')\r\n\r\n\t\t\texpect(result).toHaveProperty('custom-alerting')\r\n\t\t})\r\n\r\n\t\tit('should handle alerting service errors', async () => {\r\n\t\t\talertService.getAlertStats.mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Alert service unavailable')\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.alerting.status).toBe('down')\r\n\t\t\texpect(result.alerting.message).toBe('Alerting health check failed')\r\n\t\t})\r\n\r\n\t\tit('should include recent critical alerts in response', async () => {\r\n\t\t\talertService.getActiveAlerts.mockReturnValue(mockCriticalAlerts)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.alerting.status).toBe('down')\r\n\t\t\texpect(result.alerting.message).toContain('critical alerts active')\r\n\t\t\texpect(result.alerting.recentCriticalAlerts).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDetailedStatus', () => {\r\n\t\tit('should return detailed status for healthy alerting system', async () => {\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result.healthy).toBe(true)\r\n\t\t\texpect(result.alertStats).toEqual(mockAlertStats)\r\n\t\t\texpect(result.activeAlerts).toEqual(mockActiveAlerts)\r\n\t\t\texpect(result.recentAlerts).toEqual([])\r\n\t\t})\r\n\r\n\t\tit('should return detailed status for unhealthy alerting system', async () => {\r\n\t\t\talertService.getActiveAlerts.mockReturnValue(mockCriticalAlerts)\r\n\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result.healthy).toBe(false)\r\n\t\t\texpect(result.activeAlerts).toEqual(mockCriticalAlerts)\r\n\t\t})\r\n\r\n\t\tit('should handle errors gracefully', async () => {\r\n\t\t\talertService.getAlertStats.mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Service error')\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result.healthy).toBe(false)\r\n\t\t\texpect(result.alertStats).toBeNull()\r\n\t\t\texpect(result.activeAlerts).toEqual([])\r\n\t\t\texpect(result.recentAlerts).toEqual([])\r\n\t\t})\r\n\r\n\t\tit('should include recent alerts in detailed status', async () => {\r\n\t\t\tconst recentAlerts = [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'recent-1',\r\n\t\t\t\t\truleId: 'rule-1',\r\n\t\t\t\t\truleName: 'Recent Alert',\r\n\t\t\t\t\tmessage: 'Recent alert message',\r\n\t\t\t\t\tseverity: AlertSeverity.MEDIUM,\r\n\t\t\t\t\ttimestamp: Date.now() - 60000,\r\n\t\t\t\t\tresolved: true,\r\n\t\t\t\t\tresolvedAt: Date.now() - 30000,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\r\n\t\t\talertService.getAlertHistory.mockReturnValue(recentAlerts)\r\n\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result.recentAlerts).toHaveLength(1)\r\n\t\t\texpect(result.recentAlerts[0]).toEqual(recentAlerts[0])\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getAlertSeverityDistribution', () => {\r\n\t\tit('should return alert severity distribution', () => {\r\n\t\t\tconst distribution = indicator.getAlertSeverityDistribution()\r\n\r\n\t\t\texpect(distribution).toEqual(mockAlertStats.alertsBySeverity)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('checkAlertingSystem', () => {\r\n\t\tit('should check alerting system functionality', async () => {\r\n\t\t\tconst result = await indicator.checkAlertingSystem()\r\n\r\n\t\t\texpect(result.rulesConfigured).toBe(true)\r\n\t\t\texpect(result.alertsProcessing).toBe(true)\r\n\t\t\texpect(result.recentActivity).toBe(true) // Has active alerts in mock\r\n\t\t})\r\n\r\n\t\tit('should detect recent activity', async () => {\r\n\t\t\tconst recentAlerts = [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'recent-1',\r\n\t\t\t\t\truleId: 'rule-1',\r\n\t\t\t\t\truleName: 'Recent Alert',\r\n\t\t\t\t\tmessage: 'Recent alert message',\r\n\t\t\t\t\tseverity: AlertSeverity.MEDIUM,\r\n\t\t\t\t\ttimestamp: Date.now() - 30000,\r\n\t\t\t\t\tresolved: false,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\r\n\t\t\talertService.getAlertHistory.mockReturnValue(recentAlerts)\r\n\r\n\t\t\tconst result = await indicator.checkAlertingSystem()\r\n\r\n\t\t\texpect(result.recentActivity).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should detect when no rules are configured', async () => {\r\n\t\t\talertService.getAlertStats.mockReturnValue({\r\n\t\t\t\t...mockAlertStats,\r\n\t\t\t\ttotalRules: 0,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.checkAlertingSystem()\r\n\r\n\t\t\texpect(result.rulesConfigured).toBe(false)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDescription', () => {\r\n\t\tit('should return indicator description', () => {\r\n\t\t\tconst description = indicator.getDescription()\r\n\r\n\t\t\texpect(description).toBeTruthy()\r\n\t\t\texpect(description).toContain('alerting system')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('key property', () => {\r\n\t\tit('should return correct key', () => {\r\n\t\t\texpect(indicator.key).toBe('alerting')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('edge cases', () => {\r\n\t\tit('should handle empty active alerts', async () => {\r\n\t\t\talertService.getActiveAlerts.mockReturnValue([])\r\n\t\t\talertService.getAlertStats.mockReturnValue({\r\n\t\t\t\t...mockAlertStats,\r\n\t\t\t\tactiveAlerts: 0,\r\n\t\t\t\talertsBySeverity: {\r\n\t\t\t\t\t[AlertSeverity.LOW]: 0,\r\n\t\t\t\t\t[AlertSeverity.MEDIUM]: 0,\r\n\t\t\t\t\t[AlertSeverity.HIGH]: 0,\r\n\t\t\t\t\t[AlertSeverity.CRITICAL]: 0,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.alerting.status).toBeTruthy()\r\n\t\t\texpect(result.alerting.activeAlerts).toBe(0)\r\n\t\t\texpect(result.alerting.criticalAlerts).toBe(0)\r\n\t\t})\r\n\r\n\t\tit('should handle exactly 3 high alerts (boundary case)', async () => {\r\n\t\t\tconst threeHighAlerts: Alert[] = [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'high-1',\r\n\t\t\t\t\truleId: 'rule-1',\r\n\t\t\t\t\truleName: 'High Alert 1',\r\n\t\t\t\t\tmessage: 'High alert 1',\r\n\t\t\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\t\tresolved: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'high-2',\r\n\t\t\t\t\truleId: 'rule-2',\r\n\t\t\t\t\truleName: 'High Alert 2',\r\n\t\t\t\t\tmessage: 'High alert 2',\r\n\t\t\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\t\tresolved: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'high-3',\r\n\t\t\t\t\truleId: 'rule-3',\r\n\t\t\t\t\truleName: 'High Alert 3',\r\n\t\t\t\t\tmessage: 'High alert 3',\r\n\t\t\t\t\tseverity: AlertSeverity.HIGH,\r\n\t\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\t\tresolved: false,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\r\n\t\t\talertService.getActiveAlerts.mockReturnValue(threeHighAlerts)\r\n\r\n\t\t\t// Should be unhealthy with exactly 3 high alerts (threshold is < 3)\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.alerting.status).toBe('down')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["AlertingHealthIndicator","AlertSeverity","AlertService","HealthIndicatorService","Test","beforeEach","describe","expect","it","vi","indicator","alertService","mockAlertStats","totalRules","activeAlerts","alertsBySeverity","LOW","MEDIUM","HIGH","CRITICAL","alertsLast24h","averageResolutionTime","mockActiveAlerts","id","ruleId","ruleName","message","severity","timestamp","Date","now","resolved","mockCriticalAlerts","mockAlertService","getAlertStats","fn","mockReturnValue","getActiveAlerts","getAlertHistory","mockHealthIndicatorService","check","key","up","details","status","down","module","createTestingModule","providers","provide","useValue","compile","get","toBeDefined","result","isHealthy","toHaveProperty","alerting","toBe","criticalAlertStats","toContain","manyHighAlerts","highAlertStats","mockImplementation","Error","recentCriticalAlerts","getDetailedStatus","healthy","alertStats","toEqual","recentAlerts","toBeNull","resolvedAt","toHaveLength","distribution","getAlertSeverityDistribution","checkAlertingSystem","rulesConfigured","alertsProcessing","recentActivity","description","getDescription","toBeTruthy","criticalAlerts","threeHighAlerts"],"mappings":"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"}