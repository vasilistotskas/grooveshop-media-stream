{"version":3,"sources":["../../../../../src/test/Monitoring/indicators/system-health.indicator.spec.ts"],"sourcesContent":["import type { SystemHealth } from '@microservice/Monitoring/interfaces/monitoring.interface'\r\nimport type { MockedObject } from 'vitest'\r\nimport { SystemHealthIndicator } from '@microservice/Monitoring/indicators/system-health.indicator'\r\nimport { MonitoringService } from '@microservice/Monitoring/services/monitoring.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('systemHealthIndicator', () => {\r\n\tlet indicator: SystemHealthIndicator\r\n\tlet monitoringService: MockedObject<MonitoringService>\r\n\r\n\tconst mockHealthySystem: SystemHealth = {\r\n\t\tstatus: 'healthy',\r\n\t\ttimestamp: Date.now(),\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\tname: 'memory',\r\n\t\t\t\tstatus: 'healthy',\r\n\t\t\t\tscore: 85,\r\n\t\t\t\tmetrics: { usagePercent: 65 },\r\n\t\t\t\tlastCheck: Date.now(),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'disk',\r\n\t\t\t\tstatus: 'healthy',\r\n\t\t\t\tscore: 90,\r\n\t\t\t\tmetrics: { usagePercent: 45 },\r\n\t\t\t\tlastCheck: Date.now(),\r\n\t\t\t},\r\n\t\t],\r\n\t\toverallScore: 87.5,\r\n\t}\r\n\r\n\tconst mockUnhealthySystem: SystemHealth = {\r\n\t\tstatus: 'unhealthy',\r\n\t\ttimestamp: Date.now(),\r\n\t\tcomponents: [\r\n\t\t\t{\r\n\t\t\t\tname: 'memory',\r\n\t\t\t\tstatus: 'unhealthy',\r\n\t\t\t\tscore: 30,\r\n\t\t\t\tmetrics: { usagePercent: 95 },\r\n\t\t\t\tlastCheck: Date.now(),\r\n\t\t\t},\r\n\t\t],\r\n\t\toverallScore: 30,\r\n\t}\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockMonitoringService = {\r\n\t\t\tgetSystemHealth: vi.fn().mockResolvedValue(mockHealthySystem),\r\n\t\t\tgetStats: vi.fn().mockReturnValue({\r\n\t\t\t\ttotalMetrics: 100,\r\n\t\t\t\tmetricTypes: { counter: 50, gauge: 30, timer: 20 },\r\n\t\t\t\toldestMetric: Date.now() - 86400000,\r\n\t\t\t\tnewestMetric: Date.now(),\r\n\t\t\t\tmemoryUsage: 1024000,\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tSystemHealthIndicator,\r\n\t\t\t\t{ provide: MonitoringService, useValue: mockMonitoringService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tindicator = module.get<SystemHealthIndicator>(SystemHealthIndicator)\r\n\t\tmonitoringService = module.get(MonitoringService)\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(indicator).toBeDefined()\r\n\t})\r\n\r\n\tdescribe('isHealthy', () => {\r\n\t\tit('should return healthy status for healthy system', async () => {\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('system')\r\n\t\t\texpect(result.system.status).toBeTruthy()\r\n\t\t\texpect(result.system).toHaveProperty('overallScore', 87.5)\r\n\t\t\texpect(result.system).toHaveProperty('components')\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status for unhealthy system', async () => {\r\n\t\t\tmonitoringService.getSystemHealth.mockResolvedValue(mockUnhealthySystem)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.system.status).toBe('down')\r\n\t\t})\r\n\r\n\t\tit('should use system key', async () => {\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('system')\r\n\t\t})\r\n\r\n\t\tit('should handle monitoring service errors', async () => {\r\n\t\t\tmonitoringService.getSystemHealth.mockRejectedValue(new Error('Service unavailable'))\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.system.status).toBe('down')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDetailedStatus', () => {\r\n\t\tit('should return detailed status for healthy system', async () => {\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result.healthy).toBe(true)\r\n\t\t\texpect(result.systemHealth).toEqual(mockHealthySystem)\r\n\t\t\texpect(result.monitoringStats).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should return detailed status for unhealthy system', async () => {\r\n\t\t\tmonitoringService.getSystemHealth.mockResolvedValue(mockUnhealthySystem)\r\n\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result.healthy).toBe(false)\r\n\t\t\texpect(result.systemHealth).toEqual(mockUnhealthySystem)\r\n\t\t})\r\n\r\n\t\tit('should handle errors gracefully', async () => {\r\n\t\t\tmonitoringService.getSystemHealth.mockRejectedValue(new Error('Service error'))\r\n\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result.healthy).toBe(false)\r\n\t\t\texpect(result.systemHealth).toBeNull()\r\n\t\t\texpect(result.monitoringStats).toBeNull()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getComponentHealth', () => {\r\n\t\tit('should return specific component health', async () => {\r\n\t\t\tconst result = await indicator.getComponentHealth('memory')\r\n\r\n\t\t\texpect(result).toBeDefined()\r\n\t\t\texpect(result.name).toBe('memory')\r\n\t\t\texpect(result.status).toBe('healthy')\r\n\t\t\texpect(result.score).toBe(85)\r\n\t\t})\r\n\r\n\t\tit('should return undefined for non-existent component', async () => {\r\n\t\t\tconst result = await indicator.getComponentHealth('non-existent')\r\n\r\n\t\t\texpect(result).toBeUndefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDescription', () => {\r\n\t\tit('should return indicator description', () => {\r\n\t\t\tconst details = indicator.getDetails()\r\n\t\t\tconst description = details.description\r\n\r\n\t\t\texpect(description).toBeTruthy()\r\n\t\t\texpect(description).toContain('system health')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('key property', () => {\r\n\t\tit('should return correct key', () => {\r\n\t\t\texpect(indicator.key).toBe('system')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('degraded system status', () => {\r\n\t\tit('should handle degraded system status', async () => {\r\n\t\t\tconst mockDegradedSystem: SystemHealth = {\r\n\t\t\t\tstatus: 'degraded',\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'memory',\r\n\t\t\t\t\t\tstatus: 'degraded',\r\n\t\t\t\t\t\tscore: 65,\r\n\t\t\t\t\t\tmetrics: { usagePercent: 75 },\r\n\t\t\t\t\t\tlastCheck: Date.now(),\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t\toverallScore: 65,\r\n\t\t\t}\r\n\r\n\t\t\tmonitoringService.getSystemHealth.mockResolvedValue(mockDegradedSystem)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.system.status).toBe('down')\r\n\r\n\t\t\tconst detailedStatus = await indicator.getDetailedStatus()\r\n\t\t\texpect(detailedStatus.healthy).toBe(false)\r\n\t\t\texpect(detailedStatus.systemHealth.status).toBe('degraded')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('component status variations', () => {\r\n\t\tit('should handle mixed component statuses', async () => {\r\n\t\t\tconst mockMixedSystem: SystemHealth = {\r\n\t\t\t\tstatus: 'degraded',\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tcomponents: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'memory',\r\n\t\t\t\t\t\tstatus: 'healthy',\r\n\t\t\t\t\t\tscore: 85,\r\n\t\t\t\t\t\tmetrics: { usagePercent: 65 },\r\n\t\t\t\t\t\tlastCheck: Date.now(),\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'disk',\r\n\t\t\t\t\t\tstatus: 'degraded',\r\n\t\t\t\t\t\tscore: 60,\r\n\t\t\t\t\t\tmetrics: { usagePercent: 80 },\r\n\t\t\t\t\t\tlastCheck: Date.now(),\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'network',\r\n\t\t\t\t\t\tstatus: 'unhealthy',\r\n\t\t\t\t\t\tscore: 20,\r\n\t\t\t\t\t\tmetrics: { latencyMs: 5000 },\r\n\t\t\t\t\t\tlastCheck: Date.now(),\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t\toverallScore: 55,\r\n\t\t\t}\r\n\r\n\t\t\tmonitoringService.getSystemHealth.mockResolvedValue(mockMixedSystem)\r\n\r\n\t\t\tconst result = await indicator.getComponentHealth('network')\r\n\t\t\texpect(result.status).toBe('unhealthy')\r\n\t\t\texpect(result.score).toBe(20)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["SystemHealthIndicator","MonitoringService","Test","beforeEach","describe","expect","it","vi","indicator","monitoringService","mockHealthySystem","status","timestamp","Date","now","components","name","score","metrics","usagePercent","lastCheck","overallScore","mockUnhealthySystem","mockMonitoringService","getSystemHealth","fn","mockResolvedValue","getStats","mockReturnValue","totalMetrics","metricTypes","counter","gauge","timer","oldestMetric","newestMetric","memoryUsage","module","createTestingModule","providers","provide","useValue","compile","get","toBeDefined","result","isHealthy","toHaveProperty","system","toBeTruthy","toBe","mockRejectedValue","Error","getDetailedStatus","healthy","systemHealth","toEqual","monitoringStats","toBeNull","getComponentHealth","toBeUndefined","details","getDetails","description","toContain","key","mockDegradedSystem","detailedStatus","mockMixedSystem","latencyMs"],"mappings":"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"}