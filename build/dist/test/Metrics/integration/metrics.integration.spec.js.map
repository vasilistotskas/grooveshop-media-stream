{"version":3,"sources":["../../../../../src/test/Metrics/integration/metrics.integration.spec.ts"],"sourcesContent":["import type { INestApplication } from '@nestjs/common'\r\nimport { ConfigModule } from '@microservice/Config/config.module'\r\nimport { MetricsModule } from '@microservice/Metrics/metrics.module'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport request from 'supertest'\r\nimport { afterAll, beforeAll, beforeEach, describe, expect, it } from 'vitest'\r\nimport 'reflect-metadata'\n\r\ndescribe('metrics Integration', () => {\r\n\tlet app: INestApplication\r\n\tlet metricsService: MetricsService\r\n\r\n\tbeforeAll(async () => {\r\n\t\tconst moduleFixture: TestingModule = await Test.createTestingModule({\r\n\t\t\timports: [ConfigModule, MetricsModule],\r\n\t\t}).compile()\r\n\r\n\t\tapp = moduleFixture.createNestApplication()\r\n\t\tmetricsService = moduleFixture.get<MetricsService>(MetricsService)\r\n\r\n\t\tawait app.init()\r\n\t})\r\n\r\n\tbeforeEach(() => {\r\n\t\t// Reset metrics before each test\r\n\t\tmetricsService.reset()\r\n\t})\r\n\r\n\tafterAll(async () => {\r\n\t\t// Add delay to allow pending requests to complete\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 100))\r\n\r\n\t\tif (app) {\r\n\t\t\tawait app.close()\r\n\t\t}\r\n\t})\r\n\r\n\tdescribe('metrics Endpoint', () => {\r\n\t\tit('should expose metrics at /metrics endpoint', async () => {\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.headers['content-type']).toContain('text/plain')\r\n\t\t\texpect(response.text).toContain('# HELP')\r\n\t\t\texpect(response.text).toContain('# TYPE')\r\n\t\t\texpect(response.text).toContain('mediastream_')\r\n\t\t})\r\n\r\n\t\tit('should include default Node.js metrics', async () => {\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.text).toContain('mediastream_nodejs_')\r\n\t\t\texpect(response.text).toContain('process_')\r\n\t\t})\r\n\r\n\t\tit('should track HTTP requests automatically', async () => {\r\n\t\t\t// Make a request to generate metrics\r\n\t\t\tawait request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics/health')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\t// Check that the request was tracked\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.text).toContain('mediastream_http_requests_total')\r\n\t\t\texpect(response.text).toContain('method=\"GET\"')\r\n\t\t\texpect(response.text).toContain('status_code=\"200\"')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('metrics Health Endpoint', () => {\r\n\t\tit('should provide health status at /metrics/health', async () => {\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics/health')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.body).toEqual({\r\n\t\t\t\tstatus: 'healthy',\r\n\t\t\t\ttimestamp: expect.any(Number),\r\n\t\t\t\tservice: 'metrics',\r\n\t\t\t\tregistry: {\r\n\t\t\t\t\tmetricsCount: expect.any(Number),\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('custom Metrics Recording', () => {\r\n\t\tit('should record and expose custom HTTP metrics', async () => {\r\n\t\t\t// Record some custom metrics\r\n\t\t\tmetricsService.recordHttpRequest('POST', '/api/test', 201, 0.5, 1024, 2048)\r\n\t\t\tmetricsService.recordHttpRequest('GET', '/api/test', 200, 0.2)\r\n\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.text).toContain('mediastream_http_requests_total')\r\n\t\t\texpect(response.text).toContain('mediastream_http_request_duration_seconds')\r\n\t\t\texpect(response.text).toContain('method=\"POST\"')\r\n\t\t\texpect(response.text).toContain('method=\"GET\"')\r\n\t\t\texpect(response.text).toContain('route=\"/api/test\"')\r\n\t\t\texpect(response.text).toContain('status_code=\"201\"')\r\n\t\t\texpect(response.text).toContain('status_code=\"200\"')\r\n\t\t})\r\n\r\n\t\tit('should record and expose cache metrics', async () => {\r\n\t\t\tmetricsService.recordCacheOperation('get', 'memory', 'hit', 0.01)\r\n\t\t\tmetricsService.recordCacheOperation('set', 'redis', 'success', 0.05)\r\n\t\t\tmetricsService.updateCacheHitRatio('memory', 0.85)\r\n\t\t\tmetricsService.updateCacheSize('memory', 1024000)\r\n\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.text).toContain('mediastream_cache_operations_total')\r\n\t\t\texpect(response.text).toContain('mediastream_cache_operation_duration_seconds')\r\n\t\t\texpect(response.text).toContain('mediastream_cache_hit_ratio')\r\n\t\t\texpect(response.text).toContain('mediastream_cache_size_bytes')\r\n\t\t\texpect(response.text).toContain('cache_type=\"memory\"')\r\n\t\t\texpect(response.text).toContain('cache_type=\"redis\"')\r\n\t\t})\r\n\r\n\t\tit('should record and expose image processing metrics', async () => {\r\n\t\t\tmetricsService.recordImageProcessing('resize', 'webp', 'success', 2.5)\r\n\t\t\tmetricsService.recordImageProcessing('convert', 'jpg', 'error', 0.1)\r\n\t\t\tmetricsService.updateImageProcessingQueueSize(3)\r\n\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.text).toContain('mediastream_image_processing_total')\r\n\t\t\texpect(response.text).toContain('mediastream_image_processing_duration_seconds')\r\n\t\t\texpect(response.text).toContain('mediastream_image_processing_queue_size')\r\n\t\t\texpect(response.text).toContain('mediastream_image_processing_errors_total')\r\n\t\t\texpect(response.text).toContain('operation=\"resize\"')\r\n\t\t\texpect(response.text).toContain('operation=\"convert\"')\r\n\t\t\texpect(response.text).toContain('format=\"webp\"')\r\n\t\t\texpect(response.text).toContain('format=\"jpg\"')\r\n\t\t})\r\n\r\n\t\tit('should record and expose system metrics', async () => {\r\n\t\t\tmetricsService.updateMemoryMetrics({\r\n\t\t\t\trss: 100 * 1024 * 1024,\r\n\t\t\t\theapTotal: 50 * 1024 * 1024,\r\n\t\t\t\theapUsed: 30 * 1024 * 1024,\r\n\t\t\t\texternal: 10 * 1024 * 1024,\r\n\t\t\t})\r\n\t\t\tmetricsService.updateCpuUsage(45.5, 12.3)\r\n\t\t\tmetricsService.updateLoadAverage(1.2, 1.5, 1.8)\r\n\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.text).toContain('mediastream_memory_usage_bytes')\r\n\t\t\texpect(response.text).toContain('mediastream_cpu_usage_percent')\r\n\t\t\texpect(response.text).toContain('mediastream_load_average')\r\n\t\t\texpect(response.text).toContain('type=\"rss\"')\r\n\t\t\texpect(response.text).toContain('type=\"user\"')\r\n\t\t\texpect(response.text).toContain('period=\"1m\"')\r\n\t\t})\r\n\r\n\t\tit('should record and expose error metrics', async () => {\r\n\t\t\tmetricsService.recordError('validation', 'image_processing')\r\n\t\t\tmetricsService.recordError('network', 'external_request')\r\n\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.text).toContain('mediastream_errors_total')\r\n\t\t\texpect(response.text).toContain('type=\"validation\"')\r\n\t\t\texpect(response.text).toContain('type=\"network\"')\r\n\t\t\texpect(response.text).toContain('operation=\"image_processing\"')\r\n\t\t\texpect(response.text).toContain('operation=\"external_request\"')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('requests in Flight Tracking', () => {\r\n\t\tit('should track requests in flight during concurrent requests', async () => {\r\n\t\t\t// Use sequential requests instead of concurrent to avoid ECONNRESET\r\n\t\t\tconst requestCount = process.env.CI ? 3 : 5\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Make sequential requests with small delays to avoid overwhelming the server\r\n\t\t\t\tfor (let i = 0; i < requestCount; i++) {\r\n\t\t\t\t\tawait request(app.getHttpServer())\r\n\t\t\t\t\t\t.get('/metrics/health')\r\n\t\t\t\t\t\t.timeout(5000)\r\n\t\t\t\t\t\t.expect(200)\r\n\r\n\t\t\t\t\t// Small delay between requests\r\n\t\t\t\t\tif (i < requestCount - 1) {\r\n\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 50))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add delay before checking metrics\r\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 100))\r\n\r\n\t\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t\t.get('/metrics')\r\n\t\t\t\t\t.timeout(5000)\r\n\t\t\t\t\t.expect(200)\r\n\r\n\t\t\t\texpect(response.text).toContain('mediastream_requests_in_flight')\r\n\t\t\t}\r\n\t\t\tcatch (error) {\r\n\t\t\t\tconsole.error('Requests in flight test failed:', error)\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t}, 15000) // Increase timeout for this test\r\n\t})\r\n\r\n\tdescribe('performance Metrics', () => {\r\n\t\tit('should record performance metrics', async () => {\r\n\t\t\tmetricsService.recordGarbageCollection('major', 0.05)\r\n\t\t\tmetricsService.recordEventLoopLag(0.02)\r\n\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\texpect(response.text).toContain('mediastream_gc_duration_seconds')\r\n\t\t\texpect(response.text).toContain('mediastream_event_loop_lag_seconds')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('metrics Format Validation', () => {\r\n\t\tit('should return valid Prometheus format', async () => {\r\n\t\t\t// Record some metrics to ensure we have data\r\n\t\t\tmetricsService.recordHttpRequest('GET', '/test', 200, 0.1)\r\n\t\t\tmetricsService.recordError('test', 'validation')\r\n\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/metrics')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\tconst lines = response.text.split('\\n')\r\n\r\n\t\t\t// Check for proper Prometheus format\r\n\t\t\tconst helpLines = lines.filter(line => line.startsWith('# HELP'))\r\n\t\t\tconst typeLines = lines.filter(line => line.startsWith('# TYPE'))\r\n\t\t\tconst metricLines = lines.filter(line => line && !line.startsWith('#'))\r\n\r\n\t\t\texpect(helpLines.length).toBeGreaterThan(0)\r\n\t\t\texpect(typeLines.length).toBeGreaterThan(0)\r\n\t\t\texpect(metricLines.length).toBeGreaterThan(0)\r\n\r\n\t\t\t// Validate metric line format (basic check)\r\n\t\t\tmetricLines.forEach((line) => {\r\n\t\t\t\tif (line.trim() && !line.includes('Nan') && !line.includes('Infinity')) {\r\n\t\t\t\t\t// Allow scientific notation (e.g., 5.11e-7) and regular numbers\r\n\t\t\t\t\texpect(line).toMatch(/^[a-z_:][\\w:]*(\\{[^}]*\\})?\\s+[0-9.-]+(e[+-]?\\d+)?(\\s+\\d+)?$/i)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigModule","MetricsModule","MetricsService","Test","request","afterAll","beforeAll","beforeEach","describe","expect","it","app","metricsService","moduleFixture","createTestingModule","imports","compile","createNestApplication","get","init","reset","Promise","resolve","setTimeout","close","response","getHttpServer","headers","toContain","text","body","toEqual","status","timestamp","any","Number","service","registry","metricsCount","recordHttpRequest","recordCacheOperation","updateCacheHitRatio","updateCacheSize","recordImageProcessing","updateImageProcessingQueueSize","updateMemoryMetrics","rss","heapTotal","heapUsed","external","updateCpuUsage","updateLoadAverage","recordError","requestCount","process","env","CI","i","timeout","error","console","recordGarbageCollection","recordEventLoopLag","lines","split","helpLines","filter","line","startsWith","typeLines","metricLines","length","toBeGreaterThan","forEach","trim","includes","toMatch"],"mappings":"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"}