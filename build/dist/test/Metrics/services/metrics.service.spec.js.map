{"version":3,"sources":["../../../../../src/test/Metrics/services/metrics.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\nimport 'reflect-metadata'\n\r\ndescribe('metricsService', () => {\r\n\tlet service: MetricsService\r\n\tlet configService: MockedObject<ConfigService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn((key: string) => {\r\n\t\t\t\tif (key === 'monitoring.enabled')\r\n\t\t\t\t\treturn true\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tMetricsService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<MetricsService>(MetricsService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\t// Stop metrics collection to prevent open handles\r\n\t\tif (service && typeof service.stopMetricsCollection === 'function') {\r\n\t\t\tservice.stopMetricsCollection()\r\n\t\t}\r\n\t\t// Reset metrics after each test\r\n\t\tservice.reset()\r\n\t})\r\n\r\n\tdescribe('initialization', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(service).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should initialize with monitoring enabled', async () => {\r\n\t\t\tawait service.onModuleInit()\r\n\t\t\texpect(configService.get).toHaveBeenCalledWith('monitoring.enabled')\r\n\t\t\t// Clean up intervals immediately after test\r\n\t\t\tif (service && typeof service.stopMetricsCollection === 'function') {\r\n\t\t\t\tservice.stopMetricsCollection()\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should provide metrics registry', () => {\r\n\t\t\tconst registry = service.getRegistry()\r\n\t\t\texpect(registry).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('hTTP Metrics', () => {\r\n\t\tit('should record HTTP request metrics', async () => {\r\n\t\t\tservice.recordHttpRequest('GET', '/test', 200, 0.5)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_http_requests_total')\r\n\t\t\texpect(metrics).toContain('mediastream_http_request_duration_seconds')\r\n\t\t\texpect(metrics).toContain('method=\"GET\"')\r\n\t\t\texpect(metrics).toContain('route=\"/test\"')\r\n\t\t\texpect(metrics).toContain('status_code=\"200\"')\r\n\t\t})\r\n\r\n\t\tit('should record HTTP request with size metrics', async () => {\r\n\t\t\tservice.recordHttpRequest('POST', '/api/upload', 201, 1.2, 1024, 2048)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_http_request_size_bytes')\r\n\t\t\texpect(metrics).toContain('mediastream_http_response_size_bytes')\r\n\t\t\texpect(metrics).toContain('method=\"POST\"')\r\n\t\t\texpect(metrics).toContain('route=\"/api/upload\"')\r\n\t\t\texpect(metrics).toContain('status_code=\"201\"')\r\n\t\t})\r\n\r\n\t\tit('should record multiple HTTP requests', async () => {\r\n\t\t\tservice.recordHttpRequest('GET', '/test', 200, 0.5)\r\n\t\t\tservice.recordHttpRequest('POST', '/api', 201, 1.2)\r\n\t\t\tservice.recordHttpRequest('GET', '/test', 404, 0.3)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('method=\"GET\"')\r\n\t\t\texpect(metrics).toContain('method=\"POST\"')\r\n\t\t\texpect(metrics).toContain('status_code=\"200\"')\r\n\t\t\texpect(metrics).toContain('status_code=\"201\"')\r\n\t\t\texpect(metrics).toContain('status_code=\"404\"')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('image Processing Metrics', () => {\r\n\t\tit('should record image processing metrics', async () => {\r\n\t\t\tservice.recordImageProcessing('resize', 'webp', 'success', 2.5)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_image_processing_total')\r\n\t\t\texpect(metrics).toContain('mediastream_image_processing_duration_seconds')\r\n\t\t\texpect(metrics).toContain('operation=\"resize\"')\r\n\t\t\texpect(metrics).toContain('format=\"webp\"')\r\n\t\t\texpect(metrics).toContain('status=\"success\"')\r\n\t\t})\r\n\r\n\t\tit('should record failed image processing', async () => {\r\n\t\t\tservice.recordImageProcessing('convert', 'jpg', 'error', 0.1)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('operation=\"convert\"')\r\n\t\t\texpect(metrics).toContain('format=\"jpg\"')\r\n\t\t\texpect(metrics).toContain('status=\"error\"')\r\n\t\t\texpect(metrics).toContain('mediastream_image_processing_errors_total')\r\n\t\t})\r\n\r\n\t\tit('should update image processing queue size', async () => {\r\n\t\t\tservice.updateImageProcessingQueueSize(5)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_image_processing_queue_size')\r\n\t\t})\r\n\r\n\t\tit('should record image processing errors', async () => {\r\n\t\t\tservice.recordImageProcessingError('resize', 'invalid_format')\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_image_processing_errors_total')\r\n\t\t\texpect(metrics).toContain('error_type=\"invalid_format\"')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('cache Metrics', () => {\r\n\t\tit('should record cache operations', async () => {\r\n\t\t\tservice.recordCacheOperation('get', 'memory', 'hit')\r\n\t\t\tservice.recordCacheOperation('set', 'redis', 'success')\r\n\t\t\tservice.recordCacheOperation('get', 'file', 'miss')\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_cache_operations_total')\r\n\t\t\texpect(metrics).toContain('operation=\"get\"')\r\n\t\t\texpect(metrics).toContain('operation=\"set\"')\r\n\t\t\texpect(metrics).toContain('cache_type=\"memory\"')\r\n\t\t\texpect(metrics).toContain('cache_type=\"redis\"')\r\n\t\t\texpect(metrics).toContain('cache_type=\"file\"')\r\n\t\t\texpect(metrics).toContain('status=\"hit\"')\r\n\t\t\texpect(metrics).toContain('status=\"miss\"')\r\n\t\t\texpect(metrics).toContain('status=\"success\"')\r\n\t\t})\r\n\r\n\t\tit('should record cache operations with duration', async () => {\r\n\t\t\tservice.recordCacheOperation('get', 'memory', 'hit', 0.05)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_cache_operation_duration_seconds')\r\n\t\t})\r\n\r\n\t\tit('should record cache evictions', async () => {\r\n\t\t\tservice.recordCacheEviction('memory', 'size')\r\n\t\t\tservice.recordCacheEviction('redis', 'ttl')\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_cache_evictions_total')\r\n\t\t\texpect(metrics).toContain('reason=\"size\"')\r\n\t\t\texpect(metrics).toContain('reason=\"ttl\"')\r\n\t\t})\r\n\r\n\t\tit('should update cache size', async () => {\r\n\t\t\tservice.updateCacheSize('memory', 1024000)\r\n\t\t\tservice.updateCacheSize('redis', 2048000)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_cache_size_bytes')\r\n\t\t})\r\n\r\n\t\tit('should update cache hit ratio', async () => {\r\n\t\t\tservice.updateCacheHitRatio('memory', 0.85)\r\n\t\t\tservice.updateCacheHitRatio('redis', 0.92)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_cache_hit_ratio')\r\n\t\t\texpect(metrics).toContain('cache_type=\"memory\"')\r\n\t\t\texpect(metrics).toContain('cache_type=\"redis\"')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error Metrics', () => {\r\n\t\tit('should record error metrics', async () => {\r\n\t\t\tservice.recordError('validation', 'image_processing')\r\n\t\t\tservice.recordError('network', 'external_request')\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_errors_total')\r\n\t\t\texpect(metrics).toContain('type=\"validation\"')\r\n\t\t\texpect(metrics).toContain('type=\"network\"')\r\n\t\t\texpect(metrics).toContain('operation=\"image_processing\"')\r\n\t\t\texpect(metrics).toContain('operation=\"external_request\"')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('system Metrics', () => {\r\n\t\tit('should update memory metrics', async () => {\r\n\t\t\tconst memoryInfo = {\r\n\t\t\t\trss: 100 * 1024 * 1024, // 100MB\r\n\t\t\t\theapTotal: 50 * 1024 * 1024, // 50MB\r\n\t\t\t\theapUsed: 30 * 1024 * 1024, // 30MB\r\n\t\t\t\texternal: 10 * 1024 * 1024, // 10MB\r\n\t\t\t}\r\n\r\n\t\t\tservice.updateMemoryMetrics(memoryInfo)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_memory_usage_bytes')\r\n\t\t\texpect(metrics).toContain('type=\"rss\"')\r\n\t\t\texpect(metrics).toContain('type=\"heap_total\"')\r\n\t\t\texpect(metrics).toContain('type=\"heap_used\"')\r\n\t\t\texpect(metrics).toContain('type=\"external\"')\r\n\t\t})\r\n\r\n\t\tit('should update disk space metrics', async () => {\r\n\t\t\tservice.updateDiskSpaceMetrics('/storage', 1000000000, 600000000, 400000000)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_disk_space_usage_bytes')\r\n\t\t\texpect(metrics).toContain('type=\"total\"')\r\n\t\t\texpect(metrics).toContain('type=\"used\"')\r\n\t\t\texpect(metrics).toContain('type=\"free\"')\r\n\t\t\texpect(metrics).toContain('path=\"/storage\"')\r\n\t\t})\r\n\r\n\t\tit('should update active connections', async () => {\r\n\t\t\tservice.updateActiveConnections('http', 25)\r\n\t\t\tservice.updateActiveConnections('redis', 5)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_active_connections')\r\n\t\t\texpect(metrics).toContain('type=\"http\"')\r\n\t\t\texpect(metrics).toContain('type=\"redis\"')\r\n\t\t})\r\n\r\n\t\tit('should update CPU usage metrics', async () => {\r\n\t\t\tservice.updateCpuUsage(45.5, 12.3)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_cpu_usage_percent')\r\n\t\t\texpect(metrics).toContain('type=\"user\"')\r\n\t\t\texpect(metrics).toContain('type=\"system\"')\r\n\t\t\texpect(metrics).toContain('type=\"total\"')\r\n\t\t})\r\n\r\n\t\tit('should update load average metrics', async () => {\r\n\t\t\tservice.updateLoadAverage(1.2, 1.5, 1.8)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_load_average')\r\n\t\t\texpect(metrics).toContain('period=\"1m\"')\r\n\t\t\texpect(metrics).toContain('period=\"5m\"')\r\n\t\t\texpect(metrics).toContain('period=\"15m\"')\r\n\t\t})\r\n\r\n\t\tit('should update file descriptor metrics', async () => {\r\n\t\t\tservice.updateFileDescriptors(1024, 65536)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_file_descriptors')\r\n\t\t\texpect(metrics).toContain('type=\"open\"')\r\n\t\t\texpect(metrics).toContain('type=\"max\"')\r\n\t\t})\r\n\r\n\t\tit('should update network connection metrics', async () => {\r\n\t\t\tservice.updateNetworkConnections(50, 10, 5)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_network_connections')\r\n\t\t\texpect(metrics).toContain('state=\"established\"')\r\n\t\t\texpect(metrics).toContain('state=\"listening\"')\r\n\t\t\texpect(metrics).toContain('state=\"time_wait\"')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('metrics Export', () => {\r\n\t\tit('should export metrics in Prometheus format', async () => {\r\n\t\t\tservice.recordHttpRequest('GET', '/test', 200, 0.5)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(typeof metrics).toBe('string')\r\n\t\t\texpect(metrics).toContain('# HELP')\r\n\t\t\texpect(metrics).toContain('# TYPE')\r\n\t\t\texpect(metrics).toContain('mediastream_')\r\n\t\t})\r\n\r\n\t\tit('should include default Node.js metrics', async () => {\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_nodejs_')\r\n\t\t\texpect(metrics).toContain('process_')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('reset Functionality', () => {\r\n\t\tit('should reset all metrics', async () => {\r\n\t\t\tservice.recordHttpRequest('GET', '/test', 200, 0.5)\r\n\t\t\tservice.recordError('test', 'operation')\r\n\r\n\t\t\tlet metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_http_requests_total')\r\n\t\t\texpect(metrics).toContain('mediastream_errors_total')\r\n\r\n\t\t\tservice.reset()\r\n\r\n\t\t\tmetrics = await service.getMetrics()\r\n\t\t\t// After reset, counters should be back to 0 or not present\r\n\t\t\texpect(metrics).not.toContain('mediastream_http_requests_total{')\r\n\t\t\texpect(metrics).not.toContain('mediastream_errors_total{')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('performance Metrics', () => {\r\n\t\tit('should record garbage collection metrics', async () => {\r\n\t\t\tservice.recordGarbageCollection('major', 0.05)\r\n\t\t\tservice.recordGarbageCollection('minor', 0.01)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_gc_duration_seconds')\r\n\t\t\texpect(metrics).toContain('type=\"major\"')\r\n\t\t\texpect(metrics).toContain('type=\"minor\"')\r\n\t\t})\r\n\r\n\t\tit('should record event loop lag', async () => {\r\n\t\t\tservice.recordEventLoopLag(0.02)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_event_loop_lag_seconds')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('requests In Flight Tracking', () => {\r\n\t\tit('should track requests in flight', async () => {\r\n\t\t\tservice.incrementRequestsInFlight()\r\n\t\t\tservice.incrementRequestsInFlight()\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_requests_in_flight')\r\n\r\n\t\t\tservice.decrementRequestsInFlight()\r\n\r\n\t\t\tconst updatedMetrics = await service.getMetrics()\r\n\t\t\texpect(updatedMetrics).toContain('mediastream_requests_in_flight')\r\n\t\t})\r\n\r\n\t\tit('should not go below zero for requests in flight', async () => {\r\n\t\t\tservice.decrementRequestsInFlight()\r\n\t\t\tservice.decrementRequestsInFlight()\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_requests_in_flight')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('uptime Tracking', () => {\r\n\t\tit('should track application uptime', async () => {\r\n\t\t\t// Wait a bit to ensure uptime is tracked\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 100))\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_uptime_seconds')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('configuration Integration', () => {\r\n\t\tit('should respect monitoring enabled configuration', async () => {\r\n\t\t\tawait service.onModuleInit()\r\n\t\t\texpect(configService.get).toHaveBeenCalledWith('monitoring.enabled')\r\n\t\t\t// Clean up intervals immediately after test\r\n\t\t\tif (service && typeof service.stopMetricsCollection === 'function') {\r\n\t\t\t\tservice.stopMetricsCollection()\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should handle disabled monitoring', async () => {\r\n\t\t\tconfigService.get.mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'monitoring.enabled')\r\n\t\t\t\t\treturn false\r\n\t\t\t\treturn undefined\r\n\t\t\t})\r\n\r\n\t\t\t// Create new service instance with monitoring disabled\r\n\t\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tMetricsService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: configService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst disabledService = module.get<MetricsService>(MetricsService)\r\n\r\n\t\t\t// Service should still work but may not collect periodic metrics\r\n\t\t\texpect(disabledService).toBeDefined()\r\n\t\t\tconst metrics = await disabledService.getMetrics()\r\n\t\t\texpect(typeof metrics).toBe('string')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error Handling', () => {\r\n\t\tit('should handle errors gracefully when recording errors', () => {\r\n\t\t\texpect(() => {\r\n\t\t\t\tservice.recordError('test_operation', 'test_error')\r\n\t\t\t}).not.toThrow()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('metric Formatting', () => {\r\n\t\tit('should format metrics correctly', async () => {\r\n\t\t\tservice.recordHttpRequest('GET', '/test', 200, 150)\r\n\t\t\tservice.updateMemoryMetrics({\r\n\t\t\t\trss: 100 * 1024 * 1024,\r\n\t\t\t\theapTotal: 50 * 1024 * 1024,\r\n\t\t\t\theapUsed: 30 * 1024 * 1024,\r\n\t\t\t\texternal: 10 * 1024 * 1024,\r\n\t\t\t})\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\r\n\t\t\t// Check that metrics are properly formatted\r\n\t\t\texpect(metrics).toMatch(/^# HELP/)\r\n\t\t\texpect(metrics).toMatch(/^# TYPE/m)\r\n\t\t\texpect(metrics).toMatch(/mediastream_http_requests_total\\{method=\"GET\",route=\"\\/test\",status_code=\"200\"\\} \\d+/)\r\n\t\t})\r\n\r\n\t\tit('should handle special characters in metric labels', async () => {\r\n\t\t\tservice.recordHttpRequest('POST', '/test-endpoint', 404, 200)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('route=\"/test-endpoint\"')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('response Time Tracking', () => {\r\n\t\tit('should track response times correctly', async () => {\r\n\t\t\tservice.recordHttpRequest('GET', '/fast', 200, 50)\r\n\t\t\tservice.recordHttpRequest('GET', '/slow', 200, 500)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_http_request_duration_seconds')\r\n\t\t})\r\n\r\n\t\tit('should track cache performance', async () => {\r\n\t\t\tservice.recordCacheOperation('get', 'memory', 'hit', 10)\r\n\t\t\tservice.recordCacheOperation('set', 'redis', 'miss', 25)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_cache_operations_total')\r\n\t\t\texpect(metrics).toContain('operation=\"get\"')\r\n\t\t\texpect(metrics).toContain('status=\"hit\"')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('system Resource Tracking', () => {\r\n\t\tit('should track system resources over time', async () => {\r\n\t\t\t// Simulate multiple metric updates\r\n\t\t\tservice.updateCpuUsage(10, 5)\r\n\t\t\tservice.updateCpuUsage(20, 8)\r\n\t\t\tservice.updateCpuUsage(15, 6)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_cpu_usage_percent')\r\n\t\t})\r\n\r\n\t\tit('should handle edge cases in resource metrics', async () => {\r\n\t\t\t// Test with zero values\r\n\t\t\tservice.updateCpuUsage(0, 0)\r\n\t\t\tservice.updateLoadAverage(0, 0, 0)\r\n\r\n\t\t\tconst metrics = await service.getMetrics()\r\n\t\t\texpect(metrics).toContain('mediastream_cpu_usage_percent')\r\n\t\t\texpect(metrics).toContain('mediastream_load_average')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigService","MetricsService","Test","afterEach","beforeEach","describe","expect","it","vi","service","configService","mockConfigService","get","fn","key","undefined","module","createTestingModule","providers","provide","useValue","compile","stopMetricsCollection","reset","toBeDefined","onModuleInit","toHaveBeenCalledWith","registry","getRegistry","recordHttpRequest","metrics","getMetrics","toContain","recordImageProcessing","updateImageProcessingQueueSize","recordImageProcessingError","recordCacheOperation","recordCacheEviction","updateCacheSize","updateCacheHitRatio","recordError","memoryInfo","rss","heapTotal","heapUsed","external","updateMemoryMetrics","updateDiskSpaceMetrics","updateActiveConnections","updateCpuUsage","updateLoadAverage","updateFileDescriptors","updateNetworkConnections","toBe","not","recordGarbageCollection","recordEventLoopLag","incrementRequestsInFlight","decrementRequestsInFlight","updatedMetrics","Promise","resolve","setTimeout","mockImplementation","disabledService","toThrow","toMatch"],"mappings":"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"}