{"version":3,"sources":["../../../../../src/test/Metrics/controllers/metrics.controller.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { MetricsController } from '@microservice/Metrics/controllers/metrics.controller'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\r\nimport 'reflect-metadata'\n\r\ndescribe('metricsController', () => {\r\n\tlet controller: MetricsController\r\n\tlet metricsService: MockedObject<MetricsService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockMetricsService = {\r\n\t\t\tgetMetrics: vi.fn(),\r\n\t\t\tgetRegistry: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tcontrollers: [MetricsController],\r\n\t\t\tproviders: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\tuseValue: mockMetricsService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tcontroller = module.get<MetricsController>(MetricsController)\r\n\t\tmetricsService = module.get(MetricsService)\r\n\t})\r\n\r\n\tdescribe('getMetrics', () => {\r\n\t\tit('should return metrics in Prometheus format', async () => {\r\n\t\t\tconst mockMetrics = `# HELP mediastream_http_requests_total Total number of HTTP requests\r\n# TYPE mediastream_http_requests_total counter\r\nmediastream_http_requests_total{method=\"GET\",route=\"/test\",status_code=\"200\"} 1`\r\n\r\n\t\t\tmetricsService.getMetrics.mockResolvedValue(mockMetrics)\r\n\r\n\t\t\tconst result = await controller.getMetrics()\r\n\r\n\t\t\texpect(result).toBe(mockMetrics)\r\n\t\t\texpect(metricsService.getMetrics).toHaveBeenCalledTimes(1)\r\n\t\t})\r\n\r\n\t\tit('should handle empty metrics', async () => {\r\n\t\t\tmetricsService.getMetrics.mockResolvedValue('')\r\n\r\n\t\t\tconst result = await controller.getMetrics()\r\n\r\n\t\t\texpect(result).toBe('')\r\n\t\t\texpect(metricsService.getMetrics).toHaveBeenCalledTimes(1)\r\n\t\t})\r\n\r\n\t\tit('should handle metrics service errors', async () => {\r\n\t\t\tmetricsService.getMetrics.mockRejectedValue(new Error('Metrics error'))\r\n\r\n\t\t\tawait expect(controller.getMetrics()).rejects.toThrow('Metrics error')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getMetricsHealth', () => {\r\n\t\tit('should return health status', () => {\r\n\t\t\tconst mockRegistry = {\r\n\t\t\t\tgetMetricsAsArray: vi.fn().mockReturnValue([\r\n\t\t\t\t\t{ name: 'metric1' },\r\n\t\t\t\t\t{ name: 'metric2' },\r\n\t\t\t\t]),\r\n\t\t\t}\r\n\r\n\t\t\tmetricsService.getRegistry.mockReturnValue(mockRegistry as any)\r\n\r\n\t\t\tconst result = controller.getMetricsHealth()\r\n\r\n\t\t\texpect(result).toEqual({\r\n\t\t\t\tstatus: 'healthy',\r\n\t\t\t\ttimestamp: expect.any(Number),\r\n\t\t\t\tservice: 'metrics',\r\n\t\t\t\tregistry: {\r\n\t\t\t\t\tmetricsCount: 2,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should handle registry errors gracefully', () => {\r\n\t\t\tconst mockRegistry = {\r\n\t\t\t\tgetMetricsAsArray: vi.fn().mockImplementation(() => {\r\n\t\t\t\t\tthrow new Error('Registry error')\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\r\n\t\t\tmetricsService.getRegistry.mockReturnValue(mockRegistry as any)\r\n\r\n\t\t\texpect(() => controller.getMetricsHealth()).toThrow('Registry error')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["MetricsController","MetricsService","Test","beforeEach","describe","expect","it","vi","controller","metricsService","mockMetricsService","getMetrics","fn","getRegistry","module","createTestingModule","controllers","providers","provide","useValue","compile","get","mockMetrics","mockResolvedValue","result","toBe","toHaveBeenCalledTimes","mockRejectedValue","Error","rejects","toThrow","mockRegistry","getMetricsAsArray","mockReturnValue","name","getMetricsHealth","toEqual","status","timestamp","any","Number","service","registry","metricsCount","mockImplementation"],"mappings":"AACA,SAASA,iBAAiB,QAAQ,iEAAsD;AACxF,SAASC,cAAc,QAAQ,2DAAgD;AAC/E,SAASC,IAAI,QAAuB,kBAAiB;AACrD,SAASC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,QAAQ,SAAQ;AAC7D,OAAO,mBAAkB;AAEzBH,SAAS,qBAAqB;IAC7B,IAAII;IACJ,IAAIC;IAEJN,WAAW;QACV,MAAMO,qBAAqB;YAC1BC,YAAYJ,GAAGK,EAAE;YACjBC,aAAaN,GAAGK,EAAE;QACnB;QAEA,MAAME,SAAwB,MAAMZ,KAAKa,mBAAmB,CAAC;YAC5DC,aAAa;gBAAChB;aAAkB;YAChCiB,WAAW;gBACV;oBACCC,SAASjB;oBACTkB,UAAUT;gBACX;aACA;QACF,GAAGU,OAAO;QAEVZ,aAAaM,OAAOO,GAAG,CAAoBrB;QAC3CS,iBAAiBK,OAAOO,GAAG,CAACpB;IAC7B;IAEAG,SAAS,cAAc;QACtBE,GAAG,8CAA8C;YAChD,MAAMgB,cAAc,CAAC;;+EAEuD,CAAC;YAE7Eb,eAAeE,UAAU,CAACY,iBAAiB,CAACD;YAE5C,MAAME,SAAS,MAAMhB,WAAWG,UAAU;YAE1CN,OAAOmB,QAAQC,IAAI,CAACH;YACpBjB,OAAOI,eAAeE,UAAU,EAAEe,qBAAqB,CAAC;QACzD;QAEApB,GAAG,+BAA+B;YACjCG,eAAeE,UAAU,CAACY,iBAAiB,CAAC;YAE5C,MAAMC,SAAS,MAAMhB,WAAWG,UAAU;YAE1CN,OAAOmB,QAAQC,IAAI,CAAC;YACpBpB,OAAOI,eAAeE,UAAU,EAAEe,qBAAqB,CAAC;QACzD;QAEApB,GAAG,wCAAwC;YAC1CG,eAAeE,UAAU,CAACgB,iBAAiB,CAAC,IAAIC,MAAM;YAEtD,MAAMvB,OAAOG,WAAWG,UAAU,IAAIkB,OAAO,CAACC,OAAO,CAAC;QACvD;IACD;IAEA1B,SAAS,oBAAoB;QAC5BE,GAAG,+BAA+B;YACjC,MAAMyB,eAAe;gBACpBC,mBAAmBzB,GAAGK,EAAE,GAAGqB,eAAe,CAAC;oBAC1C;wBAAEC,MAAM;oBAAU;oBAClB;wBAAEA,MAAM;oBAAU;iBAClB;YACF;YAEAzB,eAAeI,WAAW,CAACoB,eAAe,CAACF;YAE3C,MAAMP,SAAShB,WAAW2B,gBAAgB;YAE1C9B,OAAOmB,QAAQY,OAAO,CAAC;gBACtBC,QAAQ;gBACRC,WAAWjC,OAAOkC,GAAG,CAACC;gBACtBC,SAAS;gBACTC,UAAU;oBACTC,cAAc;gBACf;YACD;QACD;QAEArC,GAAG,4CAA4C;YAC9C,MAAMyB,eAAe;gBACpBC,mBAAmBzB,GAAGK,EAAE,GAAGgC,kBAAkB,CAAC;oBAC7C,MAAM,IAAIhB,MAAM;gBACjB;YACD;YAEAnB,eAAeI,WAAW,CAACoB,eAAe,CAACF;YAE3C1B,OAAO,IAAMG,WAAW2B,gBAAgB,IAAIL,OAAO,CAAC;QACrD;IACD;AACD"}