{"version":3,"sources":["../../../../../src/test/API/controllers/media-stream-image-rest.controller.spec.ts"],"sourcesContent":["import type { Response } from 'express'\r\nimport type { MockedObject } from 'vitest'\r\nimport { Buffer } from 'node:buffer'\r\nimport { Readable } from 'node:stream'\r\nimport MediaStreamImageRESTController from '@microservice/API/controllers/media-stream-image-rest.controller'\r\nimport { BackgroundOptions, FitOptions, PositionOptions, SupportedResizeFormats } from '@microservice/API/dto/cache-image-request.dto'\r\nimport CacheImageResourceOperation from '@microservice/Cache/operations/cache-image-resource.operation'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport ResourceMetaData from '@microservice/HTTP/dto/resource-meta-data.dto'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport GenerateResourceIdentityFromRequestJob from '@microservice/Queue/jobs/generate-resource-identity-from-request.job'\r\nimport { InputSanitizationService } from '@microservice/Validation/services/input-sanitization.service'\r\nimport { SecurityCheckerService } from '@microservice/Validation/services/security-checker.service'\r\nimport { HttpService } from '@nestjs/axios'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\nvi.mock('@nestjs/axios')\r\nvi.mock('@microservice/Queue/jobs/generate-resource-identity-from-request.job')\r\nvi.mock('@microservice/Cache/operations/cache-image-resource.operation')\r\nvi.mock('@microservice/Validation/services/input-sanitization.service')\r\nvi.mock('@microservice/Validation/services/security-checker.service')\r\nvi.mock('@microservice/Correlation/services/correlation.service')\r\nvi.mock('@microservice/Metrics/services/metrics.service')\r\nvi.mock('@microservice/RateLimit/guards/adaptive-rate-limit.guard')\r\nvi.mock('@microservice/Correlation/utils/performance-tracker.util', () => ({\r\n\tPerformanceTracker: {\r\n\t\tstartPhase: vi.fn(),\r\n\t\tendPhase: vi.fn().mockReturnValue(100),\r\n\t},\r\n}))\r\nvi.mock('node:fs/promises', () => {\r\n\treturn {\r\n\t\topen: vi.fn().mockImplementation(() => {\r\n\t\t\treturn Promise.resolve({\r\n\t\t\t\tcreateReadStream: vi.fn().mockImplementation(() => {\r\n\t\t\t\t\tconst mockReadStream = new Readable()\r\n\t\t\t\t\tmockReadStream.push('mock file content')\r\n\t\t\t\t\tmockReadStream.push(null)\r\n\r\n\t\t\t\t\t// Mock the pipe method to simulate successful streaming\r\n\t\t\t\t\tmockReadStream.pipe = vi.fn().mockImplementation((dest) => {\r\n\t\t\t\t\t\t// Simulate successful streaming by calling end event\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tif (mockReadStream.listenerCount('end') > 0) {\r\n\t\t\t\t\t\t\t\tmockReadStream.emit('end')\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 0)\r\n\t\t\t\t\t\treturn dest\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\treturn mockReadStream\r\n\t\t\t\t}),\r\n\t\t\t\tclose: vi.fn().mockResolvedValue(undefined),\r\n\t\t\t})\r\n\t\t}),\r\n\t}\r\n})\r\n\r\nclass TestMediaStreamImageRESTController extends MediaStreamImageRESTController {\r\n\tpublic testAddHeadersToRequest(res: Response, headers: ResourceMetaData): Response {\r\n\t\treturn this.addHeadersToRequest(res, headers)\r\n\t}\r\n}\r\n\r\ndescribe('mediaStreamImageRESTController', () => {\r\n\tlet controller: TestMediaStreamImageRESTController\r\n\tlet mockHttpService: MockedObject<HttpService>\r\n\tlet mockGenerateResourceIdentityFromRequestJob: MockedObject<GenerateResourceIdentityFromRequestJob>\r\n\tlet mockCacheImageResourceOperation: MockedObject<CacheImageResourceOperation>\r\n\tlet mockInputSanitizationService: MockedObject<InputSanitizationService>\r\n\tlet mockSecurityCheckerService: MockedObject<SecurityCheckerService>\r\n\tlet mockCorrelationService: MockedObject<CorrelationService>\r\n\tlet mockMetricsService: MockedObject<MetricsService>\r\n\tlet mockResponse: MockedObject<Response>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tmockHttpService = {\r\n\t\t\tget: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tmockGenerateResourceIdentityFromRequestJob = {\r\n\t\t\thandle: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tmockCacheImageResourceOperation = {\r\n\t\t\tsetup: vi.fn(),\r\n\t\t\texecute: vi.fn(),\r\n\t\t\toptimizeAndServeDefaultImage: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tmockInputSanitizationService = {\r\n\t\t\tsanitize: vi.fn().mockImplementation(str => Promise.resolve(str)),\r\n\t\t\tvalidateUrl: vi.fn().mockReturnValue(true),\r\n\t\t} as any\r\n\r\n\t\tmockSecurityCheckerService = {\r\n\t\t\tcheckForMaliciousContent: vi.fn().mockResolvedValue(false),\r\n\t\t} as any\r\n\r\n\t\tmockCorrelationService = {\r\n\t\t\tgetCorrelationId: vi.fn().mockReturnValue('test-correlation-id'),\r\n\t\t} as any\r\n\r\n\t\tmockMetricsService = {\r\n\t\t\trecordError: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tObject.defineProperty(mockCacheImageResourceOperation, 'resourceExists', {\r\n\t\t\tvalue: false,\r\n\t\t\twritable: true,\r\n\t\t})\r\n\r\n\t\tObject.defineProperty(mockCacheImageResourceOperation, 'getHeaders', {\r\n\t\t\tvalue: null,\r\n\t\t\twritable: true,\r\n\t\t})\r\n\r\n\t\tObject.defineProperty(mockCacheImageResourceOperation, 'getResourcePath', {\r\n\t\t\tvalue: '',\r\n\t\t\twritable: true,\r\n\t\t})\r\n\r\n\t\tmockResponse = {\r\n\t\t\theader: vi.fn().mockReturnThis(),\r\n\t\t\tsendFile: vi.fn(),\r\n\t\t\tpipe: vi.fn(),\r\n\t\t\ton: vi.fn(),\r\n\t\t\tonce: vi.fn(),\r\n\t\t\tend: vi.fn(),\r\n\t\t\twrite: vi.fn(),\r\n\t\t\tdestroy: vi.fn(),\r\n\t\t\twritable: true,\r\n\t\t\twritableEnded: false,\r\n\t\t\twritableFinished: false,\r\n\t\t\tlocals: {},\r\n\t\t} as any\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tcontrollers: [TestMediaStreamImageRESTController],\r\n\t\t\tproviders: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: HttpService,\r\n\t\t\t\t\tuseValue: mockHttpService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: GenerateResourceIdentityFromRequestJob,\r\n\t\t\t\t\tuseValue: mockGenerateResourceIdentityFromRequestJob,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: CacheImageResourceOperation,\r\n\t\t\t\t\tuseValue: mockCacheImageResourceOperation,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: InputSanitizationService,\r\n\t\t\t\t\tuseValue: mockInputSanitizationService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: SecurityCheckerService,\r\n\t\t\t\t\tuseValue: mockSecurityCheckerService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: CorrelationService,\r\n\t\t\t\t\tuseValue: mockCorrelationService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\tuseValue: mockMetricsService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tcontroller = await module.resolve<TestMediaStreamImageRESTController>(TestMediaStreamImageRESTController)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('addHeadersToRequest', () => {\r\n\t\tit('should add headers to response with correlation ID', () => {\r\n\t\t\tconst headers: ResourceMetaData = {\r\n\t\t\t\tsize: '1000',\r\n\t\t\t\tformat: 'webp',\r\n\t\t\t\tpublicTTL: 3600000,\r\n\t\t\t\tversion: 1,\r\n\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\tprivateTTL: 0,\r\n\t\t\t}\r\n\r\n\t\t\tcontroller.testAddHeadersToRequest(mockResponse, headers)\r\n\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Content-Length', '1000')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Cache-Control', 'max-age=3600, public, immutable')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Vary', 'Accept-Encoding')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Content-Type', 'image/webp')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('X-Correlation-ID', 'test-correlation-id')\r\n\t\t})\r\n\r\n\t\tit('should handle SVG format', () => {\r\n\t\t\tconst headers: ResourceMetaData = {\r\n\t\t\t\tsize: '1000',\r\n\t\t\t\tformat: 'svg',\r\n\t\t\t\tpublicTTL: 3600000,\r\n\t\t\t\tversion: 1,\r\n\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\tprivateTTL: 0,\r\n\t\t\t}\r\n\r\n\t\t\tcontroller.testAddHeadersToRequest(mockResponse, headers)\r\n\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Content-Type', 'image/svg+xml')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('X-Correlation-ID', 'test-correlation-id')\r\n\t\t})\r\n\r\n\t\tit('should throw error if headers are undefined', () => {\r\n\t\t\texpect(() => {\r\n\t\t\t\tcontroller.testAddHeadersToRequest(mockResponse, undefined as any)\r\n\t\t\t}).toThrow('Headers object is undefined')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('uploadedImage', () => {\r\n\t\tit('should handle successful image request with validation and metrics', async () => {\r\n\t\t\tconst headers: ResourceMetaData = {\r\n\t\t\t\tsize: '1000',\r\n\t\t\t\tformat: 'webp',\r\n\t\t\t\tpublicTTL: 3600000,\r\n\t\t\t\tversion: 1,\r\n\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\tprivateTTL: 0,\r\n\t\t\t}\r\n\r\n\t\t\tObject.defineProperty(mockCacheImageResourceOperation, 'resourceExists', {\r\n\t\t\t\tvalue: true,\r\n\t\t\t})\r\n\r\n\t\t\tObject.defineProperty(mockCacheImageResourceOperation, 'getHeaders', {\r\n\t\t\t\tvalue: Promise.resolve(headers),\r\n\t\t\t})\r\n\r\n\t\t\tObject.defineProperty(mockCacheImageResourceOperation, 'getResourcePath', {\r\n\t\t\t\tvalue: '/path/to/image.webp',\r\n\t\t\t})\r\n\r\n\t\t\t// Mock getCachedResource to return cached data so headers are set\r\n\t\t\tmockCacheImageResourceOperation.getCachedResource = vi.fn().mockResolvedValue({\r\n\t\t\t\tdata: Buffer.from('fake-image-data').toString('base64'),\r\n\t\t\t})\r\n\r\n\t\t\tawait controller.uploadedImage(\r\n\t\t\t\t'test',\r\n\t\t\t\t'image.webp',\r\n\t\t\t\t100,\r\n\t\t\t\t100,\r\n\t\t\t\tFitOptions.contain,\r\n\t\t\t\tPositionOptions.entropy,\r\n\t\t\t\tBackgroundOptions.transparent,\r\n\t\t\t\t5,\r\n\t\t\t\tSupportedResizeFormats.webp,\r\n\t\t\t\t80,\r\n\t\t\t\tmockResponse,\r\n\t\t\t)\r\n\r\n\t\t\texpect(mockSecurityCheckerService.checkForMaliciousContent).toHaveBeenCalledWith('test')\r\n\t\t\texpect(mockSecurityCheckerService.checkForMaliciousContent).toHaveBeenCalledWith('image.webp')\r\n\t\t\texpect(mockInputSanitizationService.validateUrl).toHaveBeenCalled()\r\n\t\t\texpect(mockCacheImageResourceOperation.setup).toHaveBeenCalled()\r\n\t\t\texpect(mockCacheImageResourceOperation.execute).toHaveBeenCalled()\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Content-Length', '1000')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Cache-Control', 'max-age=3600, public, immutable')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Vary', 'Accept-Encoding')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Content-Type', 'image/webp')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('X-Correlation-ID', 'test-correlation-id')\r\n\t\t\t// Verify response was sent with cached data (not filesystem streaming)\r\n\t\t\texpect(mockResponse.end).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should handle resource not found with metrics', async () => {\r\n\t\t\tObject.defineProperty(mockCacheImageResourceOperation, 'resourceExists', {\r\n\t\t\t\tvalue: false,\r\n\t\t\t})\r\n\r\n\t\t\tObject.defineProperty(mockCacheImageResourceOperation, 'getHeaders', {\r\n\t\t\t\tvalue: null,\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheImageResourceOperation.optimizeAndServeDefaultImage.mockResolvedValue('/path/to/default.webp')\r\n\r\n\t\t\tawait controller.uploadedImage(\r\n\t\t\t\t'test',\r\n\t\t\t\t'image.webp',\r\n\t\t\t\t100,\r\n\t\t\t\t100,\r\n\t\t\t\tFitOptions.contain,\r\n\t\t\t\tPositionOptions.entropy,\r\n\t\t\t\tBackgroundOptions.transparent,\r\n\t\t\t\t5,\r\n\t\t\t\tSupportedResizeFormats.webp,\r\n\t\t\t\t80,\r\n\t\t\t\tmockResponse,\r\n\t\t\t)\r\n\r\n\t\t\texpect(mockCacheImageResourceOperation.setup).toHaveBeenCalled()\r\n\t\t\texpect(mockCacheImageResourceOperation.execute).toHaveBeenCalled()\r\n\t\t\texpect(mockResponse.sendFile).toHaveBeenCalledWith('/path/to/default.webp')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('X-Correlation-ID', 'test-correlation-id')\r\n\t\t})\r\n\r\n\t\tit('should validate parameters and throw error for invalid width', async () => {\r\n\t\t\tawait expect(controller.uploadedImage(\r\n\t\t\t\t'test',\r\n\t\t\t\t'image.webp',\r\n\t\t\t\t-1, // Invalid width\r\n\t\t\t\t100,\r\n\t\t\t\tFitOptions.contain,\r\n\t\t\t\tPositionOptions.entropy,\r\n\t\t\t\tBackgroundOptions.transparent,\r\n\t\t\t\t5,\r\n\t\t\t\tSupportedResizeFormats.webp,\r\n\t\t\t\t80,\r\n\t\t\t\tmockResponse,\r\n\t\t\t)).rejects.toThrow('Invalid width parameter')\r\n\r\n\t\t\texpect(mockMetricsService.recordError).toHaveBeenCalledWith('uploaded_image_request', expect.any(String))\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('staticImage', () => {\r\n\t\tit('should handle successful static image request with validation and metrics', async () => {\r\n\t\t\tconst headers: ResourceMetaData = {\r\n\t\t\t\tsize: '1000',\r\n\t\t\t\tformat: 'webp',\r\n\t\t\t\tpublicTTL: 3600000,\r\n\t\t\t\tversion: 1,\r\n\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\tprivateTTL: 0,\r\n\t\t\t}\r\n\r\n\t\t\tObject.defineProperty(mockCacheImageResourceOperation, 'resourceExists', {\r\n\t\t\t\tvalue: true,\r\n\t\t\t})\r\n\r\n\t\t\tObject.defineProperty(mockCacheImageResourceOperation, 'getHeaders', {\r\n\t\t\t\tvalue: Promise.resolve(headers),\r\n\t\t\t})\r\n\r\n\t\t\tObject.defineProperty(mockCacheImageResourceOperation, 'getResourcePath', {\r\n\t\t\t\tvalue: '/path/to/image.webp',\r\n\t\t\t})\r\n\r\n\t\t\t// Mock getCachedResource to return cached data so headers are set\r\n\t\t\tmockCacheImageResourceOperation.getCachedResource = vi.fn().mockResolvedValue({\r\n\t\t\t\tdata: Buffer.from('fake-image-data').toString('base64'),\r\n\t\t\t})\r\n\r\n\t\t\tawait controller.staticImage(\r\n\t\t\t\t'image.webp',\r\n\t\t\t\t100,\r\n\t\t\t\t100,\r\n\t\t\t\tFitOptions.contain,\r\n\t\t\t\tPositionOptions.entropy,\r\n\t\t\t\tBackgroundOptions.transparent,\r\n\t\t\t\t5,\r\n\t\t\t\tSupportedResizeFormats.webp,\r\n\t\t\t\t80,\r\n\t\t\t\tmockResponse,\r\n\t\t\t)\r\n\r\n\t\t\texpect(mockSecurityCheckerService.checkForMaliciousContent).toHaveBeenCalledWith('image.webp')\r\n\t\t\texpect(mockInputSanitizationService.validateUrl).toHaveBeenCalled()\r\n\t\t\texpect(mockCacheImageResourceOperation.setup).toHaveBeenCalled()\r\n\t\t\texpect(mockCacheImageResourceOperation.execute).toHaveBeenCalled()\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Content-Length', '1000')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Cache-Control', 'max-age=3600, public, immutable')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Vary', 'Accept-Encoding')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('Content-Type', 'image/webp')\r\n\t\t\texpect(mockResponse.header).toHaveBeenCalledWith('X-Correlation-ID', 'test-correlation-id')\r\n\t\t\t// Verify response was sent with cached data (not filesystem streaming)\r\n\t\t\texpect(mockResponse.end).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should validate parameters and throw error for invalid quality', async () => {\r\n\t\t\tawait expect(controller.staticImage(\r\n\t\t\t\t'image.webp',\r\n\t\t\t\t100,\r\n\t\t\t\t100,\r\n\t\t\t\tFitOptions.contain,\r\n\t\t\t\tPositionOptions.entropy,\r\n\t\t\t\tBackgroundOptions.transparent,\r\n\t\t\t\t5,\r\n\t\t\t\tSupportedResizeFormats.webp,\r\n\t\t\t\t150, // Invalid quality\r\n\t\t\t\tmockResponse,\r\n\t\t\t)).rejects.toThrow('Invalid quality parameter')\r\n\r\n\t\t\texpect(mockMetricsService.recordError).toHaveBeenCalledWith('static_image_request', expect.any(String))\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["Buffer","Readable","MediaStreamImageRESTController","BackgroundOptions","FitOptions","PositionOptions","SupportedResizeFormats","CacheImageResourceOperation","CorrelationService","MetricsService","GenerateResourceIdentityFromRequestJob","InputSanitizationService","SecurityCheckerService","HttpService","Test","afterEach","beforeEach","describe","expect","it","vi","mock","PerformanceTracker","startPhase","fn","endPhase","mockReturnValue","open","mockImplementation","Promise","resolve","createReadStream","mockReadStream","push","pipe","dest","setTimeout","listenerCount","emit","close","mockResolvedValue","undefined","TestMediaStreamImageRESTController","testAddHeadersToRequest","res","headers","addHeadersToRequest","controller","mockHttpService","mockGenerateResourceIdentityFromRequestJob","mockCacheImageResourceOperation","mockInputSanitizationService","mockSecurityCheckerService","mockCorrelationService","mockMetricsService","mockResponse","get","handle","setup","execute","optimizeAndServeDefaultImage","sanitize","str","validateUrl","checkForMaliciousContent","getCorrelationId","recordError","Object","defineProperty","value","writable","header","mockReturnThis","sendFile","on","once","end","write","destroy","writableEnded","writableFinished","locals","module","createTestingModule","controllers","providers","provide","useValue","compile","clearAllMocks","size","format","publicTTL","version","dateCreated","Date","now","privateTTL","toHaveBeenCalledWith","toThrow","getCachedResource","data","from","toString","uploadedImage","contain","entropy","transparent","webp","toHaveBeenCalled","rejects","any","String","staticImage"],"mappings":"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"}