{"version":3,"sources":["../../../../../src/test/Storage/services/storage-monitoring.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { promises as fs } from 'node:fs'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { StorageMonitoringService } from '@microservice/Storage/services/storage-monitoring.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock fs module\r\nvi.mock('node:fs', () => ({\r\n\tpromises: {\r\n\t\treaddir: vi.fn(),\r\n\t\tstat: vi.fn(),\r\n\t\tmkdir: vi.fn(),\r\n\t},\r\n}))\r\n\r\nconst mockFs = fs as MockedObject<typeof fs>\r\n\r\ndescribe('storageMonitoringService', () => {\r\n\tlet service: StorageMonitoringService\r\n\tlet configService: MockedObject<ConfigService>\r\n\r\n\tconst mockStorageDirectory = '/test/storage'\r\n\tconst mockFiles = [\r\n\t\t'image1.webp',\r\n\t\t'image2.jpg',\r\n\t\t'cache1.json',\r\n\t\t'cache2.json',\r\n\t\t'.gitkeep',\r\n\t]\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockImplementation((_key: string) => {\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t\tgetOptional: vi.fn().mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t'cache.file.directory': mockStorageDirectory,\r\n\t\t\t\t\t'storage.warningSize': 800 * 1024 * 1024,\r\n\t\t\t\t\t'storage.criticalSize': 1024 * 1024 * 1024,\r\n\t\t\t\t\t'storage.warningFileCount': 5000,\r\n\t\t\t\t\t'storage.criticalFileCount': 10000,\r\n\t\t\t\t\t'storage.maxFileAge': 30,\r\n\t\t\t\t}\r\n\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tStorageMonitoringService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<StorageMonitoringService>(StorageMonitoringService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\r\n\t\t// Setup fs mocks\r\n\t\tmockFs.mkdir.mockResolvedValue(undefined)\r\n\t\tmockFs.readdir.mockResolvedValue(mockFiles as any)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('getStorageStats', () => {\r\n\t\tit('should return correct storage statistics', async () => {\r\n\t\t\t// Mock file stats\r\n\t\t\tconst mockStats = {\r\n\t\t\t\tsize: 1024 * 1024, // 1MB\r\n\t\t\t\tmtime: new Date('2024-01-01'),\r\n\t\t\t\tatime: new Date('2024-01-02'),\r\n\t\t\t}\r\n\r\n\t\t\tmockFs.stat.mockResolvedValue(mockStats as any)\r\n\r\n\t\t\tconst stats = await service.getStorageStats()\r\n\r\n\t\t\texpect(stats.totalFiles).toBe(4) // Excluding .gitkeep\r\n\t\t\texpect(stats.totalSize).toBe(4 * 1024 * 1024) // 4MB total\r\n\t\t\texpect(stats.averageFileSize).toBe(1024 * 1024) // 1MB average\r\n\t\t\texpect(stats.fileTypes['.webp']).toBe(1)\r\n\t\t\texpect(stats.fileTypes['.jpg']).toBe(1)\r\n\t\t\texpect(stats.fileTypes['.json']).toBe(2)\r\n\t\t})\r\n\r\n\t\tit('should handle empty directory', async () => {\r\n\t\t\tmockFs.readdir.mockResolvedValue(['.gitkeep'] as any)\r\n\r\n\t\t\tconst stats = await service.getStorageStats()\r\n\r\n\t\t\texpect(stats.totalFiles).toBe(0)\r\n\t\t\texpect(stats.totalSize).toBe(0)\r\n\t\t\texpect(stats.averageFileSize).toBe(0)\r\n\t\t\texpect(stats.accessPatterns).toEqual([])\r\n\t\t})\r\n\r\n\t\tit('should handle file stat errors gracefully', async () => {\r\n\t\t\tmockFs.stat.mockRejectedValue(new Error('File not found'))\r\n\r\n\t\t\tawait expect(service.getStorageStats()).rejects.toThrow('File not found')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('checkThresholds', () => {\r\n\t\tit('should return healthy status when under thresholds', async () => {\r\n\t\t\tconst mockStats = {\r\n\t\t\t\tsize: 100 * 1024 * 1024, // 100MB\r\n\t\t\t\tmtime: new Date(),\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t}\r\n\r\n\t\t\tmockFs.stat.mockResolvedValue(mockStats as any)\r\n\r\n\t\t\tconst result = await service.checkThresholds()\r\n\r\n\t\t\texpect(result.status).toBe('healthy')\r\n\t\t\texpect(result.issues).toEqual([])\r\n\t\t})\r\n\r\n\t\tit('should return warning status when approaching thresholds', async () => {\r\n\t\t\tconst mockStats = {\r\n\t\t\t\tsize: 210 * 1024 * 1024, // 210MB per file, 4 files = 840MB total (over warning threshold but under critical)\r\n\t\t\t\tmtime: new Date(),\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t}\r\n\r\n\t\t\tmockFs.stat.mockResolvedValue(mockStats as any)\r\n\r\n\t\t\tconst result = await service.checkThresholds()\r\n\r\n\t\t\texpect(result.status).toBe('warning')\r\n\t\t\texpect(result.issues).toHaveLength(1)\r\n\t\t\texpect(result.issues[0]).toContain('Storage size warning')\r\n\t\t})\r\n\r\n\t\tit('should return critical status when exceeding thresholds', async () => {\r\n\t\t\tconst mockStats = {\r\n\t\t\t\tsize: 1100 * 1024 * 1024, // 1.1GB (over critical threshold)\r\n\t\t\t\tmtime: new Date(),\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t}\r\n\r\n\t\t\tmockFs.stat.mockResolvedValue(mockStats as any)\r\n\r\n\t\t\tconst result = await service.checkThresholds()\r\n\r\n\t\t\texpect(result.status).toBe('critical')\r\n\t\t\texpect(result.issues).toHaveLength(1)\r\n\t\t\texpect(result.issues[0]).toContain('Storage size critical')\r\n\t\t})\r\n\r\n\t\tit('should detect old files', async () => {\r\n\t\t\tconst oldDate = new Date(Date.now() - 35 * 24 * 60 * 60 * 1000) // 35 days ago\r\n\t\t\tconst mockStats = {\r\n\t\t\t\tsize: 100 * 1024 * 1024,\r\n\t\t\t\tmtime: new Date(),\r\n\t\t\t\tatime: oldDate,\r\n\t\t\t}\r\n\r\n\t\t\tmockFs.stat.mockResolvedValue(mockStats as any)\r\n\r\n\t\t\tconst result = await service.checkThresholds()\r\n\r\n\t\t\texpect(result.status).toBe('warning')\r\n\t\t\texpect(result.issues.some(issue => issue.includes('older than 30 days'))).toBe(true)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getEvictionCandidates', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tconst mockStats = {\r\n\t\t\t\tsize: 1024 * 1024,\r\n\t\t\t\tmtime: new Date(),\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t}\r\n\t\t\tmockFs.stat.mockResolvedValue(mockStats as any)\r\n\t\t})\r\n\r\n\t\tit('should return candidates sorted by eviction score', async () => {\r\n\t\t\tconst candidates = await service.getEvictionCandidates()\r\n\r\n\t\t\texpect(candidates).toBeDefined()\r\n\t\t\texpect(Array.isArray(candidates)).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should respect target size when specified', async () => {\r\n\t\t\tconst targetSize = 2 * 1024 * 1024 // 2MB\r\n\t\t\tconst candidates = await service.getEvictionCandidates(targetSize)\r\n\r\n\t\t\tconst totalSize = candidates.reduce((sum, candidate) => sum + candidate.size, 0)\r\n\t\t\texpect(totalSize).toBeGreaterThanOrEqual(targetSize)\r\n\t\t})\r\n\r\n\t\tit('should return default 20% of storage when no target specified', async () => {\r\n\t\t\tconst candidates = await service.getEvictionCandidates()\r\n\r\n\t\t\t// Should return some candidates for eviction\r\n\t\t\texpect(candidates.length).toBeGreaterThan(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('recordFileAccess', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\t// Initialize access patterns by calling getStorageStats\r\n\t\t\tconst mockStats = {\r\n\t\t\t\tsize: 1024 * 1024,\r\n\t\t\t\tmtime: new Date(),\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t}\r\n\t\t\tmockFs.stat.mockResolvedValue(mockStats as any)\r\n\t\t\tawait service.getStorageStats()\r\n\t\t})\r\n\r\n\t\tit('should update access count for existing file', () => {\r\n\t\t\tservice.recordFileAccess('image1.webp')\r\n\t\t\tservice.recordFileAccess('image1.webp')\r\n\r\n\t\t\t// Access count should be updated (tested indirectly through getStorageStats)\r\n\t\t\texpect(() => service.recordFileAccess('image1.webp')).not.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should handle access recording for non-existent file', () => {\r\n\t\t\texpect(() => service.recordFileAccess('nonexistent.jpg')).not.toThrow()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('scanStorageDirectory', () => {\r\n\t\tit('should update access patterns during scan', async () => {\r\n\t\t\tconst mockStats = {\r\n\t\t\t\tsize: 1024 * 1024,\r\n\t\t\t\tmtime: new Date(),\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t}\r\n\t\t\tmockFs.stat.mockResolvedValue(mockStats as any)\r\n\r\n\t\t\tawait service.scanStorageDirectory()\r\n\r\n\t\t\tconst lastScanTime = service.getLastScanTime()\r\n\t\t\texpect(lastScanTime).toBeInstanceOf(Date)\r\n\t\t})\r\n\r\n\t\tit('should handle scan errors gracefully', async () => {\r\n\t\t\tmockFs.readdir.mockRejectedValue(new Error('Permission denied'))\r\n\r\n\t\t\t// Should not throw, but log error\r\n\t\t\tawait expect(service.scanStorageDirectory()).resolves.toBeUndefined()\r\n\t\t})\r\n\r\n\t\tit('should remove patterns for deleted files', async () => {\r\n\t\t\t// First scan with all files\r\n\t\t\tconst mockStats = {\r\n\t\t\t\tsize: 1024 * 1024,\r\n\t\t\t\tmtime: new Date(),\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t}\r\n\t\t\tmockFs.stat.mockResolvedValue(mockStats as any)\r\n\t\t\tawait service.scanStorageDirectory()\r\n\r\n\t\t\t// Second scan with fewer files\r\n\t\t\tmockFs.readdir.mockResolvedValue(['image1.webp', '.gitkeep'] as any)\r\n\t\t\tawait service.scanStorageDirectory()\r\n\r\n\t\t\t// Should handle the change without errors\r\n\t\t\texpect(() => service.getLastScanTime()).not.toThrow()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('initialization', () => {\r\n\t\tit('should create storage directory if it does not exist', async () => {\r\n\t\t\t// Create a new service instance to test initialization\r\n\t\t\tconst newService = new StorageMonitoringService(configService)\r\n\t\t\tawait newService.onModuleInit()\r\n\r\n\t\t\texpect(mockFs.mkdir).toHaveBeenCalledWith(mockStorageDirectory, { recursive: true })\r\n\t\t})\r\n\r\n\t\tit('should handle directory creation errors', async () => {\r\n\t\t\tmockFs.mkdir.mockRejectedValue(new Error('Permission denied'))\r\n\r\n\t\t\t// Should still initialize but log error\r\n\t\t\tconst newService = new StorageMonitoringService(configService)\r\n\t\t\tawait expect(newService.onModuleInit()).rejects.toThrow('Permission denied')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["promises","fs","ConfigService","StorageMonitoringService","Test","afterEach","beforeEach","describe","expect","it","vi","mock","readdir","fn","stat","mkdir","mockFs","service","configService","mockStorageDirectory","mockFiles","mockConfigService","get","mockImplementation","_key","undefined","getOptional","key","defaultValue","defaults","module","createTestingModule","providers","provide","useValue","compile","mockResolvedValue","clearAllMocks","mockStats","size","mtime","Date","atime","stats","getStorageStats","totalFiles","toBe","totalSize","averageFileSize","fileTypes","accessPatterns","toEqual","mockRejectedValue","Error","rejects","toThrow","result","checkThresholds","status","issues","toHaveLength","toContain","oldDate","now","some","issue","includes","candidates","getEvictionCandidates","toBeDefined","Array","isArray","targetSize","reduce","sum","candidate","toBeGreaterThanOrEqual","length","toBeGreaterThan","recordFileAccess","not","scanStorageDirectory","lastScanTime","getLastScanTime","toBeInstanceOf","resolves","toBeUndefined","newService","onModuleInit","toHaveBeenCalledWith","recursive"],"mappings":"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"}