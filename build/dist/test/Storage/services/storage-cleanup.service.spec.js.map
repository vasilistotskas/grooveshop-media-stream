{"version":3,"sources":["../../../../../src/test/Storage/services/storage-cleanup.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { promises as fs } from 'node:fs'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { IntelligentEvictionService } from '@microservice/Storage/services/intelligent-eviction.service'\r\nimport { StorageCleanupService } from '@microservice/Storage/services/storage-cleanup.service'\r\nimport { StorageMonitoringService } from '@microservice/Storage/services/storage-monitoring.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock fs module\r\nvi.mock('node:fs', () => ({\r\n\tpromises: {\r\n\t\treaddir: vi.fn(),\r\n\t\tstat: vi.fn(),\r\n\t\tunlink: vi.fn().mockResolvedValue(undefined),\r\n\t},\r\n}))\r\n\r\nconst mockFs = fs as MockedObject<typeof fs>\r\n\r\ndescribe('storageCleanupService', () => {\r\n\tlet service: StorageCleanupService\r\n\tlet storageMonitoring: MockedObject<StorageMonitoringService>\r\n\tlet intelligentEviction: MockedObject<IntelligentEvictionService>\r\n\tlet configService: MockedObject<ConfigService>\r\n\r\n\tconst mockFiles = [\r\n\t\t'old-image.jpg',\r\n\t\t'recent-image.webp',\r\n\t\t'cache-file.json',\r\n\t\t'temp-file.tmp',\r\n\t\t'.gitkeep',\r\n\t]\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockStorageMonitoring = {\r\n\t\t\tcheckThresholds: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockIntelligentEviction = {\r\n\t\t\tperformThresholdBasedEviction: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\t\treturn '/test/storage'\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t\tgetOptional: vi.fn().mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t'storage.cleanup.enabled': true,\r\n\t\t\t\t\t'storage.cleanup.cronSchedule': '0 2 * * *',\r\n\t\t\t\t\t'storage.cleanup.dryRun': false,\r\n\t\t\t\t\t'storage.cleanup.maxDuration': 300000,\r\n\t\t\t\t}\r\n\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tStorageCleanupService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\tuseValue: mockStorageMonitoring,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: IntelligentEvictionService,\r\n\t\t\t\t\tuseValue: mockIntelligentEviction,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<StorageCleanupService>(StorageCleanupService)\r\n\t\tstorageMonitoring = module.get(StorageMonitoringService)\r\n\t\tintelligentEviction = module.get(IntelligentEvictionService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\r\n\t\t// Setup fs mocks\r\n\t\tmockFs.readdir.mockResolvedValue(mockFiles as any)\r\n\t\tmockFs.unlink.mockResolvedValue(undefined)\r\n\r\n\t\t// Add spies to track calls\r\n\t\tvi.spyOn(mockFs, 'readdir')\r\n\t\tvi.spyOn(mockFs, 'stat')\r\n\t\tvi.spyOn(mockFs, 'unlink')\r\n\r\n\t\t// Mock file stats - create old files that should be cleaned up\r\n\t\tmockFs.stat.mockImplementation((filePath: any) => {\r\n\t\t\tconst fileName = filePath.split('/').pop() || ''\r\n\t\t\tconst size = fileName.includes('large') ? 10 * 1024 * 1024 : 1024 * 1024 // 10MB or 1MB\r\n\r\n\t\t\t// Make files old enough to be cleaned up based on policy\r\n\t\t\tlet ageInDays = 0\r\n\t\t\tif (fileName.includes('cache') || fileName.endsWith('.json')) {\r\n\t\t\t\tageInDays = 35 // Older than 30 days for old-cache-files policy\r\n\t\t\t}\r\n\t\t\telse if (fileName.includes('temp') || fileName.endsWith('.tmp')) {\r\n\t\t\t\tageInDays = 2 // Older than 1 day for temp-files policy\r\n\t\t\t}\r\n\t\t\telse if (fileName.includes('old') || fileName.match(/\\.(jpg|jpeg|png|webp|gif)$/)) {\r\n\t\t\t\tageInDays = 10 // Older than 7 days for large-images policy\r\n\t\t\t}\r\n\r\n\t\t\tconst mtime = new Date(Date.now() - ageInDays * 24 * 60 * 60 * 1000)\r\n\r\n\t\t\treturn Promise.resolve({\r\n\t\t\t\tsize,\r\n\t\t\t\tmtime,\r\n\t\t\t\tisFile: () => true,\r\n\t\t\t\tisDirectory: () => false,\r\n\t\t\t} as any)\r\n\t\t})\r\n\r\n\t\t// Setup storage monitoring mocks\r\n\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\tstatus: 'healthy',\r\n\t\t\tissues: [],\r\n\t\t\tstats: {\r\n\t\t\t\ttotalSize: 100 * 1024 * 1024,\r\n\t\t\t\ttotalFiles: 100,\r\n\t\t\t\taverageFileSize: 1024 * 1024,\r\n\t\t\t\toldestFile: new Date('2024-01-01'),\r\n\t\t\t\tnewestFile: new Date('2024-01-15'),\r\n\t\t\t\tfileTypes: { '.jpg': 50, '.png': 30, '.webp': 20 },\r\n\t\t\t\taccessPatterns: [],\r\n\t\t\t},\r\n\t\t})\r\n\r\n\t\t// Setup intelligent eviction mocks\r\n\t\tintelligentEviction.performThresholdBasedEviction.mockResolvedValue({\r\n\t\t\tfilesEvicted: 0,\r\n\t\t\tsizeFreed: 0,\r\n\t\t\terrors: [],\r\n\t\t\tstrategy: 'threshold-based',\r\n\t\t\tduration: 0,\r\n\t\t})\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('performCleanup', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\t// Mock file stats for different ages\r\n\t\t\tmockFs.stat.mockImplementation((filePath: any) => {\r\n\t\t\t\tconst filename = filePath.split('/').pop()\r\n\t\t\t\tlet mtime: Date\r\n\r\n\t\t\t\tswitch (filename) {\r\n\t\t\t\t\tcase 'old-image.jpg':\r\n\t\t\t\t\t\tmtime = new Date(Date.now() - 35 * 24 * 60 * 60 * 1000) // 35 days old\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 'cache-file.json':\r\n\t\t\t\t\t\tmtime = new Date(Date.now() - 31 * 24 * 60 * 60 * 1000) // 31 days old\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 'temp-file.tmp':\r\n\t\t\t\t\t\tmtime = new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 days old\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tmtime = new Date() // Recent file\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn Promise.resolve({\r\n\t\t\t\t\tsize: 1024 * 1024, // 1MB\r\n\t\t\t\t\tmtime,\r\n\t\t\t\t\tatime: mtime,\r\n\t\t\t\t} as any)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should perform cleanup with default policies', async () => {\r\n\t\t\t// Mock files that match policy patterns and are old enough\r\n\t\t\tmockFs.readdir.mockResolvedValue(['old-cache.json', 'temp-file.tmp'] as any)\r\n\r\n\t\t\tmockFs.stat.mockImplementation((filePath: any) => {\r\n\t\t\t\tconst filename = filePath.split(/[/\\\\]/).pop() // Handle both Unix and Windows paths\r\n\t\t\t\tlet ageInDays = 0\r\n\r\n\t\t\t\tif (filename === 'old-cache.json') {\r\n\t\t\t\t\tageInDays = 35 // Older than 30 days for old-cache-files policy\r\n\t\t\t\t}\r\n\t\t\t\telse if (filename === 'temp-file.tmp') {\r\n\t\t\t\t\tageInDays = 2 // Older than 1 day for temp-files policy\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst mtime = new Date(Date.now() - ageInDays * 24 * 60 * 60 * 1000)\r\n\r\n\t\t\t\treturn Promise.resolve({\r\n\t\t\t\t\tsize: 1024 * 1024, // 1MB\r\n\t\t\t\t\tmtime,\r\n\t\t\t\t\tatime: mtime,\r\n\t\t\t\t\tisFile: () => true,\r\n\t\t\t\t\tisDirectory: () => false,\r\n\t\t\t\t} as any)\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.performCleanup(['old-cache-files', 'temp-files'])\r\n\r\n\t\t\texpect(result.filesRemoved).toBeGreaterThan(0)\r\n\t\t\texpect(result.sizeFreed).toBeGreaterThan(0)\r\n\t\t\texpect(result.errors).toEqual([])\r\n\t\t\texpect(result.policiesApplied.length).toBeGreaterThan(0)\r\n\t\t\texpect(result.duration).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should apply specific policies when requested', async () => {\r\n\t\t\tconst result = await service.performCleanup(['old-cache-files'])\r\n\r\n\t\t\texpect(result.policiesApplied).toContain('old-cache-files')\r\n\t\t})\r\n\r\n\t\tit('should perform dry run when requested', async () => {\r\n\t\t\t// Mock files that match policy patterns and are old enough\r\n\t\t\tmockFs.readdir.mockResolvedValue(['old-cache.json', 'temp-file.tmp'] as any)\r\n\r\n\t\t\tmockFs.stat.mockImplementation((filePath: any) => {\r\n\t\t\t\tconst filename = filePath.split(/[/\\\\]/).pop() // Handle both Unix and Windows paths\r\n\t\t\t\tlet ageInDays = 0\r\n\r\n\t\t\t\tif (filename === 'old-cache.json') {\r\n\t\t\t\t\tageInDays = 35 // Older than 30 days for old-cache-files policy\r\n\t\t\t\t}\r\n\t\t\t\telse if (filename === 'temp-file.tmp') {\r\n\t\t\t\t\tageInDays = 2 // Older than 1 day for temp-files policy\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst mtime = new Date(Date.now() - ageInDays * 24 * 60 * 60 * 1000)\r\n\r\n\t\t\t\treturn Promise.resolve({\r\n\t\t\t\t\tsize: 1024 * 1024, // 1MB\r\n\t\t\t\t\tmtime,\r\n\t\t\t\t\tatime: mtime,\r\n\t\t\t\t\tisFile: () => true,\r\n\t\t\t\t\tisDirectory: () => false,\r\n\t\t\t\t} as any)\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.performCleanup(['old-cache-files', 'temp-files'], true)\r\n\r\n\t\t\texpect(mockFs.unlink).not.toHaveBeenCalled()\r\n\t\t\texpect(result.filesRemoved).toBeGreaterThan(0) // Still counts what would be removed\r\n\t\t})\r\n\r\n\t\tit('should trigger intelligent eviction when thresholds exceeded', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'warning',\r\n\t\t\t\tissues: ['Storage size warning'],\r\n\t\t\t\tstats: {\r\n\t\t\t\t\ttotalSize: 800 * 1024 * 1024,\r\n\t\t\t\t\ttotalFiles: 1000,\r\n\t\t\t\t\taverageFileSize: 800 * 1024,\r\n\t\t\t\t\toldestFile: new Date('2024-01-01'),\r\n\t\t\t\t\tnewestFile: new Date('2024-01-15'),\r\n\t\t\t\t\tfileTypes: { '.jpg': 500, '.png': 300, '.webp': 200 },\r\n\t\t\t\t\taccessPatterns: [],\r\n\t\t\t\t},\r\n\t\t\t})\r\n\r\n\t\t\tintelligentEviction.performThresholdBasedEviction.mockResolvedValue({\r\n\t\t\t\tfilesEvicted: 5,\r\n\t\t\t\tsizeFreed: 5 * 1024 * 1024,\r\n\t\t\t\terrors: [],\r\n\t\t\t\tstrategy: 'intelligent',\r\n\t\t\t\tduration: 1000,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.performCleanup()\r\n\r\n\t\t\texpect(intelligentEviction.performThresholdBasedEviction).toHaveBeenCalled()\r\n\t\t\texpect(result.policiesApplied).toContain('intelligent-eviction')\r\n\t\t})\r\n\r\n\t\tit('should handle policy execution errors gracefully', async () => {\r\n\t\t\tmockFs.readdir.mockRejectedValue(new Error('Permission denied'))\r\n\r\n\t\t\tconst result = await service.performCleanup()\r\n\r\n\t\t\texpect(result.errors.length).toBeGreaterThan(0)\r\n\t\t\texpect(result.errors[0]).toContain('Permission denied')\r\n\t\t})\r\n\r\n\t\tit('should prevent concurrent cleanup execution', async () => {\r\n\t\t\t// Start first cleanup\r\n\t\t\tconst firstCleanup = service.performCleanup()\r\n\r\n\t\t\t// Try to start second cleanup\r\n\t\t\tawait expect(service.performCleanup()).rejects.toThrow('Cleanup is already running')\r\n\r\n\t\t\t// Wait for first cleanup to complete\r\n\t\t\tawait firstCleanup\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('retention policies', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tmockFs.stat.mockResolvedValue({\r\n\t\t\t\tsize: 1024 * 1024,\r\n\t\t\t\tmtime: new Date(Date.now() - 35 * 24 * 60 * 60 * 1000), // 35 days old\r\n\t\t\t\tatime: new Date(Date.now() - 35 * 24 * 60 * 60 * 1000),\r\n\t\t\t} as any)\r\n\t\t})\r\n\r\n\t\tit('should apply old-cache-files policy correctly', async () => {\r\n\t\t\t// Set up files in directory - use .json extension to match the policy pattern\r\n\t\t\tmockFs.readdir.mockResolvedValue(['old-file.json', 'recent-file.json'] as any)\r\n\r\n\t\t\t// Clear previous mock and set up new implementation\r\n\t\t\tmockFs.stat.mockReset()\r\n\t\t\tmockFs.stat.mockImplementation((filePath: any) => {\r\n\t\t\t\tconst filename = filePath.split(/[/\\\\]/).pop() // Handle both Unix and Windows paths\r\n\t\t\t\tconst isOld = filename === 'old-file.json'\r\n\r\n\t\t\t\t// Make old file 35 days old (older than 30 day policy), recent file 5 days old\r\n\t\t\t\tconst ageInMs = (isOld ? 35 : 5) * 24 * 60 * 60 * 1000\r\n\t\t\t\tconst mtime = new Date(Date.now() - ageInMs)\r\n\r\n\t\t\t\treturn Promise.resolve({\r\n\t\t\t\t\tsize: 1024 * 1024, // 1MB\r\n\t\t\t\t\tmtime,\r\n\t\t\t\t\tatime: new Date(Date.now() - ageInMs),\r\n\t\t\t\t\tisFile: () => true,\r\n\t\t\t\t\tisDirectory: () => false,\r\n\t\t\t\t} as any)\r\n\t\t\t})\r\n\r\n\t\t\t// Mock unlink to succeed\r\n\t\t\tmockFs.unlink.mockResolvedValue(undefined)\r\n\r\n\t\t\tconst result = await service.performCleanup(['old-cache-files'], false)\r\n\r\n\t\t\texpect(result.policiesApplied).toContain('old-cache-files')\r\n\t\t\texpect(result.filesRemoved).toBe(1)\r\n\t\t\texpect(mockFs.unlink).toHaveBeenCalledWith(\r\n\t\t\t\texpect.stringContaining('old-file.json'),\r\n\t\t\t)\r\n\t\t\texpect(mockFs.unlink).not.toHaveBeenCalledWith(\r\n\t\t\t\texpect.stringContaining('recent-file.json'),\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should apply large-images policy correctly', async () => {\r\n\t\t\tmockFs.readdir.mockResolvedValue(['large-image.jpg', 'small-image.jpg'] as any)\r\n\r\n\t\t\tconst result = await service.performCleanup(['large-images'])\r\n\r\n\t\t\texpect(result.filesRemoved).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should apply temp-files policy correctly', async () => {\r\n\t\t\tmockFs.readdir.mockResolvedValue(['temp1.tmp', 'temp2.temp'] as any)\r\n\r\n\t\t\tmockFs.stat.mockResolvedValue({\r\n\t\t\t\tsize: 1024,\r\n\t\t\t\tmtime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days old\r\n\t\t\t\tatime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\r\n\t\t\t} as any)\r\n\r\n\t\t\tconst result = await service.performCleanup(['temp-files'])\r\n\r\n\t\t\texpect(result.filesRemoved).toBe(2)\r\n\t\t})\r\n\r\n\t\tit('should respect preserve count in policies', async () => {\r\n\t\t\t// Create many files to test preserve count\r\n\t\t\tconst manyFiles = Array.from({ length: 150 }, (_, i) => `file${i}.jpg`)\r\n\t\t\tmockFs.readdir.mockResolvedValue(manyFiles as any)\r\n\r\n\t\t\tconst result = await service.performCleanup(['preserve-recent'])\r\n\r\n\t\t\t// Should preserve at least 100 files\r\n\t\t\texpect(result.filesRemoved).toBeLessThanOrEqual(50)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getCleanupStatus', () => {\r\n\t\tit('should return current cleanup status', () => {\r\n\t\t\tconst status = service.getCleanupStatus()\r\n\r\n\t\t\texpect(status.enabled).toBe(true)\r\n\t\t\texpect(status.isRunning).toBe(false)\r\n\t\t\texpect(status.lastCleanup).toBeInstanceOf(Date)\r\n\t\t\texpect(status.nextCleanup).toBeInstanceOf(Date)\r\n\t\t\texpect(status.policies).toBeInstanceOf(Array)\r\n\t\t\texpect(status.policies.length).toBeGreaterThan(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('policy management', () => {\r\n\t\tit('should update existing retention policy', () => {\r\n\t\t\tconst newPolicy = {\r\n\t\t\t\tname: 'old-cache-files',\r\n\t\t\t\tdescription: 'Updated policy',\r\n\t\t\t\tmaxAge: 15,\r\n\t\t\t\tmaxSize: 0,\r\n\t\t\t\tenabled: true,\r\n\t\t\t}\r\n\r\n\t\t\tservice.updateRetentionPolicy(newPolicy)\r\n\r\n\t\t\tconst status = service.getCleanupStatus()\r\n\t\t\tconst updatedPolicy = status.policies.find(p => p.name === 'old-cache-files')\r\n\t\t\texpect(updatedPolicy?.maxAge).toBe(15)\r\n\t\t\texpect(updatedPolicy?.description).toBe('Updated policy')\r\n\t\t})\r\n\r\n\t\tit('should add new retention policy', () => {\r\n\t\t\tconst newPolicy = {\r\n\t\t\t\tname: 'custom-policy',\r\n\t\t\t\tdescription: 'Custom cleanup policy',\r\n\t\t\t\tmaxAge: 10,\r\n\t\t\t\tmaxSize: 50 * 1024 * 1024,\r\n\t\t\t\tenabled: true,\r\n\t\t\t}\r\n\r\n\t\t\tservice.updateRetentionPolicy(newPolicy)\r\n\r\n\t\t\tconst status = service.getCleanupStatus()\r\n\t\t\tconst customPolicy = status.policies.find(p => p.name === 'custom-policy')\r\n\t\t\texpect(customPolicy).toBeDefined()\r\n\t\t\texpect(customPolicy?.maxAge).toBe(10)\r\n\t\t})\r\n\r\n\t\tit('should remove retention policy', () => {\r\n\t\t\tconst removed = service.removeRetentionPolicy('old-cache-files')\r\n\r\n\t\t\texpect(removed).toBe(true)\r\n\r\n\t\t\tconst status = service.getCleanupStatus()\r\n\t\t\tconst removedPolicy = status.policies.find(p => p.name === 'old-cache-files')\r\n\t\t\texpect(removedPolicy).toBeUndefined()\r\n\t\t})\r\n\r\n\t\tit('should return false when removing non-existent policy', () => {\r\n\t\t\tconst removed = service.removeRetentionPolicy('non-existent-policy')\r\n\r\n\t\t\texpect(removed).toBe(false)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('scheduledCleanup', () => {\r\n\t\tit('should not run when disabled', async () => {\r\n\t\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tif (key === 'storage.cleanup.enabled')\r\n\t\t\t\t\treturn false\r\n\t\t\t\treturn defaultValue\r\n\t\t\t})\r\n\r\n\t\t\tawait service.scheduledCleanup()\r\n\r\n\t\t\texpect(mockFs.readdir).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should not run when cleanup is already running', async () => {\r\n\t\t\t// Start manual cleanup\r\n\t\t\tconst manualCleanup = service.performCleanup()\r\n\r\n\t\t\t// Try scheduled cleanup\r\n\t\t\tawait service.scheduledCleanup()\r\n\r\n\t\t\t// Should not interfere - readdir should only be called from manual cleanup\r\n\t\t\t// The number of calls depends on how many policies are enabled and applied\r\n\t\t\texpect(mockFs.readdir).toHaveBeenCalled()\r\n\t\t\texpect(mockFs.readdir).toHaveBeenCalledWith('./storage')\r\n\r\n\t\t\tawait manualCleanup\r\n\t\t})\r\n\r\n\t\tit('should handle scheduled cleanup errors gracefully', async () => {\r\n\t\t\tmockFs.readdir.mockRejectedValue(new Error('Disk error'))\r\n\r\n\t\t\t// Should not throw\r\n\t\t\tawait expect(service.scheduledCleanup()).resolves.toBeUndefined()\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["promises","fs","ConfigService","IntelligentEvictionService","StorageCleanupService","StorageMonitoringService","Test","afterEach","beforeEach","describe","expect","it","vi","mock","readdir","fn","stat","unlink","mockResolvedValue","undefined","mockFs","service","storageMonitoring","intelligentEviction","configService","mockFiles","mockStorageMonitoring","checkThresholds","mockIntelligentEviction","performThresholdBasedEviction","mockConfigService","get","mockImplementation","key","getOptional","defaultValue","defaults","module","createTestingModule","providers","provide","useValue","compile","spyOn","filePath","fileName","split","pop","size","includes","ageInDays","endsWith","match","mtime","Date","now","Promise","resolve","isFile","isDirectory","status","issues","stats","totalSize","totalFiles","averageFileSize","oldestFile","newestFile","fileTypes","accessPatterns","filesEvicted","sizeFreed","errors","strategy","duration","clearAllMocks","filename","atime","result","performCleanup","filesRemoved","toBeGreaterThan","toEqual","policiesApplied","length","toContain","not","toHaveBeenCalled","mockRejectedValue","Error","firstCleanup","rejects","toThrow","mockReset","isOld","ageInMs","toBe","toHaveBeenCalledWith","stringContaining","manyFiles","Array","from","_","i","toBeLessThanOrEqual","getCleanupStatus","enabled","isRunning","lastCleanup","toBeInstanceOf","nextCleanup","policies","newPolicy","name","description","maxAge","maxSize","updateRetentionPolicy","updatedPolicy","find","p","customPolicy","toBeDefined","removed","removeRetentionPolicy","removedPolicy","toBeUndefined","scheduledCleanup","manualCleanup","resolves"],"mappings":"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"}