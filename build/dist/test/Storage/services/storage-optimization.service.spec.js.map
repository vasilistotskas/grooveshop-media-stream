{"version":3,"sources":["../../../../../src/test/Storage/services/storage-optimization.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { Buffer } from 'node:buffer'\r\nimport { promises as fs } from 'node:fs'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { StorageMonitoringService } from '@microservice/Storage/services/storage-monitoring.service'\r\nimport { StorageOptimizationService } from '@microservice/Storage/services/storage-optimization.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock fs and zlib modules\r\nvi.mock('node:fs', () => ({\r\n\tpromises: {\r\n\t\treadFile: vi.fn(),\r\n\t\twriteFile: vi.fn(),\r\n\t\tunlink: vi.fn(),\r\n\t\tcopyFile: vi.fn(),\r\n\t\tlink: vi.fn(),\r\n\t},\r\n}))\r\n\r\nvi.mock('node:zlib', () => ({\r\n\tgzip: vi.fn((data, options, callback) => {\r\n\t\t// Simulate successful compression with 50% reduction\r\n\t\tconst compressedData = Buffer.from('compressed-data')\r\n\t\tsetImmediate(() => callback(null, compressedData))\r\n\t}),\r\n}))\r\n\r\nvi.mock('node:crypto', () => ({\r\n\tcreateHash: vi.fn(() => ({\r\n\t\tupdate: vi.fn().mockReturnThis(),\r\n\t\tdigest: vi.fn().mockReturnValue('mock-hash-123'),\r\n\t})),\r\n}))\r\n\r\nconst mockFs = fs as MockedObject<typeof fs>\r\n\r\ndescribe('storageOptimizationService', () => {\r\n\tlet service: StorageOptimizationService\r\n\tlet storageMonitoring: MockedObject<StorageMonitoringService>\r\n\tlet configService: MockedObject<ConfigService>\r\n\r\n\tconst mockAccessPatterns = [\r\n\t\t{\r\n\t\t\tfile: 'popular-image.jpg',\r\n\t\t\tlastAccessed: new Date(),\r\n\t\t\taccessCount: 25, // Above threshold\r\n\t\t\tsize: 2 * 1024 * 1024, // 2MB\r\n\t\t\textension: '.jpg',\r\n\t\t},\r\n\t\t{\r\n\t\t\tfile: 'very-popular.webp',\r\n\t\t\tlastAccessed: new Date(),\r\n\t\t\taccessCount: 50, // Well above threshold\r\n\t\t\tsize: 1024 * 1024, // 1MB\r\n\t\t\textension: '.webp',\r\n\t\t},\r\n\t\t{\r\n\t\t\tfile: 'not-popular.png',\r\n\t\t\tlastAccessed: new Date(),\r\n\t\t\taccessCount: 5, // Below threshold\r\n\t\t\tsize: 512 * 1024, // 512KB\r\n\t\t\textension: '.png',\r\n\t\t},\r\n\t]\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockStorageMonitoring = {\r\n\t\t\tgetStorageStats: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\t\treturn '/test/storage'\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t\tgetOptional: vi.fn().mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t'storage.optimization.enabled': true,\r\n\t\t\t\t\t'storage.optimization.strategies': ['compression', 'deduplication'],\r\n\t\t\t\t\t'storage.optimization.popularityThreshold': 10,\r\n\t\t\t\t\t'storage.optimization.compressionRatio': 0.7,\r\n\t\t\t\t\t'storage.optimization.createBackups': true,\r\n\t\t\t\t}\r\n\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tStorageOptimizationService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\tuseValue: mockStorageMonitoring,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<StorageOptimizationService>(StorageOptimizationService)\r\n\t\tstorageMonitoring = module.get(StorageMonitoringService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\r\n\t\t// Setup default config mocks\r\n\t\tconfigService.get.mockImplementation((key: string) => {\r\n\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\treturn '/test/storage'\r\n\t\t\treturn undefined\r\n\t\t})\r\n\r\n\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t'storage.optimization.enabled': true,\r\n\t\t\t\t'storage.optimization.strategies': ['compression', 'deduplication'],\r\n\t\t\t\t'storage.optimization.popularThreshold': 10,\r\n\t\t\t\t'storage.optimization.compressionLevel': 6,\r\n\t\t\t\t'storage.optimization.createBackups': false,\r\n\t\t\t\t'storage.optimization.maxTime': 600000,\r\n\t\t\t}\r\n\t\t\treturn defaults[key] || defaultValue\r\n\t\t})\r\n\r\n\t\t// Setup storage monitoring mocks\r\n\t\tstorageMonitoring.getStorageStats.mockResolvedValue({\r\n\t\t\ttotalFiles: 3,\r\n\t\t\ttotalSize: 3.5 * 1024 * 1024,\r\n\t\t\taverageFileSize: 1.17 * 1024 * 1024,\r\n\t\t\toldestFile: new Date(),\r\n\t\t\tnewestFile: new Date(),\r\n\t\t\tfileTypes: {},\r\n\t\t\taccessPatterns: mockAccessPatterns,\r\n\t\t})\r\n\r\n\t\t// Setup fs mocks\r\n\t\tmockFs.readFile.mockResolvedValue(Buffer.from('test file content that is long enough to be compressed'))\r\n\t\tmockFs.writeFile.mockResolvedValue(undefined)\r\n\t\tmockFs.unlink.mockResolvedValue(undefined)\r\n\t\tmockFs.copyFile.mockResolvedValue(undefined)\r\n\t\tmockFs.link.mockResolvedValue(undefined)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('optimizeFrequentlyAccessedFiles', () => {\r\n\t\tit('should optimize files above popularity threshold', async () => {\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\texpect(result.filesOptimized).toBeGreaterThan(0)\r\n\t\t\texpect(result.strategy).toContain('compression')\r\n\t\t\texpect(result.errors).toEqual([])\r\n\t\t\texpect(result.duration).toBeGreaterThan(0)\r\n\t\t}, 10000)\r\n\r\n\t\tit('should skip optimization when no popular files exist', async () => {\r\n\t\t\tconst unpopularPatterns = mockAccessPatterns.map(pattern => ({\r\n\t\t\t\t...pattern,\r\n\t\t\t\taccessCount: 5, // Below threshold\r\n\t\t\t}))\r\n\r\n\t\t\tstorageMonitoring.getStorageStats.mockResolvedValue({\r\n\t\t\t\ttotalFiles: 3,\r\n\t\t\t\ttotalSize: 3.5 * 1024 * 1024,\r\n\t\t\t\taverageFileSize: 1.17 * 1024 * 1024,\r\n\t\t\t\toldestFile: new Date(),\r\n\t\t\t\tnewestFile: new Date(),\r\n\t\t\t\tfileTypes: {},\r\n\t\t\t\taccessPatterns: unpopularPatterns,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\texpect(result.filesOptimized).toBe(0)\r\n\t\t\texpect(result.sizeReduced).toBe(0)\r\n\t\t\texpect(result.strategy).toBe('none')\r\n\t\t})\r\n\r\n\t\tit('should prevent concurrent optimization', async () => {\r\n\t\t\t// Start first optimization\r\n\t\t\tconst firstOptimization = service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\t// Try to start second optimization\r\n\t\t\tawait expect(service.optimizeFrequentlyAccessedFiles()).rejects.toThrow('Optimization is already running')\r\n\r\n\t\t\t// Wait for first optimization to complete\r\n\t\t\tawait firstOptimization\r\n\t\t}, 10000)\r\n\r\n\t\tit('should handle strategy errors gracefully', async () => {\r\n\t\t\t// Mock fs.readFile to fail for compression strategy\r\n\t\t\tmockFs.readFile.mockImplementation(() => Promise.reject(new Error('File read error')))\r\n\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\texpect(result.errors.length).toBeGreaterThan(0)\r\n\t\t\texpect(result.errors.some(error => error.includes('File read error'))).toBe(true)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('compression strategy', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\t// Mock zlib.gzip to return compressed data\r\n\t\t\tconst mockZlib = await import('node:zlib')\r\n\t\t\tvi.mocked(mockZlib.gzip).mockImplementation((data, options, callback) => {\r\n\t\t\t\t// Simulate 50% compression\r\n\t\t\t\tconst compressedData = Buffer.alloc(Buffer.byteLength(data) / 2)\r\n\t\t\t\tcallback(null, compressedData)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should compress files when compression ratio is good', async () => {\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\texpect(result.filesOptimized).toBeGreaterThan(0)\r\n\t\t\texpect(result.sizeReduced).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should skip compression for already compressed files', async () => {\r\n\t\t\tconst compressedPatterns = mockAccessPatterns.map(pattern => ({\r\n\t\t\t\t...pattern,\r\n\t\t\t\tfile: pattern.file.replace(/\\.(jpg|webp|png)$/, '.gz'),\r\n\t\t\t\textension: '.gz',\r\n\t\t\t}))\r\n\r\n\t\t\tstorageMonitoring.getStorageStats.mockResolvedValue({\r\n\t\t\t\ttotalFiles: 3,\r\n\t\t\t\ttotalSize: 3.5 * 1024 * 1024,\r\n\t\t\t\taverageFileSize: 1.17 * 1024 * 1024,\r\n\t\t\t\toldestFile: new Date(),\r\n\t\t\t\tnewestFile: new Date(),\r\n\t\t\t\tfileTypes: {},\r\n\t\t\t\taccessPatterns: compressedPatterns,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\t// Should still run but not compress .gz files\r\n\t\t\texpect(result.strategy).toContain('compression')\r\n\t\t})\r\n\r\n\t\tit('should skip compression for small files', async () => {\r\n\t\t\tconst smallFilePatterns = mockAccessPatterns.map(pattern => ({\r\n\t\t\t\t...pattern,\r\n\t\t\t\tsize: 500, // Very small file\r\n\t\t\t}))\r\n\r\n\t\t\tstorageMonitoring.getStorageStats.mockResolvedValue({\r\n\t\t\t\ttotalFiles: 3,\r\n\t\t\t\ttotalSize: 1500,\r\n\t\t\t\taverageFileSize: 500,\r\n\t\t\t\toldestFile: new Date(),\r\n\t\t\t\tnewestFile: new Date(),\r\n\t\t\t\tfileTypes: {},\r\n\t\t\t\taccessPatterns: smallFilePatterns,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\t// Should run but not compress small files\r\n\t\t\texpect(result.strategy).toContain('compression')\r\n\t\t})\r\n\r\n\t\tit('should create backups when configured', async () => {\r\n\t\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tif (key === 'storage.optimization.createBackups')\r\n\t\t\t\t\treturn true\r\n\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t'storage.optimization.enabled': true,\r\n\t\t\t\t\t'storage.optimization.strategies': ['compression'],\r\n\t\t\t\t\t'storage.optimization.popularThreshold': 10,\r\n\t\t\t\t\t'storage.optimization.compressionLevel': 6,\r\n\t\t\t\t\t'storage.optimization.maxTime': 600000,\r\n\t\t\t\t}\r\n\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t})\r\n\r\n\t\t\tawait service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\texpect(mockFs.copyFile).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('deduplication strategy', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\t// Mock crypto.createHash for deduplication\r\n\t\t\tconst mockCrypto = await import('node:crypto')\r\n\t\t\tconst mockHash = {\r\n\t\t\t\tupdate: vi.fn().mockReturnThis(),\r\n\t\t\t\tdigest: vi.fn(),\r\n\t\t\t}\r\n\t\t\tvi.mocked(mockCrypto.createHash).mockReturnValue(mockHash as any)\r\n\r\n\t\t\t// Simulate duplicate files by returning same hash\r\n\t\t\tmockHash.digest.mockReturnValue('same-hash-for-duplicates')\r\n\t\t})\r\n\r\n\t\tit('should deduplicate files with same content', async () => {\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\texpect(result.strategy).toContain('deduplication')\r\n\t\t\texpect(result.filesOptimized).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should keep most frequently accessed file as original', async () => {\r\n\t\t\tawait service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\t// Should create hard links for less popular files\r\n\t\t\texpect(mockFs.link).toHaveBeenCalled()\r\n\t\t\texpect(mockFs.unlink).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should handle hard link creation errors', async () => {\r\n\t\t\tmockFs.link.mockRejectedValue(new Error('Hard link failed'))\r\n\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\t// Should continue with other files despite errors\r\n\t\t\texpect(result.strategy).toContain('deduplication')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getOptimizationStats', () => {\r\n\t\tit('should return current optimization statistics', () => {\r\n\t\t\tconst stats = service.getOptimizationStats()\r\n\r\n\t\t\texpect(stats.enabled).toBe(true)\r\n\t\t\texpect(stats.isRunning).toBe(false)\r\n\t\t\texpect(stats.totalOptimizations).toBe(0)\r\n\t\t\texpect(stats.totalSizeSaved).toBe(0)\r\n\t\t\texpect(stats.averageCompressionRatio).toBe(0)\r\n\t\t\texpect(stats.strategies).toEqual(['compression', 'deduplication'])\r\n\t\t})\r\n\r\n\t\tit('should track optimization history', async () => {\r\n\t\t\t// Perform optimization to create history\r\n\t\t\tawait service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\tconst stats = service.getOptimizationStats()\r\n\r\n\t\t\texpect(stats.totalOptimizations).toBeGreaterThan(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getFileOptimizationHistory', () => {\r\n\t\tit('should return null for non-optimized file', () => {\r\n\t\t\tconst history = service.getFileOptimizationHistory('non-existent.jpg')\r\n\r\n\t\t\texpect(history).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should return optimization history for optimized file', async () => {\r\n\t\t\t// Perform optimization first\r\n\t\t\tawait service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\t// Check if any file has optimization history\r\n\t\t\tconst stats = service.getOptimizationStats()\r\n\t\t\tif (stats.totalOptimizations > 0) {\r\n\t\t\t\t// This test would need to be more specific based on actual implementation\r\n\t\t\t\texpect(stats.totalOptimizations).toBeGreaterThan(0)\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('scheduledOptimization', () => {\r\n\t\tit('should not run when disabled', async () => {\r\n\t\t\t// Create a new service instance with optimization disabled\r\n\t\t\tconst disabledConfigService = {\r\n\t\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\t\t\treturn '/test/storage'\r\n\t\t\t\t\treturn undefined\r\n\t\t\t\t}),\r\n\t\t\t\tgetOptional: vi.fn().mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\t\tif (key === 'storage.optimization.enabled')\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\t\treturn defaultValue\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\r\n\t\t\tconst disabledModule: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tStorageOptimizationService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\t\tuseValue: storageMonitoring,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: disabledConfigService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst disabledService = disabledModule.get<StorageOptimizationService>(StorageOptimizationService)\r\n\r\n\t\t\t// Reset mock call count\r\n\t\t\tstorageMonitoring.getStorageStats.mockClear()\r\n\r\n\t\t\tawait disabledService.scheduledOptimization()\r\n\r\n\t\t\texpect(storageMonitoring.getStorageStats).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should not run when optimization is already running', async () => {\r\n\t\t\t// Start manual optimization\r\n\t\t\tconst manualOptimization = service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\t// Try scheduled optimization\r\n\t\t\tawait service.scheduledOptimization()\r\n\r\n\t\t\t// Should not interfere\r\n\t\t\texpect(storageMonitoring.getStorageStats).toHaveBeenCalledTimes(1) // Only from manual optimization\r\n\r\n\t\t\tawait manualOptimization\r\n\t\t})\r\n\r\n\t\tit('should handle scheduled optimization errors gracefully', async () => {\r\n\t\t\tstorageMonitoring.getStorageStats.mockRejectedValue(new Error('Storage error'))\r\n\r\n\t\t\t// Should not throw\r\n\t\t\tawait expect(service.scheduledOptimization()).resolves.toBeUndefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('strategy configuration', () => {\r\n\t\tit('should use only configured strategies', async () => {\r\n\t\t\t// Create a new service instance with different configuration\r\n\t\t\tconst customConfigService = {\r\n\t\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\t\t\treturn '/test/storage'\r\n\t\t\t\t\treturn undefined\r\n\t\t\t\t}),\r\n\t\t\t\tgetOptional: vi.fn().mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\t\tif (key === 'storage.optimization.strategies')\r\n\t\t\t\t\t\treturn ['compression']\r\n\t\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t\t'storage.optimization.enabled': true,\r\n\t\t\t\t\t\t'storage.optimization.popularThreshold': 10,\r\n\t\t\t\t\t\t'storage.optimization.compressionLevel': 6,\r\n\t\t\t\t\t\t'storage.optimization.createBackups': false,\r\n\t\t\t\t\t\t'storage.optimization.maxTime': 600000,\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\r\n\t\t\tconst customModule: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tStorageOptimizationService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\t\tuseValue: storageMonitoring,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: customConfigService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst customService = customModule.get<StorageOptimizationService>(StorageOptimizationService)\r\n\t\t\tconst result = await customService.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\texpect(result.strategy).toBe('compression')\r\n\t\t\texpect(result.strategy).not.toContain('deduplication')\r\n\t\t})\r\n\r\n\t\tit('should respect popularity threshold configuration', async () => {\r\n\t\t\t// Create a new service instance with high threshold\r\n\t\t\tconst customConfigService = {\r\n\t\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\t\t\treturn '/test/storage'\r\n\t\t\t\t\treturn undefined\r\n\t\t\t\t}),\r\n\t\t\t\tgetOptional: vi.fn().mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\t\tif (key === 'storage.optimization.popularThreshold')\r\n\t\t\t\t\t\treturn 100 // Very high threshold\r\n\t\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t\t'storage.optimization.enabled': true,\r\n\t\t\t\t\t\t'storage.optimization.strategies': ['compression'],\r\n\t\t\t\t\t\t'storage.optimization.compressionLevel': 6,\r\n\t\t\t\t\t\t'storage.optimization.createBackups': false,\r\n\t\t\t\t\t\t'storage.optimization.maxTime': 600000,\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\r\n\t\t\tconst customModule: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tStorageOptimizationService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\t\tuseValue: storageMonitoring,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: customConfigService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst customService = customModule.get<StorageOptimizationService>(StorageOptimizationService)\r\n\t\t\tconst result = await customService.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\t// No files should meet the high threshold\r\n\t\t\texpect(result.filesOptimized).toBe(0)\r\n\t\t\texpect(result.strategy).toBe('none')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error handling', () => {\r\n\t\tit('should handle storage monitoring errors', async () => {\r\n\t\t\tstorageMonitoring.getStorageStats.mockRejectedValue(new Error('Storage unavailable'))\r\n\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\texpect(result.errors).toContainEqual(expect.stringMatching(/Storage unavailable/))\r\n\t\t\texpect(result.filesOptimized).toBe(0)\r\n\t\t})\r\n\r\n\t\tit('should handle file system errors during optimization', async () => {\r\n\t\t\t// Mock fs.readFile to fail for compression strategy\r\n\t\t\tmockFs.readFile.mockImplementation(() => Promise.reject(new Error('Permission denied')))\r\n\r\n\t\t\tconst result = await service.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\texpect(result.errors.length).toBeGreaterThan(0)\r\n\t\t\texpect(result.errors.some(error => error.includes('Permission denied'))).toBe(true)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["Buffer","promises","fs","ConfigService","StorageMonitoringService","StorageOptimizationService","Test","afterEach","beforeEach","describe","expect","it","vi","mock","readFile","fn","writeFile","unlink","copyFile","link","gzip","data","options","callback","compressedData","from","setImmediate","createHash","update","mockReturnThis","digest","mockReturnValue","mockFs","service","storageMonitoring","configService","mockAccessPatterns","file","lastAccessed","Date","accessCount","size","extension","mockStorageMonitoring","getStorageStats","mockConfigService","get","mockImplementation","key","undefined","getOptional","defaultValue","defaults","module","createTestingModule","providers","provide","useValue","compile","mockResolvedValue","totalFiles","totalSize","averageFileSize","oldestFile","newestFile","fileTypes","accessPatterns","clearAllMocks","result","optimizeFrequentlyAccessedFiles","filesOptimized","toBeGreaterThan","strategy","toContain","errors","toEqual","duration","unpopularPatterns","map","pattern","toBe","sizeReduced","firstOptimization","rejects","toThrow","Promise","reject","Error","length","some","error","includes","mockZlib","mocked","alloc","byteLength","compressedPatterns","replace","smallFilePatterns","toHaveBeenCalled","mockCrypto","mockHash","mockRejectedValue","stats","getOptimizationStats","enabled","isRunning","totalOptimizations","totalSizeSaved","averageCompressionRatio","strategies","history","getFileOptimizationHistory","toBeNull","disabledConfigService","disabledModule","disabledService","mockClear","scheduledOptimization","not","manualOptimization","toHaveBeenCalledTimes","resolves","toBeUndefined","customConfigService","customModule","customService","toContainEqual","stringMatching"],"mappings":"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"}