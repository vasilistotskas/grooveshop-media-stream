{"version":3,"sources":["../../../../../src/test/Storage/services/intelligent-eviction.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { promises as fs } from 'node:fs'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { IntelligentEvictionService } from '@microservice/Storage/services/intelligent-eviction.service'\r\nimport { StorageMonitoringService } from '@microservice/Storage/services/storage-monitoring.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock fs module\r\nvi.mock('node:fs', () => ({\r\n\tpromises: {\r\n\t\tunlink: vi.fn(),\r\n\t},\r\n}))\r\n\r\nconst mockFs = fs as MockedObject<typeof fs>\r\n\r\ndescribe('intelligentEvictionService', () => {\r\n\tlet service: IntelligentEvictionService\r\n\tlet storageMonitoring: MockedObject<StorageMonitoringService>\r\n\tlet configService: MockedObject<ConfigService>\r\n\r\n\tconst mockAccessPatterns = [\r\n\t\t{\r\n\t\t\tfile: 'old-file.jpg',\r\n\t\t\tlastAccessed: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10 days ago\r\n\t\t\taccessCount: 1,\r\n\t\t\tsize: 1024 * 1024, // 1MB\r\n\t\t\textension: '.jpg',\r\n\t\t},\r\n\t\t{\r\n\t\t\tfile: 'popular-file.webp',\r\n\t\t\tlastAccessed: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\r\n\t\t\taccessCount: 50,\r\n\t\t\tsize: 2 * 1024 * 1024, // 2MB\r\n\t\t\textension: '.webp',\r\n\t\t},\r\n\t\t{\r\n\t\t\tfile: 'medium-file.png',\r\n\t\t\tlastAccessed: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago\r\n\t\t\taccessCount: 5,\r\n\t\t\tsize: 512 * 1024, // 512KB\r\n\t\t\textension: '.png',\r\n\t\t},\r\n\t]\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockStorageMonitoring = {\r\n\t\t\tgetStorageStats: vi.fn(),\r\n\t\t\tgetEvictionCandidates: vi.fn(),\r\n\t\t\tcheckThresholds: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\t\treturn '/test/storage'\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t\tgetOptional: vi.fn().mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t'storage.eviction.strategy': 'intelligent',\r\n\t\t\t\t\t'storage.eviction.aggressiveness': 'moderate',\r\n\t\t\t\t\t'storage.eviction.preservePopular': true,\r\n\t\t\t\t\t'storage.eviction.minAccessCount': 5,\r\n\t\t\t\t\t'storage.eviction.maxFileAge': 7,\r\n\t\t\t\t}\r\n\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tIntelligentEvictionService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\tuseValue: mockStorageMonitoring,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<IntelligentEvictionService>(IntelligentEvictionService)\r\n\t\tstorageMonitoring = module.get(StorageMonitoringService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\r\n\t\t// Setup storage monitoring mocks\r\n\t\tstorageMonitoring.getEvictionCandidates.mockResolvedValue(mockAccessPatterns)\r\n\t\tstorageMonitoring.getStorageStats.mockResolvedValue({\r\n\t\t\ttotalFiles: 3,\r\n\t\t\ttotalSize: 3.5 * 1024 * 1024,\r\n\t\t\taverageFileSize: 1.17 * 1024 * 1024,\r\n\t\t\toldestFile: new Date(),\r\n\t\t\tnewestFile: new Date(),\r\n\t\t\tfileTypes: {},\r\n\t\t\taccessPatterns: mockAccessPatterns,\r\n\t\t})\r\n\r\n\t\t// Setup fs mocks\r\n\t\tmockFs.unlink.mockResolvedValue(undefined)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('performEviction', () => {\r\n\t\tit('should perform eviction with intelligent strategy', async () => {\r\n\t\t\tconst result = await service.performEviction(1024 * 1024) // 1MB target\r\n\r\n\t\t\texpect(result.filesEvicted).toBeGreaterThan(0)\r\n\t\t\texpect(result.sizeFreed).toBeGreaterThan(0)\r\n\t\t\texpect(result.strategy).toBe('intelligent')\r\n\t\t\texpect(result.errors).toEqual([])\r\n\t\t\texpect(result.duration).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should return zero results when no candidates available', async () => {\r\n\t\t\tstorageMonitoring.getEvictionCandidates.mockResolvedValue([])\r\n\r\n\t\t\tconst result = await service.performEviction()\r\n\r\n\t\t\texpect(result.filesEvicted).toBe(0)\r\n\t\t\texpect(result.sizeFreed).toBe(0)\r\n\t\t\texpect(result.errors).toEqual([])\r\n\t\t})\r\n\r\n\t\tit('should handle file deletion errors gracefully', async () => {\r\n\t\t\tmockFs.unlink.mockRejectedValue(new Error('Permission denied'))\r\n\r\n\t\t\tconst result = await service.performEviction()\r\n\r\n\t\t\texpect(result.errors.length).toBeGreaterThan(0)\r\n\t\t\texpect(result.errors[0]).toContain('Permission denied')\r\n\t\t})\r\n\r\n\t\tit('should respect target size when specified', async () => {\r\n\t\t\tconst targetSize = 512 * 1024 // 512KB\r\n\t\t\tconst result = await service.performEviction(targetSize)\r\n\r\n\t\t\texpect(result.sizeFreed).toBeGreaterThanOrEqual(targetSize)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('performThresholdBasedEviction', () => {\r\n\t\tit('should not evict when storage is healthy', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'healthy',\r\n\t\t\t\tissues: [],\r\n\t\t\t\tstats: {\r\n\t\t\t\t\ttotalSize: 100 * 1024 * 1024,\r\n\t\t\t\t\ttotalFiles: 100,\r\n\t\t\t\t\taverageFileSize: 1024 * 1024,\r\n\t\t\t\t\toldestFile: new Date('2024-01-01'),\r\n\t\t\t\t\tnewestFile: new Date('2024-01-15'),\r\n\t\t\t\t\tfileTypes: { '.jpg': 50, '.png': 30, '.webp': 20 },\r\n\t\t\t\t\taccessPatterns: [],\r\n\t\t\t\t},\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.performThresholdBasedEviction()\r\n\r\n\t\t\texpect(result.filesEvicted).toBe(0)\r\n\t\t\texpect(result.strategy).toBe('threshold-based')\r\n\t\t})\r\n\r\n\t\tit('should perform moderate cleanup on warning status', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'warning',\r\n\t\t\t\tissues: ['Storage size warning'],\r\n\t\t\t\tstats: {\r\n\t\t\t\t\ttotalSize: 800 * 1024 * 1024, // 800MB\r\n\t\t\t\t\ttotalFiles: 1000,\r\n\t\t\t\t\taverageFileSize: 800 * 1024,\r\n\t\t\t\t\toldestFile: new Date('2024-01-01'),\r\n\t\t\t\t\tnewestFile: new Date('2024-01-15'),\r\n\t\t\t\t\tfileTypes: { '.jpg': 500, '.png': 300, '.webp': 200 },\r\n\t\t\t\t\taccessPatterns: [],\r\n\t\t\t\t},\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.performThresholdBasedEviction()\r\n\r\n\t\t\texpect(result.filesEvicted).toBeGreaterThan(0)\r\n\t\t\t// Should target 20% of storage (160MB)\r\n\t\t\texpect(storageMonitoring.getEvictionCandidates).toHaveBeenCalledWith(160 * 1024 * 1024)\r\n\t\t})\r\n\r\n\t\tit('should perform aggressive cleanup on critical status', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'critical',\r\n\t\t\t\tissues: ['Storage size critical'],\r\n\t\t\t\tstats: {\r\n\t\t\t\t\ttotalSize: 1000 * 1024 * 1024, // 1GB\r\n\t\t\t\t\ttotalFiles: 2000,\r\n\t\t\t\t\taverageFileSize: 500 * 1024,\r\n\t\t\t\t\toldestFile: new Date('2024-01-01'),\r\n\t\t\t\t\tnewestFile: new Date('2024-01-15'),\r\n\t\t\t\t\tfileTypes: { '.jpg': 1000, '.png': 600, '.webp': 400 },\r\n\t\t\t\t\taccessPatterns: [],\r\n\t\t\t\t},\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.performThresholdBasedEviction()\r\n\r\n\t\t\texpect(result.filesEvicted).toBeGreaterThan(0)\r\n\t\t\t// Should target 40% of storage (400MB)\r\n\t\t\texpect(storageMonitoring.getEvictionCandidates).toHaveBeenCalledWith(400 * 1024 * 1024)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getEvictionRecommendations', () => {\r\n\t\tit('should return eviction recommendations without executing', async () => {\r\n\t\t\tconst recommendations = await service.getEvictionRecommendations()\r\n\r\n\t\t\texpect(recommendations.candidates).toBeDefined()\r\n\t\t\texpect(recommendations.totalSize).toBeGreaterThan(0)\r\n\t\t\texpect(recommendations.strategy).toBe('intelligent')\r\n\t\t\texpect(recommendations.reasoning).toBeInstanceOf(Array)\r\n\t\t\texpect(recommendations.reasoning.length).toBeGreaterThan(0)\r\n\t\t})\r\n\r\n\t\tit('should provide detailed reasoning for recommendations', async () => {\r\n\t\t\tconst recommendations = await service.getEvictionRecommendations(1024 * 1024)\r\n\r\n\t\t\texpect(recommendations.reasoning).toContainEqual(\r\n\t\t\t\texpect.stringMatching(/Selected \\d+ files totaling/),\r\n\t\t\t)\r\n\t\t\texpect(recommendations.reasoning).toContainEqual(\r\n\t\t\t\texpect.stringMatching(/Average access count:/),\r\n\t\t\t)\r\n\t\t\texpect(recommendations.reasoning).toContainEqual(\r\n\t\t\t\texpect.stringMatching(/Strategy: intelligent/),\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('eviction strategies', () => {\r\n\t\tit('should apply LRU strategy correctly', async () => {\r\n\t\t\t// Mock config to use LRU strategy\r\n\t\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tif (key === 'storage.eviction.strategy')\r\n\t\t\t\t\treturn 'lru'\r\n\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t'storage.eviction.aggressiveness': 'moderate',\r\n\t\t\t\t\t'storage.eviction.preservePopular': true,\r\n\t\t\t\t\t'storage.eviction.minAccessCount': 5,\r\n\t\t\t\t\t'storage.eviction.maxFileAge': 7,\r\n\t\t\t\t}\r\n\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t})\r\n\r\n\t\t\t// Recreate service with new config\r\n\t\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tIntelligentEvictionService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\t\tuseValue: storageMonitoring,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: configService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst lruService = module.get<IntelligentEvictionService>(IntelligentEvictionService)\r\n\t\t\tconst result = await lruService.performEviction()\r\n\r\n\t\t\texpect(result.strategy).toBe('lru')\r\n\t\t})\r\n\r\n\t\tit('should apply size-based strategy correctly', async () => {\r\n\t\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tif (key === 'storage.eviction.strategy')\r\n\t\t\t\t\treturn 'size-based'\r\n\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t'storage.eviction.aggressiveness': 'moderate',\r\n\t\t\t\t\t'storage.eviction.preservePopular': true,\r\n\t\t\t\t\t'storage.eviction.minAccessCount': 5,\r\n\t\t\t\t\t'storage.eviction.maxFileAge': 7,\r\n\t\t\t\t}\r\n\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t})\r\n\r\n\t\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tIntelligentEvictionService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\t\tuseValue: storageMonitoring,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: configService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst sizeService = module.get<IntelligentEvictionService>(IntelligentEvictionService)\r\n\t\t\tconst result = await sizeService.performEviction()\r\n\r\n\t\t\texpect(result.strategy).toBe('size-based')\r\n\t\t})\r\n\r\n\t\tit('should preserve popular files when configured', async () => {\r\n\t\t\t// Set high access count threshold\r\n\t\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tif (key === 'storage.eviction.minAccessCount')\r\n\t\t\t\t\treturn 40\r\n\t\t\t\tif (key === 'storage.eviction.preservePopular')\r\n\t\t\t\t\treturn true\r\n\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t'storage.eviction.strategy': 'intelligent',\r\n\t\t\t\t\t'storage.eviction.aggressiveness': 'moderate',\r\n\t\t\t\t\t'storage.eviction.maxFileAge': 7,\r\n\t\t\t\t}\r\n\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t})\r\n\r\n\t\t\tawait service.performEviction()\r\n\r\n\t\t\t// Popular file should be preserved (has 50 access count)\r\n\t\t\texpect(mockFs.unlink).not.toHaveBeenCalledWith(\r\n\t\t\t\texpect.stringContaining('popular-file.webp'),\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error handling', () => {\r\n\t\tit('should handle unknown strategy gracefully', async () => {\r\n\t\t\t// Create a new service instance with unknown strategy configuration\r\n\t\t\tconst unknownStrategyConfigService = {\r\n\t\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\t\t\treturn '/test/storage'\r\n\t\t\t\t\treturn undefined\r\n\t\t\t\t}),\r\n\t\t\t\tgetOptional: vi.fn().mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\t\tif (key === 'storage.eviction.strategy')\r\n\t\t\t\t\t\treturn 'unknown-strategy'\r\n\t\t\t\t\tconst defaults: Record<string, any> = {\r\n\t\t\t\t\t\t'storage.eviction.aggressiveness': 'moderate',\r\n\t\t\t\t\t\t'storage.eviction.preservePopular': true,\r\n\t\t\t\t\t\t'storage.eviction.minAccessCount': 5,\r\n\t\t\t\t\t\t'storage.eviction.maxFileAge': 7,\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn defaults[key] || defaultValue\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\r\n\t\t\tconst unknownStrategyModule: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tIntelligentEvictionService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\t\tuseValue: storageMonitoring,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: unknownStrategyConfigService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst unknownStrategyService = unknownStrategyModule.get<IntelligentEvictionService>(IntelligentEvictionService)\r\n\t\t\tconst result = await unknownStrategyService.performEviction()\r\n\r\n\t\t\texpect(result.errors).toContainEqual(expect.stringMatching(/Unknown eviction strategy/))\r\n\t\t\texpect(result.filesEvicted).toBe(0)\r\n\t\t})\r\n\r\n\t\tit('should handle storage monitoring errors', async () => {\r\n\t\t\tstorageMonitoring.getEvictionCandidates.mockRejectedValue(new Error('Storage error'))\r\n\r\n\t\t\tconst result = await service.performEviction()\r\n\r\n\t\t\texpect(result.errors).toContainEqual(expect.stringMatching(/Storage error/))\r\n\t\t\texpect(result.filesEvicted).toBe(0)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["promises","fs","ConfigService","IntelligentEvictionService","StorageMonitoringService","Test","afterEach","beforeEach","describe","expect","it","vi","mock","unlink","fn","mockFs","service","storageMonitoring","configService","mockAccessPatterns","file","lastAccessed","Date","now","accessCount","size","extension","mockStorageMonitoring","getStorageStats","getEvictionCandidates","checkThresholds","mockConfigService","get","mockImplementation","key","undefined","getOptional","defaultValue","defaults","module","createTestingModule","providers","provide","useValue","compile","mockResolvedValue","totalFiles","totalSize","averageFileSize","oldestFile","newestFile","fileTypes","accessPatterns","clearAllMocks","result","performEviction","filesEvicted","toBeGreaterThan","sizeFreed","strategy","toBe","errors","toEqual","duration","mockRejectedValue","Error","length","toContain","targetSize","toBeGreaterThanOrEqual","status","issues","stats","performThresholdBasedEviction","toHaveBeenCalledWith","recommendations","getEvictionRecommendations","candidates","toBeDefined","reasoning","toBeInstanceOf","Array","toContainEqual","stringMatching","lruService","sizeService","not","stringContaining","unknownStrategyConfigService","unknownStrategyModule","unknownStrategyService"],"mappings":"AACA,SAASA,YAAYC,EAAE,QAAQ,UAAS;AACxC,SAASC,aAAa,QAAQ,gDAAqC;AACnE,SAASC,0BAA0B,QAAQ,wEAA6D;AACxG,SAASC,wBAAwB,QAAQ,sEAA2D;AACpG,SAASC,IAAI,QAAuB,kBAAiB;AACrD,SAASC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,QAAQ,SAAQ;AAExE,iBAAiB;AACjBA,GAAGC,IAAI,CAAC,WAAW,IAAO,CAAA;QACzBZ,UAAU;YACTa,QAAQF,GAAGG,EAAE;QACd;IACD,CAAA;AAEA,MAAMC,SAASd;AAEfO,SAAS,8BAA8B;IACtC,IAAIQ;IACJ,IAAIC;IACJ,IAAIC;IAEJ,MAAMC,qBAAqB;QAC1B;YACCC,MAAM;YACNC,cAAc,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK;YACxDC,aAAa;YACbC,MAAM,OAAO;YACbC,WAAW;QACZ;QACA;YACCN,MAAM;YACNC,cAAc,IAAIC,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;YACvDC,aAAa;YACbC,MAAM,IAAI,OAAO;YACjBC,WAAW;QACZ;QACA;YACCN,MAAM;YACNC,cAAc,IAAIC,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;YACvDC,aAAa;YACbC,MAAM,MAAM;YACZC,WAAW;QACZ;KACA;IAEDnB,WAAW;QACV,MAAMoB,wBAAwB;YAC7BC,iBAAiBjB,GAAGG,EAAE;YACtBe,uBAAuBlB,GAAGG,EAAE;YAC5BgB,iBAAiBnB,GAAGG,EAAE;QACvB;QAEA,MAAMiB,oBAAoB;YACzBC,KAAKrB,GAAGG,EAAE,GAAGmB,kBAAkB,CAAC,CAACC;gBAChC,IAAIA,QAAQ,wBACX,OAAO;gBACR,OAAOC;YACR;YACAC,aAAazB,GAAGG,EAAE,GAAGmB,kBAAkB,CAAC,CAACC,KAAaG;gBACrD,MAAMC,WAAgC;oBACrC,6BAA6B;oBAC7B,mCAAmC;oBACnC,oCAAoC;oBACpC,mCAAmC;oBACnC,+BAA+B;gBAChC;gBACA,OAAOA,QAAQ,CAACJ,IAAI,IAAIG;YACzB;QACD;QAEA,MAAME,SAAwB,MAAMlC,KAAKmC,mBAAmB,CAAC;YAC5DC,WAAW;gBACVtC;gBACA;oBACCuC,SAAStC;oBACTuC,UAAUhB;gBACX;gBACA;oBACCe,SAASxC;oBACTyC,UAAUZ;gBACX;aACA;QACF,GAAGa,OAAO;QAEV5B,UAAUuB,OAAOP,GAAG,CAA6B7B;QACjDc,oBAAoBsB,OAAOP,GAAG,CAAC5B;QAC/Bc,gBAAgBqB,OAAOP,GAAG,CAAC9B;QAE3B,iCAAiC;QACjCe,kBAAkBY,qBAAqB,CAACgB,iBAAiB,CAAC1B;QAC1DF,kBAAkBW,eAAe,CAACiB,iBAAiB,CAAC;YACnDC,YAAY;YACZC,WAAW,MAAM,OAAO;YACxBC,iBAAiB,OAAO,OAAO;YAC/BC,YAAY,IAAI3B;YAChB4B,YAAY,IAAI5B;YAChB6B,WAAW,CAAC;YACZC,gBAAgBjC;QACjB;QAEA,iBAAiB;QACjBJ,OAAOF,MAAM,CAACgC,iBAAiB,CAACV;IACjC;IAEA7B,UAAU;QACTK,GAAG0C,aAAa;IACjB;IAEA7C,SAAS,mBAAmB;QAC3BE,GAAG,qDAAqD;YACvD,MAAM4C,SAAS,MAAMtC,QAAQuC,eAAe,CAAC,OAAO,MAAM,aAAa;;YAEvE9C,OAAO6C,OAAOE,YAAY,EAAEC,eAAe,CAAC;YAC5ChD,OAAO6C,OAAOI,SAAS,EAAED,eAAe,CAAC;YACzChD,OAAO6C,OAAOK,QAAQ,EAAEC,IAAI,CAAC;YAC7BnD,OAAO6C,OAAOO,MAAM,EAAEC,OAAO,CAAC,EAAE;YAChCrD,OAAO6C,OAAOS,QAAQ,EAAEN,eAAe,CAAC;QACzC;QAEA/C,GAAG,2DAA2D;YAC7DO,kBAAkBY,qBAAqB,CAACgB,iBAAiB,CAAC,EAAE;YAE5D,MAAMS,SAAS,MAAMtC,QAAQuC,eAAe;YAE5C9C,OAAO6C,OAAOE,YAAY,EAAEI,IAAI,CAAC;YACjCnD,OAAO6C,OAAOI,SAAS,EAAEE,IAAI,CAAC;YAC9BnD,OAAO6C,OAAOO,MAAM,EAAEC,OAAO,CAAC,EAAE;QACjC;QAEApD,GAAG,iDAAiD;YACnDK,OAAOF,MAAM,CAACmD,iBAAiB,CAAC,IAAIC,MAAM;YAE1C,MAAMX,SAAS,MAAMtC,QAAQuC,eAAe;YAE5C9C,OAAO6C,OAAOO,MAAM,CAACK,MAAM,EAAET,eAAe,CAAC;YAC7ChD,OAAO6C,OAAOO,MAAM,CAAC,EAAE,EAAEM,SAAS,CAAC;QACpC;QAEAzD,GAAG,6CAA6C;YAC/C,MAAM0D,aAAa,MAAM,KAAK,QAAQ;;YACtC,MAAMd,SAAS,MAAMtC,QAAQuC,eAAe,CAACa;YAE7C3D,OAAO6C,OAAOI,SAAS,EAAEW,sBAAsB,CAACD;QACjD;IACD;IAEA5D,SAAS,iCAAiC;QACzCE,GAAG,4CAA4C;YAC9CO,kBAAkBa,eAAe,CAACe,iBAAiB,CAAC;gBACnDyB,QAAQ;gBACRC,QAAQ,EAAE;gBACVC,OAAO;oBACNzB,WAAW,MAAM,OAAO;oBACxBD,YAAY;oBACZE,iBAAiB,OAAO;oBACxBC,YAAY,IAAI3B,KAAK;oBACrB4B,YAAY,IAAI5B,KAAK;oBACrB6B,WAAW;wBAAE,QAAQ;wBAAI,QAAQ;wBAAI,SAAS;oBAAG;oBACjDC,gBAAgB,EAAE;gBACnB;YACD;YAEA,MAAME,SAAS,MAAMtC,QAAQyD,6BAA6B;YAE1DhE,OAAO6C,OAAOE,YAAY,EAAEI,IAAI,CAAC;YACjCnD,OAAO6C,OAAOK,QAAQ,EAAEC,IAAI,CAAC;QAC9B;QAEAlD,GAAG,qDAAqD;YACvDO,kBAAkBa,eAAe,CAACe,iBAAiB,CAAC;gBACnDyB,QAAQ;gBACRC,QAAQ;oBAAC;iBAAuB;gBAChCC,OAAO;oBACNzB,WAAW,MAAM,OAAO;oBACxBD,YAAY;oBACZE,iBAAiB,MAAM;oBACvBC,YAAY,IAAI3B,KAAK;oBACrB4B,YAAY,IAAI5B,KAAK;oBACrB6B,WAAW;wBAAE,QAAQ;wBAAK,QAAQ;wBAAK,SAAS;oBAAI;oBACpDC,gBAAgB,EAAE;gBACnB;YACD;YAEA,MAAME,SAAS,MAAMtC,QAAQyD,6BAA6B;YAE1DhE,OAAO6C,OAAOE,YAAY,EAAEC,eAAe,CAAC;YAC5C,uCAAuC;YACvChD,OAAOQ,kBAAkBY,qBAAqB,EAAE6C,oBAAoB,CAAC,MAAM,OAAO;QACnF;QAEAhE,GAAG,wDAAwD;YAC1DO,kBAAkBa,eAAe,CAACe,iBAAiB,CAAC;gBACnDyB,QAAQ;gBACRC,QAAQ;oBAAC;iBAAwB;gBACjCC,OAAO;oBACNzB,WAAW,OAAO,OAAO;oBACzBD,YAAY;oBACZE,iBAAiB,MAAM;oBACvBC,YAAY,IAAI3B,KAAK;oBACrB4B,YAAY,IAAI5B,KAAK;oBACrB6B,WAAW;wBAAE,QAAQ;wBAAM,QAAQ;wBAAK,SAAS;oBAAI;oBACrDC,gBAAgB,EAAE;gBACnB;YACD;YAEA,MAAME,SAAS,MAAMtC,QAAQyD,6BAA6B;YAE1DhE,OAAO6C,OAAOE,YAAY,EAAEC,eAAe,CAAC;YAC5C,uCAAuC;YACvChD,OAAOQ,kBAAkBY,qBAAqB,EAAE6C,oBAAoB,CAAC,MAAM,OAAO;QACnF;IACD;IAEAlE,SAAS,8BAA8B;QACtCE,GAAG,4DAA4D;YAC9D,MAAMiE,kBAAkB,MAAM3D,QAAQ4D,0BAA0B;YAEhEnE,OAAOkE,gBAAgBE,UAAU,EAAEC,WAAW;YAC9CrE,OAAOkE,gBAAgB5B,SAAS,EAAEU,eAAe,CAAC;YAClDhD,OAAOkE,gBAAgBhB,QAAQ,EAAEC,IAAI,CAAC;YACtCnD,OAAOkE,gBAAgBI,SAAS,EAAEC,cAAc,CAACC;YACjDxE,OAAOkE,gBAAgBI,SAAS,CAACb,MAAM,EAAET,eAAe,CAAC;QAC1D;QAEA/C,GAAG,yDAAyD;YAC3D,MAAMiE,kBAAkB,MAAM3D,QAAQ4D,0BAA0B,CAAC,OAAO;YAExEnE,OAAOkE,gBAAgBI,SAAS,EAAEG,cAAc,CAC/CzE,OAAO0E,cAAc,CAAC;YAEvB1E,OAAOkE,gBAAgBI,SAAS,EAAEG,cAAc,CAC/CzE,OAAO0E,cAAc,CAAC;YAEvB1E,OAAOkE,gBAAgBI,SAAS,EAAEG,cAAc,CAC/CzE,OAAO0E,cAAc,CAAC;QAExB;IACD;IAEA3E,SAAS,uBAAuB;QAC/BE,GAAG,uCAAuC;YACzC,kCAAkC;YAClCQ,cAAckB,WAAW,CAACH,kBAAkB,CAAC,CAACC,KAAaG;gBAC1D,IAAIH,QAAQ,6BACX,OAAO;gBACR,MAAMI,WAAgC;oBACrC,mCAAmC;oBACnC,oCAAoC;oBACpC,mCAAmC;oBACnC,+BAA+B;gBAChC;gBACA,OAAOA,QAAQ,CAACJ,IAAI,IAAIG;YACzB;YAEA,mCAAmC;YACnC,MAAME,SAAwB,MAAMlC,KAAKmC,mBAAmB,CAAC;gBAC5DC,WAAW;oBACVtC;oBACA;wBACCuC,SAAStC;wBACTuC,UAAU1B;oBACX;oBACA;wBACCyB,SAASxC;wBACTyC,UAAUzB;oBACX;iBACA;YACF,GAAG0B,OAAO;YAEV,MAAMwC,aAAa7C,OAAOP,GAAG,CAA6B7B;YAC1D,MAAMmD,SAAS,MAAM8B,WAAW7B,eAAe;YAE/C9C,OAAO6C,OAAOK,QAAQ,EAAEC,IAAI,CAAC;QAC9B;QAEAlD,GAAG,8CAA8C;YAChDQ,cAAckB,WAAW,CAACH,kBAAkB,CAAC,CAACC,KAAaG;gBAC1D,IAAIH,QAAQ,6BACX,OAAO;gBACR,MAAMI,WAAgC;oBACrC,mCAAmC;oBACnC,oCAAoC;oBACpC,mCAAmC;oBACnC,+BAA+B;gBAChC;gBACA,OAAOA,QAAQ,CAACJ,IAAI,IAAIG;YACzB;YAEA,MAAME,SAAwB,MAAMlC,KAAKmC,mBAAmB,CAAC;gBAC5DC,WAAW;oBACVtC;oBACA;wBACCuC,SAAStC;wBACTuC,UAAU1B;oBACX;oBACA;wBACCyB,SAASxC;wBACTyC,UAAUzB;oBACX;iBACA;YACF,GAAG0B,OAAO;YAEV,MAAMyC,cAAc9C,OAAOP,GAAG,CAA6B7B;YAC3D,MAAMmD,SAAS,MAAM+B,YAAY9B,eAAe;YAEhD9C,OAAO6C,OAAOK,QAAQ,EAAEC,IAAI,CAAC;QAC9B;QAEAlD,GAAG,iDAAiD;YACnD,kCAAkC;YAClCQ,cAAckB,WAAW,CAACH,kBAAkB,CAAC,CAACC,KAAaG;gBAC1D,IAAIH,QAAQ,mCACX,OAAO;gBACR,IAAIA,QAAQ,oCACX,OAAO;gBACR,MAAMI,WAAgC;oBACrC,6BAA6B;oBAC7B,mCAAmC;oBACnC,+BAA+B;gBAChC;gBACA,OAAOA,QAAQ,CAACJ,IAAI,IAAIG;YACzB;YAEA,MAAMrB,QAAQuC,eAAe;YAE7B,yDAAyD;YACzD9C,OAAOM,OAAOF,MAAM,EAAEyE,GAAG,CAACZ,oBAAoB,CAC7CjE,OAAO8E,gBAAgB,CAAC;QAE1B;IACD;IAEA/E,SAAS,kBAAkB;QAC1BE,GAAG,6CAA6C;YAC/C,oEAAoE;YACpE,MAAM8E,+BAA+B;gBACpCxD,KAAKrB,GAAGG,EAAE,GAAGmB,kBAAkB,CAAC,CAACC;oBAChC,IAAIA,QAAQ,wBACX,OAAO;oBACR,OAAOC;gBACR;gBACAC,aAAazB,GAAGG,EAAE,GAAGmB,kBAAkB,CAAC,CAACC,KAAaG;oBACrD,IAAIH,QAAQ,6BACX,OAAO;oBACR,MAAMI,WAAgC;wBACrC,mCAAmC;wBACnC,oCAAoC;wBACpC,mCAAmC;wBACnC,+BAA+B;oBAChC;oBACA,OAAOA,QAAQ,CAACJ,IAAI,IAAIG;gBACzB;YACD;YAEA,MAAMoD,wBAAuC,MAAMpF,KAAKmC,mBAAmB,CAAC;gBAC3EC,WAAW;oBACVtC;oBACA;wBACCuC,SAAStC;wBACTuC,UAAU1B;oBACX;oBACA;wBACCyB,SAASxC;wBACTyC,UAAU6C;oBACX;iBACA;YACF,GAAG5C,OAAO;YAEV,MAAM8C,yBAAyBD,sBAAsBzD,GAAG,CAA6B7B;YACrF,MAAMmD,SAAS,MAAMoC,uBAAuBnC,eAAe;YAE3D9C,OAAO6C,OAAOO,MAAM,EAAEqB,cAAc,CAACzE,OAAO0E,cAAc,CAAC;YAC3D1E,OAAO6C,OAAOE,YAAY,EAAEI,IAAI,CAAC;QAClC;QAEAlD,GAAG,2CAA2C;YAC7CO,kBAAkBY,qBAAqB,CAACmC,iBAAiB,CAAC,IAAIC,MAAM;YAEpE,MAAMX,SAAS,MAAMtC,QAAQuC,eAAe;YAE5C9C,OAAO6C,OAAOO,MAAM,EAAEqB,cAAc,CAACzE,OAAO0E,cAAc,CAAC;YAC3D1E,OAAO6C,OAAOE,YAAY,EAAEI,IAAI,CAAC;QAClC;IACD;AACD"}