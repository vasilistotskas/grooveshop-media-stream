{"version":3,"sources":["../../../../../src/test/Storage/integration/storage-management.integration.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { Buffer } from 'node:buffer'\r\nimport { promises as fs } from 'node:fs'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { StorageHealthIndicator } from '@microservice/Storage/indicators/storage-health.indicator'\r\nimport { IntelligentEvictionService } from '@microservice/Storage/services/intelligent-eviction.service'\r\nimport { StorageCleanupService } from '@microservice/Storage/services/storage-cleanup.service'\r\nimport { StorageMonitoringService } from '@microservice/Storage/services/storage-monitoring.service'\r\nimport { StorageOptimizationService } from '@microservice/Storage/services/storage-optimization.service'\r\nimport { StorageModule } from '@microservice/Storage/storage.module'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterAll, beforeAll, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock fs module for integration tests\r\nvi.mock('node:fs', () => ({\r\n\tpromises: {\r\n\t\treaddir: vi.fn(),\r\n\t\tstat: vi.fn(),\r\n\t\tunlink: vi.fn(),\r\n\t\tmkdir: vi.fn(),\r\n\t\treadFile: vi.fn(),\r\n\t\twriteFile: vi.fn(),\r\n\t\tcopyFile: vi.fn(),\r\n\t\tlink: vi.fn(),\r\n\t},\r\n\texistsSync: vi.fn().mockReturnValue(true),\r\n\treadFileSync: vi.fn().mockReturnValue(''),\r\n}))\r\n\r\nconst mockFs = fs as MockedObject<typeof fs>\r\n\r\ndescribe('storage Management Integration', () => {\r\n\tlet module: TestingModule\r\n\tlet storageMonitoring: StorageMonitoringService\r\n\tlet intelligentEviction: IntelligentEvictionService\r\n\tlet storageCleanup: StorageCleanupService\r\n\tlet storageOptimization: StorageOptimizationService\r\n\tlet storageHealth: StorageHealthIndicator\r\n\r\n\tconst testStorageDir = '/test/storage'\r\n\tconst mockFiles = [\r\n\t\t'popular-image.webp',\r\n\t\t'old-cache.json',\r\n\t\t'recent-image.jpg',\r\n\t\t'temp-file.tmp',\r\n\t\t'large-image.png',\r\n\t]\r\n\r\n\tbeforeAll(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\t\treturn testStorageDir\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t\tgetOptional: vi.fn().mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tconst defaults = {\r\n\t\t\t\t\t// Storage monitoring\r\n\t\t\t\t\t'storage.warningSize': 800 * 1024 * 1024,\r\n\t\t\t\t\t'storage.criticalSize': 1024 * 1024 * 1024,\r\n\t\t\t\t\t'storage.warningFileCount': 5000,\r\n\t\t\t\t\t'storage.criticalFileCount': 10000,\r\n\t\t\t\t\t'storage.maxFileAge': 30,\r\n\r\n\t\t\t\t\t// Eviction\r\n\t\t\t\t\t'storage.eviction.strategy': 'intelligent',\r\n\t\t\t\t\t'storage.eviction.aggressiveness': 'moderate',\r\n\t\t\t\t\t'storage.eviction.preservePopular': true,\r\n\t\t\t\t\t'storage.eviction.minAccessCount': 5,\r\n\t\t\t\t\t'storage.eviction.maxFileAge': 7,\r\n\r\n\t\t\t\t\t// Cleanup\r\n\t\t\t\t\t'storage.cleanup.enabled': true,\r\n\t\t\t\t\t'storage.cleanup.cronSchedule': '0 2 * * *',\r\n\t\t\t\t\t'storage.cleanup.dryRun': false,\r\n\t\t\t\t\t'storage.cleanup.maxDuration': 300000,\r\n\r\n\t\t\t\t\t// Optimization\r\n\t\t\t\t\t'storage.optimization.enabled': true,\r\n\t\t\t\t\t'storage.optimization.strategies': ['compression', 'deduplication'],\r\n\t\t\t\t\t'storage.optimization.popularityThreshold': 10,\r\n\t\t\t\t\t'storage.optimization.compressionRatio': 0.7,\r\n\t\t\t\t\t'storage.optimization.createBackups': true,\r\n\t\t\t\t}\r\n\t\t\t\treturn (defaults as any)[key] || defaultValue\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tmodule = await Test.createTestingModule({\r\n\t\t\timports: [StorageModule],\r\n\t\t})\r\n\t\t\t.overrideProvider(ConfigService)\r\n\t\t\t.useValue(mockConfigService)\r\n\t\t\t.compile()\r\n\r\n\t\tstorageMonitoring = module.get<StorageMonitoringService>(StorageMonitoringService)\r\n\t\tintelligentEviction = module.get<IntelligentEvictionService>(IntelligentEvictionService)\r\n\t\tstorageCleanup = module.get<StorageCleanupService>(StorageCleanupService)\r\n\t\tstorageOptimization = module.get<StorageOptimizationService>(StorageOptimizationService)\r\n\t\tstorageHealth = module.get<StorageHealthIndicator>(StorageHealthIndicator)\r\n\r\n\t\t// Setup fs mocks\r\n\t\tmockFs.mkdir.mockResolvedValue(undefined)\r\n\t\tmockFs.readdir.mockResolvedValue(mockFiles as any)\r\n\t\tmockFs.unlink.mockResolvedValue(undefined)\r\n\t\tmockFs.readFile.mockResolvedValue(Buffer.from('test file content'))\r\n\t\tmockFs.writeFile.mockResolvedValue(undefined)\r\n\t\tmockFs.copyFile.mockResolvedValue(undefined)\r\n\t\tmockFs.link.mockResolvedValue(undefined)\r\n\t})\r\n\r\n\tbeforeEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\r\n\t\t// Setup file stats with different characteristics\r\n\t\tmockFs.stat.mockImplementation((filePath: any) => {\r\n\t\t\tconst filename = filePath.split(/[/\\\\]/).pop()\r\n\t\t\tlet stats: any\r\n\r\n\t\t\tswitch (filename) {\r\n\t\t\t\tcase 'popular-image.webp':\r\n\t\t\t\t\tstats = {\r\n\t\t\t\t\t\tsize: 2 * 1024 * 1024, // 2MB\r\n\t\t\t\t\t\tmtime: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days old\r\n\t\t\t\t\t\tatime: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // Accessed 1 day ago\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'old-cache.json':\r\n\t\t\t\t\tstats = {\r\n\t\t\t\t\t\tsize: 512 * 1024, // 512KB\r\n\t\t\t\t\t\tmtime: new Date(Date.now() - 25 * 24 * 60 * 60 * 1000), // 25 days old (within 30 day threshold)\r\n\t\t\t\t\t\tatime: new Date(Date.now() - 25 * 24 * 60 * 60 * 1000),\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'recent-image.jpg':\r\n\t\t\t\t\tstats = {\r\n\t\t\t\t\t\tsize: 1024 * 1024, // 1MB\r\n\t\t\t\t\t\tmtime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days old\r\n\t\t\t\t\t\tatime: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'temp-file.tmp':\r\n\t\t\t\t\tstats = {\r\n\t\t\t\t\t\tsize: 256 * 1024, // 256KB\r\n\t\t\t\t\t\tmtime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days old\r\n\t\t\t\t\t\tatime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'large-image.png':\r\n\t\t\t\t\tstats = {\r\n\t\t\t\t\t\tsize: 5 * 1024 * 1024, // 5MB\r\n\t\t\t\t\t\tmtime: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10 days old\r\n\t\t\t\t\t\tatime: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tstats = {\r\n\t\t\t\t\t\tsize: 1024 * 1024,\r\n\t\t\t\t\t\tmtime: new Date(),\r\n\t\t\t\t\t\tatime: new Date(),\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn Promise.resolve(stats)\r\n\t\t})\r\n\t})\r\n\r\n\tafterAll(async () => {\r\n\t\tawait module.close()\r\n\t})\r\n\r\n\tdescribe('end-to-End Storage Management Workflow', () => {\r\n\t\tit('should perform complete storage management cycle', async () => {\r\n\t\t\t// 1. Monitor storage and get initial stats\r\n\t\t\tconst initialStats = await storageMonitoring.getStorageStats()\r\n\t\t\texpect(initialStats.totalFiles).toBe(5)\r\n\t\t\texpect(initialStats.totalSize).toBe(8.75 * 1024 * 1024) // Total of all file sizes\r\n\r\n\t\t\t// 2. Check storage thresholds\r\n\t\t\tconst thresholdCheck = await storageMonitoring.checkThresholds()\r\n\t\t\texpect(thresholdCheck.status).toBe('healthy') // Should be healthy with test data\r\n\r\n\t\t\t// 3. Get eviction candidates\r\n\t\t\tconst evictionCandidates = await storageMonitoring.getEvictionCandidates(2 * 1024 * 1024) // 2MB target\r\n\t\t\texpect(evictionCandidates.length).toBeGreaterThan(0)\r\n\r\n\t\t\t// 4. Perform intelligent eviction\r\n\t\t\tconst evictionResult = await intelligentEviction.performEviction(1 * 1024 * 1024) // 1MB target\r\n\t\t\texpect(evictionResult.filesEvicted).toBeGreaterThan(0)\r\n\t\t\texpect(evictionResult.sizeFreed).toBeGreaterThan(0)\r\n\r\n\t\t\t// 5. Run cleanup with retention policies\r\n\t\t\tconst cleanupResult = await storageCleanup.performCleanup()\r\n\t\t\texpect(cleanupResult.filesRemoved).toBeGreaterThan(0)\r\n\t\t\texpect(cleanupResult.policiesApplied.length).toBeGreaterThan(0)\r\n\r\n\t\t\t// 6. Optimize frequently accessed files\r\n\t\t\t// First, simulate popular files by recording access\r\n\t\t\tstorageMonitoring.recordFileAccess('popular-image.webp')\r\n\t\t\tfor (let i = 0; i < 15; i++) {\r\n\t\t\t\tstorageMonitoring.recordFileAccess('popular-image.webp')\r\n\t\t\t}\r\n\r\n\t\t\tconst optimizationResult = await storageOptimization.optimizeFrequentlyAccessedFiles()\r\n\t\t\texpect(optimizationResult.strategy).toBeDefined()\r\n\r\n\t\t\t// 7. Check final health status\r\n\t\t\tconst healthResult = await storageHealth.isHealthy()\r\n\t\t\texpect(healthResult.storage).toBeDefined()\r\n\t\t\texpect(healthResult.storage.status).toMatch(/up|down/)\r\n\t\t})\r\n\r\n\t\tit('should handle storage threshold escalation', async () => {\r\n\t\t\t// Simulate high storage usage\r\n\t\t\tmockFs.stat.mockResolvedValue({\r\n\t\t\t\tsize: 200 * 1024 * 1024, // 200MB per file\r\n\t\t\t\tmtime: new Date(),\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t} as any)\r\n\r\n\t\t\t// Check thresholds - should be warning/critical\r\n\t\t\tconst thresholdCheck = await storageMonitoring.checkThresholds()\r\n\t\t\texpect(['warning', 'critical']).toContain(thresholdCheck.status)\r\n\r\n\t\t\t// Perform threshold-based eviction\r\n\t\t\tconst evictionResult = await intelligentEviction.performThresholdBasedEviction()\r\n\r\n\t\t\tif (thresholdCheck.status === 'critical') {\r\n\t\t\t\texpect(evictionResult.filesEvicted).toBeGreaterThan(0)\r\n\t\t\t}\r\n\r\n\t\t\t// Health check should reflect the situation\r\n\t\t\tconst healthResult = await storageHealth.isHealthy()\r\n\t\t\tif (thresholdCheck.status === 'critical') {\r\n\t\t\t\texpect(healthResult.storage.status).toBe('down')\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should coordinate cleanup and optimization', async () => {\r\n\t\t\t// Record access patterns to create popular files\r\n\t\t\tfor (let i = 0; i < 20; i++) {\r\n\t\t\t\tstorageMonitoring.recordFileAccess('popular-image.webp')\r\n\t\t\t}\r\n\t\t\tfor (let i = 0; i < 15; i++) {\r\n\t\t\t\tstorageMonitoring.recordFileAccess('recent-image.jpg')\r\n\t\t\t}\r\n\r\n\t\t\t// Run cleanup first\r\n\t\t\tconst cleanupResult = await storageCleanup.performCleanup()\r\n\r\n\t\t\t// Then optimize remaining popular files\r\n\t\t\tconst optimizationResult = await storageOptimization.optimizeFrequentlyAccessedFiles()\r\n\r\n\t\t\t// Both should have processed files\r\n\t\t\texpect(cleanupResult.filesRemoved + optimizationResult.filesOptimized).toBeGreaterThan(0)\r\n\r\n\t\t\t// Get final storage analysis\r\n\t\t\tconst analysis = await storageHealth.getStorageAnalysis()\r\n\t\t\texpect(analysis.stats).toBeDefined()\r\n\t\t\texpect(analysis.evictionCandidates).toBeDefined()\r\n\t\t\texpect(analysis.cleanupRecommendations).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('service Integration', () => {\r\n\t\tit('should share access pattern data between services', async () => {\r\n\t\t\t// Record access in monitoring service\r\n\t\t\tstorageMonitoring.recordFileAccess('popular-image.webp')\r\n\t\t\tstorageMonitoring.recordFileAccess('popular-image.webp')\r\n\r\n\t\t\t// Get stats to update patterns\r\n\t\t\tawait storageMonitoring.getStorageStats()\r\n\r\n\t\t\t// Eviction service should see the access patterns\r\n\t\t\tconst evictionCandidates = await storageMonitoring.getEvictionCandidates()\r\n\t\t\tconst popularFile = evictionCandidates.find(c => c.file === 'popular-image.webp')\r\n\r\n\t\t\tif (popularFile) {\r\n\t\t\t\texpect(popularFile.accessCount).toBeGreaterThan(1)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should provide consistent health reporting', async () => {\r\n\t\t\t// Get health status\r\n\t\t\tconst healthResult = await storageHealth.isHealthy()\r\n\r\n\t\t\t// Get detailed analysis\r\n\t\t\tconst analysis = await storageHealth.getStorageAnalysis()\r\n\r\n\t\t\t// Both should reflect same underlying data\r\n\t\t\texpect(healthResult.storage.totalFiles).toBe(analysis.stats.totalFiles)\r\n\t\t\texpect(healthResult.storage.recommendations).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should handle service dependencies correctly', async () => {\r\n\t\t\t// Cleanup service depends on monitoring and eviction\r\n\t\t\tconst cleanupStatus = storageCleanup.getCleanupStatus()\r\n\t\t\texpect(cleanupStatus.enabled).toBe(true)\r\n\r\n\t\t\t// Health indicator depends on monitoring and cleanup\r\n\t\t\tconst healthResult = await storageHealth.isHealthy()\r\n\t\t\texpect(healthResult.storage.cleanupStatus).toBeDefined()\r\n\r\n\t\t\t// Optimization depends on monitoring\r\n\t\t\tconst optimizationStats = storageOptimization.getOptimizationStats()\r\n\t\t\texpect(optimizationStats.enabled).toBe(true)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error Handling and Resilience', () => {\r\n\t\tit('should handle file system errors gracefully', async () => {\r\n\t\t\t// Simulate file system errors\r\n\t\t\tmockFs.readdir.mockRejectedValueOnce(new Error('Permission denied'))\r\n\t\t\tmockFs.stat.mockRejectedValueOnce(new Error('File not found'))\r\n\r\n\t\t\t// Services should handle errors without crashing\r\n\t\t\tawait expect(storageMonitoring.getStorageStats()).rejects.toThrow()\r\n\r\n\t\t\t// But other operations should still work\r\n\t\t\tconst cleanupStatus = storageCleanup.getCleanupStatus()\r\n\t\t\texpect(cleanupStatus).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should maintain service availability during partial failures', async () => {\r\n\t\t\t// Simulate partial failures\r\n\t\t\tmockFs.unlink.mockRejectedValueOnce(new Error('Permission denied'))\r\n\r\n\t\t\t// Cleanup should continue with other files\r\n\t\t\tconst cleanupResult = await storageCleanup.performCleanup()\r\n\t\t\texpect(cleanupResult.errors.length).toBeGreaterThan(0)\r\n\t\t\texpect(cleanupResult.filesRemoved).toBeGreaterThanOrEqual(0)\r\n\r\n\t\t\t// Health check should still work\r\n\t\t\tconst healthResult = await storageHealth.isHealthy()\r\n\t\t\texpect(healthResult.storage).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should provide meaningful error reporting', async () => {\r\n\t\t\t// Simulate various error conditions\r\n\t\t\tmockFs.stat.mockRejectedValue(new Error('Disk full'))\r\n\r\n\t\t\ttry {\r\n\t\t\t\tawait storageMonitoring.getStorageStats()\r\n\t\t\t}\r\n\t\t\tcatch (error) {\r\n\t\t\t\texpect((error as any).message).toContain('Disk full')\r\n\t\t\t}\r\n\r\n\t\t\t// Health check should reflect the error\r\n\t\t\tconst healthResult = await storageHealth.isHealthy()\r\n\t\t\texpect(healthResult.storage.status).toBe('down')\r\n\t\t\texpect(healthResult.storage.message).toContain('Disk full')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('performance and Scalability', () => {\r\n\t\tit('should handle large numbers of files efficiently', async () => {\r\n\t\t\t// Simulate many files\r\n\t\t\tconst manyFiles = Array.from({ length: 1000 }, (_, i) => `file${i}.jpg`)\r\n\t\t\tmockFs.readdir.mockResolvedValue(manyFiles as any)\r\n\r\n\t\t\tconst startTime = Date.now()\r\n\t\t\tconst stats = await storageMonitoring.getStorageStats()\r\n\t\t\tconst duration = Date.now() - startTime\r\n\r\n\t\t\texpect(stats.totalFiles).toBe(1000)\r\n\t\t\texpect(duration).toBeLessThan(5000) // Should complete within 5 seconds\r\n\t\t})\r\n\r\n\t\tit('should limit resource usage during optimization', async () => {\r\n\t\t\t// Optimization should respect time limits\r\n\t\t\tconst optimizationStats = storageOptimization.getOptimizationStats()\r\n\t\t\texpect(optimizationStats.enabled).toBe(true)\r\n\r\n\t\t\t// Should not run concurrent optimizations\r\n\t\t\tconst firstOptimization = storageOptimization.optimizeFrequentlyAccessedFiles()\r\n\t\t\tawait expect(storageOptimization.optimizeFrequentlyAccessedFiles()).rejects.toThrow('already running')\r\n\r\n\t\t\tawait firstOptimization\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["Buffer","promises","fs","ConfigService","StorageHealthIndicator","IntelligentEvictionService","StorageCleanupService","StorageMonitoringService","StorageOptimizationService","StorageModule","Test","afterAll","beforeAll","beforeEach","describe","expect","it","vi","mock","readdir","fn","stat","unlink","mkdir","readFile","writeFile","copyFile","link","existsSync","mockReturnValue","readFileSync","mockFs","module","storageMonitoring","intelligentEviction","storageCleanup","storageOptimization","storageHealth","testStorageDir","mockFiles","mockConfigService","get","mockImplementation","key","undefined","getOptional","defaultValue","defaults","createTestingModule","imports","overrideProvider","useValue","compile","mockResolvedValue","from","clearAllMocks","filePath","filename","split","pop","stats","size","mtime","Date","now","atime","Promise","resolve","close","initialStats","getStorageStats","totalFiles","toBe","totalSize","thresholdCheck","checkThresholds","status","evictionCandidates","getEvictionCandidates","length","toBeGreaterThan","evictionResult","performEviction","filesEvicted","sizeFreed","cleanupResult","performCleanup","filesRemoved","policiesApplied","recordFileAccess","i","optimizationResult","optimizeFrequentlyAccessedFiles","strategy","toBeDefined","healthResult","isHealthy","storage","toMatch","toContain","performThresholdBasedEviction","filesOptimized","analysis","getStorageAnalysis","cleanupRecommendations","popularFile","find","c","file","accessCount","recommendations","cleanupStatus","getCleanupStatus","enabled","optimizationStats","getOptimizationStats","mockRejectedValueOnce","Error","rejects","toThrow","errors","toBeGreaterThanOrEqual","mockRejectedValue","error","message","manyFiles","Array","_","startTime","duration","toBeLessThan","firstOptimization"],"mappings":"AACA,SAASA,MAAM,QAAQ,cAAa;AACpC,SAASC,YAAYC,EAAE,QAAQ,UAAS;AACxC,SAASC,aAAa,QAAQ,gDAAqC;AACnE,SAASC,sBAAsB,QAAQ,sEAA2D;AAClG,SAASC,0BAA0B,QAAQ,wEAA6D;AACxG,SAASC,qBAAqB,QAAQ,mEAAwD;AAC9F,SAASC,wBAAwB,QAAQ,sEAA2D;AACpG,SAASC,0BAA0B,QAAQ,wEAA6D;AACxG,SAASC,aAAa,QAAQ,iDAAsC;AACpE,SAASC,IAAI,QAAuB,kBAAiB;AACrD,SAASC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,QAAQ,SAAQ;AAElF,uCAAuC;AACvCA,GAAGC,IAAI,CAAC,WAAW,IAAO,CAAA;QACzBjB,UAAU;YACTkB,SAASF,GAAGG,EAAE;YACdC,MAAMJ,GAAGG,EAAE;YACXE,QAAQL,GAAGG,EAAE;YACbG,OAAON,GAAGG,EAAE;YACZI,UAAUP,GAAGG,EAAE;YACfK,WAAWR,GAAGG,EAAE;YAChBM,UAAUT,GAAGG,EAAE;YACfO,MAAMV,GAAGG,EAAE;QACZ;QACAQ,YAAYX,GAAGG,EAAE,GAAGS,eAAe,CAAC;QACpCC,cAAcb,GAAGG,EAAE,GAAGS,eAAe,CAAC;IACvC,CAAA;AAEA,MAAME,SAAS7B;AAEfY,SAAS,kCAAkC;IAC1C,IAAIkB;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJ,MAAMC,iBAAiB;IACvB,MAAMC,YAAY;QACjB;QACA;QACA;QACA;QACA;KACA;IAED3B,UAAU;QACT,MAAM4B,oBAAoB;YACzBC,KAAKxB,GAAGG,EAAE,GAAGsB,kBAAkB,CAAC,CAACC;gBAChC,IAAIA,QAAQ,wBACX,OAAOL;gBACR,OAAOM;YACR;YACAC,aAAa5B,GAAGG,EAAE,GAAGsB,kBAAkB,CAAC,CAACC,KAAaG;gBACrD,MAAMC,WAAW;oBAChB,qBAAqB;oBACrB,uBAAuB,MAAM,OAAO;oBACpC,wBAAwB,OAAO,OAAO;oBACtC,4BAA4B;oBAC5B,6BAA6B;oBAC7B,sBAAsB;oBAEtB,WAAW;oBACX,6BAA6B;oBAC7B,mCAAmC;oBACnC,oCAAoC;oBACpC,mCAAmC;oBACnC,+BAA+B;oBAE/B,UAAU;oBACV,2BAA2B;oBAC3B,gCAAgC;oBAChC,0BAA0B;oBAC1B,+BAA+B;oBAE/B,eAAe;oBACf,gCAAgC;oBAChC,mCAAmC;wBAAC;wBAAe;qBAAgB;oBACnE,4CAA4C;oBAC5C,yCAAyC;oBACzC,sCAAsC;gBACvC;gBACA,OAAO,AAACA,QAAgB,CAACJ,IAAI,IAAIG;YAClC;QACD;QAEAd,SAAS,MAAMtB,KAAKsC,mBAAmB,CAAC;YACvCC,SAAS;gBAACxC;aAAc;QACzB,GACEyC,gBAAgB,CAAC/C,eACjBgD,QAAQ,CAACX,mBACTY,OAAO;QAETnB,oBAAoBD,OAAOS,GAAG,CAA2BlC;QACzD2B,sBAAsBF,OAAOS,GAAG,CAA6BpC;QAC7D8B,iBAAiBH,OAAOS,GAAG,CAAwBnC;QACnD8B,sBAAsBJ,OAAOS,GAAG,CAA6BjC;QAC7D6B,gBAAgBL,OAAOS,GAAG,CAAyBrC;QAEnD,iBAAiB;QACjB2B,OAAOR,KAAK,CAAC8B,iBAAiB,CAACT;QAC/Bb,OAAOZ,OAAO,CAACkC,iBAAiB,CAACd;QACjCR,OAAOT,MAAM,CAAC+B,iBAAiB,CAACT;QAChCb,OAAOP,QAAQ,CAAC6B,iBAAiB,CAACrD,OAAOsD,IAAI,CAAC;QAC9CvB,OAAON,SAAS,CAAC4B,iBAAiB,CAACT;QACnCb,OAAOL,QAAQ,CAAC2B,iBAAiB,CAACT;QAClCb,OAAOJ,IAAI,CAAC0B,iBAAiB,CAACT;IAC/B;IAEA/B,WAAW;QACVI,GAAGsC,aAAa;QAEhB,kDAAkD;QAClDxB,OAAOV,IAAI,CAACqB,kBAAkB,CAAC,CAACc;YAC/B,MAAMC,WAAWD,SAASE,KAAK,CAAC,SAASC,GAAG;YAC5C,IAAIC;YAEJ,OAAQH;gBACP,KAAK;oBACJG,QAAQ;wBACPC,MAAM,IAAI,OAAO;wBACjBC,OAAO,IAAIC,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;wBAChDC,OAAO,IAAIF,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;oBACjD;oBACA;gBACD,KAAK;oBACJJ,QAAQ;wBACPC,MAAM,MAAM;wBACZC,OAAO,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK;wBACjDC,OAAO,IAAIF,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK;oBAClD;oBACA;gBACD,KAAK;oBACJJ,QAAQ;wBACPC,MAAM,OAAO;wBACbC,OAAO,IAAIC,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;wBAChDC,OAAO,IAAIF,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;oBACjD;oBACA;gBACD,KAAK;oBACJJ,QAAQ;wBACPC,MAAM,MAAM;wBACZC,OAAO,IAAIC,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;wBAChDC,OAAO,IAAIF,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;oBACjD;oBACA;gBACD,KAAK;oBACJJ,QAAQ;wBACPC,MAAM,IAAI,OAAO;wBACjBC,OAAO,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK,KAAK;wBACjDC,OAAO,IAAIF,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;oBACjD;oBACA;gBACD;oBACCJ,QAAQ;wBACPC,MAAM,OAAO;wBACbC,OAAO,IAAIC;wBACXE,OAAO,IAAIF;oBACZ;YACF;YAEA,OAAOG,QAAQC,OAAO,CAACP;QACxB;IACD;IAEAjD,SAAS;QACR,MAAMqB,OAAOoC,KAAK;IACnB;IAEAtD,SAAS,0CAA0C;QAClDE,GAAG,oDAAoD;YACtD,2CAA2C;YAC3C,MAAMqD,eAAe,MAAMpC,kBAAkBqC,eAAe;YAC5DvD,OAAOsD,aAAaE,UAAU,EAAEC,IAAI,CAAC;YACrCzD,OAAOsD,aAAaI,SAAS,EAAED,IAAI,CAAC,OAAO,OAAO,OAAM,0BAA0B;YAElF,8BAA8B;YAC9B,MAAME,iBAAiB,MAAMzC,kBAAkB0C,eAAe;YAC9D5D,OAAO2D,eAAeE,MAAM,EAAEJ,IAAI,CAAC,YAAW,mCAAmC;YAEjF,6BAA6B;YAC7B,MAAMK,qBAAqB,MAAM5C,kBAAkB6C,qBAAqB,CAAC,IAAI,OAAO,MAAM,aAAa;;YACvG/D,OAAO8D,mBAAmBE,MAAM,EAAEC,eAAe,CAAC;YAElD,kCAAkC;YAClC,MAAMC,iBAAiB,MAAM/C,oBAAoBgD,eAAe,CAAC,IAAI,OAAO,MAAM,aAAa;;YAC/FnE,OAAOkE,eAAeE,YAAY,EAAEH,eAAe,CAAC;YACpDjE,OAAOkE,eAAeG,SAAS,EAAEJ,eAAe,CAAC;YAEjD,yCAAyC;YACzC,MAAMK,gBAAgB,MAAMlD,eAAemD,cAAc;YACzDvE,OAAOsE,cAAcE,YAAY,EAAEP,eAAe,CAAC;YACnDjE,OAAOsE,cAAcG,eAAe,CAACT,MAAM,EAAEC,eAAe,CAAC;YAE7D,wCAAwC;YACxC,oDAAoD;YACpD/C,kBAAkBwD,gBAAgB,CAAC;YACnC,IAAK,IAAIC,IAAI,GAAGA,IAAI,IAAIA,IAAK;gBAC5BzD,kBAAkBwD,gBAAgB,CAAC;YACpC;YAEA,MAAME,qBAAqB,MAAMvD,oBAAoBwD,+BAA+B;YACpF7E,OAAO4E,mBAAmBE,QAAQ,EAAEC,WAAW;YAE/C,+BAA+B;YAC/B,MAAMC,eAAe,MAAM1D,cAAc2D,SAAS;YAClDjF,OAAOgF,aAAaE,OAAO,EAAEH,WAAW;YACxC/E,OAAOgF,aAAaE,OAAO,CAACrB,MAAM,EAAEsB,OAAO,CAAC;QAC7C;QAEAlF,GAAG,8CAA8C;YAChD,8BAA8B;YAC9Be,OAAOV,IAAI,CAACgC,iBAAiB,CAAC;gBAC7BQ,MAAM,MAAM,OAAO;gBACnBC,OAAO,IAAIC;gBACXE,OAAO,IAAIF;YACZ;YAEA,gDAAgD;YAChD,MAAMW,iBAAiB,MAAMzC,kBAAkB0C,eAAe;YAC9D5D,OAAO;gBAAC;gBAAW;aAAW,EAAEoF,SAAS,CAACzB,eAAeE,MAAM;YAE/D,mCAAmC;YACnC,MAAMK,iBAAiB,MAAM/C,oBAAoBkE,6BAA6B;YAE9E,IAAI1B,eAAeE,MAAM,KAAK,YAAY;gBACzC7D,OAAOkE,eAAeE,YAAY,EAAEH,eAAe,CAAC;YACrD;YAEA,4CAA4C;YAC5C,MAAMe,eAAe,MAAM1D,cAAc2D,SAAS;YAClD,IAAItB,eAAeE,MAAM,KAAK,YAAY;gBACzC7D,OAAOgF,aAAaE,OAAO,CAACrB,MAAM,EAAEJ,IAAI,CAAC;YAC1C;QACD;QAEAxD,GAAG,8CAA8C;YAChD,iDAAiD;YACjD,IAAK,IAAI0E,IAAI,GAAGA,IAAI,IAAIA,IAAK;gBAC5BzD,kBAAkBwD,gBAAgB,CAAC;YACpC;YACA,IAAK,IAAIC,IAAI,GAAGA,IAAI,IAAIA,IAAK;gBAC5BzD,kBAAkBwD,gBAAgB,CAAC;YACpC;YAEA,oBAAoB;YACpB,MAAMJ,gBAAgB,MAAMlD,eAAemD,cAAc;YAEzD,wCAAwC;YACxC,MAAMK,qBAAqB,MAAMvD,oBAAoBwD,+BAA+B;YAEpF,mCAAmC;YACnC7E,OAAOsE,cAAcE,YAAY,GAAGI,mBAAmBU,cAAc,EAAErB,eAAe,CAAC;YAEvF,6BAA6B;YAC7B,MAAMsB,WAAW,MAAMjE,cAAckE,kBAAkB;YACvDxF,OAAOuF,SAAS1C,KAAK,EAAEkC,WAAW;YAClC/E,OAAOuF,SAASzB,kBAAkB,EAAEiB,WAAW;YAC/C/E,OAAOuF,SAASE,sBAAsB,EAAEV,WAAW;QACpD;IACD;IAEAhF,SAAS,uBAAuB;QAC/BE,GAAG,qDAAqD;YACvD,sCAAsC;YACtCiB,kBAAkBwD,gBAAgB,CAAC;YACnCxD,kBAAkBwD,gBAAgB,CAAC;YAEnC,+BAA+B;YAC/B,MAAMxD,kBAAkBqC,eAAe;YAEvC,kDAAkD;YAClD,MAAMO,qBAAqB,MAAM5C,kBAAkB6C,qBAAqB;YACxE,MAAM2B,cAAc5B,mBAAmB6B,IAAI,CAACC,CAAAA,IAAKA,EAAEC,IAAI,KAAK;YAE5D,IAAIH,aAAa;gBAChB1F,OAAO0F,YAAYI,WAAW,EAAE7B,eAAe,CAAC;YACjD;QACD;QAEAhE,GAAG,8CAA8C;YAChD,oBAAoB;YACpB,MAAM+E,eAAe,MAAM1D,cAAc2D,SAAS;YAElD,wBAAwB;YACxB,MAAMM,WAAW,MAAMjE,cAAckE,kBAAkB;YAEvD,2CAA2C;YAC3CxF,OAAOgF,aAAaE,OAAO,CAAC1B,UAAU,EAAEC,IAAI,CAAC8B,SAAS1C,KAAK,CAACW,UAAU;YACtExD,OAAOgF,aAAaE,OAAO,CAACa,eAAe,EAAEhB,WAAW;QACzD;QAEA9E,GAAG,gDAAgD;YAClD,qDAAqD;YACrD,MAAM+F,gBAAgB5E,eAAe6E,gBAAgB;YACrDjG,OAAOgG,cAAcE,OAAO,EAAEzC,IAAI,CAAC;YAEnC,qDAAqD;YACrD,MAAMuB,eAAe,MAAM1D,cAAc2D,SAAS;YAClDjF,OAAOgF,aAAaE,OAAO,CAACc,aAAa,EAAEjB,WAAW;YAEtD,qCAAqC;YACrC,MAAMoB,oBAAoB9E,oBAAoB+E,oBAAoB;YAClEpG,OAAOmG,kBAAkBD,OAAO,EAAEzC,IAAI,CAAC;QACxC;IACD;IAEA1D,SAAS,iCAAiC;QACzCE,GAAG,+CAA+C;YACjD,8BAA8B;YAC9Be,OAAOZ,OAAO,CAACiG,qBAAqB,CAAC,IAAIC,MAAM;YAC/CtF,OAAOV,IAAI,CAAC+F,qBAAqB,CAAC,IAAIC,MAAM;YAE5C,iDAAiD;YACjD,MAAMtG,OAAOkB,kBAAkBqC,eAAe,IAAIgD,OAAO,CAACC,OAAO;YAEjE,yCAAyC;YACzC,MAAMR,gBAAgB5E,eAAe6E,gBAAgB;YACrDjG,OAAOgG,eAAejB,WAAW;QAClC;QAEA9E,GAAG,gEAAgE;YAClE,4BAA4B;YAC5Be,OAAOT,MAAM,CAAC8F,qBAAqB,CAAC,IAAIC,MAAM;YAE9C,2CAA2C;YAC3C,MAAMhC,gBAAgB,MAAMlD,eAAemD,cAAc;YACzDvE,OAAOsE,cAAcmC,MAAM,CAACzC,MAAM,EAAEC,eAAe,CAAC;YACpDjE,OAAOsE,cAAcE,YAAY,EAAEkC,sBAAsB,CAAC;YAE1D,iCAAiC;YACjC,MAAM1B,eAAe,MAAM1D,cAAc2D,SAAS;YAClDjF,OAAOgF,aAAaE,OAAO,EAAEH,WAAW;QACzC;QAEA9E,GAAG,6CAA6C;YAC/C,oCAAoC;YACpCe,OAAOV,IAAI,CAACqG,iBAAiB,CAAC,IAAIL,MAAM;YAExC,IAAI;gBACH,MAAMpF,kBAAkBqC,eAAe;YACxC,EACA,OAAOqD,OAAO;gBACb5G,OAAO,AAAC4G,MAAcC,OAAO,EAAEzB,SAAS,CAAC;YAC1C;YAEA,wCAAwC;YACxC,MAAMJ,eAAe,MAAM1D,cAAc2D,SAAS;YAClDjF,OAAOgF,aAAaE,OAAO,CAACrB,MAAM,EAAEJ,IAAI,CAAC;YACzCzD,OAAOgF,aAAaE,OAAO,CAAC2B,OAAO,EAAEzB,SAAS,CAAC;QAChD;IACD;IAEArF,SAAS,+BAA+B;QACvCE,GAAG,oDAAoD;YACtD,sBAAsB;YACtB,MAAM6G,YAAYC,MAAMxE,IAAI,CAAC;gBAAEyB,QAAQ;YAAK,GAAG,CAACgD,GAAGrC,IAAM,CAAC,IAAI,EAAEA,EAAE,IAAI,CAAC;YACvE3D,OAAOZ,OAAO,CAACkC,iBAAiB,CAACwE;YAEjC,MAAMG,YAAYjE,KAAKC,GAAG;YAC1B,MAAMJ,QAAQ,MAAM3B,kBAAkBqC,eAAe;YACrD,MAAM2D,WAAWlE,KAAKC,GAAG,KAAKgE;YAE9BjH,OAAO6C,MAAMW,UAAU,EAAEC,IAAI,CAAC;YAC9BzD,OAAOkH,UAAUC,YAAY,CAAC,OAAM,mCAAmC;QACxE;QAEAlH,GAAG,mDAAmD;YACrD,0CAA0C;YAC1C,MAAMkG,oBAAoB9E,oBAAoB+E,oBAAoB;YAClEpG,OAAOmG,kBAAkBD,OAAO,EAAEzC,IAAI,CAAC;YAEvC,0CAA0C;YAC1C,MAAM2D,oBAAoB/F,oBAAoBwD,+BAA+B;YAC7E,MAAM7E,OAAOqB,oBAAoBwD,+BAA+B,IAAI0B,OAAO,CAACC,OAAO,CAAC;YAEpF,MAAMY;QACP;IACD;AACD"}