{"version":3,"sources":["../../../../../src/test/Storage/indicators/storage-health.indicator.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { StorageHealthIndicator } from '@microservice/Storage/indicators/storage-health.indicator'\r\nimport { StorageCleanupService } from '@microservice/Storage/services/storage-cleanup.service'\r\nimport { StorageMonitoringService } from '@microservice/Storage/services/storage-monitoring.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('storageHealthIndicator', () => {\r\n\tlet indicator: StorageHealthIndicator\r\n\tlet storageMonitoring: MockedObject<StorageMonitoringService>\r\n\tlet storageCleanup: MockedObject<StorageCleanupService>\r\n\tlet configService: MockedObject<ConfigService>\r\n\r\n\tconst mockStorageStats = {\r\n\t\ttotalFiles: 100,\r\n\t\ttotalSize: 50 * 1024 * 1024, // 50MB\r\n\t\taverageFileSize: 500 * 1024, // 500KB\r\n\t\toldestFile: new Date('2024-01-01'),\r\n\t\tnewestFile: new Date('2024-01-15'),\r\n\t\tfileTypes: { '.jpg': 50, '.png': 30, '.webp': 20 },\r\n\t\taccessPatterns: [],\r\n\t}\r\n\r\n\tconst mockThresholds = {\r\n\t\tstatus: 'healthy' as const,\r\n\t\tissues: [],\r\n\t\tstats: mockStorageStats,\r\n\t}\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockStorageMonitoringService = {\r\n\t\t\tgetStorageStats: vi.fn(),\r\n\t\t\tcheckThresholds: vi.fn(),\r\n\t\t\tgetEvictionCandidates: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockStorageCleanupService = {\r\n\t\t\tgetCleanupStatus: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockConfigService = {\r\n\t\t\tgetOptional: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tStorageHealthIndicator,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: StorageMonitoringService,\r\n\t\t\t\t\tuseValue: mockStorageMonitoringService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: StorageCleanupService,\r\n\t\t\t\t\tuseValue: mockStorageCleanupService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tindicator = module.get<StorageHealthIndicator>(StorageHealthIndicator)\r\n\t\tstorageMonitoring = module.get(StorageMonitoringService)\r\n\t\tstorageCleanup = module.get(StorageCleanupService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\r\n\t\t// Setup default mocks\r\n\t\tstorageMonitoring.getStorageStats.mockResolvedValue(mockStorageStats)\r\n\t\tstorageCleanup.getCleanupStatus.mockReturnValue({\r\n\t\t\tenabled: true,\r\n\t\t\tisRunning: false,\r\n\t\t\tlastCleanup: new Date('2024-01-14'),\r\n\t\t\tnextCleanup: new Date('2024-01-15'),\r\n\t\t\tpolicies: [],\r\n\t\t})\r\n\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase 'storage.maxSize':\r\n\t\t\t\t\treturn 1024 * 1024 * 1024 // 1GB\r\n\t\t\t\tcase 'storage.health.warningThreshold':\r\n\t\t\t\t\treturn 0.8\r\n\t\t\t\tcase 'storage.health.criticalThreshold':\r\n\t\t\t\t\treturn 0.9\r\n\t\t\t\tcase 'storage.warningSize':\r\n\t\t\t\t\treturn 800 * 1024 * 1024\r\n\t\t\t\tcase 'storage.criticalSize':\r\n\t\t\t\t\treturn 1024 * 1024 * 1024\r\n\t\t\t\tcase 'storage.warningFileCount':\r\n\t\t\t\t\treturn 5000\r\n\t\t\t\tcase 'storage.criticalFileCount':\r\n\t\t\t\t\treturn 10000\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn defaultValue\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('initialization', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('isHealthy', () => {\r\n\t\tit('should return healthy status when storage is within thresholds', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue(mockThresholds)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.status).toBe('up')\r\n\t\t\texpect(result.storage.totalFiles).toBe(100)\r\n\t\t\texpect(result.storage.totalSize).toBe('50.0 MB')\r\n\t\t})\r\n\r\n\t\tit('should return healthy status with cleanup enabled', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue(mockThresholds)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.status).toBe('up')\r\n\t\t\texpect(result.storage.cleanupStatus.enabled).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when storage exceeds thresholds', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'critical',\r\n\t\t\t\tissues: ['Storage size critical: 1.2GB exceeds 1GB limit'],\r\n\t\t\t\tstats: mockStorageStats,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.storage.status).toBe('down')\r\n\t\t\texpect(result.storage.message).toContain('Storage in critical state')\r\n\t\t})\r\n\r\n\t\tit('should include top file types in details', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue(mockThresholds)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.topFileTypes).toEqual([\r\n\t\t\t\t{ extension: '.jpg', count: 50 },\r\n\t\t\t\t{ extension: '.png', count: 30 },\r\n\t\t\t\t{ extension: '.webp', count: 20 },\r\n\t\t\t])\r\n\t\t})\r\n\r\n\t\tit('should include cleanup status in details', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue(mockThresholds)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.cleanupStatus.enabled).toBe(true)\r\n\t\t\texpect(result.storage.cleanupStatus.lastCleanup).toBe('2024-01-14T00:00:00.000Z')\r\n\t\t})\r\n\r\n\t\tit('should include recommendations when available', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'warning',\r\n\t\t\t\tissues: ['Storage approaching limits'],\r\n\t\t\t\tstats: mockStorageStats,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.recommendations).toContain(\r\n\t\t\t\t'Schedule cleanup soon to prevent storage issues',\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should handle storage monitoring errors', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockRejectedValue(\r\n\t\t\t\tnew Error('Storage unavailable'),\r\n\t\t\t)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.status).toBe('down')\r\n\t\t\texpect(result.storage.message).toContain('Storage unavailable')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('configuration-based recommendations', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tswitch (key) {\r\n\t\t\t\t\tcase 'storage.warningSize':\r\n\t\t\t\t\t\treturn 800 * 1024 * 1024 // 800MB\r\n\t\t\t\t\tcase 'storage.criticalSize':\r\n\t\t\t\t\t\treturn 1024 * 1024 * 1024 // 1GB\r\n\t\t\t\t\tcase 'storage.warningFileCount':\r\n\t\t\t\t\t\treturn 5000\r\n\t\t\t\t\tcase 'storage.criticalFileCount':\r\n\t\t\t\t\t\treturn 10000\r\n\t\t\t\t\tcase 'storage.maxFileAge':\r\n\t\t\t\t\t\treturn 30\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn defaultValue\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should recommend cleanup when approaching size limits', async () => {\r\n\t\t\t// Mock storage at 850MB (above 800MB warning)\r\n\t\t\tconst warningStats = {\r\n\t\t\t\t...mockStorageStats,\r\n\t\t\t\ttotalSize: 850 * 1024 * 1024,\r\n\t\t\t}\r\n\t\t\tstorageMonitoring.getStorageStats.mockResolvedValue(warningStats)\r\n\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'warning',\r\n\t\t\t\tissues: ['Storage size warning'],\r\n\t\t\t\tstats: warningStats,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.recommendations).toContain(\r\n\t\t\t\t'Schedule cleanup soon to prevent storage issues',\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should recommend cleanup when disabled and storage is full', async () => {\r\n\t\t\tstorageCleanup.getCleanupStatus.mockReturnValue({\r\n\t\t\t\tenabled: false,\r\n\t\t\t\tisRunning: false,\r\n\t\t\t\tlastCleanup: new Date('2024-01-01'),\r\n\t\t\t\tnextCleanup: new Date('2024-01-02'),\r\n\t\t\t\tpolicies: [],\r\n\t\t\t})\r\n\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'warning',\r\n\t\t\t\tissues: ['Storage size warning'],\r\n\t\t\t\tstats: mockStorageStats,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.recommendations).toContain(\r\n\t\t\t\t'Enable automatic cleanup to maintain storage health',\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should recommend file review when cleanup is stale', async () => {\r\n\t\t\tstorageCleanup.getCleanupStatus.mockReturnValue({\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tisRunning: false,\r\n\t\t\t\tlastCleanup: new Date('2024-01-01'), // 2 weeks ago\r\n\t\t\t\tnextCleanup: new Date('2024-01-16'),\r\n\t\t\t\tpolicies: [],\r\n\t\t\t})\r\n\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'warning',\r\n\t\t\t\tissues: ['Storage size warning'],\r\n\t\t\t\tstats: mockStorageStats,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.recommendations).toContain(\r\n\t\t\t\t'Last cleanup was over a week ago - consider running manual cleanup',\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should recommend file type optimization for dominant types', async () => {\r\n\t\t\tconst statsWithManyJpgs = {\r\n\t\t\t\t...mockStorageStats,\r\n\t\t\t\tfileTypes: { '.jpg': 800, '.png': 200 },\r\n\t\t\t}\r\n\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue({\r\n\t\t\t\tstatus: 'warning',\r\n\t\t\t\tissues: ['Storage size warning'],\r\n\t\t\t\tstats: statsWithManyJpgs,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.topFileTypes[0]).toEqual({\r\n\t\t\t\textension: '.jpg',\r\n\t\t\t\tcount: 800,\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should handle cleanup service errors gracefully', async () => {\r\n\t\t\tstorageCleanup.getCleanupStatus.mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Cleanup service unavailable')\r\n\t\t\t})\r\n\r\n\t\t\tstorageMonitoring.checkThresholds.mockResolvedValue(mockThresholds)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.status).toBe('down')\r\n\t\t\texpect(result.storage.message).toContain('Cleanup service unavailable')\r\n\t\t})\r\n\r\n\t\tit('should handle threshold check errors', async () => {\r\n\t\t\tstorageMonitoring.checkThresholds.mockRejectedValue(new Error('Storage unavailable'))\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.storage.status).toBe('down')\r\n\t\t\texpect(result.storage.message).toContain('Storage unavailable')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigService","StorageHealthIndicator","StorageCleanupService","StorageMonitoringService","Test","afterEach","beforeEach","describe","expect","it","vi","indicator","storageMonitoring","storageCleanup","configService","mockStorageStats","totalFiles","totalSize","averageFileSize","oldestFile","Date","newestFile","fileTypes","accessPatterns","mockThresholds","status","issues","stats","mockStorageMonitoringService","getStorageStats","fn","checkThresholds","getEvictionCandidates","mockStorageCleanupService","getCleanupStatus","mockConfigService","getOptional","module","createTestingModule","providers","provide","useValue","compile","get","mockResolvedValue","mockReturnValue","enabled","isRunning","lastCleanup","nextCleanup","policies","mockImplementation","key","defaultValue","clearAllMocks","toBeDefined","result","isHealthy","storage","toBe","cleanupStatus","message","toContain","topFileTypes","toEqual","extension","count","recommendations","mockRejectedValue","Error","warningStats","statsWithManyJpgs"],"mappings":"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"}