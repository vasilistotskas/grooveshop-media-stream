{"version":3,"sources":["../../../../src/test/Config/config.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { ConfigService as NestConfigService } from '@nestjs/config'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\r\nimport 'reflect-metadata'\n\r\ndescribe('configService', () => {\r\n\tlet service: ConfigService\r\n\tlet nestConfigService: MockedObject<NestConfigService>\r\n\r\n\tconst mockEnvVars = {\r\n\t\tPORT: '3003',\r\n\t\tHOST: '0.0.0.0',\r\n\t\tCORS_ORIGIN: '*',\r\n\t\tCORS_METHODS: 'GET',\r\n\t\tCORS_MAX_AGE: '86400',\r\n\t\tCACHE_MEMORY_MAX_SIZE: '104857600',\r\n\t\tCACHE_MEMORY_TTL: '3600',\r\n\t\tCACHE_MEMORY_CHECK_PERIOD: '600',\r\n\t\tREDIS_HOST: 'localhost',\r\n\t\tREDIS_PORT: '6379',\r\n\t\tREDIS_DB: '0',\r\n\t\tREDIS_TTL: '7200',\r\n\t\tREDIS_MAX_RETRIES: '3',\r\n\t\tREDIS_RETRY_DELAY: '100',\r\n\t\tCACHE_FILE_DIRECTORY: './storage',\r\n\t\tCACHE_FILE_MAX_SIZE: '1073741824',\r\n\t\tCACHE_FILE_CLEANUP_INTERVAL: '3600',\r\n\t\tPROCESSING_MAX_CONCURRENT: '10',\r\n\t\tPROCESSING_TIMEOUT: '30000',\r\n\t\tPROCESSING_RETRIES: '3',\r\n\t\tPROCESSING_MAX_FILE_SIZE: '10485760',\r\n\t\tPROCESSING_ALLOWED_FORMATS: 'jpg,jpeg,png,webp,gif,svg',\r\n\t\tMONITORING_ENABLED: 'true',\r\n\t\tMONITORING_METRICS_PORT: '9090',\r\n\t\tMONITORING_HEALTH_PATH: '/health',\r\n\t\tMONITORING_METRICS_PATH: '/metrics',\r\n\t\tNEST_PUBLIC_DJANGO_URL: 'http://localhost:8000',\r\n\t\tNEST_PUBLIC_NUXT_URL: 'http://localhost:3000',\r\n\t\tEXTERNAL_REQUEST_TIMEOUT: '30000',\r\n\t\tEXTERNAL_MAX_RETRIES: '3',\r\n\t\tRATE_LIMIT_ENABLED: 'true',\r\n\t\tRATE_LIMIT_DEFAULT_WINDOW_MS: '60000',\r\n\t\tRATE_LIMIT_DEFAULT_MAX: '100',\r\n\t\tRATE_LIMIT_IMAGE_PROCESSING_WINDOW_MS: '60000',\r\n\t\tRATE_LIMIT_IMAGE_PROCESSING_MAX: '50',\r\n\t\tRATE_LIMIT_HEALTH_CHECK_WINDOW_MS: '10000',\r\n\t\tRATE_LIMIT_HEALTH_CHECK_MAX: '1000',\r\n\t\tRATE_LIMIT_BYPASS_HEALTH_CHECKS: 'true',\r\n\t\tRATE_LIMIT_BYPASS_METRICS_ENDPOINT: 'true',\r\n\t\tRATE_LIMIT_BYPASS_STATIC_ASSETS: 'true',\r\n\t\tRATE_LIMIT_BYPASS_WHITELISTED_DOMAINS: '',\r\n\t}\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockNestConfigService = {\r\n\t\t\tget: vi.fn((key: string) => mockEnvVars[key as keyof typeof mockEnvVars]),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tConfigService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: NestConfigService,\r\n\t\t\t\t\tuseValue: mockNestConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<ConfigService>(ConfigService)\r\n\t\tnestConfigService = module.get(NestConfigService)\r\n\t})\r\n\r\n\tdescribe('configuration Loading', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(service).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should load and validate configuration successfully', async () => {\r\n\t\t\tawait expect(service.validate()).resolves.not.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should get configuration values by key', () => {\r\n\t\t\texpect(service.get('server.port')).toBe(3003)\r\n\t\t\texpect(service.get('cache.memory.maxSize')).toBe(104857600)\r\n\t\t\texpect(service.get('monitoring.enabled')).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should get optional configuration values with defaults', () => {\r\n\t\t\texpect(service.getOptional('server.port', 8080)).toBe(3003)\r\n\t\t\texpect(service.getOptional('nonexistent.key' as any, 'default')).toBe('default')\r\n\t\t})\r\n\r\n\t\tit('should return entire configuration object', () => {\r\n\t\t\tconst config = service.getAll()\r\n\t\t\texpect(config).toHaveProperty('server')\r\n\t\t\texpect(config).toHaveProperty('cache')\r\n\t\t\texpect(config).toHaveProperty('processing')\r\n\t\t\texpect(config).toHaveProperty('monitoring')\r\n\t\t\texpect(config).toHaveProperty('externalServices')\r\n\t\t})\r\n\r\n\t\tit('should throw error for non-existent configuration key', () => {\r\n\t\t\texpect(() => service.get('nonexistent.key' as any)).toThrow(\r\n\t\t\t\t'Configuration key \\'nonexistent.key\\' not found',\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('configuration Validation', () => {\r\n\t\tit('should validate server configuration', async () => {\r\n\t\t\tnestConfigService.get.mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'PORT')\r\n\t\t\t\t\treturn 'invalid-port'\r\n\t\t\t\treturn mockEnvVars[key as keyof typeof mockEnvVars]\r\n\t\t\t})\r\n\r\n\t\t\tconst invalidService = new ConfigService(nestConfigService)\r\n\t\t\tawait expect(invalidService.validate()).rejects.toThrow('Configuration validation failed')\r\n\t\t})\r\n\r\n\t\tit('should validate cache configuration', async () => {\r\n\t\t\tnestConfigService.get.mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'CACHE_MEMORY_MAX_SIZE')\r\n\t\t\t\t\treturn '-1'\r\n\t\t\t\treturn mockEnvVars[key as keyof typeof mockEnvVars]\r\n\t\t\t})\r\n\r\n\t\t\tconst invalidService = new ConfigService(nestConfigService)\r\n\t\t\tawait expect(invalidService.validate()).rejects.toThrow('Configuration validation failed')\r\n\t\t})\r\n\r\n\t\tit('should validate processing configuration', async () => {\r\n\t\t\tnestConfigService.get.mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'PROCESSING_MAX_CONCURRENT')\r\n\t\t\t\t\treturn '0'\r\n\t\t\t\treturn mockEnvVars[key as keyof typeof mockEnvVars]\r\n\t\t\t})\r\n\r\n\t\t\tconst invalidService = new ConfigService(nestConfigService)\r\n\t\t\tawait expect(invalidService.validate()).rejects.toThrow('Configuration validation failed')\r\n\t\t})\r\n\r\n\t\tit('should validate external services URLs', async () => {\r\n\t\t\tnestConfigService.get.mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'NEST_PUBLIC_DJANGO_URL')\r\n\t\t\t\t\treturn 'invalid://url with spaces'\r\n\t\t\t\treturn mockEnvVars[key as keyof typeof mockEnvVars]\r\n\t\t\t})\r\n\r\n\t\t\tconst invalidService = new ConfigService(nestConfigService)\r\n\t\t\tawait expect(invalidService.validate()).rejects.toThrow('Configuration validation failed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('hot Reload Functionality', () => {\r\n\t\tit('should identify hot-reloadable keys', () => {\r\n\t\t\texpect(service.isHotReloadable('MONITORING_ENABLED')).toBe(true)\r\n\t\t\texpect(service.isHotReloadable('PROCESSING_MAX_CONCURRENT')).toBe(true)\r\n\t\t\texpect(service.isHotReloadable('CACHE_MEMORY_TTL')).toBe(true)\r\n\t\t\texpect(service.isHotReloadable('PORT')).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should reload hot-reloadable configuration', async () => {\r\n\t\t\tconst originalEnabled = service.get('monitoring.enabled')\r\n\r\n\t\t\t// Mock environment change\r\n\t\t\tnestConfigService.get.mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'MONITORING_ENABLED')\r\n\t\t\t\t\treturn 'false'\r\n\t\t\t\treturn mockEnvVars[key as keyof typeof mockEnvVars]\r\n\t\t\t})\r\n\r\n\t\t\tawait service.reload()\r\n\r\n\t\t\t// Should update hot-reloadable setting\r\n\t\t\texpect(service.get('monitoring.enabled')).toBe(false)\r\n\t\t\texpect(service.get('monitoring.enabled')).not.toBe(originalEnabled)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('default Values', () => {\r\n\t\tit('should use default values when environment variables are not set', async () => {\r\n\t\t\tconst emptyNestConfigService = {\r\n\t\t\t\tget: vi.fn(() => undefined),\r\n\t\t\t}\r\n\r\n\t\t\tconst serviceWithDefaults = new ConfigService(emptyNestConfigService as any)\r\n\r\n\t\t\texpect(serviceWithDefaults.get('server.port')).toBe(3003)\r\n\t\t\texpect(serviceWithDefaults.get('server.host')).toBe('0.0.0.0')\r\n\t\t\texpect(serviceWithDefaults.get('cache.memory.maxSize')).toBe(104857600)\r\n\t\t\texpect(serviceWithDefaults.get('processing.maxConcurrent')).toBe(10)\r\n\t\t\texpect(serviceWithDefaults.get('monitoring.enabled')).toBe(true)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('type Safety', () => {\r\n\t\tit('should maintain type safety for configuration values', () => {\r\n\t\t\tconst port: number = service.get('server.port')\r\n\t\t\tconst enabled: boolean = service.get('monitoring.enabled')\r\n\t\t\tconst formats: string[] = service.get('processing.allowedFormats')\r\n\r\n\t\t\texpect(typeof port).toBe('number')\r\n\t\t\texpect(typeof enabled).toBe('boolean')\r\n\t\t\texpect(Array.isArray(formats)).toBe(true)\r\n\t\t\texpect(formats.every(format => typeof format === 'string')).toBe(true)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigService","NestConfigService","Test","beforeEach","describe","expect","it","vi","service","nestConfigService","mockEnvVars","PORT","HOST","CORS_ORIGIN","CORS_METHODS","CORS_MAX_AGE","CACHE_MEMORY_MAX_SIZE","CACHE_MEMORY_TTL","CACHE_MEMORY_CHECK_PERIOD","REDIS_HOST","REDIS_PORT","REDIS_DB","REDIS_TTL","REDIS_MAX_RETRIES","REDIS_RETRY_DELAY","CACHE_FILE_DIRECTORY","CACHE_FILE_MAX_SIZE","CACHE_FILE_CLEANUP_INTERVAL","PROCESSING_MAX_CONCURRENT","PROCESSING_TIMEOUT","PROCESSING_RETRIES","PROCESSING_MAX_FILE_SIZE","PROCESSING_ALLOWED_FORMATS","MONITORING_ENABLED","MONITORING_METRICS_PORT","MONITORING_HEALTH_PATH","MONITORING_METRICS_PATH","NEST_PUBLIC_DJANGO_URL","NEST_PUBLIC_NUXT_URL","EXTERNAL_REQUEST_TIMEOUT","EXTERNAL_MAX_RETRIES","RATE_LIMIT_ENABLED","RATE_LIMIT_DEFAULT_WINDOW_MS","RATE_LIMIT_DEFAULT_MAX","RATE_LIMIT_IMAGE_PROCESSING_WINDOW_MS","RATE_LIMIT_IMAGE_PROCESSING_MAX","RATE_LIMIT_HEALTH_CHECK_WINDOW_MS","RATE_LIMIT_HEALTH_CHECK_MAX","RATE_LIMIT_BYPASS_HEALTH_CHECKS","RATE_LIMIT_BYPASS_METRICS_ENDPOINT","RATE_LIMIT_BYPASS_STATIC_ASSETS","RATE_LIMIT_BYPASS_WHITELISTED_DOMAINS","mockNestConfigService","get","fn","key","module","createTestingModule","providers","provide","useValue","compile","toBeDefined","validate","resolves","not","toThrow","toBe","getOptional","config","getAll","toHaveProperty","mockImplementation","invalidService","rejects","isHotReloadable","originalEnabled","reload","emptyNestConfigService","undefined","serviceWithDefaults","port","enabled","formats","Array","isArray","every","format"],"mappings":"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"}