{"version":3,"sources":["../../../../../src/test/RateLimit/services/rate-limit.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { RateLimitService } from '@microservice/RateLimit/services/rate-limit.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('rateLimitService', () => {\r\n\tlet service: RateLimitService\r\n\tlet configService: MockedObject<ConfigService>\r\n\tlet metricsService: MockedObject<MetricsService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn(),\r\n\t\t\tgetOptional: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockMetricsService = {\r\n\t\t\trecordCacheOperation: vi.fn(),\r\n\t\t\trecordError: vi.fn(),\r\n\t\t\tgetRegistry: vi.fn().mockReturnValue({}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tRateLimitService,\r\n\t\t\t\t{ provide: ConfigService, useValue: mockConfigService },\r\n\t\t\t\t{ provide: MetricsService, useValue: mockMetricsService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<RateLimitService>(RateLimitService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\t\tmetricsService = module.get(MetricsService)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('generateKey', () => {\r\n\t\tit('should generate a key from IP and request type', () => {\r\n\t\t\tconst key = service.generateKey('192.168.1.1', 'image-processing')\r\n\t\t\texpect(key).toBe('192.168.1.1:image-processing')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('generateAdvancedKey', () => {\r\n\t\tit('should generate an advanced key with user agent hash', () => {\r\n\t\t\tconst key = service.generateAdvancedKey('192.168.1.1', 'Mozilla/5.0', 'image-processing')\r\n\t\t\texpect(key).toMatch(/^192\\.168\\.1\\.1:[a-z0-9]+:image-processing$/)\r\n\t\t})\r\n\r\n\t\tit('should handle empty user agent', () => {\r\n\t\t\tconst key = service.generateAdvancedKey('192.168.1.1', '', 'image-processing')\r\n\t\t\texpect(key).toMatch(/^192\\.168\\.1\\.1:[a-z0-9]+:image-processing$/)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getRateLimitConfig', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue?: any) => {\r\n\t\t\t\tconst configs: Record<string, any> = {\r\n\t\t\t\t\t'rateLimit.default.windowMs': 60000,\r\n\t\t\t\t\t'rateLimit.default.max': 100,\r\n\t\t\t\t\t'rateLimit.imageProcessing.windowMs': 60000,\r\n\t\t\t\t\t'rateLimit.imageProcessing.max': 50,\r\n\t\t\t\t\t'rateLimit.healthCheck.windowMs': 10000,\r\n\t\t\t\t\t'rateLimit.healthCheck.max': 1000,\r\n\t\t\t\t}\r\n\t\t\t\treturn configs[key] || defaultValue\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should return default config for unknown request type', () => {\r\n\t\t\tconst config = service.getRateLimitConfig('unknown')\r\n\t\t\texpect(config).toEqual({\r\n\t\t\t\twindowMs: 60000,\r\n\t\t\t\tmax: 100,\r\n\t\t\t\tskipSuccessfulRequests: false,\r\n\t\t\t\tskipFailedRequests: false,\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should return image processing config', () => {\r\n\t\t\tconst config = service.getRateLimitConfig('image-processing')\r\n\t\t\texpect(config).toEqual({\r\n\t\t\t\twindowMs: 60000,\r\n\t\t\t\tmax: 50,\r\n\t\t\t\tskipSuccessfulRequests: false,\r\n\t\t\t\tskipFailedRequests: false,\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should return health check config', () => {\r\n\t\t\tconst config = service.getRateLimitConfig('health-check')\r\n\t\t\texpect(config).toEqual({\r\n\t\t\t\twindowMs: 10000,\r\n\t\t\t\tmax: 1000,\r\n\t\t\t\tskipSuccessfulRequests: false,\r\n\t\t\t\tskipFailedRequests: false,\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('checkRateLimit', () => {\r\n\t\tconst mockConfig = {\r\n\t\t\twindowMs: 60000,\r\n\t\t\tmax: 5,\r\n\t\t\tskipSuccessfulRequests: false,\r\n\t\t\tskipFailedRequests: false,\r\n\t\t}\r\n\r\n\t\tit('should allow first request', async () => {\r\n\t\t\tconst result = await service.checkRateLimit('test-key', mockConfig)\r\n\r\n\t\t\texpect(result.allowed).toBe(true)\r\n\t\t\texpect(result.info.current).toBe(1)\r\n\t\t\texpect(result.info.remaining).toBe(4)\r\n\t\t\texpect(result.info.limit).toBe(5)\r\n\t\t})\r\n\r\n\t\tit('should track multiple requests', async () => {\r\n\t\t\t// First request\r\n\t\t\tawait service.checkRateLimit('test-key', mockConfig)\r\n\r\n\t\t\t// Second request\r\n\t\t\tconst result = await service.checkRateLimit('test-key', mockConfig)\r\n\r\n\t\t\texpect(result.allowed).toBe(true)\r\n\t\t\texpect(result.info.current).toBe(2)\r\n\t\t\texpect(result.info.remaining).toBe(3)\r\n\t\t})\r\n\r\n\t\tit('should block requests when limit exceeded', async () => {\r\n\t\t\t// Make 5 requests (at the limit)\r\n\t\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\t\tawait service.checkRateLimit('test-key', mockConfig)\r\n\t\t\t}\r\n\r\n\t\t\t// 6th request should be blocked\r\n\t\t\tconst result = await service.checkRateLimit('test-key', mockConfig)\r\n\r\n\t\t\texpect(result.allowed).toBe(false)\r\n\t\t\texpect(result.info.current).toBe(6)\r\n\t\t\texpect(result.info.remaining).toBe(0)\r\n\t\t})\r\n\r\n\t\tit('should reset after window expires', async () => {\r\n\t\t\tconst shortConfig = { ...mockConfig, windowMs: 100 }\r\n\r\n\t\t\t// Make request\r\n\t\t\tawait service.checkRateLimit('test-key', shortConfig)\r\n\r\n\t\t\t// Wait for window to expire\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 150))\r\n\r\n\t\t\t// Next request should be allowed\r\n\t\t\tconst result = await service.checkRateLimit('test-key', shortConfig)\r\n\t\t\texpect(result.allowed).toBe(true)\r\n\t\t\texpect(result.info.current).toBe(1)\r\n\t\t})\r\n\r\n\t\tit('should handle different keys independently', async () => {\r\n\t\t\tawait service.checkRateLimit('key1', mockConfig)\r\n\t\t\tconst result = await service.checkRateLimit('key2', mockConfig)\r\n\r\n\t\t\texpect(result.allowed).toBe(true)\r\n\t\t\texpect(result.info.current).toBe(1)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getSystemLoad', () => {\r\n\t\tit('should return system load information', async () => {\r\n\t\t\tconst systemLoad = await service.getSystemLoad()\r\n\r\n\t\t\texpect(systemLoad).toHaveProperty('cpuUsage')\r\n\t\t\texpect(systemLoad).toHaveProperty('memoryUsage')\r\n\t\t\texpect(systemLoad).toHaveProperty('activeConnections')\r\n\t\t\texpect(typeof systemLoad.memoryUsage).toBe('number')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('calculateAdaptiveLimit', () => {\r\n\t\tit('should return base limit when system load is low', async () => {\r\n\t\t\t// Temporarily override NODE_ENV to test adaptive behavior\r\n\t\t\tconst originalEnv = process.env.NODE_ENV\r\n\t\t\tprocess.env.NODE_ENV = 'production'\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Mock low system load\r\n\t\t\t\tvi.spyOn(service, 'getSystemLoad').mockResolvedValue({\r\n\t\t\t\t\tcpuUsage: 50,\r\n\t\t\t\t\tmemoryUsage: 60,\r\n\t\t\t\t\tactiveConnections: 100,\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst adaptiveLimit = await service.calculateAdaptiveLimit(100)\r\n\t\t\t\texpect(adaptiveLimit).toBe(100)\r\n\t\t\t}\r\n\t\t\tfinally {\r\n\t\t\t\t// Restore original environment\r\n\t\t\t\tprocess.env.NODE_ENV = originalEnv\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should reduce limit when memory usage is high', async () => {\r\n\t\t\t// Temporarily override NODE_ENV to test adaptive behavior\r\n\t\t\tconst originalEnv = process.env.NODE_ENV\r\n\t\t\tprocess.env.NODE_ENV = 'production'\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Mock high memory usage\r\n\t\t\t\tvi.spyOn(service, 'getSystemLoad').mockResolvedValue({\r\n\t\t\t\t\tcpuUsage: 50,\r\n\t\t\t\t\tmemoryUsage: 90, // Above 85% threshold\r\n\t\t\t\t\tactiveConnections: 100,\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst adaptiveLimit = await service.calculateAdaptiveLimit(100)\r\n\t\t\t\texpect(adaptiveLimit).toBeLessThan(100)\r\n\t\t\t\texpect(adaptiveLimit).toBeGreaterThan(0)\r\n\t\t\t}\r\n\t\t\tfinally {\r\n\t\t\t\t// Restore original environment\r\n\t\t\t\tprocess.env.NODE_ENV = originalEnv\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should ensure minimum limit of 1', async () => {\r\n\t\t\t// Temporarily override NODE_ENV to test adaptive behavior\r\n\t\t\tconst originalEnv = process.env.NODE_ENV\r\n\t\t\tprocess.env.NODE_ENV = 'production'\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Mock extremely high system load\r\n\t\t\t\tvi.spyOn(service, 'getSystemLoad').mockResolvedValue({\r\n\t\t\t\t\tcpuUsage: 95,\r\n\t\t\t\t\tmemoryUsage: 95,\r\n\t\t\t\t\tactiveConnections: 2000,\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst adaptiveLimit = await service.calculateAdaptiveLimit(10)\r\n\t\t\t\texpect(adaptiveLimit).toBeGreaterThanOrEqual(1)\r\n\t\t\t}\r\n\t\t\tfinally {\r\n\t\t\t\t// Restore original environment\r\n\t\t\t\tprocess.env.NODE_ENV = originalEnv\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('recordRateLimitMetrics', () => {\r\n\t\tit('should record metrics for allowed requests', () => {\r\n\t\t\tconst info = {\r\n\t\t\t\tlimit: 100,\r\n\t\t\t\tcurrent: 1,\r\n\t\t\t\tremaining: 99,\r\n\t\t\t\tresetTime: new Date(),\r\n\t\t\t}\r\n\r\n\t\t\tservice.recordRateLimitMetrics('image-processing', true, info)\r\n\r\n\t\t\texpect(metricsService.recordError).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should record metrics for blocked requests', () => {\r\n\t\t\tconst info = {\r\n\t\t\t\tlimit: 100,\r\n\t\t\t\tcurrent: 101,\r\n\t\t\t\tremaining: 0,\r\n\t\t\t\tresetTime: new Date(),\r\n\t\t\t}\r\n\r\n\t\t\tservice.recordRateLimitMetrics('image-processing', false, info)\r\n\r\n\t\t\texpect(metricsService.recordError).toHaveBeenCalledWith(\r\n\t\t\t\t'rate_limit_exceeded',\r\n\t\t\t\t'image-processing',\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('resetRateLimit', () => {\r\n\t\tit('should reset rate limit for specific key', async () => {\r\n\t\t\tconst mockConfig = {\r\n\t\t\t\twindowMs: 60000,\r\n\t\t\t\tmax: 1,\r\n\t\t\t\tskipSuccessfulRequests: false,\r\n\t\t\t\tskipFailedRequests: false,\r\n\t\t\t}\r\n\r\n\t\t\t// Make request to reach limit\r\n\t\t\tawait service.checkRateLimit('test-key', mockConfig)\r\n\r\n\t\t\t// Reset the key\r\n\t\t\tservice.resetRateLimit('test-key')\r\n\r\n\t\t\t// Next request should be allowed\r\n\t\t\tconst result = await service.checkRateLimit('test-key', mockConfig)\r\n\t\t\texpect(result.allowed).toBe(true)\r\n\t\t\texpect(result.info.current).toBe(1)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('isBot', () => {\r\n\t\tit('should detect Facebook bot', () => {\r\n\t\t\texpect(service.isBot('facebookexternalhit/1.1')).toBe(true)\r\n\t\t\texpect(service.isBot('Facebot')).toBe(true)\r\n\t\t\texpect(service.isBot('facebookcatalog/1.0')).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should detect Twitter bot', () => {\r\n\t\t\texpect(service.isBot('Twitterbot/1.0')).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should detect LinkedIn bot', () => {\r\n\t\t\texpect(service.isBot('LinkedInBot/1.0')).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should detect search engine bots', () => {\r\n\t\t\texpect(service.isBot('Mozilla/5.0 (compatible; Googlebot/2.1)')).toBe(true)\r\n\t\t\texpect(service.isBot('Mozilla/5.0 (compatible; bingbot/2.0)')).toBe(true)\r\n\t\t\texpect(service.isBot('Mozilla/5.0 (compatible; YandexBot/3.0)')).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should detect SEO tool bots', () => {\r\n\t\t\texpect(service.isBot('AhrefsBot/7.0')).toBe(true)\r\n\t\t\texpect(service.isBot('SemrushBot/7~bl')).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should detect monitoring bots', () => {\r\n\t\t\texpect(service.isBot('PingdomBot/1.0')).toBe(true)\r\n\t\t\texpect(service.isBot('UptimeRobot/2.0')).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should not detect regular browsers as bots', () => {\r\n\t\t\texpect(service.isBot('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')).toBe(false)\r\n\t\t\texpect(service.isBot('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)')).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should handle empty user agent', () => {\r\n\t\t\texpect(service.isBot('')).toBe(false)\r\n\t\t\texpect(service.isBot(null as any)).toBe(false)\r\n\t\t\texpect(service.isBot(undefined as any)).toBe(false)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getBypassBotsConfig', () => {\r\n\t\tit('should return bot bypass configuration', () => {\r\n\t\t\tconfigService.getOptional.mockReturnValue(true)\r\n\t\t\texpect(service.getBypassBotsConfig()).toBe(true)\r\n\t\t\texpect(configService.getOptional).toHaveBeenCalledWith('rateLimit.bypass.bots', true)\r\n\t\t})\r\n\r\n\t\tit('should return default value when not configured', () => {\r\n\t\t\tconfigService.getOptional.mockReturnValue(true)\r\n\t\t\texpect(service.getBypassBotsConfig()).toBe(true)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigService","MetricsService","RateLimitService","Test","afterEach","beforeEach","describe","expect","it","vi","service","configService","metricsService","mockConfigService","get","fn","getOptional","mockMetricsService","recordCacheOperation","recordError","getRegistry","mockReturnValue","module","createTestingModule","providers","provide","useValue","compile","clearAllMocks","key","generateKey","toBe","generateAdvancedKey","toMatch","mockImplementation","defaultValue","configs","config","getRateLimitConfig","toEqual","windowMs","max","skipSuccessfulRequests","skipFailedRequests","mockConfig","result","checkRateLimit","allowed","info","current","remaining","limit","i","shortConfig","Promise","resolve","setTimeout","systemLoad","getSystemLoad","toHaveProperty","memoryUsage","originalEnv","process","env","NODE_ENV","spyOn","mockResolvedValue","cpuUsage","activeConnections","adaptiveLimit","calculateAdaptiveLimit","toBeLessThan","toBeGreaterThan","toBeGreaterThanOrEqual","resetTime","Date","recordRateLimitMetrics","not","toHaveBeenCalled","toHaveBeenCalledWith","resetRateLimit","isBot","undefined","getBypassBotsConfig"],"mappings":"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"}