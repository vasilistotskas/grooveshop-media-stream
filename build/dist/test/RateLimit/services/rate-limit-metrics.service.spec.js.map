{"version":3,"sources":["../../../../../src/test/RateLimit/services/rate-limit-metrics.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { RateLimitMetricsService } from '@microservice/RateLimit/services/rate-limit-metrics.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport * as promClient from 'prom-client'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('rateLimitMetricsService', () => {\r\n\tlet service: RateLimitMetricsService\r\n\tlet configService: MockedObject<ConfigService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\t// Clear the default registry before each test\r\n\t\tpromClient.register.clear()\r\n\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockReturnValue(true), // monitoring.enabled = true\r\n\t\t\tgetOptional: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tRateLimitMetricsService,\r\n\t\t\t\t{ provide: ConfigService, useValue: mockConfigService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<RateLimitMetricsService>(RateLimitMetricsService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\r\n\t\tawait service.onModuleInit()\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tpromClient.register.clear()\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('onModuleInit', () => {\r\n\t\tit('should initialize when monitoring is enabled', async () => {\r\n\t\t\tconfigService.get.mockReturnValue(true)\r\n\r\n\t\t\tawait service.onModuleInit()\r\n\r\n\t\t\texpect(configService.get).toHaveBeenCalledWith('monitoring.enabled')\r\n\t\t})\r\n\r\n\t\tit('should handle disabled monitoring', async () => {\r\n\t\t\tconfigService.get.mockReturnValue(false)\r\n\r\n\t\t\tawait service.onModuleInit()\r\n\r\n\t\t\texpect(configService.get).toHaveBeenCalledWith('monitoring.enabled')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('recordRateLimitAttempt', () => {\r\n\t\tit('should record allowed rate limit attempts', () => {\r\n\t\t\tservice.recordRateLimitAttempt('image-processing', '192.168.1.1', true)\r\n\r\n\t\t\t// Since we're using a separate registry, we need to check the service's registry\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst metrics = registry.getSingleMetric('mediastream_rate_limit_attempts_total')\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should record blocked rate limit attempts', () => {\r\n\t\t\tservice.recordRateLimitAttempt('image-processing', '192.168.1.1', false)\r\n\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst attemptsMetric = registry.getSingleMetric('mediastream_rate_limit_attempts_total')\r\n\t\t\tconst blockedMetric = registry.getSingleMetric('mediastream_rate_limit_blocked_total')\r\n\r\n\t\t\texpect(attemptsMetric).toBeDefined()\r\n\t\t\texpect(blockedMetric).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should hash IP addresses for privacy', () => {\r\n\t\t\tservice.recordRateLimitAttempt('image-processing', '192.168.1.1', true)\r\n\t\t\tservice.recordRateLimitAttempt('image-processing', '192.168.1.2', true)\r\n\r\n\t\t\t// IPs should be hashed differently\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst metrics = registry.getSingleMetric('mediastream_rate_limit_attempts_total')\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('updateCurrentRequests', () => {\r\n\t\tit('should update current request count', () => {\r\n\t\t\tservice.updateCurrentRequests('image-processing', '192.168.1.1', 5)\r\n\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst metrics = registry.getSingleMetric('mediastream_rate_limit_current_requests')\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should handle zero requests', () => {\r\n\t\t\tservice.updateCurrentRequests('image-processing', '192.168.1.1', 0)\r\n\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst metrics = registry.getSingleMetric('mediastream_rate_limit_current_requests')\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('recordAdaptiveAdjustment', () => {\r\n\t\tit('should record rate limit increases', () => {\r\n\t\t\tservice.recordAdaptiveAdjustment('increase', 'low_system_load')\r\n\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst metrics = registry.getSingleMetric('mediastream_rate_limit_adaptive_adjustments_total')\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should record rate limit decreases', () => {\r\n\t\t\tservice.recordAdaptiveAdjustment('decrease', 'high_memory_usage')\r\n\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst metrics = registry.getSingleMetric('mediastream_rate_limit_adaptive_adjustments_total')\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('updateSystemLoadMetrics', () => {\r\n\t\tit('should update all system load metrics', () => {\r\n\t\t\tservice.updateSystemLoadMetrics(75.5, 80.2, 150)\r\n\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst metrics = registry.getSingleMetric('mediastream_rate_limit_system_load')\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should handle zero values', () => {\r\n\t\t\tservice.updateSystemLoadMetrics(0, 0, 0)\r\n\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst metrics = registry.getSingleMetric('mediastream_rate_limit_system_load')\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should handle high values', () => {\r\n\t\t\tservice.updateSystemLoadMetrics(100, 100, 10000)\r\n\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst metrics = registry.getSingleMetric('mediastream_rate_limit_system_load')\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getRateLimitStats', () => {\r\n\t\tit('should return rate limit statistics', async () => {\r\n\t\t\tconst stats = await service.getRateLimitStats()\r\n\r\n\t\t\texpect(stats).toHaveProperty('totalAttempts')\r\n\t\t\texpect(stats).toHaveProperty('totalBlocked')\r\n\t\t\texpect(stats).toHaveProperty('blockRate')\r\n\t\t\texpect(stats).toHaveProperty('topBlockedIps')\r\n\t\t\texpect(stats).toHaveProperty('topRequestTypes')\r\n\t\t\texpect(Array.isArray(stats.topBlockedIps)).toBe(true)\r\n\t\t\texpect(Array.isArray(stats.topRequestTypes)).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should handle errors gracefully', async () => {\r\n\t\t\t// Mock an error scenario\r\n\t\t\tvi.spyOn(service, 'getRateLimitStats').mockRejectedValueOnce(new Error('Test error'))\r\n\r\n\t\t\tawait expect(service.getRateLimitStats()).rejects.toThrow('Test error')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getCurrentRateLimitConfig', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue?: any) => {\r\n\t\t\t\tconst configs: Record<string, any> = {\r\n\t\t\t\t\t'rateLimit.default.max': 100,\r\n\t\t\t\t\t'rateLimit.imageProcessing.max': 50,\r\n\t\t\t\t\t'rateLimit.healthCheck.max': 1000,\r\n\t\t\t\t\t'rateLimit.default.windowMs': 60000,\r\n\t\t\t\t}\r\n\t\t\t\treturn configs[key] || defaultValue\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should return current rate limit configuration', () => {\r\n\t\t\tconst config = service.getCurrentRateLimitConfig()\r\n\r\n\t\t\texpect(config).toEqual({\r\n\t\t\t\tdefaultLimit: 100,\r\n\t\t\t\timageProcessingLimit: 50,\r\n\t\t\t\thealthCheckLimit: 1000,\r\n\t\t\t\twindowMs: 60000,\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should use default values when config is missing', () => {\r\n\t\t\tconfigService.getOptional.mockImplementation((key: string, defaultValue?: any) => {\r\n\t\t\t\t// Return the default value when config is missing\r\n\t\t\t\treturn defaultValue\r\n\t\t\t})\r\n\r\n\t\t\tconst config = service.getCurrentRateLimitConfig()\r\n\r\n\t\t\texpect(config).toEqual({\r\n\t\t\t\tdefaultLimit: 100,\r\n\t\t\t\timageProcessingLimit: 50,\r\n\t\t\t\thealthCheckLimit: 1000,\r\n\t\t\t\twindowMs: 60000,\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('resetMetrics', () => {\r\n\t\tit('should reset all rate limit metrics', () => {\r\n\t\t\t// Record some metrics first\r\n\t\t\tservice.recordRateLimitAttempt('image-processing', '192.168.1.1', true)\r\n\t\t\tservice.updateCurrentRequests('image-processing', '192.168.1.1', 5)\r\n\t\t\tservice.recordAdaptiveAdjustment('decrease', 'high_load')\r\n\r\n\t\t\t// Reset metrics\r\n\t\t\tservice.resetMetrics()\r\n\r\n\t\t\t// Verify metrics are reset (this is a basic check)\r\n\t\t\tconst registry = (service as any).register\r\n\t\t\tconst attemptsMetric = registry.getSingleMetric('mediastream_rate_limit_attempts_total')\r\n\t\t\texpect(attemptsMetric).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('iP hashing', () => {\r\n\t\tit('should consistently hash the same IP', () => {\r\n\t\t\tconst service1 = new RateLimitMetricsService(configService)\r\n\t\t\tconst service2 = new RateLimitMetricsService(configService)\r\n\r\n\t\t\t// Access the private method through type assertion for testing\r\n\t\t\tconst hash1 = (service1 as any).hashIp('192.168.1.1')\r\n\t\t\tconst hash2 = (service2 as any).hashIp('192.168.1.1')\r\n\r\n\t\t\texpect(hash1).toBe(hash2)\r\n\t\t\texpect(hash1).toMatch(/^ip_[a-z0-9]+$/)\r\n\t\t})\r\n\r\n\t\tit('should produce different hashes for different IPs', () => {\r\n\t\t\tconst hash1 = (service as any).hashIp('192.168.1.1')\r\n\t\t\tconst hash2 = (service as any).hashIp('192.168.1.2')\r\n\r\n\t\t\texpect(hash1).not.toBe(hash2)\r\n\t\t\texpect(hash1).toMatch(/^ip_[a-z0-9]+$/)\r\n\t\t\texpect(hash2).toMatch(/^ip_[a-z0-9]+$/)\r\n\t\t})\r\n\r\n\t\tit('should handle empty IP addresses', () => {\r\n\t\t\tconst hash = (service as any).hashIp('')\r\n\r\n\t\t\texpect(hash).toMatch(/^ip_[a-z0-9]+$/)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigService","RateLimitMetricsService","Test","promClient","afterEach","beforeEach","describe","expect","it","vi","service","configService","register","clear","mockConfigService","get","fn","mockReturnValue","getOptional","module","createTestingModule","providers","provide","useValue","compile","onModuleInit","clearAllMocks","toHaveBeenCalledWith","recordRateLimitAttempt","registry","metrics","getSingleMetric","toBeDefined","attemptsMetric","blockedMetric","updateCurrentRequests","recordAdaptiveAdjustment","updateSystemLoadMetrics","stats","getRateLimitStats","toHaveProperty","Array","isArray","topBlockedIps","toBe","topRequestTypes","spyOn","mockRejectedValueOnce","Error","rejects","toThrow","mockImplementation","key","defaultValue","configs","config","getCurrentRateLimitConfig","toEqual","defaultLimit","imageProcessingLimit","healthCheckLimit","windowMs","resetMetrics","service1","service2","hash1","hashIp","hash2","toMatch","not","hash"],"mappings":"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"}