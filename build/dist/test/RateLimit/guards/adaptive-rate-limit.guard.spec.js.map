{"version":3,"sources":["../../../../../src/test/RateLimit/guards/adaptive-rate-limit.guard.spec.ts"],"sourcesContent":["import type { ExecutionContext } from '@nestjs/common'\r\nimport type { MockedObject } from 'vitest'\r\nimport { AdaptiveRateLimitGuard } from '@microservice/RateLimit/guards/adaptive-rate-limit.guard'\r\nimport { RateLimitMetricsService } from '@microservice/RateLimit/services/rate-limit-metrics.service'\r\nimport { RateLimitService } from '@microservice/RateLimit/services/rate-limit.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { ThrottlerException } from '@nestjs/throttler'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('adaptiveRateLimitGuard', () => {\r\n\tlet guard: AdaptiveRateLimitGuard\r\n\tlet rateLimitService: MockedObject<RateLimitService>\r\n\tlet rateLimitMetricsService: MockedObject<RateLimitMetricsService>\r\n\r\n\tconst mockRequest = {\r\n\t\turl: '/api/v1/image/media/uploads/test.jpg/100/100/contain/entropy/transparent/5/webp/100',\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'user-agent': 'Mozilla/5.0 (Test Browser)',\r\n\t\t\t'x-forwarded-for': '192.168.1.1',\r\n\t\t},\r\n\t\tip: '192.168.1.1',\r\n\t}\r\n\r\n\tconst mockResponse = {\r\n\t\tsetHeader: vi.fn(),\r\n\t}\r\n\r\n\tconst mockExecutionContext = {\r\n\t\tswitchToHttp: () => ({\r\n\t\t\tgetRequest: () => mockRequest,\r\n\t\t\tgetResponse: () => mockResponse,\r\n\t\t}),\r\n\t} as ExecutionContext\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockRateLimitService = {\r\n\t\t\tgenerateAdvancedKey: vi.fn(),\r\n\t\t\tgetRateLimitConfig: vi.fn(),\r\n\t\t\tcalculateAdaptiveLimit: vi.fn(),\r\n\t\t\tcheckRateLimit: vi.fn(),\r\n\t\t\trecordRateLimitMetrics: vi.fn(),\r\n\t\t\tgetWhitelistedDomains: vi.fn(),\r\n\t\t\tgetBypassBotsConfig: vi.fn(),\r\n\t\t\tisBot: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockRateLimitMetricsService = {\r\n\t\t\trecordRateLimitAttempt: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tAdaptiveRateLimitGuard,\r\n\t\t\t\t{ provide: RateLimitService, useValue: mockRateLimitService },\r\n\t\t\t\t{ provide: RateLimitMetricsService, useValue: mockRateLimitMetricsService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tguard = module.get<AdaptiveRateLimitGuard>(AdaptiveRateLimitGuard)\r\n\t\trateLimitService = module.get(RateLimitService)\r\n\t\trateLimitMetricsService = module.get(RateLimitMetricsService)\r\n\t\trateLimitService.getWhitelistedDomains.mockReturnValue([])\r\n\t\trateLimitService.getBypassBotsConfig.mockReturnValue(true)\r\n\t\trateLimitService.isBot.mockReturnValue(false)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('canActivate', () => {\r\n\t\tit('should allow requests when rate limit is not exceeded', async () => {\r\n\t\t\tconst mockConfig = { windowMs: 60000, max: 100, skipSuccessfulRequests: false, skipFailedRequests: false }\r\n\t\t\tconst mockInfo = { limit: 100, current: 1, remaining: 99, resetTime: new Date() }\r\n\r\n\t\t\trateLimitService.generateAdvancedKey.mockReturnValue('192.168.1.1:hash:image-processing')\r\n\t\t\trateLimitService.getRateLimitConfig.mockReturnValue(mockConfig)\r\n\t\t\trateLimitService.calculateAdaptiveLimit.mockResolvedValue(100)\r\n\t\t\trateLimitService.checkRateLimit.mockResolvedValue({ allowed: true, info: mockInfo })\r\n\r\n\t\t\tconst result = await guard.canActivate(mockExecutionContext)\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(rateLimitService.recordRateLimitMetrics).toHaveBeenCalledWith('image-processing', true, mockInfo)\r\n\t\t\texpect(rateLimitMetricsService.recordRateLimitAttempt).toHaveBeenCalledWith('image-processing', '192.168.1.1', true)\r\n\t\t\texpect(mockResponse.setHeader).toHaveBeenCalledWith('X-RateLimit-Limit', '100')\r\n\t\t\texpect(mockResponse.setHeader).toHaveBeenCalledWith('X-RateLimit-Remaining', '99')\r\n\t\t})\r\n\r\n\t\tit('should block requests when rate limit is exceeded', async () => {\r\n\t\t\tconst mockConfig = { windowMs: 60000, max: 100, skipSuccessfulRequests: false, skipFailedRequests: false }\r\n\t\t\tconst mockInfo = { limit: 100, current: 101, remaining: 0, resetTime: new Date() }\r\n\r\n\t\t\trateLimitService.generateAdvancedKey.mockReturnValue('192.168.1.1:hash:image-processing')\r\n\t\t\trateLimitService.getRateLimitConfig.mockReturnValue(mockConfig)\r\n\t\t\trateLimitService.calculateAdaptiveLimit.mockResolvedValue(100)\r\n\t\t\trateLimitService.checkRateLimit.mockResolvedValue({ allowed: false, info: mockInfo })\r\n\r\n\t\t\tawait expect(guard.canActivate(mockExecutionContext)).rejects.toThrow(ThrottlerException)\r\n\r\n\t\t\texpect(rateLimitService.recordRateLimitMetrics).toHaveBeenCalledWith('image-processing', false, mockInfo)\r\n\t\t\texpect(rateLimitMetricsService.recordRateLimitAttempt).toHaveBeenCalledWith('image-processing', '192.168.1.1', false)\r\n\t\t})\r\n\r\n\t\tit('should skip rate limiting for health check requests', async () => {\r\n\t\t\tconst healthCheckContext = {\r\n\t\t\t\tswitchToHttp: () => ({\r\n\t\t\t\t\tgetRequest: () => ({ ...mockRequest, url: '/health' }),\r\n\t\t\t\t\tgetResponse: () => mockResponse,\r\n\t\t\t\t}),\r\n\t\t\t} as ExecutionContext\r\n\r\n\t\t\tconst result = await guard.canActivate(healthCheckContext)\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(rateLimitService.checkRateLimit).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should skip rate limiting for metrics endpoint', async () => {\r\n\t\t\tconst metricsContext = {\r\n\t\t\t\tswitchToHttp: () => ({\r\n\t\t\t\t\tgetRequest: () => ({ ...mockRequest, url: '/metrics' }),\r\n\t\t\t\t\tgetResponse: () => mockResponse,\r\n\t\t\t\t}),\r\n\t\t\t} as ExecutionContext\r\n\r\n\t\t\tconst result = await guard.canActivate(metricsContext)\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(rateLimitService.checkRateLimit).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should skip rate limiting for static assets', async () => {\r\n\t\t\tconst staticAssetContext = {\r\n\t\t\t\tswitchToHttp: () => ({\r\n\t\t\t\t\tgetRequest: () => ({ ...mockRequest, url: '/static/image.png' }),\r\n\t\t\t\t\tgetResponse: () => mockResponse,\r\n\t\t\t\t}),\r\n\t\t\t} as ExecutionContext\r\n\r\n\t\t\tconst result = await guard.canActivate(staticAssetContext)\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(rateLimitService.checkRateLimit).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should skip rate limiting for bot user agents', async () => {\r\n\t\t\trateLimitService.getBypassBotsConfig.mockReturnValue(true)\r\n\t\t\trateLimitService.isBot.mockReturnValue(true)\r\n\r\n\t\t\tconst botContext = {\r\n\t\t\t\tswitchToHttp: () => ({\r\n\t\t\t\t\tgetRequest: () => ({ ...mockRequest, headers: { 'user-agent': 'facebookexternalhit/1.1' } }),\r\n\t\t\t\t\tgetResponse: () => mockResponse,\r\n\t\t\t\t}),\r\n\t\t\t} as ExecutionContext\r\n\r\n\t\t\tconst result = await guard.canActivate(botContext)\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(rateLimitService.isBot).toHaveBeenCalledWith('facebookexternalhit/1.1')\r\n\t\t\texpect(rateLimitService.checkRateLimit).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should not skip rate limiting when bot bypass is disabled', async () => {\r\n\t\t\trateLimitService.getBypassBotsConfig.mockReturnValue(false)\r\n\t\t\trateLimitService.isBot.mockReturnValue(true)\r\n\r\n\t\t\tconst mockConfig = { windowMs: 60000, max: 100, skipSuccessfulRequests: false, skipFailedRequests: false }\r\n\t\t\tconst mockInfo = { limit: 100, current: 1, remaining: 99, resetTime: new Date() }\r\n\r\n\t\t\trateLimitService.generateAdvancedKey.mockReturnValue('192.168.1.1:hash:image-processing')\r\n\t\t\trateLimitService.getRateLimitConfig.mockReturnValue(mockConfig)\r\n\t\t\trateLimitService.calculateAdaptiveLimit.mockResolvedValue(100)\r\n\t\t\trateLimitService.checkRateLimit.mockResolvedValue({ allowed: true, info: mockInfo })\r\n\r\n\t\t\tconst botContext = {\r\n\t\t\t\tswitchToHttp: () => ({\r\n\t\t\t\t\tgetRequest: () => ({ ...mockRequest, headers: { 'user-agent': 'facebookexternalhit/1.1' } }),\r\n\t\t\t\t\tgetResponse: () => mockResponse,\r\n\t\t\t\t}),\r\n\t\t\t} as ExecutionContext\r\n\r\n\t\t\tconst result = await guard.canActivate(botContext)\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(rateLimitService.checkRateLimit).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should apply adaptive rate limiting', async () => {\r\n\t\t\tconst mockConfig = { windowMs: 60000, max: 100, skipSuccessfulRequests: false, skipFailedRequests: false }\r\n\t\t\tconst mockInfo = { limit: 50, current: 1, remaining: 49, resetTime: new Date() }\r\n\r\n\t\t\trateLimitService.generateAdvancedKey.mockReturnValue('192.168.1.1:hash:image-processing')\r\n\t\t\trateLimitService.getRateLimitConfig.mockReturnValue(mockConfig)\r\n\t\t\trateLimitService.calculateAdaptiveLimit.mockResolvedValue(50) // Reduced due to system load\r\n\t\t\trateLimitService.checkRateLimit.mockResolvedValue({ allowed: true, info: mockInfo })\r\n\r\n\t\t\tconst result = await guard.canActivate(mockExecutionContext)\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(rateLimitService.calculateAdaptiveLimit).toHaveBeenCalledWith(100)\r\n\t\t\texpect(rateLimitService.checkRateLimit).toHaveBeenCalledWith(\r\n\t\t\t\t'192.168.1.1:hash:image-processing',\r\n\t\t\t\t{ ...mockConfig, max: 50 },\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should handle errors gracefully and allow requests', async () => {\r\n\t\t\trateLimitService.generateAdvancedKey.mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Test error')\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await guard.canActivate(mockExecutionContext)\r\n\r\n\t\t\texpect(result).toBe(true) // Should allow request on error\r\n\t\t})\r\n\r\n\t\tit('should extract client IP from various headers', async () => {\r\n\t\t\tconst testCases = [\r\n\t\t\t\t{ headers: { 'x-forwarded-for': '192.168.1.1,192.168.1.2' }, expectedIp: '192.168.1.1' },\r\n\t\t\t\t{ headers: { 'x-real-ip': '192.168.1.3' }, expectedIp: '192.168.1.3' },\r\n\t\t\t\t{ headers: {}, connection: { remoteAddress: '192.168.1.4' }, expectedIp: '192.168.1.4' },\r\n\t\t\t\t{ headers: {}, ip: '192.168.1.5', expectedIp: '192.168.1.5' },\r\n\t\t\t]\r\n\r\n\t\t\tfor (const testCase of testCases) {\r\n\t\t\t\tconst testRequest = { ...mockRequest, ...testCase }\r\n\t\t\t\tconst testContext = {\r\n\t\t\t\t\tswitchToHttp: () => ({\r\n\t\t\t\t\t\tgetRequest: () => testRequest,\r\n\t\t\t\t\t\tgetResponse: () => mockResponse,\r\n\t\t\t\t\t}),\r\n\t\t\t\t} as ExecutionContext\r\n\r\n\t\t\t\tconst mockConfig = { windowMs: 60000, max: 100, skipSuccessfulRequests: false, skipFailedRequests: false }\r\n\t\t\t\tconst mockInfo = { limit: 100, current: 1, remaining: 99, resetTime: new Date() }\r\n\r\n\t\t\t\trateLimitService.generateAdvancedKey.mockReturnValue(`${testCase.expectedIp}:hash:image-processing`)\r\n\t\t\t\trateLimitService.getRateLimitConfig.mockReturnValue(mockConfig)\r\n\t\t\t\trateLimitService.calculateAdaptiveLimit.mockResolvedValue(100)\r\n\t\t\t\trateLimitService.checkRateLimit.mockResolvedValue({ allowed: true, info: mockInfo })\r\n\r\n\t\t\t\tawait guard.canActivate(testContext)\r\n\r\n\t\t\t\texpect(rateLimitService.generateAdvancedKey).toHaveBeenCalledWith(\r\n\t\t\t\t\ttestCase.expectedIp,\r\n\t\t\t\t\texpect.any(String),\r\n\t\t\t\t\t'image-processing',\r\n\t\t\t\t)\r\n\r\n\t\t\t\tvi.clearAllMocks()\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should identify different request types correctly', async () => {\r\n\t\t\tconst testCases = [\r\n\t\t\t\t{ url: '/api/v1/image/media/uploads/test.jpg/100/100/contain/entropy/transparent/5/webp/100', expectedType: 'image-processing' },\r\n\t\t\t\t{ url: '/api/v1/image/static/images/test.jpg/100/100/contain/entropy/transparent/5/webp/100', expectedType: 'image-processing' },\r\n\t\t\t\t{ url: '/health', expectedType: 'health-check' },\r\n\t\t\t\t{ url: '/api/v1/other', expectedType: 'get-default' },\r\n\t\t\t]\r\n\r\n\t\t\tfor (const testCase of testCases) {\r\n\t\t\t\tconst testRequest = { ...mockRequest, url: testCase.url }\r\n\t\t\t\tconst testContext = {\r\n\t\t\t\t\tswitchToHttp: () => ({\r\n\t\t\t\t\t\tgetRequest: () => testRequest,\r\n\t\t\t\t\t\tgetResponse: () => mockResponse,\r\n\t\t\t\t\t}),\r\n\t\t\t\t} as ExecutionContext\r\n\r\n\t\t\t\t// Skip health checks as they bypass rate limiting\r\n\t\t\t\tif (testCase.expectedType === 'health-check') {\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst mockConfig = { windowMs: 60000, max: 100, skipSuccessfulRequests: false, skipFailedRequests: false }\r\n\t\t\t\tconst mockInfo = { limit: 100, current: 1, remaining: 99, resetTime: new Date() }\r\n\r\n\t\t\t\trateLimitService.generateAdvancedKey.mockReturnValue(`192.168.1.1:hash:${testCase.expectedType}`)\r\n\t\t\t\trateLimitService.getRateLimitConfig.mockReturnValue(mockConfig)\r\n\t\t\t\trateLimitService.calculateAdaptiveLimit.mockResolvedValue(100)\r\n\t\t\t\trateLimitService.checkRateLimit.mockResolvedValue({ allowed: true, info: mockInfo })\r\n\r\n\t\t\t\tawait guard.canActivate(testContext)\r\n\r\n\t\t\t\texpect(rateLimitService.getRateLimitConfig).toHaveBeenCalledWith(testCase.expectedType)\r\n\r\n\t\t\t\tvi.clearAllMocks()\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["AdaptiveRateLimitGuard","RateLimitMetricsService","RateLimitService","Test","ThrottlerException","afterEach","beforeEach","describe","expect","it","vi","guard","rateLimitService","rateLimitMetricsService","mockRequest","url","method","headers","ip","mockResponse","setHeader","fn","mockExecutionContext","switchToHttp","getRequest","getResponse","mockRateLimitService","generateAdvancedKey","getRateLimitConfig","calculateAdaptiveLimit","checkRateLimit","recordRateLimitMetrics","getWhitelistedDomains","getBypassBotsConfig","isBot","mockRateLimitMetricsService","recordRateLimitAttempt","module","createTestingModule","providers","provide","useValue","compile","get","mockReturnValue","clearAllMocks","mockConfig","windowMs","max","skipSuccessfulRequests","skipFailedRequests","mockInfo","limit","current","remaining","resetTime","Date","mockResolvedValue","allowed","info","result","canActivate","toBe","toHaveBeenCalledWith","rejects","toThrow","healthCheckContext","not","toHaveBeenCalled","metricsContext","staticAssetContext","botContext","mockImplementation","Error","testCases","expectedIp","connection","remoteAddress","testCase","testRequest","testContext","any","String","expectedType"],"mappings":"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"}