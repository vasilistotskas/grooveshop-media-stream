{"version":3,"sources":["../../../../../src/test/Queue/services/bull-queue.service.spec.ts"],"sourcesContent":["import type { JobOptions, JobProcessor } from '@microservice/Queue/interfaces/job-queue.interface'\r\nimport type { Job as BullJob, Queue } from 'bull'\r\nimport type { MockedObject } from 'vitest'\r\nimport { BullQueueService } from '@microservice/Queue/services/bull-queue.service'\r\nimport { JobType } from '@microservice/Queue/types/job.types'\r\nimport { getQueueToken } from '@nestjs/bull'\r\nimport { Logger } from '@nestjs/common'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\ndescribe('bullQueueService', () => {\r\n\tlet service: BullQueueService\r\n\tlet mockImageQueue: MockedObject<Queue>\r\n\tlet mockCacheQueue: MockedObject<Queue>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockQueueFactory = () => ({\r\n\t\t\tadd: vi.fn(),\r\n\t\t\tprocess: vi.fn(),\r\n\t\t\tgetJob: vi.fn(),\r\n\t\t\tgetWaiting: vi.fn(),\r\n\t\t\tgetActive: vi.fn(),\r\n\t\t\tgetCompleted: vi.fn(),\r\n\t\t\tgetFailed: vi.fn(),\r\n\t\t\tgetDelayed: vi.fn(),\r\n\t\t\tisPaused: vi.fn(),\r\n\t\t\tpause: vi.fn(),\r\n\t\t\tresume: vi.fn(),\r\n\t\t\tclean: vi.fn(),\r\n\t\t\tclose: vi.fn(),\r\n\t\t})\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tBullQueueService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: getQueueToken('image-processing'),\r\n\t\t\t\t\tuseFactory: mockQueueFactory,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: getQueueToken('cache-operations'),\r\n\t\t\t\t\tuseFactory: mockQueueFactory,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<BullQueueService>(BullQueueService)\r\n\t\tmockImageQueue = module.get(getQueueToken('image-processing'))\r\n\t\tmockCacheQueue = module.get(getQueueToken('cache-operations'))\r\n\r\n\t\t// Mock logger to avoid console output during tests\r\n\t\tvi.spyOn(Logger.prototype, 'debug').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'log').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'warn').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'error').mockImplementation(() => {})\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t\tvi.resetAllMocks()\r\n\t})\r\n\r\n\tdescribe('add', () => {\r\n\t\tit('should add job to image processing queue', async () => {\r\n\t\t\tconst jobData = { imageUrl: 'https://example.com/image.jpg' }\r\n\t\t\tconst options: JobOptions = { priority: 1, attempts: 3 }\r\n\r\n\t\t\tconst mockBullJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: jobData,\r\n\t\t\t\topts: options,\r\n\t\t\t\tprogress: vi.fn().mockReturnValue(0),\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tattemptsMade: 0,\r\n\t\t\t\tfailedReason: null,\r\n\t\t\t\tstacktrace: null,\r\n\t\t\t\treturnvalue: null,\r\n\t\t\t\tfinishedOn: null,\r\n\t\t\t\tprocessedOn: null,\r\n\t\t\t} as any\r\n\r\n\t\t\tmockImageQueue.add.mockResolvedValue(mockBullJob)\r\n\r\n\t\t\tconst result = await service.add(JobType.IMAGE_PROCESSING, jobData, options)\r\n\r\n\t\t\texpect(mockImageQueue.add).toHaveBeenCalledWith(\r\n\t\t\t\tJobType.IMAGE_PROCESSING,\r\n\t\t\t\tjobData,\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\tpriority: 1,\r\n\t\t\t\t\tattempts: 3,\r\n\t\t\t\t\tbackoff: { type: 'exponential', delay: 2000 },\r\n\t\t\t\t\ttimeout: 30000,\r\n\t\t\t\t\tremoveOnComplete: 10,\r\n\t\t\t\t\tremoveOnFail: 5,\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t\texpect(result.id).toBe('job-123')\r\n\t\t\texpect(result.name).toBe(JobType.IMAGE_PROCESSING)\r\n\t\t\texpect(result.data).toBe(jobData)\r\n\t\t})\r\n\r\n\t\tit('should add job to cache operations queue', async () => {\r\n\t\t\tconst jobData = { imageUrls: ['https://example.com/image.jpg'] }\r\n\t\t\tconst options: JobOptions = { delay: 5000 }\r\n\r\n\t\t\tconst mockBullJob = {\r\n\t\t\t\tid: 'cache-job-456',\r\n\t\t\t\tname: 'cache-warming',\r\n\t\t\t\tdata: jobData,\r\n\t\t\t\topts: options,\r\n\t\t\t\tprogress: vi.fn().mockReturnValue(0),\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tattemptsMade: 0,\r\n\t\t\t\tfailedReason: null,\r\n\t\t\t\tstacktrace: null,\r\n\t\t\t\treturnvalue: null,\r\n\t\t\t\tfinishedOn: null,\r\n\t\t\t\tprocessedOn: null,\r\n\t\t\t} as any\r\n\r\n\t\t\tmockCacheQueue.add.mockResolvedValue(mockBullJob)\r\n\r\n\t\t\tconst result = await service.add('cache-warming', jobData, options)\r\n\r\n\t\t\texpect(mockCacheQueue.add).toHaveBeenCalledWith(\r\n\t\t\t\t'cache-warming',\r\n\t\t\t\tjobData,\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\tdelay: 5000,\r\n\t\t\t\t\tattempts: 3,\r\n\t\t\t\t\ttimeout: 30000,\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t\texpect(result.id).toBe('cache-job-456')\r\n\t\t})\r\n\r\n\t\tit('should handle job addition errors', async () => {\r\n\t\t\tconst jobData = { imageUrl: 'https://example.com/image.jpg' }\r\n\t\t\tconst error = new Error('Queue connection failed')\r\n\r\n\t\t\tmockImageQueue.add.mockRejectedValue(error)\r\n\r\n\t\t\tawait expect(service.add(JobType.IMAGE_PROCESSING, jobData)).rejects.toThrow(\r\n\t\t\t\t'Queue connection failed',\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('process', () => {\r\n\t\tit('should register job processor', () => {\r\n\t\t\tconst mockProcessor: JobProcessor = vi.fn().mockResolvedValue({ success: true })\r\n\r\n\t\t\tservice.process(JobType.IMAGE_PROCESSING, mockProcessor)\r\n\r\n\t\t\texpect(mockImageQueue.process).toHaveBeenCalledWith(\r\n\t\t\t\tJobType.IMAGE_PROCESSING,\r\n\t\t\t\texpect.any(Function),\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should execute processor when job is processed', async () => {\r\n\t\t\tconst mockProcessor: JobProcessor = vi.fn().mockResolvedValue({ success: true })\r\n\t\t\tconst jobData = { imageUrl: 'https://example.com/image.jpg' }\r\n\r\n\t\t\tconst mockBullJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: jobData,\r\n\t\t\t\topts: {},\r\n\t\t\t\tprogress: vi.fn().mockReturnValue(50),\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tattemptsMade: 1,\r\n\t\t\t\tfailedReason: null,\r\n\t\t\t\tstacktrace: null,\r\n\t\t\t\treturnvalue: null,\r\n\t\t\t\tfinishedOn: null,\r\n\t\t\t\tprocessedOn: Date.now(),\r\n\t\t\t} as any\r\n\r\n\t\t\tlet processorCallback: (job: BullJob) => Promise<any>\r\n\r\n\t\t\tmockImageQueue.process.mockImplementation((name, callback) => {\r\n\t\t\t\tprocessorCallback = callback as any\r\n\t\t\t\treturn Promise.resolve()\r\n\t\t\t})\r\n\r\n\t\t\tservice.process(JobType.IMAGE_PROCESSING, mockProcessor)\r\n\r\n\t\t\tconst result = await processorCallback!(mockBullJob)\r\n\r\n\t\t\texpect(mockProcessor).toHaveBeenCalledWith(\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\tid: 'job-123',\r\n\t\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\t\tdata: jobData,\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t\texpect(result).toEqual({ success: true })\r\n\t\t})\r\n\r\n\t\tit('should handle processor errors', async () => {\r\n\t\t\tconst mockProcessor: JobProcessor = vi.fn().mockRejectedValue(new Error('Processing failed'))\r\n\t\t\tconst jobData = { imageUrl: 'https://example.com/image.jpg' }\r\n\r\n\t\t\tconst mockBullJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: jobData,\r\n\t\t\t\topts: {},\r\n\t\t\t\tprogress: vi.fn().mockReturnValue(0),\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tattemptsMade: 1,\r\n\t\t\t\tfailedReason: null,\r\n\t\t\t\tstacktrace: null,\r\n\t\t\t\treturnvalue: null,\r\n\t\t\t\tfinishedOn: null,\r\n\t\t\t\tprocessedOn: null,\r\n\t\t\t} as any\r\n\r\n\t\t\tlet processorCallback: (job: BullJob) => Promise<any>\r\n\r\n\t\t\tmockImageQueue.process.mockImplementation((name, callback) => {\r\n\t\t\t\tprocessorCallback = callback as any\r\n\t\t\t\treturn Promise.resolve()\r\n\t\t\t})\r\n\r\n\t\t\tservice.process(JobType.IMAGE_PROCESSING, mockProcessor)\r\n\r\n\t\t\tawait expect(processorCallback!(mockBullJob)).rejects.toThrow('Processing failed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getStats', () => {\r\n\t\tit('should return combined queue statistics', async () => {\r\n\t\t\t// Mock image queue stats\r\n\t\t\tmockImageQueue.getWaiting.mockResolvedValue([{}, {}] as any) // 2 waiting\r\n\t\t\tmockImageQueue.getActive.mockResolvedValue([{}] as any) // 1 active\r\n\t\t\tmockImageQueue.getCompleted.mockResolvedValue([{}, {}, {}] as any) // 3 completed\r\n\t\t\tmockImageQueue.getFailed.mockResolvedValue([{}] as any) // 1 failed\r\n\t\t\tmockImageQueue.getDelayed.mockResolvedValue([]) // 0 delayed\r\n\t\t\tmockImageQueue.isPaused.mockResolvedValue(false)\r\n\r\n\t\t\t// Mock cache queue stats\r\n\t\t\tmockCacheQueue.getWaiting.mockResolvedValue([{}] as any) // 1 waiting\r\n\t\t\tmockCacheQueue.getActive.mockResolvedValue([]) // 0 active\r\n\t\t\tmockCacheQueue.getCompleted.mockResolvedValue([{}, {}] as any) // 2 completed\r\n\t\t\tmockCacheQueue.getFailed.mockResolvedValue([]) // 0 failed\r\n\t\t\tmockCacheQueue.getDelayed.mockResolvedValue([{}] as any) // 1 delayed\r\n\t\t\tmockCacheQueue.isPaused.mockResolvedValue(false)\r\n\r\n\t\t\tconst stats = await service.getStats()\r\n\r\n\t\t\texpect(stats).toEqual({\r\n\t\t\t\twaiting: 3, // 2 + 1\r\n\t\t\t\tactive: 1, // 1 + 0\r\n\t\t\t\tcompleted: 5, // 3 + 2\r\n\t\t\t\tfailed: 1, // 1 + 0\r\n\t\t\t\tdelayed: 1, // 0 + 1\r\n\t\t\t\tpaused: false, // false && false\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should handle stats retrieval errors', async () => {\r\n\t\t\tmockImageQueue.getWaiting.mockRejectedValue(new Error('Queue connection error'))\r\n\r\n\t\t\tawait expect(service.getStats()).rejects.toThrow('Queue connection error')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getJob', () => {\r\n\t\tit('should find job in image queue', async () => {\r\n\t\t\tconst mockBullJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: { imageUrl: 'https://example.com/image.jpg' },\r\n\t\t\t\topts: {},\r\n\t\t\t\tprogress: vi.fn().mockReturnValue(75),\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tattemptsMade: 1,\r\n\t\t\t\tfailedReason: null,\r\n\t\t\t\tstacktrace: null,\r\n\t\t\t\treturnvalue: null,\r\n\t\t\t\tfinishedOn: null,\r\n\t\t\t\tprocessedOn: Date.now(),\r\n\t\t\t} as any\r\n\r\n\t\t\tmockImageQueue.getJob.mockResolvedValue(mockBullJob)\r\n\t\t\tmockCacheQueue.getJob.mockResolvedValue(null)\r\n\r\n\t\t\tconst job = await service.getJob('job-123')\r\n\r\n\t\t\texpect(job).toBeDefined()\r\n\t\t\texpect(job!.id).toBe('job-123')\r\n\t\t\texpect(job!.name).toBe(JobType.IMAGE_PROCESSING)\r\n\t\t})\r\n\r\n\t\tit('should find job in cache queue', async () => {\r\n\t\t\tconst mockBullJob = {\r\n\t\t\t\tid: 'cache-job-456',\r\n\t\t\t\tname: 'cache-warming',\r\n\t\t\t\tdata: { imageUrls: [] },\r\n\t\t\t\topts: {},\r\n\t\t\t\tprogress: vi.fn().mockReturnValue(100),\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tattemptsMade: 1,\r\n\t\t\t\tfailedReason: null,\r\n\t\t\t\tstacktrace: null,\r\n\t\t\t\treturnvalue: { success: true },\r\n\t\t\t\tfinishedOn: Date.now(),\r\n\t\t\t\tprocessedOn: Date.now(),\r\n\t\t\t} as any\r\n\r\n\t\t\tmockImageQueue.getJob.mockResolvedValue(null)\r\n\t\t\tmockCacheQueue.getJob.mockResolvedValue(mockBullJob)\r\n\r\n\t\t\tconst job = await service.getJob('cache-job-456')\r\n\r\n\t\t\texpect(job).toBeDefined()\r\n\t\t\texpect(job!.id).toBe('cache-job-456')\r\n\t\t\texpect(job!.name).toBe('cache-warming')\r\n\t\t})\r\n\r\n\t\tit('should return null when job not found', async () => {\r\n\t\t\tmockImageQueue.getJob.mockResolvedValue(null)\r\n\t\t\tmockCacheQueue.getJob.mockResolvedValue(null)\r\n\r\n\t\t\tconst job = await service.getJob('nonexistent-job')\r\n\r\n\t\t\texpect(job).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should handle job retrieval errors', async () => {\r\n\t\t\tmockImageQueue.getJob.mockRejectedValue(new Error('Job retrieval error'))\r\n\t\t\tmockCacheQueue.getJob.mockRejectedValue(new Error('Job retrieval error'))\r\n\r\n\t\t\tconst job = await service.getJob('error-job')\r\n\r\n\t\t\texpect(job).toBeNull()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('removeJob', () => {\r\n\t\tit('should remove job successfully', async () => {\r\n\t\t\tconst mockBullJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tremove: vi.fn().mockResolvedValue(undefined),\r\n\t\t\t} as any\r\n\r\n\t\t\t// Mock getJob to return a job\r\n\t\t\tvi.spyOn(service, 'getJob').mockResolvedValue({\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\tmockImageQueue.getJob.mockResolvedValue(mockBullJob)\r\n\r\n\t\t\tawait service.removeJob('job-123')\r\n\r\n\t\t\texpect(mockBullJob.remove).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should throw error when job not found', async () => {\r\n\t\t\tvi.spyOn(service, 'getJob').mockResolvedValue(null)\r\n\r\n\t\t\tawait expect(service.removeJob('nonexistent-job')).rejects.toThrow(\r\n\t\t\t\t'Job nonexistent-job not found',\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should handle job removal errors', async () => {\r\n\t\t\tconst mockBullJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tremove: vi.fn().mockRejectedValue(new Error('Removal failed')),\r\n\t\t\t} as any\r\n\r\n\t\t\tvi.spyOn(service, 'getJob').mockResolvedValue({\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\tmockImageQueue.getJob.mockResolvedValue(mockBullJob)\r\n\r\n\t\t\tawait expect(service.removeJob('job-123')).rejects.toThrow('Removal failed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('pause', () => {\r\n\t\tit('should pause all queues', async () => {\r\n\t\t\tmockImageQueue.pause.mockResolvedValue(undefined)\r\n\t\t\tmockCacheQueue.pause.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait service.pause()\r\n\r\n\t\t\texpect(mockImageQueue.pause).toHaveBeenCalled()\r\n\t\t\texpect(mockCacheQueue.pause).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should handle pause errors', async () => {\r\n\t\t\tmockImageQueue.pause.mockRejectedValue(new Error('Pause failed'))\r\n\r\n\t\t\tawait expect(service.pause()).rejects.toThrow('Pause failed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('resume', () => {\r\n\t\tit('should resume all queues', async () => {\r\n\t\t\tmockImageQueue.resume.mockResolvedValue(undefined)\r\n\t\t\tmockCacheQueue.resume.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait service.resume()\r\n\r\n\t\t\texpect(mockImageQueue.resume).toHaveBeenCalled()\r\n\t\t\texpect(mockCacheQueue.resume).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should handle resume errors', async () => {\r\n\t\t\tmockCacheQueue.resume.mockRejectedValue(new Error('Resume failed'))\r\n\r\n\t\t\tawait expect(service.resume()).rejects.toThrow('Resume failed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('clean', () => {\r\n\t\tit('should clean jobs from all queues', async () => {\r\n\t\t\tconst grace = 60000 // 1 minute\r\n\t\t\tconst status = 'completed'\r\n\r\n\t\t\tmockImageQueue.clean.mockResolvedValue([])\r\n\t\t\tmockCacheQueue.clean.mockResolvedValue([])\r\n\r\n\t\t\tawait service.clean(grace, status as any)\r\n\r\n\t\t\texpect(mockImageQueue.clean).toHaveBeenCalledWith(grace, status)\r\n\t\t\texpect(mockCacheQueue.clean).toHaveBeenCalledWith(grace, status)\r\n\t\t})\r\n\r\n\t\tit('should handle clean errors', async () => {\r\n\t\t\tconst grace = 60000\r\n\t\t\tconst status = 'failed'\r\n\r\n\t\t\tmockImageQueue.clean.mockRejectedValue(new Error('Clean failed'))\r\n\r\n\t\t\tawait expect(service.clean(grace, status as any)).rejects.toThrow('Clean failed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('onModuleDestroy', () => {\r\n\t\tit('should close all queue connections', async () => {\r\n\t\t\tmockImageQueue.close.mockResolvedValue(undefined)\r\n\t\t\tmockCacheQueue.close.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait service.onModuleDestroy()\r\n\r\n\t\t\texpect(mockImageQueue.close).toHaveBeenCalled()\r\n\t\t\texpect(mockCacheQueue.close).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should handle close errors gracefully', async () => {\r\n\t\t\tmockImageQueue.close.mockRejectedValue(new Error('Close failed'))\r\n\t\t\tmockCacheQueue.close.mockResolvedValue(undefined)\r\n\r\n\t\t\t// Should not throw, just log error\r\n\t\t\tawait expect(service.onModuleDestroy()).resolves.toBeUndefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('convertToBullOptions', () => {\r\n\t\tit('should convert job options correctly', () => {\r\n\t\t\tconst options: JobOptions = {\r\n\t\t\t\tpriority: 5,\r\n\t\t\t\tdelay: 1000,\r\n\t\t\t\tattempts: 5,\r\n\t\t\t\ttimeout: 60000,\r\n\t\t\t\tremoveOnComplete: 20,\r\n\t\t\t\tremoveOnFail: 10,\r\n\t\t\t\tjobId: 'custom-job-id',\r\n\t\t\t}\r\n\r\n\t\t\tconst bullOptions = (service as any).convertToBullOptions(options)\r\n\r\n\t\t\texpect(bullOptions).toEqual({\r\n\t\t\t\tpriority: 5,\r\n\t\t\t\tdelay: 1000,\r\n\t\t\t\tattempts: 5,\r\n\t\t\t\trepeat: undefined,\r\n\t\t\t\tbackoff: { type: 'exponential', delay: 2000 },\r\n\t\t\t\tlifo: undefined,\r\n\t\t\t\ttimeout: 60000,\r\n\t\t\t\tremoveOnComplete: 20,\r\n\t\t\t\tremoveOnFail: 10,\r\n\t\t\t\tjobId: 'custom-job-id',\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should use default values when options not provided', () => {\r\n\t\t\tconst options: JobOptions = {}\r\n\r\n\t\t\tconst bullOptions = (service as any).convertToBullOptions(options)\r\n\r\n\t\t\texpect(bullOptions).toEqual({\r\n\t\t\t\tpriority: undefined,\r\n\t\t\t\tdelay: undefined,\r\n\t\t\t\tattempts: 3,\r\n\t\t\t\trepeat: undefined,\r\n\t\t\t\tbackoff: { type: 'exponential', delay: 2000 },\r\n\t\t\t\tlifo: undefined,\r\n\t\t\t\ttimeout: 30000,\r\n\t\t\t\tremoveOnComplete: 10,\r\n\t\t\t\tremoveOnFail: 5,\r\n\t\t\t\tjobId: undefined,\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["BullQueueService","JobType","getQueueToken","Logger","Test","afterEach","beforeEach","describe","expect","it","vi","service","mockImageQueue","mockCacheQueue","mockQueueFactory","add","fn","process","getJob","getWaiting","getActive","getCompleted","getFailed","getDelayed","isPaused","pause","resume","clean","close","module","createTestingModule","providers","provide","useFactory","compile","get","spyOn","prototype","mockImplementation","clearAllMocks","resetAllMocks","jobData","imageUrl","options","priority","attempts","mockBullJob","id","name","IMAGE_PROCESSING","data","opts","progress","mockReturnValue","timestamp","Date","now","attemptsMade","failedReason","stacktrace","returnvalue","finishedOn","processedOn","mockResolvedValue","result","toHaveBeenCalledWith","objectContaining","backoff","type","delay","timeout","removeOnComplete","removeOnFail","toBe","imageUrls","error","Error","mockRejectedValue","rejects","toThrow","mockProcessor","success","any","Function","processorCallback","callback","Promise","resolve","toEqual","stats","getStats","waiting","active","completed","failed","delayed","paused","job","toBeDefined","toBeNull","remove","undefined","removeJob","toHaveBeenCalled","grace","status","onModuleDestroy","resolves","toBeUndefined","jobId","bullOptions","convertToBullOptions","repeat","lifo"],"mappings":"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"}