{"version":3,"sources":["../../../../../src/test/Queue/services/job-queue.manager.spec.ts"],"sourcesContent":["import type { JobOptions } from '@microservice/Queue/interfaces/job-queue.interface'\r\nimport type { MockedObject } from 'vitest'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { CacheOperationsProcessor } from '@microservice/Queue/processors/cache-operations.processor'\r\nimport { ImageProcessingProcessor } from '@microservice/Queue/processors/image-processing.processor'\r\nimport { BullQueueService } from '@microservice/Queue/services/bull-queue.service'\r\nimport { JobQueueManager } from '@microservice/Queue/services/job-queue.manager'\r\nimport { JobPriority, JobType } from '@microservice/Queue/types/job.types'\r\nimport { Logger } from '@nestjs/common'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('jobQueueManager', () => {\r\n\tlet manager: JobQueueManager\r\n\tlet mockQueueService: MockedObject<BullQueueService>\r\n\tlet mockImageProcessor: MockedObject<ImageProcessingProcessor>\r\n\tlet mockCacheProcessor: MockedObject<CacheOperationsProcessor>\r\n\tlet mockCorrelationService: MockedObject<CorrelationService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockQueueServiceFactory = {\r\n\t\t\tadd: vi.fn(),\r\n\t\t\tprocess: vi.fn(),\r\n\t\t\tgetJob: vi.fn(),\r\n\t\t\tremoveJob: vi.fn(),\r\n\t\t\tpause: vi.fn(),\r\n\t\t\tresume: vi.fn(),\r\n\t\t\tgetStats: vi.fn(),\r\n\t\t\tclean: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockImageProcessorFactory = {\r\n\t\t\tprocess: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockCacheProcessorFactory = {\r\n\t\t\tprocessCacheWarming: vi.fn(),\r\n\t\t\tprocessCacheCleanup: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockCorrelationServiceFactory = {\r\n\t\t\tgetCorrelationId: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tJobQueueManager,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: BullQueueService,\r\n\t\t\t\t\tuseValue: mockQueueServiceFactory,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ImageProcessingProcessor,\r\n\t\t\t\t\tuseValue: mockImageProcessorFactory,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: CacheOperationsProcessor,\r\n\t\t\t\t\tuseValue: mockCacheProcessorFactory,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: CorrelationService,\r\n\t\t\t\t\tuseValue: mockCorrelationServiceFactory,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tmanager = module.get<JobQueueManager>(JobQueueManager)\r\n\t\tmockQueueService = module.get(BullQueueService)\r\n\t\tmockImageProcessor = module.get(ImageProcessingProcessor)\r\n\t\tmockCacheProcessor = module.get(CacheOperationsProcessor)\r\n\t\tmockCorrelationService = module.get(CorrelationService)\r\n\r\n\t\t// Mock logger to avoid console output during tests\r\n\t\tvi.spyOn(Logger.prototype, 'debug').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'log').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'warn').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'error').mockImplementation(() => {})\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t\tvi.resetAllMocks()\r\n\t})\r\n\r\n\tdescribe('onModuleInit', () => {\r\n\t\tit('should setup job processors on initialization', async () => {\r\n\t\t\tawait manager.onModuleInit()\r\n\r\n\t\t\texpect(mockQueueService.process).toHaveBeenCalledTimes(3)\r\n\t\t\texpect(mockQueueService.process).toHaveBeenCalledWith(JobType.IMAGE_PROCESSING, expect.any(Function))\r\n\t\t\texpect(mockQueueService.process).toHaveBeenCalledWith(JobType.CACHE_WARMING, expect.any(Function))\r\n\t\t\texpect(mockQueueService.process).toHaveBeenCalledWith(JobType.CACHE_CLEANUP, expect.any(Function))\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('addImageProcessingJob', () => {\r\n\t\tit('should add image processing job with correlation ID', async () => {\r\n\t\t\tconst jobData = {\r\n\t\t\t\timageUrl: 'https://example.com/image.jpg',\r\n\t\t\t\twidth: 300,\r\n\t\t\t\theight: 200,\r\n\t\t\t\tcacheKey: 'test-key',\r\n\t\t\t\tpriority: JobPriority.NORMAL,\r\n\t\t\t}\r\n\r\n\t\t\tconst mockJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: { ...jobData, correlationId: 'corr-123' },\r\n\t\t\t}\r\n\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('corr-123')\r\n\t\t\tmockQueueService.add.mockResolvedValue(mockJob as any)\r\n\r\n\t\t\tconst result = await manager.addImageProcessingJob(jobData)\r\n\r\n\t\t\texpect(mockCorrelationService.getCorrelationId).toHaveBeenCalled()\r\n\t\t\texpect(mockQueueService.add).toHaveBeenCalledWith(\r\n\t\t\t\tJobType.IMAGE_PROCESSING,\r\n\t\t\t\t{ ...jobData, correlationId: 'corr-123' },\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\tpriority: JobPriority.NORMAL,\r\n\t\t\t\t\tattempts: 3,\r\n\t\t\t\t\tbackoff: { type: 'exponential', delay: 2000 },\r\n\t\t\t\t\tremoveOnComplete: 10,\r\n\t\t\t\t\tremoveOnFail: 5,\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t\texpect(result).toBe(mockJob)\r\n\t\t})\r\n\r\n\t\tit('should use custom options when provided', async () => {\r\n\t\t\tconst jobData = {\r\n\t\t\t\timageUrl: 'https://example.com/image.jpg',\r\n\t\t\t\tcacheKey: 'test-key',\r\n\t\t\t\tpriority: JobPriority.HIGH,\r\n\t\t\t}\r\n\r\n\t\t\tconst customOptions: Partial<JobOptions> = {\r\n\t\t\t\tattempts: 5,\r\n\t\t\t\ttimeout: 60000,\r\n\t\t\t}\r\n\r\n\t\t\tconst mockJob = {\r\n\t\t\t\tid: 'job-456',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: { ...jobData, correlationId: 'corr-456' },\r\n\t\t\t}\r\n\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('corr-456')\r\n\t\t\tmockQueueService.add.mockResolvedValue(mockJob as any)\r\n\r\n\t\t\tawait manager.addImageProcessingJob(jobData, customOptions)\r\n\r\n\t\t\texpect(mockQueueService.add).toHaveBeenCalledWith(\r\n\t\t\t\tJobType.IMAGE_PROCESSING,\r\n\t\t\t\t{ ...jobData, correlationId: 'corr-456' },\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\tpriority: JobPriority.HIGH,\r\n\t\t\t\t\tattempts: 5,\r\n\t\t\t\t\ttimeout: 60000,\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('addCacheWarmingJob', () => {\r\n\t\tit('should add cache warming job with correlation ID', async () => {\r\n\t\t\tconst jobData = {\r\n\t\t\t\timageUrls: ['https://example.com/image1.jpg', 'https://example.com/image2.jpg'],\r\n\t\t\t\tbatchSize: 5,\r\n\t\t\t\tpriority: JobPriority.LOW,\r\n\t\t\t}\r\n\r\n\t\t\tconst mockJob = {\r\n\t\t\t\tid: 'cache-job-123',\r\n\t\t\t\tname: JobType.CACHE_WARMING,\r\n\t\t\t\tdata: { ...jobData, correlationId: 'corr-123' },\r\n\t\t\t}\r\n\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('corr-123')\r\n\t\t\tmockQueueService.add.mockResolvedValue(mockJob as any)\r\n\r\n\t\t\tconst result = await manager.addCacheWarmingJob(jobData)\r\n\r\n\t\t\texpect(mockQueueService.add).toHaveBeenCalledWith(\r\n\t\t\t\tJobType.CACHE_WARMING,\r\n\t\t\t\t{ ...jobData, correlationId: 'corr-123' },\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\tpriority: JobPriority.LOW,\r\n\t\t\t\t\tattempts: 2,\r\n\t\t\t\t\tbackoff: { type: 'fixed', delay: 5000 },\r\n\t\t\t\t\tremoveOnComplete: 5,\r\n\t\t\t\t\tremoveOnFail: 3,\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t\texpect(result).toBe(mockJob)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('addCacheCleanupJob', () => {\r\n\t\tit('should add cache cleanup job with correlation ID', async () => {\r\n\t\t\tconst jobData = {\r\n\t\t\t\tmaxAge: 3600000,\r\n\t\t\t\tmaxSize: 1024 * 1024,\r\n\t\t\t\tpriority: JobPriority.LOW,\r\n\t\t\t}\r\n\r\n\t\t\tconst mockJob = {\r\n\t\t\t\tid: 'cleanup-job-123',\r\n\t\t\t\tname: JobType.CACHE_CLEANUP,\r\n\t\t\t\tdata: { ...jobData, correlationId: 'corr-123' },\r\n\t\t\t}\r\n\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('corr-123')\r\n\t\t\tmockQueueService.add.mockResolvedValue(mockJob as any)\r\n\r\n\t\t\tconst result = await manager.addCacheCleanupJob(jobData)\r\n\r\n\t\t\texpect(mockQueueService.add).toHaveBeenCalledWith(\r\n\t\t\t\tJobType.CACHE_CLEANUP,\r\n\t\t\t\t{ ...jobData, correlationId: 'corr-123' },\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\tpriority: JobPriority.LOW,\r\n\t\t\t\t\tattempts: 1,\r\n\t\t\t\t\tremoveOnComplete: 3,\r\n\t\t\t\t\tremoveOnFail: 1,\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t\texpect(result).toBe(mockJob)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getJobById', () => {\r\n\t\tit('should retrieve job by ID', async () => {\r\n\t\t\tconst mockJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: { imageUrl: 'https://example.com/image.jpg' },\r\n\t\t\t}\r\n\r\n\t\t\tmockQueueService.getJob.mockResolvedValue(mockJob as any)\r\n\r\n\t\t\tconst result = await manager.getJobById('job-123')\r\n\r\n\t\t\texpect(mockQueueService.getJob).toHaveBeenCalledWith('job-123')\r\n\t\t\texpect(result).toBe(mockJob)\r\n\t\t})\r\n\r\n\t\tit('should return null when job not found', async () => {\r\n\t\t\tmockQueueService.getJob.mockResolvedValue(null)\r\n\r\n\t\t\tconst result = await manager.getJobById('nonexistent-job')\r\n\r\n\t\t\texpect(result).toBeNull()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('removeJob', () => {\r\n\t\tit('should remove job by ID', async () => {\r\n\t\t\tmockQueueService.removeJob.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait manager.removeJob('job-123')\r\n\r\n\t\t\texpect(mockQueueService.removeJob).toHaveBeenCalledWith('job-123')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('pauseQueues', () => {\r\n\t\tit('should pause all queues', async () => {\r\n\t\t\tmockQueueService.pause.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait manager.pauseQueues()\r\n\r\n\t\t\texpect(mockQueueService.pause).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('resumeQueues', () => {\r\n\t\tit('should resume all queues', async () => {\r\n\t\t\tmockQueueService.resume.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait manager.resumeQueues()\r\n\r\n\t\t\texpect(mockQueueService.resume).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getQueueStats', () => {\r\n\t\tit('should return comprehensive queue statistics', async () => {\r\n\t\t\tconst mockQueueStats = {\r\n\t\t\t\twaiting: 5,\r\n\t\t\t\tactive: 2,\r\n\t\t\t\tcompleted: 100,\r\n\t\t\t\tfailed: 3,\r\n\t\t\t\tdelayed: 1,\r\n\t\t\t\tpaused: false,\r\n\t\t\t}\r\n\r\n\t\t\tmockQueueService.getStats.mockResolvedValue(mockQueueStats)\r\n\r\n\t\t\t// Simulate some metrics\r\n\t\t\t;(manager as any).metrics = {\r\n\t\t\t\ttotalJobs: 108,\r\n\t\t\t\tcompletedJobs: 100,\r\n\t\t\t\tfailedJobs: 3,\r\n\t\t\t\tprocessingTimes: [1000, 1500, 2000, 1200, 1800],\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await manager.getQueueStats()\r\n\r\n\t\t\texpect(result).toEqual({\r\n\t\t\t\ttotalJobs: 108,\r\n\t\t\t\tcompletedJobs: 100,\r\n\t\t\t\tfailedJobs: 3,\r\n\t\t\t\taverageProcessingTime: 1500, // (1000+1500+2000+1200+1800)/5\r\n\t\t\t\tqueueLength: 6, // waiting + delayed\r\n\t\t\t\tactiveWorkers: 2,\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should handle empty processing times', async () => {\r\n\t\t\tconst mockQueueStats = {\r\n\t\t\t\twaiting: 0,\r\n\t\t\t\tactive: 0,\r\n\t\t\t\tcompleted: 0,\r\n\t\t\t\tfailed: 0,\r\n\t\t\t\tdelayed: 0,\r\n\t\t\t\tpaused: false,\r\n\t\t\t}\r\n\r\n\t\t\tmockQueueService.getStats.mockResolvedValue(mockQueueStats)\r\n\r\n\t\t\t// Empty metrics\r\n\t\t\t;(manager as any).metrics = {\r\n\t\t\t\ttotalJobs: 0,\r\n\t\t\t\tcompletedJobs: 0,\r\n\t\t\t\tfailedJobs: 0,\r\n\t\t\t\tprocessingTimes: [],\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await manager.getQueueStats()\r\n\r\n\t\t\texpect(result.averageProcessingTime).toBe(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('cleanCompletedJobs', () => {\r\n\t\tit('should clean completed jobs with default age', async () => {\r\n\t\t\tmockQueueService.clean.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait manager.cleanCompletedJobs()\r\n\r\n\t\t\texpect(mockQueueService.clean).toHaveBeenCalledWith(24 * 60 * 60 * 1000, 'completed')\r\n\t\t})\r\n\r\n\t\tit('should clean completed jobs with custom age', async () => {\r\n\t\t\tmockQueueService.clean.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait manager.cleanCompletedJobs(12 * 60 * 60 * 1000) // 12 hours\r\n\r\n\t\t\texpect(mockQueueService.clean).toHaveBeenCalledWith(12 * 60 * 60 * 1000, 'completed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('cleanFailedJobs', () => {\r\n\t\tit('should clean failed jobs with default age', async () => {\r\n\t\t\tmockQueueService.clean.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait manager.cleanFailedJobs()\r\n\r\n\t\t\texpect(mockQueueService.clean).toHaveBeenCalledWith(7 * 24 * 60 * 60 * 1000, 'failed')\r\n\t\t})\r\n\r\n\t\tit('should clean failed jobs with custom age', async () => {\r\n\t\t\tmockQueueService.clean.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait manager.cleanFailedJobs(3 * 24 * 60 * 60 * 1000) // 3 days\r\n\r\n\t\t\texpect(mockQueueService.clean).toHaveBeenCalledWith(3 * 24 * 60 * 60 * 1000, 'failed')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('job processors', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\tawait manager.onModuleInit()\r\n\t\t})\r\n\r\n\t\tit('should process image processing jobs successfully', async () => {\r\n\t\t\tconst mockJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: { imageUrl: 'https://example.com/image.jpg' },\r\n\t\t\t}\r\n\r\n\t\t\tconst mockResult = { success: true, data: 'processed-image', processingTime: 1000 }\r\n\t\t\tmockImageProcessor.process.mockResolvedValue(mockResult)\r\n\r\n\t\t\t// Mock queue stats\r\n\t\t\tmockQueueService.getStats.mockResolvedValue({\r\n\t\t\t\twaiting: 0,\r\n\t\t\t\tactive: 0,\r\n\t\t\t\tcompleted: 1,\r\n\t\t\t\tfailed: 0,\r\n\t\t\t\tdelayed: 0,\r\n\t\t\t\tpaused: false,\r\n\t\t\t})\r\n\r\n\t\t\t// Get the processor function that was registered\r\n\t\t\tconst processorCall = mockQueueService.process.mock.calls.find(\r\n\t\t\t\tcall => call[0] === JobType.IMAGE_PROCESSING,\r\n\t\t\t)\r\n\t\t\tconst processor = processorCall![1]\r\n\r\n\t\t\tconst result = await processor(mockJob as any)\r\n\r\n\t\t\texpect(mockImageProcessor.process).toHaveBeenCalledWith(mockJob)\r\n\t\t\texpect(result).toBe(mockResult)\r\n\r\n\t\t\t// Check metrics were updated\r\n\t\t\tconst stats = await manager.getQueueStats()\r\n\t\t\texpect(stats.completedJobs).toBe(1)\r\n\t\t})\r\n\r\n\t\tit('should handle image processing job failures', async () => {\r\n\t\t\tconst mockJob = {\r\n\t\t\t\tid: 'job-123',\r\n\t\t\t\tname: JobType.IMAGE_PROCESSING,\r\n\t\t\t\tdata: { imageUrl: 'https://example.com/image.jpg' },\r\n\t\t\t}\r\n\r\n\t\t\tconst error = new Error('Processing failed')\r\n\t\t\tmockImageProcessor.process.mockRejectedValue(error)\r\n\r\n\t\t\t// Mock queue stats\r\n\t\t\tmockQueueService.getStats.mockResolvedValue({\r\n\t\t\t\twaiting: 0,\r\n\t\t\t\tactive: 0,\r\n\t\t\t\tcompleted: 0,\r\n\t\t\t\tfailed: 1,\r\n\t\t\t\tdelayed: 0,\r\n\t\t\t\tpaused: false,\r\n\t\t\t})\r\n\r\n\t\t\tconst processorCall = mockQueueService.process.mock.calls.find(\r\n\t\t\t\tcall => call[0] === JobType.IMAGE_PROCESSING,\r\n\t\t\t)\r\n\t\t\tconst processor = processorCall![1]\r\n\r\n\t\t\tawait expect(processor(mockJob as any)).rejects.toThrow('Processing failed')\r\n\r\n\t\t\t// Check metrics were updated\r\n\t\t\tconst stats = await manager.getQueueStats()\r\n\t\t\texpect(stats.failedJobs).toBe(1)\r\n\t\t})\r\n\r\n\t\tit('should process cache warming jobs successfully', async () => {\r\n\t\t\tconst mockJob = {\r\n\t\t\t\tid: 'cache-job-123',\r\n\t\t\t\tname: JobType.CACHE_WARMING,\r\n\t\t\t\tdata: { imageUrls: ['https://example.com/image.jpg'] },\r\n\t\t\t}\r\n\r\n\t\t\tconst mockResult = { success: true, data: { successful: 1, failed: 0 }, processingTime: 1000 }\r\n\t\t\tmockCacheProcessor.processCacheWarming.mockResolvedValue(mockResult)\r\n\r\n\t\t\tconst processorCall = mockQueueService.process.mock.calls.find(\r\n\t\t\t\tcall => call[0] === JobType.CACHE_WARMING,\r\n\t\t\t)\r\n\t\t\tconst processor = processorCall![1]\r\n\r\n\t\t\tconst result = await processor(mockJob as any)\r\n\r\n\t\t\texpect(mockCacheProcessor.processCacheWarming).toHaveBeenCalledWith(mockJob)\r\n\t\t\texpect(result).toBe(mockResult)\r\n\t\t})\r\n\r\n\t\tit('should process cache cleanup jobs successfully', async () => {\r\n\t\t\tconst mockJob = {\r\n\t\t\t\tid: 'cleanup-job-123',\r\n\t\t\t\tname: JobType.CACHE_CLEANUP,\r\n\t\t\t\tdata: { maxAge: 3600000, maxSize: 1024 * 1024 },\r\n\t\t\t}\r\n\r\n\t\t\tconst mockResult = { success: true, data: { cleaned: 5 }, processingTime: 1000 }\r\n\t\t\tmockCacheProcessor.processCacheCleanup.mockResolvedValue(mockResult)\r\n\r\n\t\t\tconst processorCall = mockQueueService.process.mock.calls.find(\r\n\t\t\t\tcall => call[0] === JobType.CACHE_CLEANUP,\r\n\t\t\t)\r\n\t\t\tconst processor = processorCall![1]\r\n\r\n\t\t\tconst result = await processor(mockJob as any)\r\n\r\n\t\t\texpect(mockCacheProcessor.processCacheCleanup).toHaveBeenCalledWith(mockJob)\r\n\t\t\texpect(result).toBe(mockResult)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('updateMetrics', () => {\r\n\t\tit('should update metrics correctly for successful jobs', () => {\r\n\t\t\tconst initialMetrics = (manager as any).metrics\r\n\t\t\tconst initialCompleted = initialMetrics.completedJobs\r\n\t\t\tconst initialProcessingTimes = [...initialMetrics.processingTimes]\r\n\r\n\t\t\t;(manager as any).updateMetrics(true, 1500)\r\n\r\n\t\t\texpect(initialMetrics.completedJobs).toBe(initialCompleted + 1)\r\n\t\t\texpect(initialMetrics.processingTimes).toEqual([...initialProcessingTimes, 1500])\r\n\t\t})\r\n\r\n\t\tit('should update metrics correctly for failed jobs', () => {\r\n\t\t\tconst initialMetrics = (manager as any).metrics\r\n\t\t\tconst initialFailed = initialMetrics.failedJobs\r\n\r\n\t\t\t;(manager as any).updateMetrics(false, 2000)\r\n\r\n\t\t\texpect(initialMetrics.failedJobs).toBe(initialFailed + 1)\r\n\t\t})\r\n\r\n\t\tit('should limit processing times to 1000 entries', () => {\r\n\t\t\tconst metrics = (manager as any).metrics\r\n\r\n\t\t\t// Fill with 1000 entries\r\n\t\t\tmetrics.processingTimes = Array.from({ length: 1000 }).fill(1000)\r\n\r\n\t\t\t;(manager as any).updateMetrics(true, 2000)\r\n\r\n\t\t\texpect(metrics.processingTimes).toHaveLength(1000)\r\n\t\t\texpect(metrics.processingTimes[999]).toBe(2000)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CorrelationService","CacheOperationsProcessor","ImageProcessingProcessor","BullQueueService","JobQueueManager","JobPriority","JobType","Logger","Test","afterEach","beforeEach","describe","expect","it","vi","manager","mockQueueService","mockImageProcessor","mockCacheProcessor","mockCorrelationService","mockQueueServiceFactory","add","fn","process","getJob","removeJob","pause","resume","getStats","clean","mockImageProcessorFactory","mockCacheProcessorFactory","processCacheWarming","processCacheCleanup","mockCorrelationServiceFactory","getCorrelationId","module","createTestingModule","providers","provide","useValue","compile","get","spyOn","prototype","mockImplementation","clearAllMocks","resetAllMocks","onModuleInit","toHaveBeenCalledTimes","toHaveBeenCalledWith","IMAGE_PROCESSING","any","Function","CACHE_WARMING","CACHE_CLEANUP","jobData","imageUrl","width","height","cacheKey","priority","NORMAL","mockJob","id","name","data","correlationId","mockReturnValue","mockResolvedValue","result","addImageProcessingJob","toHaveBeenCalled","objectContaining","attempts","backoff","type","delay","removeOnComplete","removeOnFail","toBe","HIGH","customOptions","timeout","imageUrls","batchSize","LOW","addCacheWarmingJob","maxAge","maxSize","addCacheCleanupJob","getJobById","toBeNull","undefined","pauseQueues","resumeQueues","mockQueueStats","waiting","active","completed","failed","delayed","paused","metrics","totalJobs","completedJobs","failedJobs","processingTimes","getQueueStats","toEqual","averageProcessingTime","queueLength","activeWorkers","cleanCompletedJobs","cleanFailedJobs","mockResult","success","processingTime","processorCall","mock","calls","find","call","processor","stats","error","Error","mockRejectedValue","rejects","toThrow","successful","cleaned","initialMetrics","initialCompleted","initialProcessingTimes","updateMetrics","initialFailed","Array","from","length","fill","toHaveLength"],"mappings":"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"}