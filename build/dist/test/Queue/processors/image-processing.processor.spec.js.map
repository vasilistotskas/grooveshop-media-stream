{"version":3,"sources":["../../../../../src/test/Queue/processors/image-processing.processor.spec.ts"],"sourcesContent":["import type { Job } from '@microservice/Queue/interfaces/job-queue.interface'\r\nimport type { ImageProcessingJobData } from '@microservice/Queue/types/job.types'\r\nimport type { MockedFunction, MockedObject } from 'vitest'\r\nimport { Buffer } from 'node:buffer'\r\nimport { MultiLayerCacheManager } from '@microservice/Cache/services/multi-layer-cache.manager'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { HttpClientService } from '@microservice/HTTP/services/http-client.service'\nimport { ImageProcessingProcessor } from '@microservice/Queue/processors/image-processing.processor'\r\nimport { JobPriority } from '@microservice/Queue/types/job.types'\r\nimport { Logger } from '@nestjs/common'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport sharp from 'sharp'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock sharp\r\nvi.mock('sharp')\r\nconst mockSharp = sharp as MockedFunction<typeof sharp>\r\n\r\ndescribe('imageProcessingProcessor', () => {\r\n\tlet processor: ImageProcessingProcessor\r\n\tlet mockCacheManager: MockedObject<MultiLayerCacheManager>\r\n\tlet mockHttpClient: MockedObject<HttpClientService>\r\n\r\n\tconst createMockJob = (data: Partial<ImageProcessingJobData>): Job<ImageProcessingJobData> => ({\r\n\t\tid: 'test-job',\r\n\t\tname: 'image-processing',\r\n\t\tdata: {\r\n\t\t\tcorrelationId: 'corr-123',\r\n\t\t\timageUrl: 'https://example.com/image.jpg',\r\n\t\t\tcacheKey: 'test-cache-key',\r\n\t\t\tpriority: JobPriority.NORMAL,\r\n\t\t\t...data,\r\n\t\t},\r\n\t\topts: {},\r\n\t\tprogress: 0,\r\n\t\tdelay: 0,\r\n\t\ttimestamp: Date.now(),\r\n\t\tattemptsMade: 0,\r\n\t})\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockCacheManagerFactory = {\r\n\t\t\tget: vi.fn(),\r\n\t\t\tset: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockCorrelationServiceFactory = {\r\n\t\t\tgetCorrelationId: vi.fn(),\r\n\t\t\tsetCorrelationId: vi.fn(),\r\n\t\t\trunWithContext: vi.fn((context, fn) => fn()),\r\n\t\t}\r\n\r\n\t\tconst mockHttpClientFactory = {\r\n\t\t\tget: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tImageProcessingProcessor,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MultiLayerCacheManager,\r\n\t\t\t\t\tuseValue: mockCacheManagerFactory,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: CorrelationService,\r\n\t\t\t\t\tuseValue: mockCorrelationServiceFactory,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: HttpClientService,\r\n\t\t\t\t\tuseValue: mockHttpClientFactory,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tprocessor = module.get<ImageProcessingProcessor>(ImageProcessingProcessor)\r\n\t\tmockCacheManager = module.get(MultiLayerCacheManager)\r\n\t\tmockHttpClient = module.get(HttpClientService)\r\n\r\n\t\t// Mock logger to avoid console output during tests\r\n\t\tvi.spyOn(Logger.prototype, 'debug').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'log').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'warn').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'error').mockImplementation(() => {})\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t\tvi.resetAllMocks()\r\n\t})\r\n\r\n\tdescribe('process', () => {\r\n\t\tit('should return cached result if available', async () => {\r\n\t\t\tconst job = createMockJob({\r\n\t\t\t\twidth: 300,\r\n\t\t\t\theight: 200,\r\n\t\t\t\tquality: 80,\r\n\t\t\t\tformat: 'webp',\r\n\t\t\t})\r\n\r\n\t\t\tconst cachedData = 'cached-image-data'\r\n\t\t\tmockCacheManager.get.mockResolvedValue(cachedData)\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(result.data).toBe(cachedData)\r\n\t\t\texpect(result.cacheHit).toBe(true)\r\n\t\t\texpect(result.processingTime).toBeGreaterThanOrEqual(0)\r\n\t\t\texpect(mockHttpClient.get).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should process image when not cached', async () => {\r\n\t\t\tconst job = createMockJob({\r\n\t\t\t\twidth: 300,\r\n\t\t\t\theight: 200,\r\n\t\t\t\tquality: 80,\r\n\t\t\t\tformat: 'webp',\r\n\t\t\t})\r\n\r\n\t\t\t// Mock cache miss\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\t\t\tmockCacheManager.set.mockResolvedValue(undefined)\r\n\r\n\t\t\t// Mock HTTP response\r\n\t\t\tconst originalImageData = Buffer.from('original-image-data')\r\n\t\t\tmockHttpClient.get.mockResolvedValue({\r\n\t\t\t\tdata: originalImageData,\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\t// Mock sharp processing\r\n\t\t\tconst processedImageData = Buffer.from('processed-image-data')\r\n\t\t\tconst mockSharpInstance = {\r\n\t\t\t\tresize: vi.fn().mockReturnThis(),\r\n\t\t\t\twebp: vi.fn().mockReturnThis(),\r\n\t\t\t\twithMetadata: vi.fn().mockReturnThis(),\r\n\t\t\t\ttoBuffer: vi.fn().mockResolvedValue(processedImageData),\r\n\t\t\t\tdestroy: vi.fn(),\r\n\t\t\t}\r\n\t\t\tmockSharp.mockReturnValue(mockSharpInstance as any)\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(result.data).toBe(processedImageData)\r\n\t\t\texpect(result.cacheHit).toBe(false)\r\n\t\t\texpect(result.processingTime).toBeGreaterThanOrEqual(0)\r\n\r\n\t\t\texpect(mockHttpClient.get).toHaveBeenCalledWith('https://example.com/image.jpg', {\r\n\t\t\t\tresponseType: 'arraybuffer',\r\n\t\t\t\ttimeout: 30000,\r\n\t\t\t})\r\n\t\t\texpect(mockSharp).toHaveBeenCalledWith(originalImageData, expect.objectContaining({\r\n\t\t\t\tfailOn: 'none',\r\n\t\t\t\tsequentialRead: true,\r\n\t\t\t}))\r\n\t\t\texpect(mockSharpInstance.resize).toHaveBeenCalledWith(expect.objectContaining({\r\n\t\t\t\twidth: 300,\r\n\t\t\t\theight: 200,\r\n\t\t\t\tfastShrinkOnLoad: true,\r\n\t\t\t\tkernel: 'lanczos3',\r\n\t\t\t}))\r\n\t\t\texpect(mockSharpInstance.webp).toHaveBeenCalledWith(expect.objectContaining({\r\n\t\t\t\tquality: 80,\r\n\t\t\t\teffort: 4,\r\n\t\t\t}))\r\n\t\t\texpect(mockCacheManager.set).toHaveBeenCalledWith(\r\n\t\t\t\t'image',\r\n\t\t\t\t'test-cache-key',\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\tdata: processedImageData,\r\n\t\t\t\t\tmetadata: expect.any(Object),\r\n\t\t\t\t}),\r\n\t\t\t\texpect.any(Number),\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should handle JPEG format processing', async () => {\r\n\t\t\tconst job = createMockJob({\r\n\t\t\t\twidth: 300,\r\n\t\t\t\theight: 200,\r\n\t\t\t\tquality: 90,\r\n\t\t\t\tformat: 'jpeg',\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\t\t\tmockCacheManager.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tconst originalImageData = Buffer.from('original-image-data')\r\n\t\t\tmockHttpClient.get.mockResolvedValue({\r\n\t\t\t\tdata: originalImageData,\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\tconst processedImageData = Buffer.from('processed-jpeg-data')\r\n\t\t\tconst mockSharpInstance = {\r\n\t\t\t\tresize: vi.fn().mockReturnThis(),\r\n\t\t\t\tjpeg: vi.fn().mockReturnThis(),\r\n\t\t\t\twithMetadata: vi.fn().mockReturnThis(),\r\n\t\t\t\ttoBuffer: vi.fn().mockResolvedValue(processedImageData),\r\n\t\t\t\tdestroy: vi.fn(),\r\n\t\t\t}\r\n\t\t\tmockSharp.mockReturnValue(mockSharpInstance as any)\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(mockSharpInstance.jpeg).toHaveBeenCalledWith(expect.objectContaining({\r\n\t\t\t\tquality: 90,\r\n\t\t\t\tprogressive: true,\r\n\t\t\t}))\r\n\t\t})\r\n\r\n\t\tit('should handle PNG format processing', async () => {\r\n\t\t\tconst job = createMockJob({\r\n\t\t\t\tformat: 'png',\r\n\t\t\t\tquality: 95,\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\t\t\tmockCacheManager.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tconst originalImageData = Buffer.from('original-image-data')\r\n\t\t\tmockHttpClient.get.mockResolvedValue({\r\n\t\t\t\tdata: originalImageData,\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\tconst processedImageData = Buffer.from('processed-png-data')\r\n\t\t\tconst mockSharpInstance = {\r\n\t\t\t\tpng: vi.fn().mockReturnThis(),\r\n\t\t\t\twithMetadata: vi.fn().mockReturnThis(),\r\n\t\t\t\ttoBuffer: vi.fn().mockResolvedValue(processedImageData),\r\n\t\t\t\tdestroy: vi.fn(),\r\n\t\t\t}\r\n\t\t\tmockSharp.mockReturnValue(mockSharpInstance as any)\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(mockSharpInstance.png).toHaveBeenCalledWith(expect.objectContaining({\r\n\t\t\t\tquality: 95,\r\n\t\t\t}))\r\n\t\t})\r\n\r\n\t\tit('should handle processing without dimensions', async () => {\r\n\t\t\tconst job = createMockJob({\r\n\t\t\t\tformat: 'webp',\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\t\t\tmockCacheManager.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tconst originalImageData = Buffer.from('original-image-data')\r\n\t\t\tmockHttpClient.get.mockResolvedValue({\r\n\t\t\t\tdata: originalImageData,\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\tconst processedImageData = Buffer.from('processed-image-data')\r\n\t\t\tconst mockSharpInstance = {\r\n\t\t\t\twebp: vi.fn().mockReturnThis(),\r\n\t\t\t\twithMetadata: vi.fn().mockReturnThis(),\r\n\t\t\t\ttoBuffer: vi.fn().mockResolvedValue(processedImageData),\r\n\t\t\t\tdestroy: vi.fn(),\r\n\t\t\t}\r\n\t\t\tmockSharp.mockReturnValue(mockSharpInstance as any)\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(mockSharpInstance.webp).toHaveBeenCalledWith(expect.objectContaining({\r\n\t\t\t\tquality: 80,\r\n\t\t\t\teffort: 4,\r\n\t\t\t}))\r\n\t\t\t// resize should not be called when no dimensions provided\r\n\t\t\t// (mock doesn't have resize method when dimensions aren't needed)\r\n\t\t})\r\n\r\n\t\tit('should handle unknown format by keeping original', async () => {\r\n\t\t\tconst job = createMockJob({})\r\n\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\t\t\tmockCacheManager.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tconst originalImageData = Buffer.from('original-image-data')\r\n\t\t\tmockHttpClient.get.mockResolvedValue({\r\n\t\t\t\tdata: originalImageData,\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\tconst processedImageData = Buffer.from('processed-image-data')\r\n\t\t\tconst mockSharpInstance = {\r\n\t\t\t\twebp: vi.fn().mockReturnThis(),\r\n\t\t\t\twithMetadata: vi.fn().mockReturnThis(),\r\n\t\t\t\ttoBuffer: vi.fn().mockResolvedValue(processedImageData),\r\n\t\t\t\tdestroy: vi.fn(),\r\n\t\t\t}\r\n\t\t\tmockSharp.mockReturnValue(mockSharpInstance as any)\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(mockSharpInstance.toBuffer).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should handle HTTP download errors', async () => {\r\n\t\t\tconst job = createMockJob({\r\n\t\t\t\timageUrl: 'https://example.com/nonexistent.jpg',\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\t\t\tmockHttpClient.get.mockRejectedValue(new Error('Network error'))\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(false)\r\n\t\t\texpect(result.error).toBe('Failed to download image: Network error')\r\n\t\t\texpect(result.cacheHit).toBe(false)\r\n\t\t\texpect(result.processingTime).toBeGreaterThanOrEqual(0)\r\n\t\t})\r\n\r\n\t\tit('should handle image processing errors', async () => {\r\n\t\t\tconst job = createMockJob({\r\n\t\t\t\twidth: 300,\r\n\t\t\t\theight: 200,\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\r\n\t\t\tconst originalImageData = Buffer.from('corrupt-image-data')\r\n\t\t\tmockHttpClient.get.mockResolvedValue({\r\n\t\t\t\tdata: originalImageData,\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\t// Mock sharp processing error\r\n\t\t\tconst mockSharpInstance = {\r\n\t\t\t\tresize: vi.fn().mockReturnThis(),\r\n\t\t\t\twebp: vi.fn().mockReturnThis(),\r\n\t\t\t\twithMetadata: vi.fn().mockReturnThis(),\r\n\t\t\t\ttoBuffer: vi.fn().mockRejectedValue(new Error('Invalid image format')),\r\n\t\t\t\tdestroy: vi.fn(),\r\n\t\t\t}\r\n\t\t\tmockSharp.mockReturnValue(mockSharpInstance as any)\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(false)\r\n\t\t\texpect(result.error).toBe('Image processing failed: Invalid image format')\r\n\t\t\texpect(result.cacheHit).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should handle cache errors gracefully', async () => {\r\n\t\t\tconst job = createMockJob({})\r\n\r\n\t\t\t// Mock cache get error\r\n\t\t\tmockCacheManager.get.mockRejectedValue(new Error('Cache connection error'))\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(false)\r\n\t\t\texpect(result.error).toBe('Cache connection error')\r\n\t\t\texpect(result.cacheHit).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should handle cache set errors but still return processed image', async () => {\r\n\t\t\tconst job = createMockJob({})\r\n\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\t\t\tmockCacheManager.set.mockRejectedValue(new Error('Cache write error'))\r\n\r\n\t\t\tconst originalImageData = Buffer.from('original-image-data')\r\n\t\t\tmockHttpClient.get.mockResolvedValue({\r\n\t\t\t\tdata: originalImageData,\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\tconst processedImageData = Buffer.from('processed-image-data')\r\n\t\t\tconst mockSharpInstance = {\r\n\t\t\t\twebp: vi.fn().mockReturnThis(),\r\n\t\t\t\twithMetadata: vi.fn().mockReturnThis(),\r\n\t\t\t\ttoBuffer: vi.fn().mockResolvedValue(processedImageData),\r\n\t\t\t\tdestroy: vi.fn(),\r\n\t\t\t}\r\n\t\t\tmockSharp.mockReturnValue(mockSharpInstance as any)\r\n\r\n\t\t\tconst result = await processor.process(job)\r\n\r\n\t\t\texpect(result.success).toBe(false)\r\n\t\t\texpect(result.error).toBe('Cache write error')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('updateProgress', () => {\r\n\t\tit('should log progress updates', async () => {\r\n\t\t\tconst job = createMockJob({})\r\n\r\n\t\t\tconst logSpy = vi.spyOn(Logger.prototype, 'debug')\r\n\r\n\t\t\tawait (processor as any).updateProgress(job, 50, 'Processing')\r\n\r\n\t\t\texpect(logSpy).toHaveBeenCalledWith('Job test-job progress: 50% - Processing')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["Buffer","MultiLayerCacheManager","CorrelationService","HttpClientService","ImageProcessingProcessor","JobPriority","Logger","Test","sharp","afterEach","beforeEach","describe","expect","it","vi","mock","mockSharp","processor","mockCacheManager","mockHttpClient","createMockJob","data","id","name","correlationId","imageUrl","cacheKey","priority","NORMAL","opts","progress","delay","timestamp","Date","now","attemptsMade","mockCacheManagerFactory","get","fn","set","mockCorrelationServiceFactory","getCorrelationId","setCorrelationId","runWithContext","context","mockHttpClientFactory","module","createTestingModule","providers","provide","useValue","compile","spyOn","prototype","mockImplementation","clearAllMocks","resetAllMocks","job","width","height","quality","format","cachedData","mockResolvedValue","result","process","success","toBe","cacheHit","processingTime","toBeGreaterThanOrEqual","not","toHaveBeenCalled","undefined","originalImageData","from","status","statusText","headers","config","processedImageData","mockSharpInstance","resize","mockReturnThis","webp","withMetadata","toBuffer","destroy","mockReturnValue","toHaveBeenCalledWith","responseType","timeout","objectContaining","failOn","sequentialRead","fastShrinkOnLoad","kernel","effort","metadata","any","Object","Number","jpeg","progressive","png","mockRejectedValue","Error","error","logSpy","updateProgress"],"mappings":"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"}