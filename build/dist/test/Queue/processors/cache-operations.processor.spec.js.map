{"version":3,"sources":["../../../../../src/test/Queue/processors/cache-operations.processor.spec.ts"],"sourcesContent":["import type { Job } from '@microservice/Queue/interfaces/job-queue.interface'\r\nimport type { CacheCleanupJobData, CacheWarmingJobData } from '@microservice/Queue/types/job.types'\r\nimport type { MockedObject } from 'vitest'\r\nimport { Buffer } from 'node:buffer'\r\nimport * as fs from 'node:fs/promises'\r\nimport * as path from 'node:path'\r\nimport { MultiLayerCacheManager } from '@microservice/Cache/services/multi-layer-cache.manager'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { HttpClientService } from '@microservice/HTTP/services/http-client.service'\nimport { CacheOperationsProcessor } from '@microservice/Queue/processors/cache-operations.processor'\r\nimport { JobPriority } from '@microservice/Queue/types/job.types'\r\nimport { Logger } from '@nestjs/common'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock fs module\r\nvi.mock('node:fs/promises')\r\nconst mockFs = fs as MockedObject<typeof fs>\r\n\r\ndescribe('cacheOperationsProcessor', () => {\r\n\tlet processor: CacheOperationsProcessor\r\n\tlet mockCacheManager: MockedObject<MultiLayerCacheManager>\r\n\tlet mockCorrelationService: MockedObject<CorrelationService>\r\n\tlet mockHttpClient: MockedObject<HttpClientService>\r\n\r\n\tconst createMockWarmingJob = (data: Partial<CacheWarmingJobData>): Job<CacheWarmingJobData> => ({\r\n\t\tid: 'test-job',\r\n\t\tname: 'cache-warming',\r\n\t\tdata: {\r\n\t\t\tcorrelationId: 'corr-123',\r\n\t\t\timageUrls: ['https://example.com/image.jpg'],\r\n\t\t\tpriority: JobPriority.LOW,\r\n\t\t\tbatchSize: 5,\r\n\t\t\t...data,\r\n\t\t},\r\n\t\topts: {},\r\n\t\tprogress: 0,\r\n\t\tdelay: 0,\r\n\t\ttimestamp: Date.now(),\r\n\t\tattemptsMade: 0,\r\n\t})\r\n\r\n\tconst createMockCleanupJob = (data: Partial<CacheCleanupJobData>): Job<CacheCleanupJobData> => ({\r\n\t\tid: 'cleanup-job',\r\n\t\tname: 'cache-cleanup',\r\n\t\tdata: {\r\n\t\t\tcorrelationId: 'corr-123',\r\n\t\t\tmaxAge: 3600000,\r\n\t\t\tmaxSize: 1024 * 1024,\r\n\t\t\tpriority: JobPriority.LOW,\r\n\t\t\t...data,\r\n\t\t},\r\n\t\topts: {},\r\n\t\tprogress: 0,\r\n\t\tdelay: 0,\r\n\t\ttimestamp: Date.now(),\r\n\t\tattemptsMade: 0,\r\n\t})\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockCacheManagerFactory = {\r\n\t\t\tget: vi.fn(),\r\n\t\t\tset: vi.fn(),\r\n\t\t\tgetStats: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockCorrelationServiceFactory = {\r\n\t\t\tgetCorrelationId: vi.fn(),\r\n\t\t\tsetCorrelationId: vi.fn(),\r\n\t\t\trunWithContext: vi.fn((context, fn) => fn()),\r\n\t\t}\r\n\r\n\t\tconst mockHttpClientFactory = {\r\n\t\t\tget: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tCacheOperationsProcessor,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MultiLayerCacheManager,\r\n\t\t\t\t\tuseValue: mockCacheManagerFactory,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: CorrelationService,\r\n\t\t\t\t\tuseValue: mockCorrelationServiceFactory,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: HttpClientService,\r\n\t\t\t\t\tuseValue: mockHttpClientFactory,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tprocessor = module.get<CacheOperationsProcessor>(CacheOperationsProcessor)\r\n\t\tmockCacheManager = module.get(MultiLayerCacheManager)\r\n\t\tmockCorrelationService = module.get(CorrelationService)\r\n\t\tmockHttpClient = module.get(HttpClientService)\r\n\r\n\t\t// Mock logger to avoid console output during tests\r\n\t\tvi.spyOn(Logger.prototype, 'debug').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'log').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'warn').mockImplementation(() => {})\r\n\t\tvi.spyOn(Logger.prototype, 'error').mockImplementation(() => {})\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t\tvi.resetAllMocks()\r\n\t})\r\n\r\n\tdescribe('processCacheWarming', () => {\r\n\t\tit('should successfully process cache warming job', async () => {\r\n\t\t\tconst job = createMockWarmingJob({\r\n\t\t\t\timageUrls: ['https://example.com/image1.jpg', 'https://example.com/image2.jpg'],\r\n\t\t\t\tbatchSize: 2,\r\n\t\t\t})\r\n\r\n\t\t\t// Mock cache manager responses\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null) // Not cached\r\n\t\t\tmockCacheManager.set.mockResolvedValue(undefined)\r\n\r\n\t\t\t// Mock HTTP client responses\r\n\t\t\tmockHttpClient.get.mockResolvedValue({\r\n\t\t\t\tdata: Buffer.from('fake-image-data'),\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\tconst result = await processor.processCacheWarming(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(result.data).toEqual({\r\n\t\t\t\tsuccessful: 2,\r\n\t\t\t\tfailed: 0,\r\n\t\t\t\ttotal: 2,\r\n\t\t\t})\r\n\t\t\texpect(result.processingTime).toBeGreaterThanOrEqual(0)\r\n\t\t\texpect(mockHttpClient.get).toHaveBeenCalledTimes(2)\r\n\t\t\texpect(mockCacheManager.set).toHaveBeenCalledTimes(2)\r\n\t\t})\r\n\r\n\t\tit('should handle already cached images', async () => {\r\n\t\t\tconst job = createMockWarmingJob({\r\n\t\t\t\timageUrls: ['https://example.com/cached-image.jpg'],\r\n\t\t\t\tbatchSize: 1,\r\n\t\t\t})\r\n\r\n\t\t\t// Mock image already cached\r\n\t\t\tmockCacheManager.get.mockResolvedValue('cached-data')\r\n\r\n\t\t\tconst result = await processor.processCacheWarming(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(result.data).toEqual({\r\n\t\t\t\tsuccessful: 1,\r\n\t\t\t\tfailed: 0,\r\n\t\t\t\ttotal: 1,\r\n\t\t\t})\r\n\t\t\texpect(mockHttpClient.get).not.toHaveBeenCalled()\r\n\t\t\texpect(mockCacheManager.set).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should handle HTTP errors during cache warming', async () => {\r\n\t\t\tconst job = createMockWarmingJob({\r\n\t\t\t\timageUrls: ['https://example.com/error-image.jpg'],\r\n\t\t\t\tbatchSize: 1,\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\t\t\tmockHttpClient.get.mockRejectedValue(new Error('Network error'))\r\n\r\n\t\t\tconst result = await processor.processCacheWarming(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(result.data).toEqual({\r\n\t\t\t\tsuccessful: 0,\r\n\t\t\t\tfailed: 1,\r\n\t\t\t\ttotal: 1,\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should handle job processing errors', async () => {\r\n\t\t\tconst job = createMockWarmingJob({\r\n\t\t\t\timageUrls: ['https://example.com/image.jpg'],\r\n\t\t\t\tbatchSize: 1,\r\n\t\t\t})\r\n\r\n\t\t\t// Mock a critical error that breaks the entire job\r\n\t\t\tmockCacheManager.get.mockRejectedValue(new Error('Cache manager error'))\r\n\r\n\t\t\tconst result = await processor.processCacheWarming(job)\r\n\r\n\t\t\texpect(result.success).toBe(true) // The job succeeds but individual images fail\r\n\t\t\texpect(result.data).toEqual({\r\n\t\t\t\tsuccessful: 0,\r\n\t\t\t\tfailed: 1,\r\n\t\t\t\ttotal: 1,\r\n\t\t\t})\r\n\t\t\texpect(result.processingTime).toBeGreaterThanOrEqual(0)\r\n\t\t})\r\n\r\n\t\tit('should process images in batches', async () => {\r\n\t\t\tconst job = createMockWarmingJob({\r\n\t\t\t\timageUrls: [\r\n\t\t\t\t\t'https://example.com/image1.jpg',\r\n\t\t\t\t\t'https://example.com/image2.jpg',\r\n\t\t\t\t\t'https://example.com/image3.jpg',\r\n\t\t\t\t],\r\n\t\t\t\tbatchSize: 2,\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheManager.get.mockResolvedValue(null)\r\n\t\t\tmockCacheManager.set.mockResolvedValue(undefined)\r\n\t\t\tmockHttpClient.get.mockResolvedValue({\r\n\t\t\t\tdata: Buffer.from('fake-image-data'),\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {},\r\n\t\t\t} as any)\r\n\r\n\t\t\tconst result = await processor.processCacheWarming(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(result.data).toEqual({\r\n\t\t\t\tsuccessful: 3,\r\n\t\t\t\tfailed: 0,\r\n\t\t\t\ttotal: 3,\r\n\t\t\t})\r\n\t\t\texpect(mockHttpClient.get).toHaveBeenCalledTimes(3)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('processCacheCleanup', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\t// Reset fs mocks\r\n\t\t\tmockFs.readdir.mockReset()\r\n\t\t\tmockFs.stat.mockReset()\r\n\t\t\tmockFs.unlink.mockReset()\r\n\t\t})\r\n\r\n\t\tit('should successfully process cache cleanup job', async () => {\r\n\t\t\tconst job = createMockCleanupJob({\r\n\t\t\t\tmaxAge: 3600000, // 1 hour\r\n\t\t\t\tmaxSize: 1024 * 1024, // 1MB\r\n\t\t\t})\r\n\r\n\t\t\t// Mock cache manager\r\n\t\t\tmockCacheManager.getStats.mockResolvedValue({\r\n\t\t\t\tlayers: {},\r\n\t\t\t\ttotalHits: 100,\r\n\t\t\t\ttotalMisses: 50,\r\n\t\t\t\toverallHitRate: 0.67,\r\n\t\t\t\tlayerHitDistribution: {},\r\n\t\t\t})\r\n\r\n\t\t\t// Mock file system\r\n\t\t\tmockFs.readdir.mockResolvedValue(['old-file.jpg', 'large-file.jpg'] as any)\r\n\t\t\tmockFs.stat.mockImplementation((filePath) => {\r\n\t\t\t\tconst fileName = path.basename(filePath as string)\r\n\t\t\t\tif (fileName === 'old-file.jpg') {\r\n\t\t\t\t\treturn Promise.resolve({\r\n\t\t\t\t\t\tmtime: new Date(Date.now() - 7200000), // 2 hours old\r\n\t\t\t\t\t\tsize: 500000,\r\n\t\t\t\t\t} as any)\r\n\t\t\t\t}\r\n\t\t\t\treturn Promise.resolve({\r\n\t\t\t\t\tmtime: new Date(Date.now() - 1800000), // 30 minutes old\r\n\t\t\t\t\tsize: 2 * 1024 * 1024, // 2MB\r\n\t\t\t\t} as any)\r\n\t\t\t})\r\n\t\t\tmockFs.unlink.mockResolvedValue(undefined)\r\n\r\n\t\t\tconst result = await processor.processCacheCleanup(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(result.data.cleaned).toBe(2)\r\n\t\t\texpect(result.data.errors).toHaveLength(0)\r\n\t\t\texpect(mockFs.unlink).toHaveBeenCalledTimes(2)\r\n\t\t})\r\n\r\n\t\tit('should handle missing cache directory', async () => {\r\n\t\t\tconst job = createMockCleanupJob({\r\n\t\t\t\tmaxAge: 3600000,\r\n\t\t\t\tmaxSize: 1024 * 1024,\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheManager.getStats.mockResolvedValue({\r\n\t\t\t\tlayers: {},\r\n\t\t\t\ttotalHits: 100,\r\n\t\t\t\ttotalMisses: 50,\r\n\t\t\t\toverallHitRate: 0.67,\r\n\t\t\t\tlayerHitDistribution: {},\r\n\t\t\t})\r\n\r\n\t\t\t// Mock directory not found\r\n\t\t\tconst error = new Error('Directory not found') as any\r\n\t\t\terror.code = 'ENOENT'\r\n\t\t\tmockFs.readdir.mockRejectedValue(error)\r\n\r\n\t\t\tconst result = await processor.processCacheCleanup(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(result.data.cleaned).toBe(0)\r\n\t\t})\r\n\r\n\t\tit('should handle file processing errors', async () => {\r\n\t\t\tconst job = createMockCleanupJob({\r\n\t\t\t\tmaxAge: 3600000,\r\n\t\t\t\tmaxSize: 1024 * 1024,\r\n\t\t\t})\r\n\r\n\t\t\tmockCacheManager.getStats.mockResolvedValue({\r\n\t\t\t\tlayers: {},\r\n\t\t\t\ttotalHits: 100,\r\n\t\t\t\ttotalMisses: 50,\r\n\t\t\t\toverallHitRate: 0.67,\r\n\t\t\t\tlayerHitDistribution: {},\r\n\t\t\t})\r\n\r\n\t\t\tmockFs.readdir.mockResolvedValue(['error-file.jpg'] as any)\r\n\t\t\tmockFs.stat.mockRejectedValue(new Error('File access error'))\r\n\r\n\t\t\tconst result = await processor.processCacheCleanup(job)\r\n\r\n\t\t\texpect(result.success).toBe(true)\r\n\t\t\texpect(result.data.cleaned).toBe(0)\r\n\t\t})\r\n\r\n\t\tit('should handle memory cache cleanup errors', async () => {\r\n\t\t\tconst job = createMockCleanupJob({\r\n\t\t\t\tmaxAge: 3600000,\r\n\t\t\t\tmaxSize: 1024 * 1024,\r\n\t\t\t})\r\n\r\n\t\t\t// Mock memory cache error\r\n\t\t\tmockCacheManager.getStats.mockRejectedValue(new Error('Memory cache error'))\r\n\r\n\t\t\t// Mock successful file cleanup\r\n\t\t\tmockFs.readdir.mockResolvedValue([])\r\n\r\n\t\t\tconst result = await processor.processCacheCleanup(job)\r\n\r\n\t\t\texpect(result.success).toBe(false)\r\n\t\t\texpect(result.data.errors).toContain('memory cache: Memory cache cleanup failed: Memory cache error')\r\n\t\t})\r\n\r\n\t\tit('should handle job processing errors', async () => {\r\n\t\t\tconst job = createMockCleanupJob({\r\n\t\t\t\tmaxAge: 3600000,\r\n\t\t\t\tmaxSize: 1024 * 1024,\r\n\t\t\t})\r\n\r\n\t\t\t// Mock a critical error that breaks the entire job by throwing synchronously\r\n\t\t\tconst processor = new CacheOperationsProcessor(\r\n\t\t\t\tmockCorrelationService,\r\n\t\t\t\tmockCacheManager,\r\n\t\t\t\tmockHttpClient,\r\n\t\t\t)\r\n\r\n\t\t\t// Override the private method to throw an error\r\n\t\t\tvi.spyOn(processor as any, 'cleanupMemoryCache').mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Critical cache error')\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await processor.processCacheCleanup(job)\r\n\r\n\t\t\texpect(result.success).toBe(false)\r\n\t\t\texpect(result.error).toBe('Critical cache error')\r\n\t\t\texpect(result.processingTime).toBeGreaterThanOrEqual(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('generateCacheKey', () => {\r\n\t\tit('should generate consistent cache keys', () => {\r\n\t\t\tconst processor = new CacheOperationsProcessor(\r\n\t\t\t\tmockCorrelationService,\r\n\t\t\t\tmockCacheManager,\r\n\t\t\t\tmockHttpClient,\r\n\t\t\t)\r\n\r\n\t\t\tconst url = 'https://example.com/image.jpg'\r\n\t\t\tconst key1 = (processor as any).generateCacheKey(url)\r\n\t\t\tconst key2 = (processor as any).generateCacheKey(url)\r\n\r\n\t\t\texpect(key1).toBe(key2)\r\n\t\t\texpect(key1).toMatch(/^image:/)\r\n\t\t})\r\n\r\n\t\tit('should generate different keys for different URLs', () => {\r\n\t\t\tconst processor = new CacheOperationsProcessor(\r\n\t\t\t\tmockCorrelationService,\r\n\t\t\t\tmockCacheManager,\r\n\t\t\t\tmockHttpClient,\r\n\t\t\t)\r\n\r\n\t\t\tconst url1 = 'https://example.com/image1.jpg'\r\n\t\t\tconst url2 = 'https://example.com/image2.jpg'\r\n\t\t\tconst key1 = (processor as any).generateCacheKey(url1)\r\n\t\t\tconst key2 = (processor as any).generateCacheKey(url2)\r\n\r\n\t\t\texpect(key1).not.toBe(key2)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["Buffer","fs","path","MultiLayerCacheManager","CorrelationService","HttpClientService","CacheOperationsProcessor","JobPriority","Logger","Test","afterEach","beforeEach","describe","expect","it","vi","mock","mockFs","processor","mockCacheManager","mockCorrelationService","mockHttpClient","createMockWarmingJob","data","id","name","correlationId","imageUrls","priority","LOW","batchSize","opts","progress","delay","timestamp","Date","now","attemptsMade","createMockCleanupJob","maxAge","maxSize","mockCacheManagerFactory","get","fn","set","getStats","mockCorrelationServiceFactory","getCorrelationId","setCorrelationId","runWithContext","context","mockHttpClientFactory","module","createTestingModule","providers","provide","useValue","compile","spyOn","prototype","mockImplementation","clearAllMocks","resetAllMocks","job","mockResolvedValue","undefined","from","status","statusText","headers","config","result","processCacheWarming","success","toBe","toEqual","successful","failed","total","processingTime","toBeGreaterThanOrEqual","toHaveBeenCalledTimes","not","toHaveBeenCalled","mockRejectedValue","Error","readdir","mockReset","stat","unlink","layers","totalHits","totalMisses","overallHitRate","layerHitDistribution","filePath","fileName","basename","Promise","resolve","mtime","size","processCacheCleanup","cleaned","errors","toHaveLength","error","code","toContain","url","key1","generateCacheKey","key2","toMatch","url1","url2"],"mappings":"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"}