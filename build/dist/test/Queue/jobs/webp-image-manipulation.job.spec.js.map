{"version":3,"sources":["../../../../../src/test/Queue/jobs/webp-image-manipulation.job.spec.ts"],"sourcesContent":["import { Buffer } from 'node:buffer'\r\nimport { BackgroundOptions, FitOptions, PositionOptions, ResizeOptions, SupportedResizeFormats } from '@microservice/API/dto/cache-image-request.dto'\r\nimport ManipulationJobResult from '@microservice/Queue/dto/manipulation-job-result.dto'\r\nimport WebpImageManipulationJob from '@microservice/Queue/jobs/webp-image-manipulation.job'\r\nimport sharp from 'sharp'\r\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\nvi.mock('sharp', () => ({\r\n\tdefault: vi.fn(),\r\n}))\r\n\r\ndescribe('webpImageManipulationJob', () => {\r\n\tlet job: WebpImageManipulationJob\r\n\tconst mockManipulation = {\r\n\t\twebp: vi.fn().mockReturnThis(),\r\n\t\tjpeg: vi.fn().mockReturnThis(),\r\n\t\tpng: vi.fn().mockReturnThis(),\r\n\t\tgif: vi.fn().mockReturnThis(),\r\n\t\ttiff: vi.fn().mockReturnThis(),\r\n\t\tresize: vi.fn().mockReturnThis(),\r\n\t\ttrim: vi.fn().mockReturnThis(),\r\n\t\ttoBuffer: vi.fn().mockResolvedValue(Buffer.from('test')),\r\n\t\ttoFile: vi.fn().mockResolvedValue({ size: 1000, format: 'webp' }),\r\n\t}\r\n\r\n\tbeforeEach(() => {\r\n\t\t;(sharp as any).mockReturnValue(mockManipulation)\r\n\t\tjob = new WebpImageManipulationJob()\r\n\t})\r\n\r\n\tdescribe('handle', () => {\r\n\t\tit('should handle webp format with quality', async () => {\r\n\t\t\tconst filePathFrom = 'test.webp'\r\n\t\t\tconst filePathTo = 'test.output.webp'\r\n\t\t\tconst options = new ResizeOptions({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: BackgroundOptions.transparent,\r\n\t\t\t\ttrimThreshold: 5,\r\n\t\t\t\tformat: SupportedResizeFormats.webp,\r\n\t\t\t\tquality: 80,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await job.handle(filePathFrom, filePathTo, options)\r\n\r\n\t\t\texpect(sharp).toHaveBeenCalledWith(filePathFrom)\r\n\t\t\texpect(mockManipulation.resize).toHaveBeenCalledWith({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.trim).toHaveBeenCalledWith({\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t\tthreshold: 5,\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.webp).toHaveBeenCalledWith({ quality: 80 })\r\n\t\t\texpect(mockManipulation.toFile).toHaveBeenCalledWith(filePathTo)\r\n\t\t\texpect(result).toBeInstanceOf(ManipulationJobResult)\r\n\t\t\texpect(result.size).toBe('1000')\r\n\t\t})\r\n\r\n\t\tit('should handle jpeg format with quality', async () => {\r\n\t\t\tconst filePathFrom = 'test.jpeg'\r\n\t\t\tconst filePathTo = 'test.output.jpeg'\r\n\t\t\tconst options = new ResizeOptions({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: BackgroundOptions.transparent,\r\n\t\t\t\ttrimThreshold: 5,\r\n\t\t\t\tformat: SupportedResizeFormats.jpeg,\r\n\t\t\t\tquality: 80,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await job.handle(filePathFrom, filePathTo, options)\r\n\r\n\t\t\texpect(sharp).toHaveBeenCalledWith(filePathFrom)\r\n\t\t\texpect(mockManipulation.resize).toHaveBeenCalledWith({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.trim).toHaveBeenCalledWith({\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t\tthreshold: 5,\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.jpeg).toHaveBeenCalledWith({ quality: 80 })\r\n\t\t\texpect(mockManipulation.toFile).toHaveBeenCalledWith(filePathTo)\r\n\t\t\texpect(result).toBeInstanceOf(ManipulationJobResult)\r\n\t\t\texpect(result.size).toBe('1000')\r\n\t\t})\r\n\r\n\t\tit('should handle png format with quality', async () => {\r\n\t\t\tconst filePathFrom = 'test.png'\r\n\t\t\tconst filePathTo = 'test.output.png'\r\n\t\t\tconst options = new ResizeOptions({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: BackgroundOptions.transparent,\r\n\t\t\t\ttrimThreshold: 5,\r\n\t\t\t\tformat: SupportedResizeFormats.png,\r\n\t\t\t\tquality: 80,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await job.handle(filePathFrom, filePathTo, options)\r\n\r\n\t\t\texpect(sharp).toHaveBeenCalledWith(filePathFrom)\r\n\t\t\texpect(mockManipulation.resize).toHaveBeenCalledWith({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.trim).toHaveBeenCalledWith({\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t\tthreshold: 5,\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.png).toHaveBeenCalledWith({ quality: 80 })\r\n\t\t\texpect(mockManipulation.toFile).toHaveBeenCalledWith(filePathTo)\r\n\t\t\texpect(result).toBeInstanceOf(ManipulationJobResult)\r\n\t\t\texpect(result.size).toBe('1000')\r\n\t\t})\r\n\r\n\t\tit('should handle gif format', async () => {\r\n\t\t\tconst filePathFrom = 'test.gif'\r\n\t\t\tconst filePathTo = 'test.output.gif'\r\n\t\t\tconst options = new ResizeOptions({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: BackgroundOptions.transparent,\r\n\t\t\t\ttrimThreshold: 5,\r\n\t\t\t\tformat: SupportedResizeFormats.gif,\r\n\t\t\t\tquality: 80,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await job.handle(filePathFrom, filePathTo, options)\r\n\r\n\t\t\texpect(sharp).toHaveBeenCalledWith(filePathFrom)\r\n\t\t\texpect(mockManipulation.resize).toHaveBeenCalledWith({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.trim).toHaveBeenCalledWith({\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t\tthreshold: 5,\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.gif).toHaveBeenCalled()\r\n\t\t\texpect(mockManipulation.toFile).toHaveBeenCalledWith(filePathTo)\r\n\t\t\texpect(result).toBeInstanceOf(ManipulationJobResult)\r\n\t\t\texpect(result.size).toBe('1000')\r\n\t\t})\r\n\r\n\t\tit('should handle tiff format', async () => {\r\n\t\t\tconst filePathFrom = 'test.tiff'\r\n\t\t\tconst filePathTo = 'test.output.tiff'\r\n\t\t\tconst options = new ResizeOptions({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: BackgroundOptions.transparent,\r\n\t\t\t\ttrimThreshold: 5,\r\n\t\t\t\tformat: SupportedResizeFormats.tiff,\r\n\t\t\t\tquality: 80,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await job.handle(filePathFrom, filePathTo, options)\r\n\r\n\t\t\texpect(sharp).toHaveBeenCalledWith(filePathFrom)\r\n\t\t\texpect(mockManipulation.resize).toHaveBeenCalledWith({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.trim).toHaveBeenCalledWith({\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t\tthreshold: 5,\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.tiff).toHaveBeenCalled()\r\n\t\t\texpect(mockManipulation.toFile).toHaveBeenCalledWith(filePathTo)\r\n\t\t\texpect(result).toBeInstanceOf(ManipulationJobResult)\r\n\t\t\texpect(result.size).toBe('1000')\r\n\t\t})\r\n\r\n\t\tit('should handle resize with width and height', async () => {\r\n\t\t\tconst filePathFrom = 'test.webp'\r\n\t\t\tconst filePathTo = 'test.output.webp'\r\n\t\t\tconst options = new ResizeOptions({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: BackgroundOptions.transparent,\r\n\t\t\t\ttrimThreshold: 5,\r\n\t\t\t\tformat: SupportedResizeFormats.webp,\r\n\t\t\t\tquality: 80,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await job.handle(filePathFrom, filePathTo, options)\r\n\r\n\t\t\texpect(sharp).toHaveBeenCalledWith(filePathFrom)\r\n\t\t\texpect(mockManipulation.resize).toHaveBeenCalledWith({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.trim).toHaveBeenCalledWith({\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t\tthreshold: 5,\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.webp).toHaveBeenCalledWith({ quality: 80 })\r\n\t\t\texpect(mockManipulation.toFile).toHaveBeenCalledWith(filePathTo)\r\n\t\t\texpect(result).toBeInstanceOf(ManipulationJobResult)\r\n\t\t\texpect(result.size).toBe('1000')\r\n\t\t})\r\n\r\n\t\tit('should handle resize with trim threshold', async () => {\r\n\t\t\tconst filePathFrom = 'test.webp'\r\n\t\t\tconst filePathTo = 'test.output.webp'\r\n\t\t\tconst options = new ResizeOptions({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: BackgroundOptions.transparent,\r\n\t\t\t\ttrimThreshold: 10,\r\n\t\t\t\tformat: SupportedResizeFormats.webp,\r\n\t\t\t\tquality: 80,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await job.handle(filePathFrom, filePathTo, options)\r\n\r\n\t\t\texpect(sharp).toHaveBeenCalledWith(filePathFrom)\r\n\t\t\texpect(mockManipulation.resize).toHaveBeenCalledWith({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.trim).toHaveBeenCalledWith({\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t\tthreshold: 10,\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.webp).toHaveBeenCalledWith({ quality: 80 })\r\n\t\t\texpect(mockManipulation.toFile).toHaveBeenCalledWith(filePathTo)\r\n\t\t\texpect(result).toBeInstanceOf(ManipulationJobResult)\r\n\t\t\texpect(result.size).toBe('1000')\r\n\t\t})\r\n\r\n\t\tit('should handle default format when not specified', async () => {\r\n\t\t\tconst filePathFrom = 'test.webp'\r\n\t\t\tconst filePathTo = 'test.output.webp'\r\n\t\t\tconst options = new ResizeOptions({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: BackgroundOptions.transparent,\r\n\t\t\t\ttrimThreshold: 5,\r\n\t\t\t\tquality: 80,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await job.handle(filePathFrom, filePathTo, options)\r\n\r\n\t\t\texpect(sharp).toHaveBeenCalledWith(filePathFrom)\r\n\t\t\texpect(mockManipulation.resize).toHaveBeenCalledWith({\r\n\t\t\t\twidth: 800,\r\n\t\t\t\theight: 600,\r\n\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.trim).toHaveBeenCalledWith({\r\n\t\t\t\tbackground: { r: 0, g: 0, b: 0, alpha: 0 },\r\n\t\t\t\tthreshold: 5,\r\n\t\t\t})\r\n\t\t\texpect(mockManipulation.webp).toHaveBeenCalledWith({ quality: 80 })\r\n\t\t\texpect(mockManipulation.toFile).toHaveBeenCalledWith(filePathTo)\r\n\t\t\texpect(result).toBeInstanceOf(ManipulationJobResult)\r\n\t\t\texpect(result.size).toBe('1000')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["Buffer","BackgroundOptions","FitOptions","PositionOptions","ResizeOptions","SupportedResizeFormats","ManipulationJobResult","WebpImageManipulationJob","sharp","beforeEach","describe","expect","it","vi","mock","default","fn","job","mockManipulation","webp","mockReturnThis","jpeg","png","gif","tiff","resize","trim","toBuffer","mockResolvedValue","from","toFile","size","format","mockReturnValue","filePathFrom","filePathTo","options","width","height","fit","contain","position","entropy","background","transparent","trimThreshold","quality","result","handle","toHaveBeenCalledWith","r","g","b","alpha","threshold","toBeInstanceOf","toBe","toHaveBeenCalled"],"mappings":"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"}