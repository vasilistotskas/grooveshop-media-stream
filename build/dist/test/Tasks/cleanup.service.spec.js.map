{"version":3,"sources":["../../../../src/test/Tasks/cleanup.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport * as fs from 'node:fs/promises'\r\nimport * as path from 'node:path'\r\nimport * as process from 'node:process'\r\nimport { CleanupService } from '@microservice/Tasks/cleanup.service'\r\nimport { Logger } from '@nestjs/common'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\nvi.mock('node:fs/promises', () => ({\r\n\treaddir: vi.fn(),\r\n\tunlink: vi.fn(),\r\n}))\r\n\r\nvi.mock('node:path', () => ({\r\n\tjoin: vi.fn(),\r\n}))\r\n\r\nvi.mock('node:process', () => ({\r\n\tcwd: vi.fn(),\r\n}))\r\n\r\ndescribe('cleanupService', () => {\r\n\tlet service: CleanupService\r\n\tlet mockLogger: MockedObject<Logger>\r\n\tconst mockStoragePath = '/mock/cwd/storage'\r\n\tconst mockFiles = [\r\n\t\t'file1.rst',\r\n\t\t'file2.rsc',\r\n\t\t'file3.rsm',\r\n\t\t'file4.webp',\r\n\t\t'file5.rst',\r\n\t\t'file6.rsc',\r\n\t\t'file7.rsm',\r\n\t\t'file8.webp',\r\n\t\t'file9.rst',\r\n\t\t'file10.rsc',\r\n\t\t'file11.rsm',\r\n\t\t'file12.webp',\r\n\t]\r\n\r\n\tbeforeEach(async () => {\r\n\t\tmockLogger = {\r\n\t\t\tdebug: vi.fn(),\r\n\t\t\terror: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tvi.mocked(process.cwd).mockReturnValue('/mock/cwd')\r\n\t\tvi.mocked(path.join).mockReturnValue(mockStoragePath)\r\n\t\tvi.mocked(fs.readdir).mockResolvedValue(mockFiles as any)\r\n\t\tvi.mocked(fs.unlink).mockResolvedValue(undefined)\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tCleanupService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: Logger,\r\n\t\t\t\t\tuseValue: mockLogger,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<CleanupService>(CleanupService)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('handleCleanup', () => {\r\n\t\tit('should delete files with specified extensions', async () => {\r\n\t\t\tawait service.handleCleanup()\r\n\r\n\t\t\texpect(process.cwd).toHaveBeenCalled()\r\n\t\t\texpect(path.join).toHaveBeenCalledWith('/mock/cwd', 'storage')\r\n\t\t\texpect(fs.readdir).toHaveBeenCalledWith(mockStoragePath)\r\n\t\t\texpect(fs.unlink).toHaveBeenCalledTimes(12)\r\n\t\t\tmockFiles.forEach((file) => {\r\n\t\t\t\texpect(fs.unlink).toHaveBeenCalledWith(path.join(mockStoragePath, file))\r\n\t\t\t})\r\n\t\t\texpect(mockLogger.debug).toHaveBeenCalledWith('12 files deleted.')\r\n\t\t})\r\n\r\n\t\tit('should handle empty directory', async () => {\r\n\t\t\tvi.mocked(fs.readdir).mockResolvedValueOnce([])\r\n\r\n\t\t\tawait service.handleCleanup()\r\n\r\n\t\t\texpect(process.cwd).toHaveBeenCalled()\r\n\t\t\texpect(path.join).toHaveBeenCalledWith('/mock/cwd', 'storage')\r\n\t\t\texpect(fs.readdir).toHaveBeenCalledWith(mockStoragePath)\r\n\t\t\texpect(fs.unlink).not.toHaveBeenCalled()\r\n\t\t\texpect(mockLogger.debug).toHaveBeenCalledWith('0 files deleted.')\r\n\t\t})\r\n\r\n\t\tit('should handle errors during cleanup', async () => {\r\n\t\t\tconst error = new Error('Failed to read directory')\r\n\t\t\tvi.mocked(fs.readdir).mockRejectedValueOnce(error)\r\n\r\n\t\t\tawait service.handleCleanup()\r\n\r\n\t\t\texpect(process.cwd).toHaveBeenCalled()\r\n\t\t\texpect(path.join).toHaveBeenCalledWith('/mock/cwd', 'storage')\r\n\t\t\texpect(fs.readdir).toHaveBeenCalledWith(mockStoragePath)\r\n\t\t\texpect(fs.unlink).not.toHaveBeenCalled()\r\n\t\t\texpect(mockLogger.error).toHaveBeenCalledWith('Error during cleanup: Error: Failed to read directory')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["fs","path","process","CleanupService","Logger","Test","afterEach","beforeEach","describe","expect","it","vi","mock","readdir","fn","unlink","join","cwd","service","mockLogger","mockStoragePath","mockFiles","debug","error","mocked","mockReturnValue","mockResolvedValue","undefined","module","createTestingModule","providers","provide","useValue","compile","get","clearAllMocks","handleCleanup","toHaveBeenCalled","toHaveBeenCalledWith","toHaveBeenCalledTimes","forEach","file","mockResolvedValueOnce","not","Error","mockRejectedValueOnce"],"mappings":"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"}