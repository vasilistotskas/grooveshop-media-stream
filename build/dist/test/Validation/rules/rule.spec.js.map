{"version":3,"sources":["../../../../../src/test/Validation/rules/rule.spec.ts"],"sourcesContent":["import CacheImageRequest, { ResizeOptions } from '@microservice/API/dto/cache-image-request.dto'\r\nimport RequestedResizeTargetTooLargeException from '@microservice/API/exceptions/requested-resize-target-too-large.exception'\r\nimport ValidateCacheImageRequestResizeTargetRule from '@microservice/Validation/rules/validate-cache-image-request-resize-target.rule'\r\nimport ValidateCacheImageRequestRule from '@microservice/Validation/rules/validate-cache-image-request.rule'\r\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('validateCacheImageRequestResizeTargetRule', () => {\r\n\tlet rule: ValidateCacheImageRequestResizeTargetRule\r\n\r\n\tbeforeEach(() => {\r\n\t\trule = new ValidateCacheImageRequestResizeTargetRule()\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(rule).toBeDefined()\r\n\t})\r\n\r\n\tit('should allow valid resize options within allowed pixel count', async () => {\r\n\t\tconst mockRequest: CacheImageRequest = new CacheImageRequest({\r\n\t\t\tresizeOptions: new ResizeOptions({\r\n\t\t\t\twidth: 1920,\r\n\t\t\t\theight: 1080,\r\n\t\t\t}),\r\n\t\t})\r\n\r\n\t\tawait rule.setup(mockRequest)\r\n\t\tawait expect(rule.apply()).resolves.not.toThrow()\r\n\t})\r\n\r\n\tit('should throw an exception when the requested pixel count exceeds the allowed limit', async () => {\r\n\t\tconst mockRequest: CacheImageRequest = new CacheImageRequest({\r\n\t\t\tresizeOptions: new ResizeOptions({\r\n\t\t\t\twidth: 8000,\r\n\t\t\t\theight: 5000,\r\n\t\t\t}),\r\n\t\t})\r\n\r\n\t\tawait rule.setup(mockRequest)\r\n\t\tawait expect(rule.apply()).rejects.toThrow(RequestedResizeTargetTooLargeException)\r\n\t})\r\n})\r\n\r\ndescribe('validateCacheImageRequestRule', () => {\r\n\tlet rule: ValidateCacheImageRequestRule\r\n\tlet validateCacheImageRequestResizeTargetRule: ValidateCacheImageRequestResizeTargetRule\r\n\r\n\tbeforeEach(() => {\r\n\t\tvalidateCacheImageRequestResizeTargetRule = new ValidateCacheImageRequestResizeTargetRule()\r\n\t\trule = new ValidateCacheImageRequestRule(validateCacheImageRequestResizeTargetRule)\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(rule).toBeDefined()\r\n\t})\r\n\r\n\tit('should setup the request and call the resize target rule setup', async () => {\r\n\t\tconst mockRequest: CacheImageRequest = new CacheImageRequest({\r\n\t\t\tresizeOptions: new ResizeOptions({\r\n\t\t\t\twidth: 1920,\r\n\t\t\t\theight: 1080,\r\n\t\t\t}),\r\n\t\t})\r\n\r\n\t\tconst setupSpy = vi.spyOn(validateCacheImageRequestResizeTargetRule, 'setup')\r\n\r\n\t\tawait rule.setup(mockRequest)\r\n\r\n\t\texpect(setupSpy).toHaveBeenCalledWith(mockRequest)\r\n\t})\r\n\r\n\tit('should apply the resize target rule without errors', async () => {\r\n\t\tconst mockRequest: CacheImageRequest = new CacheImageRequest({\r\n\t\t\tresizeOptions: new ResizeOptions({\r\n\t\t\t\twidth: 1920,\r\n\t\t\t\theight: 1080,\r\n\t\t\t}),\r\n\t\t})\r\n\r\n\t\tconst applySpy = vi.spyOn(validateCacheImageRequestResizeTargetRule, 'apply').mockResolvedValue(undefined)\r\n\r\n\t\tawait rule.setup(mockRequest)\r\n\t\tawait expect(rule.apply()).resolves.not.toThrow()\r\n\t\texpect(applySpy).toHaveBeenCalled()\r\n\t})\r\n\r\n\tit('should throw an error if the resize target rule throws', async () => {\r\n\t\tconst mockRequest: CacheImageRequest = new CacheImageRequest({\r\n\t\t\tresizeOptions: new ResizeOptions({\r\n\t\t\t\twidth: 8000,\r\n\t\t\t\theight: 5000,\r\n\t\t\t}),\r\n\t\t})\r\n\r\n\t\tvi.spyOn(validateCacheImageRequestResizeTargetRule, 'apply').mockRejectedValue(new Error('Resize error'))\r\n\r\n\t\tawait rule.setup(mockRequest)\r\n\t\tawait expect(rule.apply()).rejects.toThrow('Resize error')\r\n\t})\r\n})\r\n"],"names":["CacheImageRequest","ResizeOptions","RequestedResizeTargetTooLargeException","ValidateCacheImageRequestResizeTargetRule","ValidateCacheImageRequestRule","beforeEach","describe","expect","it","vi","rule","toBeDefined","mockRequest","resizeOptions","width","height","setup","apply","resolves","not","toThrow","rejects","validateCacheImageRequestResizeTargetRule","setupSpy","spyOn","toHaveBeenCalledWith","applySpy","mockResolvedValue","undefined","toHaveBeenCalled","mockRejectedValue","Error"],"mappings":"AAAA,OAAOA,qBAAqBC,aAAa,QAAQ,0DAA+C;AAChG,OAAOC,4CAA4C,qFAA0E;AAC7H,OAAOC,+CAA+C,2FAAgF;AACtI,OAAOC,mCAAmC,6EAAkE;AAC5G,SAASC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,QAAQ,SAAQ;AAE7DH,SAAS,6CAA6C;IACrD,IAAII;IAEJL,WAAW;QACVK,OAAO,IAAIP;IACZ;IAEAK,GAAG,qBAAqB;QACvBD,OAAOG,MAAMC,WAAW;IACzB;IAEAH,GAAG,gEAAgE;QAClE,MAAMI,cAAiC,IAAIZ,kBAAkB;YAC5Da,eAAe,IAAIZ,cAAc;gBAChCa,OAAO;gBACPC,QAAQ;YACT;QACD;QAEA,MAAML,KAAKM,KAAK,CAACJ;QACjB,MAAML,OAAOG,KAAKO,KAAK,IAAIC,QAAQ,CAACC,GAAG,CAACC,OAAO;IAChD;IAEAZ,GAAG,sFAAsF;QACxF,MAAMI,cAAiC,IAAIZ,kBAAkB;YAC5Da,eAAe,IAAIZ,cAAc;gBAChCa,OAAO;gBACPC,QAAQ;YACT;QACD;QAEA,MAAML,KAAKM,KAAK,CAACJ;QACjB,MAAML,OAAOG,KAAKO,KAAK,IAAII,OAAO,CAACD,OAAO,CAAClB;IAC5C;AACD;AAEAI,SAAS,iCAAiC;IACzC,IAAII;IACJ,IAAIY;IAEJjB,WAAW;QACViB,4CAA4C,IAAInB;QAChDO,OAAO,IAAIN,8BAA8BkB;IAC1C;IAEAd,GAAG,qBAAqB;QACvBD,OAAOG,MAAMC,WAAW;IACzB;IAEAH,GAAG,kEAAkE;QACpE,MAAMI,cAAiC,IAAIZ,kBAAkB;YAC5Da,eAAe,IAAIZ,cAAc;gBAChCa,OAAO;gBACPC,QAAQ;YACT;QACD;QAEA,MAAMQ,WAAWd,GAAGe,KAAK,CAACF,2CAA2C;QAErE,MAAMZ,KAAKM,KAAK,CAACJ;QAEjBL,OAAOgB,UAAUE,oBAAoB,CAACb;IACvC;IAEAJ,GAAG,sDAAsD;QACxD,MAAMI,cAAiC,IAAIZ,kBAAkB;YAC5Da,eAAe,IAAIZ,cAAc;gBAChCa,OAAO;gBACPC,QAAQ;YACT;QACD;QAEA,MAAMW,WAAWjB,GAAGe,KAAK,CAACF,2CAA2C,SAASK,iBAAiB,CAACC;QAEhG,MAAMlB,KAAKM,KAAK,CAACJ;QACjB,MAAML,OAAOG,KAAKO,KAAK,IAAIC,QAAQ,CAACC,GAAG,CAACC,OAAO;QAC/Cb,OAAOmB,UAAUG,gBAAgB;IAClC;IAEArB,GAAG,0DAA0D;QAC5D,MAAMI,cAAiC,IAAIZ,kBAAkB;YAC5Da,eAAe,IAAIZ,cAAc;gBAChCa,OAAO;gBACPC,QAAQ;YACT;QACD;QAEAN,GAAGe,KAAK,CAACF,2CAA2C,SAASQ,iBAAiB,CAAC,IAAIC,MAAM;QAEzF,MAAMrB,KAAKM,KAAK,CAACJ;QACjB,MAAML,OAAOG,KAAKO,KAAK,IAAII,OAAO,CAACD,OAAO,CAAC;IAC5C;AACD"}