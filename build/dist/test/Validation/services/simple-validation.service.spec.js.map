{"version":3,"sources":["../../../../../src/test/Validation/services/simple-validation.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport CacheImageRequest, { ResizeOptions, SupportedResizeFormats } from '@microservice/API/dto/cache-image-request.dto'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { InputSanitizationService } from '@microservice/Validation/services/input-sanitization.service'\r\nimport { SecurityCheckerService } from '@microservice/Validation/services/security-checker.service'\r\nimport { SimpleValidationService } from '@microservice/Validation/services/simple-validation.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\ndescribe('simpleValidationService', () => {\r\n\tlet service: SimpleValidationService\r\n\tlet sanitizationService: MockedObject<InputSanitizationService>\r\n\tlet securityChecker: MockedObject<SecurityCheckerService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tgetOptional: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockCorrelationService = {\r\n\t\t\tgetCorrelationId: vi.fn().mockReturnValue('test-correlation-id'),\r\n\t\t\tgetClientIp: vi.fn().mockReturnValue('127.0.0.1'),\r\n\t\t\tgetUserAgent: vi.fn().mockReturnValue('test-agent'),\r\n\t\t}\r\n\r\n\t\tconst mockSanitizationService = {\r\n\t\t\tsanitize: vi.fn(),\r\n\t\t\tvalidateUrl: vi.fn(),\r\n\t\t\tvalidateImageDimensions: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockSecurityChecker = {\r\n\t\t\tcheckForMaliciousContent: vi.fn(),\r\n\t\t\tlogSecurityEvent: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tSimpleValidationService,\r\n\t\t\t\t{ provide: ConfigService, useValue: mockConfigService },\r\n\t\t\t\t{ provide: CorrelationService, useValue: mockCorrelationService },\r\n\t\t\t\t{ provide: InputSanitizationService, useValue: mockSanitizationService },\r\n\t\t\t\t{ provide: SecurityCheckerService, useValue: mockSecurityChecker },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<SimpleValidationService>(SimpleValidationService)\r\n\t\tsanitizationService = module.get(InputSanitizationService)\r\n\t\tsecurityChecker = module.get(SecurityCheckerService)\r\n\r\n\t\t// Setup default mocks\r\n\t\tsanitizationService.sanitize.mockImplementation(async input => input)\r\n\t\tsanitizationService.validateUrl.mockReturnValue(true)\r\n\t\tsanitizationService.validateImageDimensions.mockReturnValue(true)\r\n\t\tsecurityChecker.checkForMaliciousContent.mockResolvedValue(false)\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(service).toBeDefined()\r\n\t})\r\n\r\n\tdescribe('validateCacheImageRequest', () => {\r\n\t\tlet validRequest: CacheImageRequest\r\n\r\n\t\tbeforeEach(() => {\r\n\t\t\tvalidRequest = new CacheImageRequest({\r\n\t\t\t\tresourceTarget: 'https://example.com/image.jpg',\r\n\t\t\t\tttl: 3600,\r\n\t\t\t\tresizeOptions: new ResizeOptions({\r\n\t\t\t\t\twidth: 800,\r\n\t\t\t\t\theight: 600,\r\n\t\t\t\t\tformat: SupportedResizeFormats.webp,\r\n\t\t\t\t\tquality: 80,\r\n\t\t\t\t}),\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should validate a valid request', async () => {\r\n\t\t\tconst result = await service.validateCacheImageRequest(validRequest)\r\n\r\n\t\t\texpect(result.isValid).toBe(true)\r\n\t\t\texpect(result.errors).toHaveLength(0)\r\n\t\t\texpect(result.sanitizedInput).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should reject malicious requests', async () => {\r\n\t\t\tsecurityChecker.checkForMaliciousContent.mockResolvedValue(true)\r\n\r\n\t\t\tconst result = await service.validateCacheImageRequest(validRequest)\r\n\r\n\t\t\texpect(result.isValid).toBe(false)\r\n\t\t\texpect(result.errors).toContain('Request contains potentially malicious content')\r\n\t\t\texpect(securityChecker.logSecurityEvent).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should reject invalid URLs', async () => {\r\n\t\t\tsanitizationService.validateUrl.mockReturnValue(false)\r\n\r\n\t\t\tconst result = await service.validateCacheImageRequest(validRequest)\r\n\r\n\t\t\texpect(result.isValid).toBe(false)\r\n\t\t\texpect(result.errors).toContain('Invalid or disallowed URL')\r\n\t\t})\r\n\r\n\t\tit('should reject invalid image dimensions', async () => {\r\n\t\t\tsanitizationService.validateImageDimensions.mockReturnValue(false)\r\n\r\n\t\t\tconst result = await service.validateCacheImageRequest(validRequest)\r\n\r\n\t\t\texpect(result.isValid).toBe(false)\r\n\t\t\texpect(result.errors).toContain('Image dimensions exceed allowed limits')\r\n\t\t})\r\n\r\n\t\tit('should handle validation errors gracefully', async () => {\r\n\t\t\tsecurityChecker.checkForMaliciousContent.mockRejectedValue(new Error('Service error'))\r\n\r\n\t\t\tconst result = await service.validateCacheImageRequest(validRequest)\r\n\r\n\t\t\texpect(result.isValid).toBe(false)\r\n\t\t\texpect(result.errors).toContain('Validation service error')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('validateInput', () => {\r\n\t\tit('should validate safe input', async () => {\r\n\t\t\tconst input = { test: 'safe content' }\r\n\r\n\t\t\tconst result = await service.validateInput(input)\r\n\r\n\t\t\texpect(result.isValid).toBe(true)\r\n\t\t\texpect(result.errors).toHaveLength(0)\r\n\t\t\texpect(result.sanitizedInput).toEqual(input)\r\n\t\t})\r\n\r\n\t\tit('should reject malicious input', async () => {\r\n\t\t\tsecurityChecker.checkForMaliciousContent.mockResolvedValue(true)\r\n\r\n\t\t\tconst result = await service.validateInput({ malicious: 'content' })\r\n\r\n\t\t\texpect(result.isValid).toBe(false)\r\n\t\t\texpect(result.errors).toContain('Input contains potentially malicious content')\r\n\t\t})\r\n\r\n\t\tit('should handle input validation errors gracefully', async () => {\r\n\t\t\tsecurityChecker.checkForMaliciousContent.mockRejectedValue(new Error('Service error'))\r\n\r\n\t\t\tconst result = await service.validateInput({ test: 'input' })\r\n\r\n\t\t\texpect(result.isValid).toBe(false)\r\n\t\t\texpect(result.errors).toContain('Input validation service error')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CacheImageRequest","ResizeOptions","SupportedResizeFormats","ConfigService","CorrelationService","InputSanitizationService","SecurityCheckerService","SimpleValidationService","Test","beforeEach","describe","expect","it","vi","service","sanitizationService","securityChecker","mockConfigService","getOptional","fn","mockCorrelationService","getCorrelationId","mockReturnValue","getClientIp","getUserAgent","mockSanitizationService","sanitize","validateUrl","validateImageDimensions","mockSecurityChecker","checkForMaliciousContent","logSecurityEvent","module","createTestingModule","providers","provide","useValue","compile","get","mockImplementation","input","mockResolvedValue","toBeDefined","validRequest","resourceTarget","ttl","resizeOptions","width","height","format","webp","quality","result","validateCacheImageRequest","isValid","toBe","errors","toHaveLength","sanitizedInput","toContain","toHaveBeenCalled","mockRejectedValue","Error","test","validateInput","toEqual","malicious"],"mappings":"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"}