{"version":3,"sources":["../../../../../src/test/HTTP/services/http-client.service.spec.ts"],"sourcesContent":["import type { AxiosResponse } from 'axios'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { HttpClientService } from '@microservice/HTTP/services/http-client.service'\r\nimport { HttpService, HttpModule as NestHttpModule } from '@nestjs/axios'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { AxiosError } from 'axios'\r\nimport { Observable, of, throwError } from 'rxjs'\r\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('httpClientService', () => {\r\n\tlet service: HttpClientService\r\n\tlet httpService: HttpService\r\n\r\n\tconst mockConfigService = {\r\n\t\tgetOptional: vi.fn(),\r\n\t}\r\n\r\n\tbeforeEach(async () => {\r\n\t\tvi.clearAllMocks()\r\n\r\n\t\t// Setup default config values\r\n\t\tmockConfigService.getOptional.mockImplementation((_key: string, defaultValue: any) => {\r\n\t\t\treturn defaultValue\r\n\t\t})\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\timports: [NestHttpModule],\r\n\t\t\tproviders: [\r\n\t\t\t\tHttpClientService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<HttpClientService>(HttpClientService)\r\n\t\thttpService = module.get<HttpService>(HttpService)\r\n\t})\r\n\r\n\tdescribe('initialization', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(service).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should load configuration from ConfigService', () => {\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.retry.retries', 3)\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.retry.retryDelay', 1000)\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.retry.maxRetryDelay', 10000)\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.connectionPool.timeout', 30000)\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.circuitBreaker.failureThreshold', 50)\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.circuitBreaker.resetTimeout', 30000)\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.circuitBreaker.monitoringPeriod', 60000)\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.circuitBreaker.minimumRequests', 10)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('hTTP Methods', () => {\r\n\t\tit('should execute GET requests', async () => {\r\n\t\t\tconst mockResponse: AxiosResponse = {\r\n\t\t\t\tdata: { test: 'data' },\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: { url: 'https://example.com', method: 'get' } as any,\r\n\t\t\t}\r\n\r\n\t\t\tvi.spyOn(httpService, 'get').mockReturnValueOnce(of(mockResponse))\r\n\r\n\t\t\tconst result = await service.get('https://example.com')\r\n\t\t\texpect(result).toEqual(mockResponse)\r\n\t\t\texpect(httpService.get).toHaveBeenCalledWith(expect.stringContaining('example.com'), expect.any(Object))\r\n\t\t})\r\n\r\n\t\tit('should execute POST requests', async () => {\r\n\t\t\tconst mockResponse: AxiosResponse = {\r\n\t\t\t\tdata: { test: 'data' },\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: { url: 'https://example.com', method: 'post' } as any,\r\n\t\t\t}\r\n\r\n\t\t\tconst postData = { foo: 'bar' }\r\n\t\t\tvi.spyOn(httpService, 'post').mockReturnValueOnce(of(mockResponse))\r\n\r\n\t\t\tconst result = await service.post('https://example.com', postData)\r\n\t\t\texpect(result).toEqual(mockResponse)\r\n\t\t\texpect(httpService.post).toHaveBeenCalledWith('https://example.com', postData, expect.any(Object))\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error Handling', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tvi.useFakeTimers()\r\n\t\t})\r\n\r\n\t\tafterEach(() => {\r\n\t\t\tvi.useRealTimers()\r\n\t\t})\r\n\r\n\t\tit('should handle network errors', async () => {\r\n\t\t\tconst mockError = new Error('Network Error') as AxiosError\r\n\t\t\tmockError.code = 'ECONNRESET'\r\n\t\t\tmockError.message = 'Connection reset'\r\n\r\n\t\t\tvi.spyOn(httpService, 'get').mockReturnValueOnce(throwError(() => mockError))\r\n\r\n\t\t\tconst promise = service.get('https://example.com')\r\n\r\n\t\t\tvi.runAllTimers()\r\n\r\n\t\t\tawait expect(promise).rejects.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should handle HTTP errors', async () => {\r\n\t\t\tconst mockError = new Error('HTTP Error') as AxiosError\r\n\t\t\tmockError.response = { status: 500, data: 'Server Error' } as any\r\n\r\n\t\t\tvi.spyOn(httpService, 'get').mockReturnValueOnce(throwError(() => mockError))\r\n\r\n\t\t\tconst promise = service.get('https://example.com')\r\n\r\n\t\t\tvi.runAllTimers()\r\n\r\n\t\t\tawait expect(promise).rejects.toThrow()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('circuit Breaker', () => {\r\n\t\tit('should track successful requests', async () => {\r\n\t\t\tconst mockResponse: AxiosResponse = {\r\n\t\t\t\tdata: { test: 'data' },\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: { url: 'https://example.com', method: 'get' } as any,\r\n\t\t\t}\r\n\r\n\t\t\tvi.spyOn(httpService, 'get').mockReturnValue(of(mockResponse))\r\n\r\n\t\t\t// Execute several successful requests\r\n\t\t\tawait service.get('https://example.com')\r\n\t\t\tawait service.get('https://example.com')\r\n\t\t\tawait service.get('https://example.com')\r\n\r\n\t\t\tconst stats = service.getStats()\r\n\t\t\texpect(stats.successfulRequests).toBe(3)\r\n\t\t\texpect(stats.failedRequests).toBe(0)\r\n\t\t\texpect(stats.circuitBreakerState).toBe('closed')\r\n\t\t})\r\n\r\n\t\tit('should track failed requests', async () => {\r\n\t\t\tconst mockError = new Error('HTTP Error') as AxiosError\r\n\t\t\tmockError.response = { status: 500, data: 'Server Error' } as any\r\n\r\n\t\t\tvi.spyOn(httpService, 'get').mockReturnValue(throwError(() => mockError))\r\n\r\n\t\t\t// Execute several failed requests\r\n\t\t\ttry {\r\n\t\t\t\tawait service.get('https://example.com')\r\n\t\t\t}\r\n\t\t\tcatch {\r\n\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tawait service.get('https://example.com')\r\n\t\t\t}\r\n\t\t\tcatch {\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst stats = service.getStats()\r\n\t\t\texpect(stats.successfulRequests).toBe(0)\r\n\t\t\texpect(stats.failedRequests).toBe(2)\r\n\t\t}, 15000)\r\n\r\n\t\tit('should reset statistics', async () => {\r\n\t\t\tconst mockResponse: AxiosResponse = {\r\n\t\t\t\tdata: { test: 'data' },\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: { url: 'https://example.com', method: 'get' } as any,\r\n\t\t\t}\r\n\r\n\t\t\tvi.spyOn(httpService, 'get').mockReturnValue(of(mockResponse))\r\n\r\n\t\t\t// Execute a successful request\r\n\t\t\tawait service.get('https://example.com')\r\n\r\n\t\t\t// Reset stats\r\n\t\t\tservice.resetStats()\r\n\r\n\t\t\tconst stats = service.getStats()\r\n\t\t\texpect(stats.totalRequests).toBe(0)\r\n\t\t\texpect(stats.successfulRequests).toBe(0)\r\n\t\t\texpect(stats.failedRequests).toBe(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('concurrency Control', () => {\r\n\t\tit('should track active requests', async () => {\r\n\t\t\tconst mockResponse: AxiosResponse = {\r\n\t\t\t\tdata: { test: 'data' },\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: { url: 'https://example.com', method: 'get' } as any,\r\n\t\t\t}\r\n\r\n\t\t\t// Create a delayed response\r\n\t\t\tvi.spyOn(httpService, 'get').mockImplementation(() => {\r\n\t\t\t\treturn new Observable((subscriber) => {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tsubscriber.next(mockResponse)\r\n\t\t\t\t\t\tsubscriber.complete()\r\n\t\t\t\t\t}, 100)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\t// Start a request but don't await it\r\n\t\t\tconst promise = service.get('https://example.com')\r\n\r\n\t\t\t// Check active requests\r\n\t\t\tconst stats = service.getStats()\r\n\t\t\texpect(stats.activeRequests).toBeGreaterThan(0)\r\n\r\n\t\t\t// Wait for request to complete\r\n\t\t\tawait promise\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigService","HttpClientService","HttpService","HttpModule","NestHttpModule","Test","Observable","of","throwError","afterEach","beforeEach","describe","expect","it","vi","service","httpService","mockConfigService","getOptional","fn","clearAllMocks","mockImplementation","_key","defaultValue","module","createTestingModule","imports","providers","provide","useValue","compile","get","toBeDefined","toHaveBeenCalledWith","mockResponse","data","test","status","statusText","headers","config","url","method","spyOn","mockReturnValueOnce","result","toEqual","stringContaining","any","Object","postData","foo","post","useFakeTimers","useRealTimers","mockError","Error","code","message","promise","runAllTimers","rejects","toThrow","response","mockReturnValue","stats","getStats","successfulRequests","toBe","failedRequests","circuitBreakerState","resetStats","totalRequests","subscriber","setTimeout","next","complete","activeRequests","toBeGreaterThan"],"mappings":"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"}