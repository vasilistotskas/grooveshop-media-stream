{"version":3,"sources":["../../../../../src/test/HTTP/indicators/http-health.indicator.spec.ts"],"sourcesContent":["import type { AxiosResponse } from 'axios'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { HttpHealthIndicator } from '@microservice/HTTP/indicators/http-health.indicator'\r\nimport { HttpClientService } from '@microservice/HTTP/services/http-client.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('httpHealthIndicator', () => {\r\n\tlet indicator: HttpHealthIndicator\r\n\r\n\tconst mockHttpClientService = {\r\n\t\tgetStats: vi.fn(),\r\n\t\tisCircuitOpen: vi.fn(),\r\n\t\tget: vi.fn(),\r\n\t}\r\n\r\n\tconst mockConfigService = {\r\n\t\tgetOptional: vi.fn(),\r\n\t}\r\n\r\n\tbeforeEach(async () => {\r\n\t\tvi.clearAllMocks()\r\n\r\n\t\t// Set default mock behavior\r\n\t\tmockConfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\tif (key === 'http.healthCheck.urls')\r\n\t\t\t\treturn []\r\n\t\t\tif (key === 'http.healthCheck.timeout')\r\n\t\t\t\treturn 5000\r\n\t\t\treturn defaultValue\r\n\t\t})\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tHttpHealthIndicator,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: HttpClientService,\r\n\t\t\t\t\tuseValue: mockHttpClientService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tindicator = module.get<HttpHealthIndicator>(HttpHealthIndicator)\r\n\t})\r\n\r\n\tdescribe('initialization', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should load configuration from ConfigService', () => {\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.healthCheck.urls', [])\r\n\t\t\texpect(mockConfigService.getOptional).toHaveBeenCalledWith('http.healthCheck.timeout', 5000)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('health Check - No URLs Configured', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tmockConfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tif (key === 'http.healthCheck.urls')\r\n\t\t\t\t\treturn []\r\n\t\t\t\tif (key === 'http.healthCheck.timeout')\r\n\t\t\t\t\treturn 5000\r\n\t\t\t\treturn defaultValue\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should return healthy when circuit breaker is closed', async () => {\r\n\t\t\tmockHttpClientService.isCircuitOpen.mockReturnValue(false)\r\n\t\t\tmockHttpClientService.getStats.mockReturnValue({\r\n\t\t\t\ttotalRequests: 10,\r\n\t\t\t\tsuccessfulRequests: 8,\r\n\t\t\t\tfailedRequests: 2,\r\n\t\t\t\tcircuitBreakerState: 'closed',\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toEqual({\r\n\t\t\t\thttp: {\r\n\t\t\t\t\tstatus: 'up',\r\n\t\t\t\t\ttimestamp: expect.any(String),\r\n\t\t\t\t\tcircuitBreaker: 'closed',\r\n\t\t\t\t\tchecks: [],\r\n\t\t\t\t\tstats: {\r\n\t\t\t\t\t\ttotalRequests: 10,\r\n\t\t\t\t\t\tsuccessfulRequests: 8,\r\n\t\t\t\t\t\tfailedRequests: 2,\r\n\t\t\t\t\t\tcircuitBreakerState: 'closed',\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy when circuit breaker is open', async () => {\r\n\t\t\tmockHttpClientService.isCircuitOpen.mockReturnValue(true)\r\n\t\t\tmockHttpClientService.getStats.mockReturnValue({\r\n\t\t\t\ttotalRequests: 10,\r\n\t\t\t\tsuccessfulRequests: 3,\r\n\t\t\t\tfailedRequests: 7,\r\n\t\t\t\tcircuitBreakerState: 'open',\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.http.status).toBe('down')\r\n\t\t\texpect(result.http.message).toContain('Circuit breaker is open')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('health Check - With URLs Configured', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\t// Reset all mocks\r\n\t\t\tvi.clearAllMocks()\r\n\r\n\t\t\tmockConfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tif (key === 'http.healthCheck.urls')\r\n\t\t\t\t\treturn ['https://api.example.com/health', 'https://cdn.example.com/health']\r\n\t\t\t\tif (key === 'http.healthCheck.timeout')\r\n\t\t\t\t\treturn 5000\r\n\t\t\t\treturn defaultValue\r\n\t\t\t})\r\n\r\n\t\t\t// Recreate the indicator with new configuration\r\n\t\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tHttpHealthIndicator,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: HttpClientService,\r\n\t\t\t\t\t\tuseValue: mockHttpClientService,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tindicator = module.get<HttpHealthIndicator>(HttpHealthIndicator)\r\n\t\t})\r\n\r\n\t\tit('should return healthy when all endpoints are healthy and circuit is closed', async () => {\r\n\t\t\tmockHttpClientService.isCircuitOpen.mockReturnValue(false)\r\n\t\t\tmockHttpClientService.getStats.mockReturnValue({\r\n\t\t\t\ttotalRequests: 10,\r\n\t\t\t\tsuccessfulRequests: 10,\r\n\t\t\t\tfailedRequests: 0,\r\n\t\t\t\tcircuitBreakerState: 'closed',\r\n\t\t\t})\r\n\r\n\t\t\tconst mockResponse: AxiosResponse = {\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tdata: 'OK',\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {} as any,\r\n\t\t\t}\r\n\r\n\t\t\tmockHttpClientService.get.mockResolvedValue(mockResponse)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.http.status).toBe('up')\r\n\t\t\texpect(result.http.checks).toBeDefined()\r\n\t\t\texpect(result.http.checks).toHaveLength(2)\r\n\t\t\texpect(result.http.checks.every((check: any) => check.success)).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy when some endpoints fail', async () => {\r\n\t\t\tmockHttpClientService.isCircuitOpen.mockReturnValue(false)\r\n\t\t\tmockHttpClientService.getStats.mockReturnValue({\r\n\t\t\t\ttotalRequests: 10,\r\n\t\t\t\tsuccessfulRequests: 8,\r\n\t\t\t\tfailedRequests: 2,\r\n\t\t\t\tcircuitBreakerState: 'closed',\r\n\t\t\t})\r\n\r\n\t\t\tconst mockSuccessResponse: AxiosResponse = {\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tdata: 'OK',\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {} as any,\r\n\t\t\t}\r\n\r\n\t\t\tmockHttpClientService.get\r\n\t\t\t\t.mockResolvedValueOnce(mockSuccessResponse)\r\n\t\t\t\t.mockRejectedValueOnce(new Error('Connection failed'))\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.http.status).toBe('down')\r\n\t\t\texpect(result.http.message).toContain('1/2 endpoints healthy')\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy when circuit breaker is open even if endpoints are healthy', async () => {\r\n\t\t\tmockHttpClientService.isCircuitOpen.mockReturnValue(true)\r\n\t\t\tmockHttpClientService.getStats.mockReturnValue({\r\n\t\t\t\ttotalRequests: 10,\r\n\t\t\t\tsuccessfulRequests: 3,\r\n\t\t\t\tfailedRequests: 7,\r\n\t\t\t\tcircuitBreakerState: 'open',\r\n\t\t\t})\r\n\r\n\t\t\tconst mockResponse: AxiosResponse = {\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tdata: 'OK',\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {} as any,\r\n\t\t\t}\r\n\r\n\t\t\tmockHttpClientService.get.mockResolvedValue(mockResponse)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.http.status).toBe('down')\r\n\t\t\texpect(result.http.message).toContain('circuit breaker: true')\r\n\t\t})\r\n\r\n\t\tit('should handle timeout errors gracefully', async () => {\r\n\t\t\tmockHttpClientService.isCircuitOpen.mockReturnValue(false)\r\n\t\t\tmockHttpClientService.getStats.mockReturnValue({\r\n\t\t\t\ttotalRequests: 5,\r\n\t\t\t\tsuccessfulRequests: 4,\r\n\t\t\t\tfailedRequests: 1,\r\n\t\t\t\tcircuitBreakerState: 'closed',\r\n\t\t\t})\r\n\r\n\t\t\tmockHttpClientService.get.mockRejectedValue(new Error('Timeout'))\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\texpect(result.http.status).toBe('down')\r\n\t\t\texpect(result.http.message).toContain('0/2 endpoints healthy')\r\n\t\t})\r\n\r\n\t\tit('should include response times for successful requests', async () => {\r\n\t\t\tmockHttpClientService.isCircuitOpen.mockReturnValue(false)\r\n\t\t\tmockHttpClientService.getStats.mockReturnValue({\r\n\t\t\t\ttotalRequests: 10,\r\n\t\t\t\tsuccessfulRequests: 10,\r\n\t\t\t\tfailedRequests: 0,\r\n\t\t\t\tcircuitBreakerState: 'closed',\r\n\t\t\t})\r\n\r\n\t\t\tconst mockResponse: AxiosResponse = {\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tdata: 'OK',\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: {},\r\n\t\t\t\tconfig: {} as any,\r\n\t\t\t}\r\n\r\n\t\t\tmockHttpClientService.get.mockImplementation(() => {\r\n\t\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\t\tsetTimeout(() => resolve(mockResponse), 50)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.http.status).toBe('up')\r\n\t\t\texpect(result.http.checks.every((check: any) => check.responseTime > 0)).toBe(true)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error Handling', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tmockConfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tif (key === 'http.healthCheck.urls')\r\n\t\t\t\t\treturn ['https://api.example.com/health']\r\n\t\t\t\tif (key === 'http.healthCheck.timeout')\r\n\t\t\t\t\treturn 5000\r\n\t\t\t\treturn defaultValue\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should handle unexpected errors gracefully', async () => {\r\n\t\t\t// Need to recreate the indicator with health check URLs configured\r\n\t\t\tmockConfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\t\tif (key === 'http.healthCheck.urls') {\r\n\t\t\t\t\treturn ['http://test-url.com']\r\n\t\t\t\t}\r\n\t\t\t\tif (key === 'http.healthCheck.timeout') {\r\n\t\t\t\t\treturn 5000\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue\r\n\t\t\t})\r\n\r\n\t\t\t// Recreate the indicator with the new configuration\r\n\t\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tHttpHealthIndicator,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: HttpClientService,\r\n\t\t\t\t\t\tuseValue: mockHttpClientService,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst testIndicator = module.get<HttpHealthIndicator>(HttpHealthIndicator)\r\n\r\n\t\t\tmockHttpClientService.isCircuitOpen.mockReturnValue(false)\r\n\t\t\tmockHttpClientService.getStats.mockReturnValue({\r\n\t\t\t\ttotalRequests: 0,\r\n\t\t\t\tsuccessfulRequests: 0,\r\n\t\t\t\tfailedRequests: 0,\r\n\t\t\t\tcircuitBreakerState: 'closed',\r\n\t\t\t})\r\n\r\n\t\t\tmockHttpClientService.get.mockRejectedValue(new Error('Unexpected error'))\r\n\r\n\t\t\tconst result = await testIndicator.isHealthy()\r\n\t\t\texpect(result.http.status).toBe('down')\r\n\t\t\texpect(result.http.message).toContain('0/1 endpoints healthy')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDetails', () => {\r\n\t\tit('should return indicator details', () => {\r\n\t\t\tconst details = indicator.getDetails()\r\n\r\n\t\t\texpect(details.key).toBe('http')\r\n\t\t\texpect(details.description).toContain('HTTP connection health')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigService","HttpHealthIndicator","HttpClientService","Test","beforeEach","describe","expect","it","vi","indicator","mockHttpClientService","getStats","fn","isCircuitOpen","get","mockConfigService","getOptional","clearAllMocks","mockImplementation","key","defaultValue","module","createTestingModule","providers","provide","useValue","compile","toBeDefined","toHaveBeenCalledWith","mockReturnValue","totalRequests","successfulRequests","failedRequests","circuitBreakerState","result","isHealthy","toEqual","http","status","timestamp","any","String","circuitBreaker","checks","stats","toBe","message","toContain","mockResponse","data","statusText","headers","config","mockResolvedValue","toHaveLength","every","check","success","mockSuccessResponse","mockResolvedValueOnce","mockRejectedValueOnce","Error","mockRejectedValue","Promise","resolve","setTimeout","responseTime","testIndicator","details","getDetails","description"],"mappings":"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"}