{"version":3,"sources":["../../../../../src/test/HTTP/utils/circuit-breaker.spec.ts"],"sourcesContent":["import { CircuitBreaker, CircuitState } from '@microservice/HTTP/utils/circuit-breaker'\r\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('circuitBreaker', () => {\r\n\tlet circuitBreaker: CircuitBreaker\r\n\r\n\tbeforeEach(() => {\r\n\t\tvi.useFakeTimers()\r\n\t\tcircuitBreaker = new CircuitBreaker({\r\n\t\t\tfailureThreshold: 50,\r\n\t\t\tresetTimeout: 1000,\r\n\t\t\trollingWindow: 5000,\r\n\t\t\tminimumRequests: 3,\r\n\t\t})\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.useRealTimers()\r\n\t})\r\n\r\n\tdescribe('initialization', () => {\r\n\t\tit('should start in closed state', () => {\r\n\t\t\texpect(circuitBreaker.getState()).toBe(CircuitState.CLOSED)\r\n\t\t\texpect(circuitBreaker.isOpen()).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should initialize with default options', () => {\r\n\t\t\tconst stats = circuitBreaker.getStats()\r\n\t\t\texpect(stats.state).toBe(CircuitState.CLOSED)\r\n\t\t\texpect(stats.failureCount).toBe(0)\r\n\t\t\texpect(stats.successCount).toBe(0)\r\n\t\t\texpect(stats.totalRequests).toBe(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('success Recording', () => {\r\n\t\tit('should record successful requests', () => {\r\n\t\t\tcircuitBreaker.recordSuccess()\r\n\t\t\tcircuitBreaker.recordSuccess()\r\n\r\n\t\t\tconst stats = circuitBreaker.getStats()\r\n\t\t\texpect(stats.successCount).toBe(2)\r\n\t\t\texpect(stats.failureCount).toBe(0)\r\n\t\t\texpect(stats.state).toBe(CircuitState.CLOSED)\r\n\t\t})\r\n\r\n\t\tit('should reset circuit breaker from half-open to closed on success', () => {\r\n\t\t\t// Force circuit to open state by recording enough failures\r\n\t\t\tfor (let i = 0; i < 10; i++) {\r\n\t\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\t}\r\n\r\n\t\t\t// Verify circuit is open\r\n\t\t\texpect(circuitBreaker.getState()).toBe(CircuitState.OPEN)\r\n\r\n\t\t\t// Wait for reset timeout and check if circuit transitions to half-open\r\n\t\t\tvi.advanceTimersByTime(1000)\r\n\t\t\tconst isOpen = circuitBreaker.isOpen() // This should transition to half-open\r\n\t\t\texpect(isOpen).toBe(false) // Should return false when in half-open state\r\n\t\t\texpect(circuitBreaker.getState()).toBe(CircuitState.HALF_OPEN)\r\n\r\n\t\t\t// Record success should close the circuit\r\n\t\t\tcircuitBreaker.recordSuccess()\r\n\r\n\t\t\texpect(circuitBreaker.getState()).toBe(CircuitState.CLOSED)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('failure Recording', () => {\r\n\t\tit('should record failed requests', () => {\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\r\n\t\t\tconst stats = circuitBreaker.getStats()\r\n\t\t\texpect(stats.failureCount).toBe(2)\r\n\t\t\texpect(stats.successCount).toBe(0)\r\n\t\t\texpect(stats.state).toBe(CircuitState.CLOSED) // Still closed due to minimum requests\r\n\t\t})\r\n\r\n\t\tit('should trip circuit when failure threshold is exceeded', () => {\r\n\t\t\t// Record enough failures to exceed threshold\r\n\t\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\t}\r\n\r\n\t\t\tconst stats = circuitBreaker.getStats()\r\n\t\t\texpect(stats.state).toBe(CircuitState.OPEN)\r\n\t\t\texpect(circuitBreaker.isOpen()).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should not trip circuit with insufficient requests', () => {\r\n\t\t\t// Record only 2 failures (below minimum requests of 3)\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\r\n\t\t\texpect(circuitBreaker.getState()).toBe(CircuitState.CLOSED)\r\n\t\t\texpect(circuitBreaker.isOpen()).toBe(false)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('circuit States', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tvi.useFakeTimers()\r\n\t\t})\r\n\r\n\t\tafterEach(() => {\r\n\t\t\tvi.useRealTimers()\r\n\t\t})\r\n\r\n\t\tit('should transition from open to half-open after reset timeout', () => {\r\n\t\t\t// Trip the circuit\r\n\t\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\t}\r\n\t\t\texpect(circuitBreaker.getState()).toBe(CircuitState.OPEN)\r\n\r\n\t\t\t// Advance time to trigger half-open\r\n\t\t\tvi.advanceTimersByTime(1000)\r\n\r\n\t\t\t// Check if circuit transitions to half-open\r\n\t\t\tconst isOpen = circuitBreaker.isOpen()\r\n\t\t\texpect(isOpen).toBe(false)\r\n\t\t\texpect(circuitBreaker.getState()).toBe(CircuitState.HALF_OPEN)\r\n\t\t})\r\n\r\n\t\tit('should reopen circuit on failure in half-open state', () => {\r\n\t\t\t// Trip the circuit\r\n\t\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\t}\r\n\r\n\t\t\t// Wait for reset timeout\r\n\t\t\tvi.advanceTimersByTime(1000)\r\n\t\t\tcircuitBreaker.isOpen() // Transition to half-open\r\n\r\n\t\t\t// Record failure in half-open state\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\r\n\t\t\texpect(circuitBreaker.getState()).toBe(CircuitState.OPEN)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('execute Method', () => {\r\n\t\tit('should execute function when circuit is closed', async () => {\r\n\t\t\tconst mockFn = vi.fn().mockResolvedValue('success')\r\n\r\n\t\t\tconst result = await circuitBreaker.execute(mockFn)\r\n\r\n\t\t\texpect(result).toBe('success')\r\n\t\t\texpect(mockFn).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should throw error when circuit is open and no fallback', async () => {\r\n\t\t\t// Trip the circuit\r\n\t\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\t}\r\n\r\n\t\t\tconst mockFn = vi.fn().mockResolvedValue('success')\r\n\r\n\t\t\tawait expect(circuitBreaker.execute(mockFn)).rejects.toThrow('Circuit breaker is open')\r\n\t\t\texpect(mockFn).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should use fallback when circuit is open', async () => {\r\n\t\t\t// Trip the circuit\r\n\t\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\t}\r\n\r\n\t\t\tconst mockFn = vi.fn().mockResolvedValue('success')\r\n\t\t\tconst fallbackFn = vi.fn().mockResolvedValue('fallback')\r\n\r\n\t\t\tconst result = await circuitBreaker.execute(mockFn, fallbackFn)\r\n\r\n\t\t\texpect(result).toBe('fallback')\r\n\t\t\texpect(mockFn).not.toHaveBeenCalled()\r\n\t\t\texpect(fallbackFn).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should record success when function succeeds', async () => {\r\n\t\t\tconst mockFn = vi.fn().mockResolvedValue('success')\r\n\r\n\t\t\tawait circuitBreaker.execute(mockFn)\r\n\r\n\t\t\tconst stats = circuitBreaker.getStats()\r\n\t\t\texpect(stats.successCount).toBe(1)\r\n\t\t\texpect(stats.totalRequests).toBe(1)\r\n\t\t})\r\n\r\n\t\tit('should record failure when function throws', async () => {\r\n\t\t\tconst mockFn = vi.fn().mockRejectedValue(new Error('test error'))\r\n\r\n\t\t\tawait expect(circuitBreaker.execute(mockFn)).rejects.toThrow('test error')\r\n\r\n\t\t\tconst stats = circuitBreaker.getStats()\r\n\t\t\texpect(stats.failureCount).toBe(1)\r\n\t\t\texpect(stats.totalRequests).toBe(1)\r\n\t\t})\r\n\r\n\t\tit('should use fallback when function throws and fallback is provided', async () => {\r\n\t\t\tconst mockFn = vi.fn().mockRejectedValue(new Error('test error'))\r\n\t\t\tconst fallbackFn = vi.fn().mockResolvedValue('fallback')\r\n\r\n\t\t\tconst result = await circuitBreaker.execute(mockFn, fallbackFn)\r\n\r\n\t\t\texpect(result).toBe('fallback')\r\n\t\t\texpect(fallbackFn).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('statistics and Reset', () => {\r\n\t\tit('should provide accurate statistics', () => {\r\n\t\t\tcircuitBreaker.recordSuccess()\r\n\t\t\tcircuitBreaker.recordSuccess()\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\r\n\t\t\tconst stats = circuitBreaker.getStats()\r\n\t\t\texpect(stats.successCount).toBe(2)\r\n\t\t\texpect(stats.failureCount).toBe(1)\r\n\t\t\texpect(stats.totalRequests).toBe(3)\r\n\t\t\texpect(stats.failurePercentage).toBeCloseTo(33.33, 1)\r\n\t\t})\r\n\r\n\t\tit('should reset all statistics', () => {\r\n\t\t\tcircuitBreaker.recordSuccess()\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\r\n\t\t\tcircuitBreaker.reset()\r\n\r\n\t\t\tconst stats = circuitBreaker.getStats()\r\n\t\t\texpect(stats.successCount).toBe(0)\r\n\t\t\texpect(stats.failureCount).toBe(0)\r\n\t\t\texpect(stats.totalRequests).toBe(0)\r\n\t\t\texpect(stats.state).toBe(CircuitState.CLOSED)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('rolling Window', () => {\r\n\t\tbeforeEach(() => {\r\n\t\t\tvi.useFakeTimers()\r\n\t\t})\r\n\r\n\t\tafterEach(() => {\r\n\t\t\tvi.useRealTimers()\r\n\t\t})\r\n\r\n\t\tit('should prune old entries from rolling window', () => {\r\n\t\t\t// Record some failures\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\r\n\t\t\t// Advance time beyond rolling window\r\n\t\t\tvi.advanceTimersByTime(6000) // Beyond 5000ms rolling window\r\n\r\n\t\t\t// Record more failures\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\t\t\tcircuitBreaker.recordFailure()\r\n\r\n\t\t\tconst stats = circuitBreaker.getStats()\r\n\t\t\t// Should only count recent failures due to window pruning\r\n\t\t\texpect(stats.failurePercentage).toBe(100) // Only recent failures count\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CircuitBreaker","CircuitState","afterEach","beforeEach","describe","expect","it","vi","circuitBreaker","useFakeTimers","failureThreshold","resetTimeout","rollingWindow","minimumRequests","useRealTimers","getState","toBe","CLOSED","isOpen","stats","getStats","state","failureCount","successCount","totalRequests","recordSuccess","i","recordFailure","OPEN","advanceTimersByTime","HALF_OPEN","mockFn","fn","mockResolvedValue","result","execute","toHaveBeenCalled","rejects","toThrow","not","fallbackFn","mockRejectedValue","Error","failurePercentage","toBeCloseTo","reset"],"mappings":"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"}