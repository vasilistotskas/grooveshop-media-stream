{"version":3,"sources":["../../../src/test/main.spec.ts"],"sourcesContent":["import * as process from 'node:process'\r\nimport MediaStreamModule from '@microservice/media-stream.module'\r\nimport { NestFactory } from '@nestjs/core'\r\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\nimport { bootstrap } from '../main'\r\n\r\nvi.mock('@nestjs/core', async () => {\r\n\tconst actual = await vi.importActual('@nestjs/core')\r\n\treturn {\r\n\t\t...actual,\r\n\t\tNestFactory: {\r\n\t\t\tcreate: vi.fn(),\r\n\t\t},\r\n\t}\r\n})\r\n\r\ndescribe('bootstrap', () => {\r\n\tlet mockApp: any\r\n\tlet originalEnv: NodeJS.ProcessEnv\r\n\r\n\tbeforeEach(() => {\r\n\t\toriginalEnv = { ...process.env }\r\n\r\n\t\tmockApp = {\r\n\t\t\tuse: vi.fn().mockReturnThis(),\r\n\t\t\tuseStaticAssets: vi.fn().mockReturnThis(),\r\n\t\t\tenableCors: vi.fn().mockReturnThis(),\r\n\t\t\tlisten: vi.fn().mockImplementation(() => Promise.resolve()),\r\n\t\t\tget: vi.fn().mockReturnValue({\r\n\t\t\t\tget: vi.fn().mockImplementation((key: any) => {\r\n\t\t\t\t\tif (key === 'server') {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tport: Number.parseInt(process.env.PORT || '3003'),\r\n\t\t\t\t\t\t\thost: '0.0.0.0',\r\n\t\t\t\t\t\t\tcors: {\r\n\t\t\t\t\t\t\t\torigin: '*',\r\n\t\t\t\t\t\t\t\tmethods: 'GET',\r\n\t\t\t\t\t\t\t\tmaxAge: 86400,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn undefined\r\n\t\t\t\t}),\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\t;(NestFactory.create as any).mockResolvedValue(mockApp)\r\n\r\n\t\tvi.resetModules()\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tObject.assign(process.env, originalEnv)\r\n\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tit('should bootstrap the application successfully', async () => {\r\n\t\tprocess.env.PORT = '4000'\r\n\r\n\t\tawait bootstrap(false)\r\n\r\n\t\texpect(NestFactory.create).toHaveBeenCalledWith(\r\n\t\t\tMediaStreamModule,\r\n\t\t)\r\n\r\n\t\texpect(mockApp.useStaticAssets).toHaveBeenCalledWith('public')\r\n\t\texpect(mockApp.enableCors).toHaveBeenCalledWith({\r\n\t\t\torigin: '*',\r\n\t\t\tmethods: 'GET',\r\n\t\t\tmaxAge: 86400,\r\n\t\t})\r\n\t\texpect(mockApp.listen).toHaveBeenCalledWith(4000, '0.0.0.0')\r\n\t})\r\n\r\n\tit('should use default port if PORT environment variable is not set', async () => {\r\n\t\tdelete process.env.PORT\r\n\r\n\t\tawait bootstrap(false)\r\n\r\n\t\texpect(mockApp.listen).toHaveBeenCalledWith(3003, '0.0.0.0')\r\n\t})\r\n\r\n\tit('should handle errors during bootstrap', async () => {\r\n\t\tconst error = new Error('Test error')\r\n\t\tvi.mocked(NestFactory.create).mockRejectedValue(error)\r\n\r\n\t\tawait expect(bootstrap(false)).rejects.toThrow('Test error')\r\n\t})\r\n\r\n\t// eslint-disable-next-line test/expect-expect\r\n\tit('should handle unhandled errors in bootstrap promise', async () => {\n\t\tconst consoleErrorSpy = vi.spyOn(console, 'error').mockImplementation(() => {})\r\n\r\n\t\tconst error = new Error('Unhandled error')\r\n\r\n\t\tvi.mocked(NestFactory.create).mockRejectedValue(error)\r\n\r\n\t\tconst bootstrapPromise = bootstrap(false)\r\n\r\n\t\tawait new Promise(process.nextTick)\r\n\r\n\t\tbootstrapPromise.catch(() => {})\r\n\r\n\t\tconsoleErrorSpy.mockRestore()\n\t})\n})\r\n"],"names":["process","MediaStreamModule","NestFactory","afterEach","beforeEach","describe","expect","it","vi","bootstrap","mock","actual","importActual","create","fn","mockApp","originalEnv","env","use","mockReturnThis","useStaticAssets","enableCors","listen","mockImplementation","Promise","resolve","get","mockReturnValue","key","port","Number","parseInt","PORT","host","cors","origin","methods","maxAge","undefined","mockResolvedValue","resetModules","Object","assign","clearAllMocks","toHaveBeenCalledWith","error","Error","mocked","mockRejectedValue","rejects","toThrow","consoleErrorSpy","spyOn","console","bootstrapPromise","nextTick","catch","mockRestore"],"mappings":"AAAA,YAAYA,aAAa,eAAc;AACvC,OAAOC,uBAAuB,wCAAmC;AACjE,SAASC,WAAW,QAAQ,eAAc;AAC1C,SAASC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,QAAQ,SAAQ;AACxE,SAASC,SAAS,QAAQ,aAAS;AAEnCD,GAAGE,IAAI,CAAC,gBAAgB;IACvB,MAAMC,SAAS,MAAMH,GAAGI,YAAY,CAAC;IACrC,OAAO;QACN,GAAGD,MAAM;QACTT,aAAa;YACZW,QAAQL,GAAGM,EAAE;QACd;IACD;AACD;AAEAT,SAAS,aAAa;IACrB,IAAIU;IACJ,IAAIC;IAEJZ,WAAW;QACVY,cAAc;YAAE,GAAGhB,QAAQiB,GAAG;QAAC;QAE/BF,UAAU;YACTG,KAAKV,GAAGM,EAAE,GAAGK,cAAc;YAC3BC,iBAAiBZ,GAAGM,EAAE,GAAGK,cAAc;YACvCE,YAAYb,GAAGM,EAAE,GAAGK,cAAc;YAClCG,QAAQd,GAAGM,EAAE,GAAGS,kBAAkB,CAAC,IAAMC,QAAQC,OAAO;YACxDC,KAAKlB,GAAGM,EAAE,GAAGa,eAAe,CAAC;gBAC5BD,KAAKlB,GAAGM,EAAE,GAAGS,kBAAkB,CAAC,CAACK;oBAChC,IAAIA,QAAQ,UAAU;wBACrB,OAAO;4BACNC,MAAMC,OAAOC,QAAQ,CAAC/B,QAAQiB,GAAG,CAACe,IAAI,IAAI;4BAC1CC,MAAM;4BACNC,MAAM;gCACLC,QAAQ;gCACRC,SAAS;gCACTC,QAAQ;4BACT;wBACD;oBACD;oBACA,OAAOC;gBACR;YACD;QACD;QAEEpC,YAAYW,MAAM,CAAS0B,iBAAiB,CAACxB;QAE/CP,GAAGgC,YAAY;IAChB;IAEArC,UAAU;QACTsC,OAAOC,MAAM,CAAC1C,QAAQiB,GAAG,EAAED;QAE3BR,GAAGmC,aAAa;IACjB;IAEApC,GAAG,iDAAiD;QACnDP,QAAQiB,GAAG,CAACe,IAAI,GAAG;QAEnB,MAAMvB,UAAU;QAEhBH,OAAOJ,YAAYW,MAAM,EAAE+B,oBAAoB,CAC9C3C;QAGDK,OAAOS,QAAQK,eAAe,EAAEwB,oBAAoB,CAAC;QACrDtC,OAAOS,QAAQM,UAAU,EAAEuB,oBAAoB,CAAC;YAC/CT,QAAQ;YACRC,SAAS;YACTC,QAAQ;QACT;QACA/B,OAAOS,QAAQO,MAAM,EAAEsB,oBAAoB,CAAC,MAAM;IACnD;IAEArC,GAAG,mEAAmE;QACrE,OAAOP,QAAQiB,GAAG,CAACe,IAAI;QAEvB,MAAMvB,UAAU;QAEhBH,OAAOS,QAAQO,MAAM,EAAEsB,oBAAoB,CAAC,MAAM;IACnD;IAEArC,GAAG,yCAAyC;QAC3C,MAAMsC,QAAQ,IAAIC,MAAM;QACxBtC,GAAGuC,MAAM,CAAC7C,YAAYW,MAAM,EAAEmC,iBAAiB,CAACH;QAEhD,MAAMvC,OAAOG,UAAU,QAAQwC,OAAO,CAACC,OAAO,CAAC;IAChD;IAEA,8CAA8C;IAC9C3C,GAAG,uDAAuD;QACzD,MAAM4C,kBAAkB3C,GAAG4C,KAAK,CAACC,SAAS,SAAS9B,kBAAkB,CAAC,KAAO;QAE7E,MAAMsB,QAAQ,IAAIC,MAAM;QAExBtC,GAAGuC,MAAM,CAAC7C,YAAYW,MAAM,EAAEmC,iBAAiB,CAACH;QAEhD,MAAMS,mBAAmB7C,UAAU;QAEnC,MAAM,IAAIe,QAAQxB,QAAQuD,QAAQ;QAElCD,iBAAiBE,KAAK,CAAC,KAAO;QAE9BL,gBAAgBM,WAAW;IAC5B;AACD"}