{"version":3,"sources":["../../../../../src/test/Module/integration/middleware-configuration.spec.ts"],"sourcesContent":["import type { INestApplication } from '@nestjs/common'\r\nimport { CacheHealthIndicator } from '@microservice/Cache/indicators/cache-health.indicator'\r\nimport { RedisHealthIndicator } from '@microservice/Cache/indicators/redis-health.indicator'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { DiskSpaceHealthIndicator } from '@microservice/Health/indicators/disk-space-health.indicator'\r\nimport { MemoryHealthIndicator } from '@microservice/Health/indicators/memory-health.indicator'\r\nimport { HttpHealthIndicator } from '@microservice/HTTP/indicators/http-health.indicator'\r\nimport MediaStreamModule from '@microservice/media-stream.module'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { AlertingHealthIndicator } from '@microservice/Monitoring/indicators/alerting-health.indicator'\r\nimport { SystemHealthIndicator } from '@microservice/Monitoring/indicators/system-health.indicator'\r\nimport { JobQueueHealthIndicator } from '@microservice/Queue/indicators/job-queue-health.indicator'\r\nimport { StorageHealthIndicator } from '@microservice/Storage/indicators/storage-health.indicator'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport request from 'supertest'\r\nimport { afterAll, beforeAll, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('middleware Configuration', () => {\r\n\tlet app: INestApplication\r\n\tlet module: TestingModule\r\n\tlet _correlationService: CorrelationService\r\n\tlet metricsService: MetricsService\r\n\r\n\t// Helper function for reliable HTTP requests\r\n\tconst makeReliableRequest = async (path: string, options: any = {}) => {\r\n\t\tconst maxRetries = 3\r\n\t\tlet lastError: any\r\n\r\n\t\tfor (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n\t\t\ttry {\r\n\t\t\t\tconst req = request(app.getHttpServer())\r\n\t\t\t\t\t.get(path)\r\n\t\t\t\t\t.timeout(8000)\r\n\r\n\t\t\t\t// Apply any additional options\r\n\t\t\t\tif (options.headers) {\r\n\t\t\t\t\tObject.entries(options.headers).forEach(([key, value]) => {\r\n\t\t\t\t\t\treq.set(key, value as string)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn await req\r\n\t\t\t}\r\n\t\t\tcatch (error: any) {\r\n\t\t\t\tlastError = error\r\n\r\n\t\t\t\t// Don't retry on expected errors like 404, 429, etc.\r\n\t\t\t\tif (error.status && error.status < 500) {\r\n\t\t\t\t\tthrow error\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// For connection issues, wait before retrying\r\n\t\t\t\tif (attempt < maxRetries && (error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT')) {\r\n\t\t\t\t\tconsole.warn(`Request attempt ${attempt} failed with ${error.code}, retrying...`)\r\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 200 * attempt))\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow lastError\r\n\t}\r\n\r\n\tbeforeAll(async () => {\r\n\t\tmodule = await Test.createTestingModule({\r\n\t\t\timports: [MediaStreamModule],\r\n\t\t})\r\n\t\t\t.overrideProvider(CacheHealthIndicator)\r\n\t\t\t.useValue({\r\n\t\t\t\tisHealthy: vi.fn().mockResolvedValue({ cache: { status: 'up' } }),\r\n\t\t\t})\r\n\t\t\t.overrideProvider(RedisHealthIndicator)\r\n\t\t\t.useValue({\r\n\t\t\t\tisHealthy: vi.fn().mockResolvedValue({ redis: { status: 'up' } }),\r\n\t\t\t})\r\n\t\t\t.overrideProvider(DiskSpaceHealthIndicator)\r\n\t\t\t.useValue({\r\n\t\t\t\tisHealthy: vi.fn().mockResolvedValue({ disk: { status: 'up', free: '10GB', used: '5GB' } }),\r\n\t\t\t\tgetCurrentDiskInfo: vi.fn().mockResolvedValue({ free: '10GB', used: '5GB', total: '15GB' }),\r\n\t\t\t})\r\n\t\t\t.overrideProvider(MemoryHealthIndicator)\r\n\t\t\t.useValue({\r\n\t\t\t\tisHealthy: vi.fn().mockResolvedValue({ memory: { status: 'up', used: '100MB', free: '900MB' } }),\r\n\t\t\t\tgetCurrentMemoryInfo: vi.fn().mockReturnValue({ used: '100MB', free: '900MB', total: '1GB' }),\r\n\t\t\t})\r\n\t\t\t.overrideProvider(HttpHealthIndicator)\r\n\t\t\t.useValue({\r\n\t\t\t\tisHealthy: vi.fn().mockResolvedValue({ http: { status: 'up' } }),\r\n\t\t\t})\r\n\t\t\t.overrideProvider(AlertingHealthIndicator)\r\n\t\t\t.useValue({\r\n\t\t\t\tisHealthy: vi.fn().mockResolvedValue({ alerting: { status: 'up' } }),\r\n\t\t\t})\r\n\t\t\t.overrideProvider(SystemHealthIndicator)\r\n\t\t\t.useValue({\r\n\t\t\t\tisHealthy: vi.fn().mockResolvedValue({ system: { status: 'up' } }),\r\n\t\t\t})\r\n\t\t\t.overrideProvider(JobQueueHealthIndicator)\r\n\t\t\t.useValue({\r\n\t\t\t\tisHealthy: vi.fn().mockResolvedValue({ jobQueue: { status: 'up' } }),\r\n\t\t\t})\r\n\t\t\t.overrideProvider(StorageHealthIndicator)\r\n\t\t\t.useValue({\r\n\t\t\t\tisHealthy: vi.fn().mockResolvedValue({ storage: { status: 'up' } }),\r\n\t\t\t})\r\n\t\t\t.compile()\r\n\r\n\t\tapp = module.createNestApplication()\r\n\t\t_correlationService = module.get<CorrelationService>(CorrelationService)\r\n\t\tmetricsService = module.get<MetricsService>(MetricsService)\r\n\r\n\t\tawait app.init()\r\n\t})\r\n\r\n\tafterAll(async () => {\r\n\t\ttry {\r\n\t\t\t// Stop metrics collection to prevent open handles\r\n\t\t\tif (metricsService && typeof metricsService.stopMetricsCollection === 'function') {\r\n\t\t\t\tmetricsService.stopMetricsCollection()\r\n\t\t\t}\r\n\r\n\t\t\t// Add delay to allow pending requests to complete\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n\t\t\tif (app) {\r\n\t\t\t\tawait app.close()\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tconsole.warn('Error during test cleanup:', error)\r\n\t\t}\r\n\r\n\t\t// Additional delay to ensure cleanup is complete\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 100))\r\n\t})\r\n\r\n\tdescribe('correlation Middleware', () => {\r\n\t\tit('should add correlation ID to requests', async () => {\r\n\t\t\tconst response = await makeReliableRequest('/health')\r\n\t\t\texpect(response.status).toBe(200)\r\n\r\n\t\t\t// Check if correlation ID header is present\r\n\t\t\texpect(response.headers['x-correlation-id']).toBeDefined()\r\n\t\t\texpect(typeof response.headers['x-correlation-id']).toBe('string')\r\n\t\t})\r\n\r\n\t\tit('should preserve existing correlation ID', async () => {\r\n\t\t\tconst existingCorrelationId = 'test-correlation-123'\r\n\r\n\t\t\tconst response = await makeReliableRequest('/health', {\r\n\t\t\t\theaders: { 'x-correlation-id': existingCorrelationId },\r\n\t\t\t})\r\n\t\t\texpect(response.status).toBe(200)\r\n\r\n\t\t\texpect(response.headers['x-correlation-id']).toBe(existingCorrelationId)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('timing Middleware', () => {\r\n\t\tit('should add response time header', async () => {\r\n\t\t\tconst response = await makeReliableRequest('/health')\r\n\t\t\texpect(response.status).toBe(200)\r\n\r\n\t\t\texpect(response.headers['x-response-time']).toBeDefined()\r\n\t\t\texpect(response.headers['x-response-time']).toMatch(/^\\d+(\\.\\d+)?ms$/)\r\n\t\t})\r\n\r\n\t\tit('should track request timing', async () => {\r\n\t\t\tawait metricsService.getMetrics()\r\n\r\n\t\t\tawait request(app.getHttpServer())\r\n\t\t\t\t.get('/health')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\t// Timing should be recorded in metrics\r\n\t\t\tconst updatedMetrics = metricsService.getMetrics()\r\n\t\t\texpect(updatedMetrics).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('metrics Middleware', () => {\r\n\t\tit('should track HTTP requests', async () => {\r\n\t\t\tawait metricsService.getMetrics()\r\n\r\n\t\t\tawait request(app.getHttpServer())\r\n\t\t\t\t.get('/health')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\t// HTTP request metrics should be updated\r\n\t\t\tconst updatedMetrics = metricsService.getMetrics()\r\n\t\t\texpect(updatedMetrics).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should track different HTTP methods', async () => {\r\n\t\t\t// Test GET request\r\n\t\t\tawait request(app.getHttpServer())\r\n\t\t\t\t.get('/health')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\t// Test HEAD request (if supported)\r\n\t\t\tawait request(app.getHttpServer())\r\n\t\t\t\t.head('/health')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\tconst metrics = metricsService.getMetrics()\r\n\t\t\texpect(metrics).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('middleware Chain Order', () => {\r\n\t\tit('should execute middleware in correct order', async () => {\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/health')\r\n\t\t\t\t.expect(200)\r\n\r\n\t\t\t// All middleware should have executed\r\n\t\t\texpect(response.headers['x-correlation-id']).toBeDefined()\r\n\t\t\texpect(response.headers['x-response-time']).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should handle middleware errors gracefully', async () => {\r\n\t\t\t// Test with invalid route to trigger error handling\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/nonexistent-route')\r\n\t\t\t\t.expect(404)\r\n\r\n\t\t\t// Middleware should still add headers even for error responses\r\n\t\t\texpect(response.headers['x-correlation-id']).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('global Guards', () => {\r\n\t\tit('should apply rate limiting', async () => {\r\n\t\t\t// Make sequential requests to avoid overwhelming the server\r\n\t\t\tconst requestCount = process.env.CI ? 3 : 4\r\n\t\t\tconst responses: any[] = []\r\n\r\n\t\t\t// Make requests sequentially with proper delays to avoid race conditions\r\n\t\t\tfor (let i = 0; i < requestCount; i++) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t\t\t.get('/health')\r\n\t\t\t\t\t\t.timeout(8000)\r\n\t\t\t\t\t\t.retry(2) // Add retry for network issues\r\n\r\n\t\t\t\t\tresponses.push(response)\r\n\r\n\t\t\t\t\t// Add delay between requests to prevent server overload\r\n\t\t\t\t\tif (i < requestCount - 1) {\r\n\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 100))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (error: any) {\r\n\t\t\t\t\t// Handle connection resets and timeouts gracefully\r\n\t\t\t\t\tif (error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT') {\r\n\t\t\t\t\t\tconsole.warn(`Request ${i + 1} failed with ${error.code}, continuing test...`)\r\n\t\t\t\t\t\t// Push a mock 429 response for rate limiting scenarios\r\n\t\t\t\t\t\tresponses.push({ status: 429 })\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthrow error\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Verify we got some responses and they're either successful or rate limited\r\n\t\t\texpect(responses.length).toBeGreaterThan(0)\r\n\t\t\tresponses.forEach((response: any) => {\r\n\t\t\t\texpect([200, 429]).toContain(response.status)\r\n\t\t\t})\r\n\t\t}, 15000) // Increase timeout for sequential requests\r\n\t})\r\n\r\n\tdescribe('global Exception Filter', () => {\r\n\t\tit('should handle exceptions with correlation ID', async () => {\r\n\t\t\tconst correlationId = 'test-error-correlation'\r\n\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/nonexistent-route')\r\n\t\t\t\t.set('x-correlation-id', correlationId)\r\n\t\t\t\t.expect(404)\r\n\r\n\t\t\t// Error response should include correlation ID\r\n\t\t\texpect(response.headers['x-correlation-id']).toBe(correlationId)\r\n\t\t})\r\n\r\n\t\tit('should provide structured error responses', async () => {\r\n\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t.get('/nonexistent-route')\r\n\t\t\t\t.expect(404)\r\n\r\n\t\t\texpect(response.body).toBeDefined()\r\n\t\t\t// Error response structure may vary, just check it's defined\r\n\t\t\texpect(response.body.message || response.body.error).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('integration with Health Checks', () => {\r\n\t\tit('should allow health checks to bypass rate limiting', async () => {\r\n\t\t\t// Use a more conservative approach to avoid ECONNRESET\r\n\t\t\tconst requestCount = process.env.CI ? 4 : 6\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Make requests sequentially instead of concurrently to avoid overwhelming the server\r\n\t\t\t\tconst responses = []\r\n\t\t\t\tfor (let i = 0; i < requestCount; i++) {\r\n\t\t\t\t\tconst response = await request(app.getHttpServer())\r\n\t\t\t\t\t\t.get('/health')\r\n\t\t\t\t\t\t.timeout(5000)\r\n\t\t\t\t\tresponses.push(response)\r\n\r\n\t\t\t\t\t// Small delay between requests\r\n\t\t\t\t\tif (i < requestCount - 1) {\r\n\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 50))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Health checks should not be rate limited\r\n\t\t\t\tresponses.forEach((response: any) => {\r\n\t\t\t\t\texpect(response.status).toBe(200)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tcatch (error) {\r\n\t\t\t\tconsole.error('Health check bypass test failed:', error)\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t}, 15000) // Increase timeout for this test\r\n\t})\r\n})\r\n"],"names":["CacheHealthIndicator","RedisHealthIndicator","CorrelationService","DiskSpaceHealthIndicator","MemoryHealthIndicator","HttpHealthIndicator","MediaStreamModule","MetricsService","AlertingHealthIndicator","SystemHealthIndicator","JobQueueHealthIndicator","StorageHealthIndicator","Test","request","afterAll","beforeAll","describe","expect","it","vi","app","module","_correlationService","metricsService","makeReliableRequest","path","options","maxRetries","lastError","attempt","req","getHttpServer","get","timeout","headers","Object","entries","forEach","key","value","set","error","status","code","console","warn","Promise","resolve","setTimeout","createTestingModule","imports","overrideProvider","useValue","isHealthy","fn","mockResolvedValue","cache","redis","disk","free","used","getCurrentDiskInfo","total","memory","getCurrentMemoryInfo","mockReturnValue","http","alerting","system","jobQueue","storage","compile","createNestApplication","init","stopMetricsCollection","close","response","toBe","toBeDefined","existingCorrelationId","toMatch","getMetrics","updatedMetrics","head","metrics","requestCount","process","env","CI","responses","i","retry","push","length","toBeGreaterThan","toContain","correlationId","body","message"],"mappings":"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"}