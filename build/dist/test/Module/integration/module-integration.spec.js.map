{"version":3,"sources":["../../../../../src/test/Module/integration/module-integration.spec.ts"],"sourcesContent":["import type { INestApplication } from '@nestjs/common'\r\nimport { MultiLayerCacheManager } from '@microservice/Cache/services/multi-layer-cache.manager'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { HealthController } from '@microservice/Health/controllers/health.controller'\r\nimport { HttpClientService } from '@microservice/HTTP/services/http-client.service'\r\nimport MediaStreamModule from '@microservice/media-stream.module'\r\nimport { MetricsController } from '@microservice/Metrics/controllers/metrics.controller'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { MonitoringController } from '@microservice/Monitoring/controllers/monitoring.controller'\r\nimport { JobQueueManager } from '@microservice/Queue/services/job-queue.manager'\r\nimport { AdaptiveRateLimitGuard } from '@microservice/RateLimit/guards/adaptive-rate-limit.guard'\r\nimport { SimpleValidationService } from '@microservice/Validation/services/simple-validation.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { afterAll, beforeAll, describe, expect, it } from 'vitest'\n\r\ndescribe('module Integration', () => {\r\n\tlet app: INestApplication\r\n\tlet module: TestingModule\r\n\r\n\tbeforeAll(async () => {\r\n\t\tmodule = await Test.createTestingModule({\r\n\t\t\timports: [MediaStreamModule],\r\n\t\t}).compile()\r\n\r\n\t\tapp = module.createNestApplication()\r\n\t\tawait app.init()\r\n\t})\r\n\r\n\tafterAll(async () => {\r\n\t\tawait app.close()\r\n\t})\r\n\r\n\tdescribe('core Module Loading', () => {\r\n\t\tit('should load MediaStreamModule successfully', () => {\r\n\t\t\texpect(module).toBeDefined()\r\n\t\t\texpect(app).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should have ConfigService available', () => {\r\n\t\t\tconst configService = module.get<ConfigService>(ConfigService)\r\n\t\t\texpect(configService).toBeDefined()\r\n\t\t\texpect(configService.get).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('controller Registration', () => {\r\n\t\tit('should register HealthController', () => {\r\n\t\t\tconst healthController = module.get<HealthController>(HealthController)\r\n\t\t\texpect(healthController).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should register MetricsController', () => {\r\n\t\t\tconst metricsController = module.get<MetricsController>(MetricsController)\r\n\t\t\texpect(metricsController).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should register MonitoringController', () => {\r\n\t\t\tconst monitoringController = module.get<MonitoringController>(MonitoringController)\r\n\t\t\texpect(monitoringController).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('service Dependencies', () => {\r\n\t\tit('should have QueueModule services available', () => {\r\n\t\t\tconst jobQueueManager = module.get<JobQueueManager>(JobQueueManager)\r\n\t\t\texpect(jobQueueManager).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should have ValidationModule services available', () => {\r\n\t\t\tconst validationService = module.get<SimpleValidationService>(SimpleValidationService)\r\n\t\t\texpect(validationService).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should have CacheModule services available', () => {\r\n\t\t\tconst cacheManager = module.get<MultiLayerCacheManager>(MultiLayerCacheManager)\r\n\t\t\texpect(cacheManager).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should have HttpModule services available', () => {\r\n\t\t\tconst httpClient = module.get<HttpClientService>(HttpClientService)\r\n\t\t\texpect(httpClient).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should have CorrelationModule services available', () => {\r\n\t\t\tconst correlationService = module.get<CorrelationService>(CorrelationService)\r\n\t\t\texpect(correlationService).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should have MetricsModule services available', () => {\r\n\t\t\tconst metricsService = module.get<MetricsService>(MetricsService)\r\n\t\t\texpect(metricsService).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('global Providers', () => {\r\n\t\tit('should register AdaptiveRateLimitGuard as APP_GUARD', () => {\r\n\t\t\t// Global providers are registered but not directly accessible in test modules\r\n\t\t\t// We verify they exist by checking the guard class is available\r\n\t\t\tconst guard = module.get<AdaptiveRateLimitGuard>(AdaptiveRateLimitGuard)\r\n\t\t\texpect(guard).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should register MediaStreamExceptionFilter as APP_FILTER', () => {\r\n\t\t\t// Global providers are registered but not directly accessible in test modules\r\n\t\t\t// We verify the module loads without errors, which means the filter is properly configured\r\n\t\t\texpect(module).toBeDefined()\r\n\t\t\texpect(app).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('cross-Module Dependencies', () => {\r\n\t\tit('should resolve dependencies between modules correctly', () => {\r\n\t\t\t// Test that services can access their dependencies from other modules\r\n\t\t\tconst correlationService = module.get<CorrelationService>(CorrelationService)\r\n\t\t\tconst configService = module.get<ConfigService>(ConfigService)\r\n\r\n\t\t\texpect(correlationService).toBeDefined()\r\n\t\t\texpect(configService).toBeDefined()\r\n\r\n\t\t\t// These services should be able to work together\r\n\t\t\tconst correlationId = correlationService.generateCorrelationId()\r\n\t\t\texpect(correlationId).toBeDefined()\r\n\t\t\texpect(typeof correlationId).toBe('string')\r\n\t\t})\r\n\r\n\t\tit('should allow cache services to work with configuration', () => {\r\n\t\t\tconst cacheManager = module.get<MultiLayerCacheManager>(MultiLayerCacheManager)\r\n\t\t\tconst configService = module.get<ConfigService>(ConfigService)\r\n\r\n\t\t\texpect(cacheManager).toBeDefined()\r\n\t\t\texpect(configService).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should allow HTTP services to work with correlation', () => {\r\n\t\t\tconst httpClient = module.get<HttpClientService>(HttpClientService)\r\n\t\t\tconst correlationService = module.get<CorrelationService>(CorrelationService)\r\n\r\n\t\t\texpect(httpClient).toBeDefined()\r\n\t\t\texpect(correlationService).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('module Health Check', () => {\r\n\t\tit('should have all health indicators registered', async () => {\r\n\t\t\tconst healthController = module.get<HealthController>(HealthController)\r\n\r\n\t\t\t// This should not throw an error if all health indicators are properly registered\r\n\t\t\texpect(() => healthController).not.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should have metrics collection working', () => {\r\n\t\t\tconst metricsService = module.get<MetricsService>(MetricsService)\r\n\r\n\t\t\t// Test basic metrics functionality\r\n\t\t\texpect(() => {\r\n\t\t\t\tmetricsService.recordHttpRequest('GET', '/test', 200, 100)\r\n\t\t\t}).not.toThrow()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('application Startup', () => {\r\n\t\tit('should start application without errors', async () => {\r\n\t\t\t// The app should already be initialized in beforeAll\r\n\t\t\texpect(app).toBeDefined()\r\n\t\t\texpect(app.getHttpServer()).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should have middleware configured', () => {\r\n\t\t\t// Test that the middleware configuration doesn't cause errors\r\n\t\t\tconst httpAdapter = app.getHttpAdapter()\r\n\t\t\texpect(httpAdapter).toBeDefined()\r\n\t\t})\r\n\t})\r\n})\n"],"names":["MultiLayerCacheManager","ConfigService","CorrelationService","HealthController","HttpClientService","MediaStreamModule","MetricsController","MetricsService","MonitoringController","JobQueueManager","AdaptiveRateLimitGuard","SimpleValidationService","Test","afterAll","beforeAll","describe","expect","it","app","module","createTestingModule","imports","compile","createNestApplication","init","close","toBeDefined","configService","get","healthController","metricsController","monitoringController","jobQueueManager","validationService","cacheManager","httpClient","correlationService","metricsService","guard","correlationId","generateCorrelationId","toBe","not","toThrow","recordHttpRequest","getHttpServer","httpAdapter","getHttpAdapter"],"mappings":"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"}