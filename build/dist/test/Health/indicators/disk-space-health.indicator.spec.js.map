{"version":3,"sources":["../../../../../src/test/Health/indicators/disk-space-health.indicator.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { DiskSpaceHealthIndicator } from '@microservice/Health/indicators/disk-space-health.indicator'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\r\nimport 'reflect-metadata'\n\r\ndescribe('diskSpaceHealthIndicator', () => {\r\n\tlet indicator: DiskSpaceHealthIndicator\r\n\tlet configService: MockedObject<ConfigService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn((key: string) => {\r\n\t\t\t\tif (key === 'cache.file.directory')\r\n\t\t\t\t\treturn './test-storage'\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tDiskSpaceHealthIndicator,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tindicator = module.get<DiskSpaceHealthIndicator>(DiskSpaceHealthIndicator)\r\n\t\tconfigService = module.get(ConfigService)\r\n\t})\r\n\r\n\tdescribe('health Check', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('disk_space')\r\n\t\t})\r\n\r\n\t\tit('should return healthy status when disk space is sufficient', async () => {\r\n\t\t\t// Mock getDiskSpaceInfo to return healthy values\r\n\t\t\tvi.spyOn(indicator as any, 'getDiskSpaceInfo').mockResolvedValue({\r\n\t\t\t\ttotal: 1000,\r\n\t\t\t\tfree: 500,\r\n\t\t\t\tused: 500,\r\n\t\t\t\tusedPercentage: 0.5, // 50% usage\r\n\t\t\t\tpath: './test-storage',\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('disk_space')\r\n\t\t\texpect(result.disk_space.status).toBe('up')\r\n\t\t\texpect(result.disk_space).toHaveProperty('timestamp')\r\n\t\t})\r\n\r\n\t\tit('should return warning status when disk usage is above warning threshold', async () => {\r\n\t\t\tvi.spyOn(indicator as any, 'getDiskSpaceInfo').mockResolvedValue({\r\n\t\t\t\ttotal: 1000,\r\n\t\t\t\tfree: 150,\r\n\t\t\t\tused: 850,\r\n\t\t\t\tusedPercentage: 0.85, // 85% usage (above 80% warning)\r\n\t\t\t\tpath: './test-storage',\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('disk_space')\r\n\t\t\texpect(result.disk_space.status).toBe('up') // Main health check status should be up\r\n\t\t\t// The warning status should be in the details, not the main status\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when disk usage is critical', async () => {\r\n\t\t\tvi.spyOn(indicator as any, 'getDiskSpaceInfo').mockResolvedValue({\r\n\t\t\t\ttotal: 1000,\r\n\t\t\t\tfree: 50,\r\n\t\t\t\tused: 950,\r\n\t\t\t\tusedPercentage: 0.95, // 95% usage (above 90% critical)\r\n\t\t\t\tpath: './test-storage',\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('disk_space')\r\n\t\t\texpect(result.disk_space.status).toBe('down')\r\n\t\t\texpect(result.disk_space).toHaveProperty('message')\r\n\t\t\texpect(result.disk_space.message).toContain('critically low')\r\n\t\t})\r\n\r\n\t\tit('should handle errors gracefully', async () => {\r\n\t\t\tvi.spyOn(indicator as any, 'getDiskSpaceInfo').mockRejectedValue(new Error('Disk access error'))\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('disk_space')\r\n\t\t\texpect(result.disk_space.status).toBe('down')\r\n\t\t\texpect(result.disk_space.message).toContain('Disk access error')\r\n\t\t})\r\n\r\n\t\tit('should timeout if check takes too long', async () => {\r\n\t\t\tvi.spyOn(indicator as any, 'getDiskSpaceInfo').mockImplementation(() =>\r\n\t\t\t\tnew Promise(resolve => setTimeout(resolve, 5000)), // 5 second delay\r\n\t\t\t)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('disk_space')\r\n\t\t\texpect(result.disk_space.status).toBe('down')\r\n\t\t\texpect(result.disk_space.message).toContain('timeout')\r\n\t\t}, 10000)\r\n\t})\r\n\r\n\tdescribe('configuration', () => {\r\n\t\tit('should use configured storage path', () => {\r\n\t\t\texpect(configService.get).toHaveBeenCalledWith('cache.file.directory')\r\n\t\t})\r\n\r\n\t\tit('should have correct thresholds', () => {\r\n\t\t\tconst details = indicator.getDetails()\r\n\t\t\texpect(details.key).toBe('disk_space')\r\n\t\t\texpect(details.description).toContain('./test-storage')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getCurrentDiskInfo', () => {\r\n\t\tit('should return current disk information', async () => {\r\n\t\t\tvi.spyOn(indicator as any, 'getDiskSpaceInfo').mockResolvedValue({\r\n\t\t\t\ttotal: 1000,\r\n\t\t\t\tfree: 500,\r\n\t\t\t\tused: 500,\r\n\t\t\t\tusedPercentage: 0.5,\r\n\t\t\t\tpath: './test-storage',\r\n\t\t\t})\r\n\r\n\t\t\tconst diskInfo = await indicator.getCurrentDiskInfo()\r\n\r\n\t\t\texpect(diskInfo).toHaveProperty('total')\r\n\t\t\texpect(diskInfo).toHaveProperty('free')\r\n\t\t\texpect(diskInfo).toHaveProperty('used')\r\n\t\t\texpect(diskInfo).toHaveProperty('usedPercentage')\r\n\t\t\texpect(diskInfo).toHaveProperty('path')\r\n\t\t\texpect(diskInfo.path).toBe('./test-storage')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDetails', () => {\r\n\t\tit('should return indicator details', () => {\r\n\t\t\tconst details = indicator.getDetails()\r\n\r\n\t\t\texpect(details).toHaveProperty('key')\r\n\t\t\texpect(details).toHaveProperty('options')\r\n\t\t\texpect(details).toHaveProperty('description')\r\n\t\t\texpect(details.key).toBe('disk_space')\r\n\t\t\texpect(details.description).toContain('Monitors disk space usage')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["ConfigService","DiskSpaceHealthIndicator","Test","beforeEach","describe","expect","it","vi","indicator","configService","mockConfigService","get","fn","key","undefined","module","createTestingModule","providers","provide","useValue","compile","toBeDefined","toBe","spyOn","mockResolvedValue","total","free","used","usedPercentage","path","result","isHealthy","toHaveProperty","disk_space","status","message","toContain","mockRejectedValue","Error","mockImplementation","Promise","resolve","setTimeout","toHaveBeenCalledWith","details","getDetails","description","diskInfo","getCurrentDiskInfo"],"mappings":"AACA,SAASA,aAAa,QAAQ,gDAAqC;AACnE,SAASC,wBAAwB,QAAQ,wEAA6D;AACtG,SAASC,IAAI,QAAuB,kBAAiB;AACrD,SAASC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,QAAQ,SAAQ;AAC7D,OAAO,mBAAkB;AAEzBH,SAAS,4BAA4B;IACpC,IAAII;IACJ,IAAIC;IAEJN,WAAW;QACV,MAAMO,oBAAoB;YACzBC,KAAKJ,GAAGK,EAAE,CAAC,CAACC;gBACX,IAAIA,QAAQ,wBACX,OAAO;gBACR,OAAOC;YACR;QACD;QAEA,MAAMC,SAAwB,MAAMb,KAAKc,mBAAmB,CAAC;YAC5DC,WAAW;gBACVhB;gBACA;oBACCiB,SAASlB;oBACTmB,UAAUT;gBACX;aACA;QACF,GAAGU,OAAO;QAEVZ,YAAYO,OAAOJ,GAAG,CAA2BV;QACjDQ,gBAAgBM,OAAOJ,GAAG,CAACX;IAC5B;IAEAI,SAAS,gBAAgB;QACxBE,GAAG,qBAAqB;YACvBD,OAAOG,WAAWa,WAAW;YAC7BhB,OAAOG,UAAUK,GAAG,EAAES,IAAI,CAAC;QAC5B;QAEAhB,GAAG,8DAA8D;YAChE,iDAAiD;YACjDC,GAAGgB,KAAK,CAACf,WAAkB,oBAAoBgB,iBAAiB,CAAC;gBAChEC,OAAO;gBACPC,MAAM;gBACNC,MAAM;gBACNC,gBAAgB;gBAChBC,MAAM;YACP;YAEA,MAAMC,SAAS,MAAMtB,UAAUuB,SAAS;YAExC1B,OAAOyB,QAAQE,cAAc,CAAC;YAC9B3B,OAAOyB,OAAOG,UAAU,CAACC,MAAM,EAAEZ,IAAI,CAAC;YACtCjB,OAAOyB,OAAOG,UAAU,EAAED,cAAc,CAAC;QAC1C;QAEA1B,GAAG,2EAA2E;YAC7EC,GAAGgB,KAAK,CAACf,WAAkB,oBAAoBgB,iBAAiB,CAAC;gBAChEC,OAAO;gBACPC,MAAM;gBACNC,MAAM;gBACNC,gBAAgB;gBAChBC,MAAM;YACP;YAEA,MAAMC,SAAS,MAAMtB,UAAUuB,SAAS;YAExC1B,OAAOyB,QAAQE,cAAc,CAAC;YAC9B3B,OAAOyB,OAAOG,UAAU,CAACC,MAAM,EAAEZ,IAAI,CAAC,OAAM,wCAAwC;QACpF,mEAAmE;QACpE;QAEAhB,GAAG,8DAA8D;YAChEC,GAAGgB,KAAK,CAACf,WAAkB,oBAAoBgB,iBAAiB,CAAC;gBAChEC,OAAO;gBACPC,MAAM;gBACNC,MAAM;gBACNC,gBAAgB;gBAChBC,MAAM;YACP;YAEA,MAAMC,SAAS,MAAMtB,UAAUuB,SAAS;YAExC1B,OAAOyB,QAAQE,cAAc,CAAC;YAC9B3B,OAAOyB,OAAOG,UAAU,CAACC,MAAM,EAAEZ,IAAI,CAAC;YACtCjB,OAAOyB,OAAOG,UAAU,EAAED,cAAc,CAAC;YACzC3B,OAAOyB,OAAOG,UAAU,CAACE,OAAO,EAAEC,SAAS,CAAC;QAC7C;QAEA9B,GAAG,mCAAmC;YACrCC,GAAGgB,KAAK,CAACf,WAAkB,oBAAoB6B,iBAAiB,CAAC,IAAIC,MAAM;YAE3E,MAAMR,SAAS,MAAMtB,UAAUuB,SAAS;YAExC1B,OAAOyB,QAAQE,cAAc,CAAC;YAC9B3B,OAAOyB,OAAOG,UAAU,CAACC,MAAM,EAAEZ,IAAI,CAAC;YACtCjB,OAAOyB,OAAOG,UAAU,CAACE,OAAO,EAAEC,SAAS,CAAC;QAC7C;QAEA9B,GAAG,0CAA0C;YAC5CC,GAAGgB,KAAK,CAACf,WAAkB,oBAAoB+B,kBAAkB,CAAC,IACjE,IAAIC,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;YAG5C,MAAMX,SAAS,MAAMtB,UAAUuB,SAAS;YAExC1B,OAAOyB,QAAQE,cAAc,CAAC;YAC9B3B,OAAOyB,OAAOG,UAAU,CAACC,MAAM,EAAEZ,IAAI,CAAC;YACtCjB,OAAOyB,OAAOG,UAAU,CAACE,OAAO,EAAEC,SAAS,CAAC;QAC7C,GAAG;IACJ;IAEAhC,SAAS,iBAAiB;QACzBE,GAAG,sCAAsC;YACxCD,OAAOI,cAAcE,GAAG,EAAEgC,oBAAoB,CAAC;QAChD;QAEArC,GAAG,kCAAkC;YACpC,MAAMsC,UAAUpC,UAAUqC,UAAU;YACpCxC,OAAOuC,QAAQ/B,GAAG,EAAES,IAAI,CAAC;YACzBjB,OAAOuC,QAAQE,WAAW,EAAEV,SAAS,CAAC;QACvC;IACD;IAEAhC,SAAS,sBAAsB;QAC9BE,GAAG,0CAA0C;YAC5CC,GAAGgB,KAAK,CAACf,WAAkB,oBAAoBgB,iBAAiB,CAAC;gBAChEC,OAAO;gBACPC,MAAM;gBACNC,MAAM;gBACNC,gBAAgB;gBAChBC,MAAM;YACP;YAEA,MAAMkB,WAAW,MAAMvC,UAAUwC,kBAAkB;YAEnD3C,OAAO0C,UAAUf,cAAc,CAAC;YAChC3B,OAAO0C,UAAUf,cAAc,CAAC;YAChC3B,OAAO0C,UAAUf,cAAc,CAAC;YAChC3B,OAAO0C,UAAUf,cAAc,CAAC;YAChC3B,OAAO0C,UAAUf,cAAc,CAAC;YAChC3B,OAAO0C,SAASlB,IAAI,EAAEP,IAAI,CAAC;QAC5B;IACD;IAEAlB,SAAS,cAAc;QACtBE,GAAG,mCAAmC;YACrC,MAAMsC,UAAUpC,UAAUqC,UAAU;YAEpCxC,OAAOuC,SAASZ,cAAc,CAAC;YAC/B3B,OAAOuC,SAASZ,cAAc,CAAC;YAC/B3B,OAAOuC,SAASZ,cAAc,CAAC;YAC/B3B,OAAOuC,QAAQ/B,GAAG,EAAES,IAAI,CAAC;YACzBjB,OAAOuC,QAAQE,WAAW,EAAEV,SAAS,CAAC;QACvC;IACD;AACD"}