{"version":3,"sources":["../../../../../src/test/Health/indicators/memory-health.indicator.spec.ts"],"sourcesContent":["import { MemoryHealthIndicator } from '@microservice/Health/indicators/memory-health.indicator'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\r\nimport 'reflect-metadata'\n\r\ndescribe('memoryHealthIndicator', () => {\r\n\tlet indicator: MemoryHealthIndicator\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [MemoryHealthIndicator],\r\n\t\t}).compile()\r\n\r\n\t\tindicator = module.get<MemoryHealthIndicator>(MemoryHealthIndicator)\r\n\t})\r\n\r\n\tdescribe('health Check', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('memory')\r\n\t\t})\r\n\r\n\t\tit('should return healthy status when memory usage is normal', async () => {\r\n\t\t\t// Mock getMemoryInfo to return healthy values\r\n\t\t\tvi.spyOn(indicator as any, 'getMemoryInfo').mockReturnValue({\r\n\t\t\t\ttotalMemory: 1000,\r\n\t\t\t\tfreeMemory: 600,\r\n\t\t\t\tusedMemory: 400,\r\n\t\t\t\tmemoryUsagePercentage: 0.4, // 40% system memory usage\r\n\t\t\t\tprocessMemory: {\r\n\t\t\t\t\trss: 100,\r\n\t\t\t\t\theapTotal: 50,\r\n\t\t\t\t\theapUsed: 25,\r\n\t\t\t\t\texternal: 10,\r\n\t\t\t\t\tarrayBuffers: 5,\r\n\t\t\t\t},\r\n\t\t\t\theapUsagePercentage: 0.5, // 50% heap usage\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('memory')\r\n\t\t\texpect(result.memory.status).toBe('up')\r\n\t\t\texpect(result.memory).toHaveProperty('timestamp')\r\n\t\t})\r\n\r\n\t\tit('should return warning status when memory usage is above warning threshold', async () => {\r\n\t\t\tvi.spyOn(indicator as any, 'getMemoryInfo').mockReturnValue({\r\n\t\t\t\ttotalMemory: 1000,\r\n\t\t\t\tfreeMemory: 150,\r\n\t\t\t\tusedMemory: 850,\r\n\t\t\t\tmemoryUsagePercentage: 0.85, // 85% system memory usage (above 80% warning)\r\n\t\t\t\tprocessMemory: {\r\n\t\t\t\t\trss: 100,\r\n\t\t\t\t\theapTotal: 50,\r\n\t\t\t\t\theapUsed: 25,\r\n\t\t\t\t\texternal: 10,\r\n\t\t\t\t\tarrayBuffers: 5,\r\n\t\t\t\t},\r\n\t\t\t\theapUsagePercentage: 0.5, // 50% heap usage\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('memory')\r\n\t\t\texpect(result.memory.status).toBe('up') // Main health check status should be up\r\n\t\t\t// The warning status should be in the details, not the main status\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when system memory usage is critical', async () => {\r\n\t\t\tvi.spyOn(indicator as any, 'getMemoryInfo').mockReturnValue({\r\n\t\t\t\ttotalMemory: 1000,\r\n\t\t\t\tfreeMemory: 50,\r\n\t\t\t\tusedMemory: 950,\r\n\t\t\t\tmemoryUsagePercentage: 0.95, // 95% system memory usage (above 90% critical)\r\n\t\t\t\tprocessMemory: {\r\n\t\t\t\t\trss: 100,\r\n\t\t\t\t\theapTotal: 50,\r\n\t\t\t\t\theapUsed: 25,\r\n\t\t\t\t\texternal: 10,\r\n\t\t\t\t\tarrayBuffers: 5,\r\n\t\t\t\t},\r\n\t\t\t\theapUsagePercentage: 0.5, // 50% heap usage\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('memory')\r\n\t\t\texpect(result.memory.status).toBe('down')\r\n\t\t\texpect(result.memory).toHaveProperty('message')\r\n\t\t\texpect(result.memory.message).toContain('System memory critically high')\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when heap memory usage is critical', async () => {\r\n\t\t\tvi.spyOn(indicator as any, 'getMemoryInfo').mockReturnValue({\r\n\t\t\t\ttotalMemory: 1000,\r\n\t\t\t\tfreeMemory: 600,\r\n\t\t\t\tusedMemory: 400,\r\n\t\t\t\tmemoryUsagePercentage: 0.4, // 40% system memory usage\r\n\t\t\t\tprocessMemory: {\r\n\t\t\t\t\trss: 100,\r\n\t\t\t\t\theapTotal: 50,\r\n\t\t\t\t\theapUsed: 49,\r\n\t\t\t\t\texternal: 10,\r\n\t\t\t\t\tarrayBuffers: 5,\r\n\t\t\t\t},\r\n\t\t\t\theapUsagePercentage: 0.99, // 99% heap usage (above 98% critical)\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result).toHaveProperty('memory')\r\n\t\t\texpect(result.memory.status).toBe('down')\r\n\t\t\texpect(result.memory).toHaveProperty('message')\r\n\t\t\texpect(result.memory.message).toContain('Heap memory critically high')\r\n\t\t})\r\n\r\n\t\tit('should include threshold information in healthy response', async () => {\r\n\t\t\tvi.spyOn(indicator as any, 'getMemoryInfo').mockReturnValue({\r\n\t\t\t\ttotalMemory: 1000,\r\n\t\t\t\tfreeMemory: 600,\r\n\t\t\t\tusedMemory: 400,\r\n\t\t\t\tmemoryUsagePercentage: 0.4,\r\n\t\t\t\tprocessMemory: {\r\n\t\t\t\t\trss: 100,\r\n\t\t\t\t\theapTotal: 50,\r\n\t\t\t\t\theapUsed: 25,\r\n\t\t\t\t\texternal: 10,\r\n\t\t\t\t\tarrayBuffers: 5,\r\n\t\t\t\t},\r\n\t\t\t\theapUsagePercentage: 0.5,\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.memory).toHaveProperty('thresholds')\r\n\t\t\texpect(result.memory.thresholds).toHaveProperty('systemMemoryWarning')\r\n\t\t\texpect(result.memory.thresholds).toHaveProperty('systemMemoryCritical')\r\n\t\t\texpect(result.memory.thresholds).toHaveProperty('heapMemoryWarning')\r\n\t\t\texpect(result.memory.thresholds).toHaveProperty('heapMemoryCritical')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getCurrentMemoryInfo', () => {\r\n\t\tit('should return current memory information', () => {\r\n\t\t\tconst memoryInfo = indicator.getCurrentMemoryInfo()\r\n\r\n\t\t\texpect(memoryInfo).toHaveProperty('totalMemory')\r\n\t\t\texpect(memoryInfo).toHaveProperty('freeMemory')\r\n\t\t\texpect(memoryInfo).toHaveProperty('usedMemory')\r\n\t\t\texpect(memoryInfo).toHaveProperty('memoryUsagePercentage')\r\n\t\t\texpect(memoryInfo).toHaveProperty('processMemory')\r\n\t\t\texpect(memoryInfo).toHaveProperty('heapUsagePercentage')\r\n\r\n\t\t\texpect(typeof memoryInfo.totalMemory).toBe('number')\r\n\t\t\texpect(typeof memoryInfo.memoryUsagePercentage).toBe('number')\r\n\t\t\texpect(memoryInfo.memoryUsagePercentage).toBeGreaterThanOrEqual(0)\r\n\t\t\texpect(memoryInfo.memoryUsagePercentage).toBeLessThanOrEqual(1)\r\n\t\t})\r\n\r\n\t\tit('should format memory values in MB', () => {\r\n\t\t\tconst memoryInfo = indicator.getCurrentMemoryInfo()\r\n\r\n\t\t\t// Values should be in MB (reasonable range for a Node.js process)\r\n\t\t\texpect(memoryInfo.totalMemory).toBeGreaterThan(0)\r\n\t\t\texpect(memoryInfo.processMemory.rss).toBeGreaterThan(0)\r\n\t\t\texpect(memoryInfo.processMemory.heapTotal).toBeGreaterThan(0)\r\n\t\t\texpect(memoryInfo.processMemory.heapUsed).toBeGreaterThan(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('forceGarbageCollection', () => {\r\n\t\tit('should return false when gc is not available', () => {\r\n\t\t\tconst result = indicator.forceGarbageCollection()\r\n\t\t\texpect(result).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should return true when gc is available', () => {\r\n\t\t\t// Mock global.gc\r\n\t\t\tconst originalGc = globalThis.gc\r\n\t\t\tglobalThis.gc = vi.fn()\r\n\r\n\t\t\tconst result = indicator.forceGarbageCollection()\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(globalThis.gc).toHaveBeenCalled()\r\n\r\n\t\t\t// Restore original\r\n\t\t\tglobalThis.gc = originalGc\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDetails', () => {\r\n\t\tit('should return indicator details', () => {\r\n\t\t\tconst details = indicator.getDetails()\r\n\r\n\t\t\texpect(details).toHaveProperty('key')\r\n\t\t\texpect(details).toHaveProperty('options')\r\n\t\t\texpect(details).toHaveProperty('description')\r\n\t\t\texpect(details.key).toBe('memory')\r\n\t\t\texpect(details.description).toContain('Monitors system and process memory usage')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('timeout Handling', () => {\r\n\t\tit('should complete within timeout period', async () => {\r\n\t\t\tconst startTime = Date.now()\r\n\t\t\tawait indicator.isHealthy()\r\n\t\t\tconst duration = Date.now() - startTime\r\n\r\n\t\t\t// Should complete well within the 1 second timeout\r\n\t\t\texpect(duration).toBeLessThan(1000)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["MemoryHealthIndicator","Test","beforeEach","describe","expect","it","vi","indicator","module","createTestingModule","providers","compile","get","toBeDefined","key","toBe","spyOn","mockReturnValue","totalMemory","freeMemory","usedMemory","memoryUsagePercentage","processMemory","rss","heapTotal","heapUsed","external","arrayBuffers","heapUsagePercentage","result","isHealthy","toHaveProperty","memory","status","message","toContain","thresholds","memoryInfo","getCurrentMemoryInfo","toBeGreaterThanOrEqual","toBeLessThanOrEqual","toBeGreaterThan","forceGarbageCollection","originalGc","globalThis","gc","fn","toHaveBeenCalled","details","getDetails","description","startTime","Date","now","duration","toBeLessThan"],"mappings":"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"}