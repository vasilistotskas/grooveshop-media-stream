{"version":3,"sources":["../../../../../src/test/Health/integration/health-indicators.integration.spec.ts"],"sourcesContent":["import { CacheHealthIndicator } from '@microservice/Cache/indicators/cache-health.indicator'\r\nimport { RedisHealthIndicator } from '@microservice/Cache/indicators/redis-health.indicator'\r\nimport { HealthController } from '@microservice/Health/controllers/health.controller'\r\nimport { HealthModule } from '@microservice/Health/health.module'\r\nimport { DiskSpaceHealthIndicator } from '@microservice/Health/indicators/disk-space-health.indicator'\r\nimport { MemoryHealthIndicator } from '@microservice/Health/indicators/memory-health.indicator'\r\nimport { HttpHealthIndicator } from '@microservice/HTTP/indicators/http-health.indicator'\r\nimport { AlertingHealthIndicator } from '@microservice/Monitoring/indicators/alerting-health.indicator'\r\nimport { SystemHealthIndicator } from '@microservice/Monitoring/indicators/system-health.indicator'\r\nimport { JobQueueHealthIndicator } from '@microservice/Queue/indicators/job-queue-health.indicator'\r\nimport { StorageHealthIndicator } from '@microservice/Storage/indicators/storage-health.indicator'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { afterAll, beforeAll, describe, expect, it } from 'vitest'\n\r\ndescribe('health Indicators Integration', () => {\r\n\tlet module: TestingModule\r\n\tlet healthController: HealthController\r\n\r\n\tbeforeAll(async () => {\r\n\t\tmodule = await Test.createTestingModule({\r\n\t\t\timports: [HealthModule],\r\n\t\t}).compile()\r\n\r\n\t\thealthController = module.get<HealthController>(HealthController)\r\n\t})\r\n\r\n\tafterAll(async () => {\r\n\t\tawait module.close()\r\n\t})\r\n\r\n\tdescribe('health Indicator Registration', () => {\r\n\t\tit('should register DiskSpaceHealthIndicator', () => {\r\n\t\t\tconst indicator = module.get<DiskSpaceHealthIndicator>(DiskSpaceHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('disk_space')\r\n\t\t})\r\n\r\n\t\tit('should register MemoryHealthIndicator', () => {\r\n\t\t\tconst indicator = module.get<MemoryHealthIndicator>(MemoryHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('memory')\r\n\t\t})\r\n\r\n\t\tit('should register HttpHealthIndicator', () => {\r\n\t\t\tconst indicator = module.get<HttpHealthIndicator>(HttpHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('http')\r\n\t\t})\r\n\r\n\t\tit('should register CacheHealthIndicator', () => {\r\n\t\t\tconst indicator = module.get<CacheHealthIndicator>(CacheHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('cache')\r\n\t\t})\r\n\r\n\t\tit('should register RedisHealthIndicator', () => {\r\n\t\t\tconst indicator = module.get<RedisHealthIndicator>(RedisHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('redis')\r\n\t\t})\r\n\r\n\t\tit('should register AlertingHealthIndicator', () => {\r\n\t\t\tconst indicator = module.get<AlertingHealthIndicator>(AlertingHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('alerting')\r\n\t\t})\r\n\r\n\t\tit('should register SystemHealthIndicator', () => {\r\n\t\t\tconst indicator = module.get<SystemHealthIndicator>(SystemHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('system')\r\n\t\t})\r\n\r\n\t\tit('should register JobQueueHealthIndicator', () => {\r\n\t\t\tconst indicator = module.get<JobQueueHealthIndicator>(JobQueueHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('job-queue')\r\n\t\t})\r\n\r\n\t\tit('should register StorageHealthIndicator', () => {\r\n\t\t\tconst indicator = module.get<StorageHealthIndicator>(StorageHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\t\t\texpect(indicator.key).toBe('storage')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('health Check Execution', () => {\r\n\t\tit('should execute disk space health check', async () => {\r\n\t\t\tconst indicator = module.get<DiskSpaceHealthIndicator>(DiskSpaceHealthIndicator)\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\t\texpect(result).toBeDefined()\r\n\t\t\t}\n\t\t\tcatch (error) {\r\n\t\t\t\t// Health checks might fail in test environment\r\n\t\t\t\texpect(error).toBeDefined()\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should execute memory health check', async () => {\r\n\t\t\tconst indicator = module.get<MemoryHealthIndicator>(MemoryHealthIndicator)\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\t\texpect(result).toBeDefined()\r\n\t\t\t}\n\t\t\tcatch (error) {\r\n\t\t\t\t// Health checks might fail in test environment\r\n\t\t\t\texpect(error).toBeDefined()\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should execute cache health check', async () => {\r\n\t\t\tconst indicator = module.get<CacheHealthIndicator>(CacheHealthIndicator)\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\t\texpect(result).toBeDefined()\r\n\t\t\t}\n\t\t\tcatch (error) {\r\n\t\t\t\t// Health checks might fail in test environment\r\n\t\t\t\texpect(error).toBeDefined()\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should execute system health check', async () => {\r\n\t\t\tconst indicator = module.get<SystemHealthIndicator>(SystemHealthIndicator)\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\t\texpect(result).toBeDefined()\r\n\t\t\t}\n\t\t\tcatch (error) {\r\n\t\t\t\t// Health checks might fail in test environment\r\n\t\t\t\texpect(error).toBeDefined()\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('health Controller Integration', () => {\r\n\t\tit('should have health controller available', () => {\r\n\t\t\texpect(healthController).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should execute comprehensive health check', async () => {\r\n\t\t\t// This tests that all health indicators are properly integrated\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await healthController.check()\r\n\t\t\t\texpect(result).toBeDefined()\r\n\t\t\t\texpect(result.status).toBeDefined()\r\n\t\t\t\texpect(result.info).toBeDefined()\r\n\t\t\t}\n\t\t\tcatch (error) {\r\n\t\t\t\t// Health checks might fail in test environment, but should not throw module errors\r\n\t\t\t\texpect(error).toBeDefined()\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tit('should provide detailed health information', async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst result = await healthController.getDetailedHealth()\r\n\t\t\t\texpect(result).toBeDefined()\r\n\t\t\t}\n\t\t\tcatch (error) {\r\n\t\t\t\t// Detailed health might fail in test environment\r\n\t\t\t\texpect(error).toBeDefined()\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('health Indicator Dependencies', () => {\r\n\t\tit('should resolve dependencies for cache health indicator', () => {\r\n\t\t\tconst indicator = module.get<CacheHealthIndicator>(CacheHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\r\n\t\t\t// Should not throw when checking dependencies\r\n\t\t\texpect(() => indicator.key).not.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should resolve dependencies for redis health indicator', () => {\r\n\t\t\tconst indicator = module.get<RedisHealthIndicator>(RedisHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\r\n\t\t\t// Should not throw when checking dependencies\r\n\t\t\texpect(() => indicator.key).not.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should resolve dependencies for queue health indicator', () => {\r\n\t\t\tconst indicator = module.get<JobQueueHealthIndicator>(JobQueueHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\r\n\t\t\t// Should not throw when checking dependencies\r\n\t\t\texpect(() => indicator.key).not.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should resolve dependencies for storage health indicator', () => {\r\n\t\t\tconst indicator = module.get<StorageHealthIndicator>(StorageHealthIndicator)\r\n\t\t\texpect(indicator).toBeDefined()\r\n\r\n\t\t\t// Should not throw when checking dependencies\r\n\t\t\texpect(() => indicator.key).not.toThrow()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('health Check Error Handling', () => {\r\n\t\tit('should handle individual health check failures gracefully', async () => {\r\n\t\t\t// Test that if one health check fails, others still work\r\n\t\t\tconst indicators = [\r\n\t\t\t\tmodule.get<DiskSpaceHealthIndicator>(DiskSpaceHealthIndicator),\r\n\t\t\t\tmodule.get<MemoryHealthIndicator>(MemoryHealthIndicator),\r\n\t\t\t\tmodule.get<SystemHealthIndicator>(SystemHealthIndicator),\r\n\t\t\t]\r\n\r\n\t\t\tfor (const indicator of indicators) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst result = await indicator.isHealthy()\r\n\t\t\t\t\texpect(result).toBeDefined()\r\n\t\t\t\t}\n\t\t\t\tcatch (error) {\r\n\t\t\t\t\t// Individual health checks might fail, but should be handled\r\n\t\t\t\t\texpect(error).toBeDefined()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('module Export Verification', () => {\r\n\t\tit('should export all health indicators', () => {\r\n\t\t\t// Verify that all health indicators are properly exported from the module\r\n\t\t\tconst indicators = [\r\n\t\t\t\tDiskSpaceHealthIndicator,\r\n\t\t\t\tMemoryHealthIndicator,\r\n\t\t\t\tHttpHealthIndicator,\r\n\t\t\t\tCacheHealthIndicator,\r\n\t\t\t\tRedisHealthIndicator,\r\n\t\t\t\tAlertingHealthIndicator,\r\n\t\t\t\tSystemHealthIndicator,\r\n\t\t\t\tJobQueueHealthIndicator,\r\n\t\t\t\tStorageHealthIndicator,\r\n\t\t\t]\r\n\r\n\t\t\tindicators.forEach((IndicatorClass) => {\r\n\t\t\t\tconst indicator = module.get(IndicatorClass)\r\n\t\t\t\texpect(indicator).toBeDefined()\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n})\n"],"names":["CacheHealthIndicator","RedisHealthIndicator","HealthController","HealthModule","DiskSpaceHealthIndicator","MemoryHealthIndicator","HttpHealthIndicator","AlertingHealthIndicator","SystemHealthIndicator","JobQueueHealthIndicator","StorageHealthIndicator","Test","afterAll","beforeAll","describe","expect","it","module","healthController","createTestingModule","imports","compile","get","close","indicator","toBeDefined","key","toBe","result","isHealthy","error","check","status","info","getDetailedHealth","not","toThrow","indicators","forEach","IndicatorClass"],"mappings":"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"}