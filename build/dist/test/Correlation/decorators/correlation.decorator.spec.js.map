{"version":3,"sources":["../../../../../src/test/Correlation/decorators/correlation.decorator.spec.ts"],"sourcesContent":["import type { ExecutionContext } from '@nestjs/common'\r\nimport type { MockedClass, MockedObject } from 'vitest'\r\n\r\n// Import decorators after mocking\r\nimport { CorrelationId, RequestContext } from '@microservice/Correlation/decorators/correlation.decorator'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock createParamDecorator to return the factory function directly\r\nvi.mock('@nestjs/common', async () => {\r\n\tconst actual = await vi.importActual('@nestjs/common')\r\n\treturn {\r\n\t\t...actual,\r\n\t\tcreateParamDecorator: (factory: any) => factory,\r\n\t}\r\n})\r\n\r\n// Mock the CorrelationService\r\nvi.mock('@microservice/Correlation/services/correlation.service')\r\n\r\ndescribe('correlation Decorators', () => {\r\n\tlet mockCorrelationService: MockedObject<CorrelationService>\r\n\tlet mockExecutionContext: MockedObject<ExecutionContext>\r\n\r\n\tbeforeEach(() => {\r\n\t\t// Create mock execution context\r\n\t\tmockExecutionContext = {\r\n\t\t\tswitchToHttp: vi.fn(),\r\n\t\t\tgetArgs: vi.fn(),\r\n\t\t\tgetArgByIndex: vi.fn(),\r\n\t\t\tswitchToRpc: vi.fn(),\r\n\t\t\tswitchToWs: vi.fn(),\r\n\t\t\tgetType: vi.fn(),\r\n\t\t\tgetClass: vi.fn(),\r\n\t\t\tgetHandler: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\t// Mock CorrelationService constructor and methods\r\n\t\tmockCorrelationService = {\r\n\t\t\tgetCorrelationId: vi.fn(),\r\n\t\t\tgetContext: vi.fn(),\r\n\t\t\tsetCorrelationId: vi.fn(),\r\n\t\t\tgenerateCorrelationId: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\t;(CorrelationService as MockedClass<typeof CorrelationService>).mockImplementation(\r\n\t\t\t() => mockCorrelationService,\r\n\t\t)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('correlationId decorator', () => {\r\n\t\tit('should return correlation ID from service', () => {\r\n\t\t\tconst expectedCorrelationId = 'test-correlation-id-123'\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue(expectedCorrelationId)\r\n\r\n\t\t\t// Execute the decorator function directly\r\n\t\t\tconst result = (CorrelationId as any)(undefined, mockExecutionContext)\r\n\r\n\t\t\texpect(result).toBe(expectedCorrelationId)\r\n\t\t\texpect(CorrelationService).toHaveBeenCalledTimes(1)\r\n\t\t\texpect(mockCorrelationService.getCorrelationId).toHaveBeenCalledTimes(1)\r\n\t\t})\r\n\r\n\t\tit('should return null when no correlation ID exists', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue(null)\r\n\r\n\t\t\tconst result = (CorrelationId as any)(undefined, mockExecutionContext)\r\n\r\n\t\t\texpect(result).toBeNull()\r\n\t\t\texpect(mockCorrelationService.getCorrelationId).toHaveBeenCalledTimes(1)\r\n\t\t})\r\n\r\n\t\tit('should create new CorrelationService instance each time', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-id')\r\n\r\n\t\t\t// Call multiple times\r\n\t\t\t;(CorrelationId as any)(undefined, mockExecutionContext)\r\n\t\t\t;(CorrelationId as any)(undefined, mockExecutionContext)\r\n\r\n\t\t\texpect(CorrelationService).toHaveBeenCalledTimes(2)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('requestContext decorator', () => {\r\n\t\tit('should return request context from service', () => {\r\n\t\t\tconst expectedContext = {\r\n\t\t\t\tcorrelationId: 'test-correlation-id',\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tclientIp: '127.0.0.1',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl: '/test',\r\n\t\t\t\tstartTime: BigInt(Date.now()),\r\n\t\t\t}\r\n\t\t\tmockCorrelationService.getContext.mockReturnValue(expectedContext)\r\n\r\n\t\t\tconst result = (RequestContext as any)(undefined, mockExecutionContext)\r\n\r\n\t\t\texpect(result).toBe(expectedContext)\r\n\t\t\texpect(CorrelationService).toHaveBeenCalledTimes(1)\r\n\t\t\texpect(mockCorrelationService.getContext).toHaveBeenCalledTimes(1)\r\n\t\t})\r\n\r\n\t\tit('should return undefined when no context exists', () => {\r\n\t\t\tmockCorrelationService.getContext.mockReturnValue(undefined as any)\r\n\r\n\t\t\tconst result = (RequestContext as any)(undefined, mockExecutionContext)\r\n\r\n\t\t\texpect(result).toBeUndefined()\r\n\t\t\texpect(mockCorrelationService.getContext).toHaveBeenCalledTimes(1)\r\n\t\t})\r\n\r\n\t\tit('should create new CorrelationService instance each time', () => {\r\n\t\t\tmockCorrelationService.getContext.mockReturnValue({\r\n\t\t\t\tcorrelationId: 'test',\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tclientIp: '127.0.0.1',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl: '/test',\r\n\t\t\t\tstartTime: BigInt(Date.now()),\r\n\t\t\t})\r\n\r\n\t\t\t// Call multiple times\r\n\t\t\t;(RequestContext as any)(undefined, mockExecutionContext)\r\n\t\t\t;(RequestContext as any)(undefined, mockExecutionContext)\r\n\r\n\t\t\texpect(CorrelationService).toHaveBeenCalledTimes(2)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('decorator integration', () => {\r\n\t\tit('should work with different execution contexts', () => {\r\n\t\t\tconst httpContext = { ...mockExecutionContext }\r\n\t\t\tconst rpcContext = { ...mockExecutionContext }\r\n\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('http-id')\r\n\r\n\t\t\tconst httpResult = (CorrelationId as any)(undefined, httpContext)\r\n\t\t\tconst rpcResult = (CorrelationId as any)(undefined, rpcContext)\r\n\r\n\t\t\texpect(httpResult).toBe('http-id')\r\n\t\t\texpect(rpcResult).toBe('http-id')\r\n\t\t\texpect(CorrelationService).toHaveBeenCalledTimes(2)\r\n\t\t})\r\n\r\n\t\tit('should ignore data parameter', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-id')\r\n\r\n\t\t\t// Pass different data values\r\n\t\t\tconst result1 = (CorrelationId as any)('some-data', mockExecutionContext)\r\n\t\t\tconst result2 = (CorrelationId as any)({ key: 'value' }, mockExecutionContext)\r\n\t\t\tconst result3 = (CorrelationId as any)(null, mockExecutionContext)\r\n\r\n\t\t\texpect(result1).toBe('test-id')\r\n\t\t\texpect(result2).toBe('test-id')\r\n\t\t\texpect(result3).toBe('test-id')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error handling', () => {\r\n\t\tit('should handle CorrelationService errors gracefully', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Service error')\r\n\t\t\t})\r\n\r\n\t\t\texpect(() => (CorrelationId as any)(undefined, mockExecutionContext)).toThrow('Service error')\r\n\t\t})\r\n\r\n\t\tit('should handle context service errors gracefully', () => {\r\n\t\t\tmockCorrelationService.getContext.mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Context error')\r\n\t\t\t})\r\n\r\n\t\t\texpect(() => (RequestContext as any)(undefined, mockExecutionContext)).toThrow('Context error')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CorrelationId","RequestContext","CorrelationService","afterEach","beforeEach","describe","expect","it","vi","mock","actual","importActual","createParamDecorator","factory","mockCorrelationService","mockExecutionContext","switchToHttp","fn","getArgs","getArgByIndex","switchToRpc","switchToWs","getType","getClass","getHandler","getCorrelationId","getContext","setCorrelationId","generateCorrelationId","mockImplementation","clearAllMocks","expectedCorrelationId","mockReturnValue","result","undefined","toBe","toHaveBeenCalledTimes","toBeNull","expectedContext","correlationId","timestamp","Date","now","clientIp","method","url","startTime","BigInt","toBeUndefined","httpContext","rpcContext","httpResult","rpcResult","result1","result2","key","result3","Error","toThrow"],"mappings":"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"}