{"version":3,"sources":["../../../../../src/test/Correlation/services/correlation.service.spec.ts"],"sourcesContent":["import type { RequestContext } from '@microservice/Correlation/interfaces/correlation.interface'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { afterEach, beforeEach, describe, expect, it } from 'vitest'\n\r\ndescribe('correlationService', () => {\r\n\tlet service: CorrelationService\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [CorrelationService],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<CorrelationService>(CorrelationService)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tservice.clearContext()\r\n\t})\r\n\r\n\tdescribe('generateCorrelationId', () => {\r\n\t\tit('should generate a valid UUID v4', () => {\r\n\t\t\tconst correlationId = service.generateCorrelationId()\r\n\r\n\t\t\texpect(correlationId).toBeDefined()\r\n\t\t\texpect(typeof correlationId).toBe('string')\r\n\t\t\texpect(correlationId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)\r\n\t\t})\r\n\r\n\t\tit('should generate unique correlation IDs', () => {\r\n\t\t\tconst id1 = service.generateCorrelationId()\r\n\t\t\tconst id2 = service.generateCorrelationId()\r\n\r\n\t\t\texpect(id1).not.toBe(id2)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('context management', () => {\r\n\t\tconst mockContext: RequestContext = {\r\n\t\t\tcorrelationId: 'test-correlation-id',\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tclientIp: '127.0.0.1',\r\n\t\t\tuserAgent: 'test-agent',\r\n\t\t\tmethod: 'GET',\r\n\t\t\turl: '/test',\r\n\t\t\tstartTime: BigInt(Date.now() * 1000000),\r\n\t\t}\r\n\r\n\t\tit('should set and get context', () => {\r\n\t\t\tservice.setContext(mockContext)\r\n\t\t\tconst retrievedContext = service.getContext()\r\n\r\n\t\t\texpect(retrievedContext).toEqual(mockContext)\r\n\t\t})\r\n\r\n\t\tit('should return null when no context is set', () => {\r\n\t\t\tconst context = service.getContext()\r\n\t\t\texpect(context).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should get correlation ID from context', () => {\r\n\t\t\tservice.setContext(mockContext)\r\n\t\t\tconst correlationId = service.getCorrelationId()\r\n\r\n\t\t\texpect(correlationId).toBe(mockContext.correlationId)\r\n\t\t})\r\n\r\n\t\tit('should return null correlation ID when no context', () => {\r\n\t\t\tconst correlationId = service.getCorrelationId()\r\n\t\t\texpect(correlationId).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should update context with partial data', () => {\r\n\t\t\tservice.setContext(mockContext)\r\n\r\n\t\t\tconst updates = { userId: 'user123' }\r\n\t\t\tservice.updateContext(updates)\r\n\r\n\t\t\tconst updatedContext = service.getContext()\r\n\t\t\texpect(updatedContext).toEqual({ ...mockContext, ...updates })\r\n\t\t})\r\n\r\n\t\tit('should not update context when no context exists', () => {\r\n\t\t\tconst updates = { userId: 'user123' }\r\n\t\t\tservice.updateContext(updates)\r\n\r\n\t\t\tconst context = service.getContext()\r\n\t\t\texpect(context).toBeNull()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('runWithContext', () => {\r\n\t\tconst mockContext: RequestContext = {\r\n\t\t\tcorrelationId: 'test-correlation-id',\r\n\t\t\ttimestamp: Date.now(),\r\n\t\t\tclientIp: '127.0.0.1',\r\n\t\t\tmethod: 'GET',\r\n\t\t\turl: '/test',\r\n\t\t\tstartTime: BigInt(Date.now() * 1000000),\r\n\t\t}\r\n\r\n\t\tit('should run function within correlation context', () => {\r\n\t\t\tlet contextInFunction: RequestContext | null = null\r\n\r\n\t\t\tconst result = service.runWithContext(mockContext, () => {\r\n\t\t\t\tcontextInFunction = service.getContext()\r\n\t\t\t\treturn 'test-result'\r\n\t\t\t})\r\n\r\n\t\t\texpect(result).toBe('test-result')\r\n\t\t\texpect(contextInFunction).toEqual(mockContext)\r\n\t\t})\r\n\r\n\t\tit('should isolate context within function scope', () => {\r\n\t\t\tconst result = service.runWithContext(mockContext, () => {\r\n\t\t\t\treturn service.getCorrelationId()\r\n\t\t\t})\r\n\r\n\t\t\texpect(result).toBe(mockContext.correlationId)\r\n\t\t\texpect(service.getContext()).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should handle async functions', async () => {\r\n\t\t\tconst asyncFunction = async () => {\r\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 10))\r\n\t\t\t\treturn service.getCorrelationId()\r\n\t\t\t}\r\n\r\n\t\t\tconst result = service.runWithContext(mockContext, asyncFunction)\r\n\t\t\texpect(await result).toBe(mockContext.correlationId)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('clearContext', () => {\r\n\t\tit('should clear existing context', () => {\r\n\t\t\tconst mockContext: RequestContext = {\r\n\t\t\t\tcorrelationId: 'test-correlation-id',\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tclientIp: '127.0.0.1',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl: '/test',\r\n\t\t\t\tstartTime: BigInt(Date.now() * 1000000),\r\n\t\t\t}\r\n\r\n\t\t\tservice.setContext(mockContext)\r\n\t\t\texpect(service.getContext()).toEqual(mockContext)\r\n\r\n\t\t\tservice.clearContext()\r\n\t\t\texpect(service.getContext()).toBeNull()\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CorrelationService","Test","afterEach","beforeEach","describe","expect","it","service","module","createTestingModule","providers","compile","get","clearContext","correlationId","generateCorrelationId","toBeDefined","toBe","toMatch","id1","id2","not","mockContext","timestamp","Date","now","clientIp","userAgent","method","url","startTime","BigInt","setContext","retrievedContext","getContext","toEqual","context","toBeNull","getCorrelationId","updates","userId","updateContext","updatedContext","contextInFunction","result","runWithContext","asyncFunction","Promise","resolve","setTimeout"],"mappings":"AACA,SAASA,kBAAkB,QAAQ,mEAAwD;AAC3F,SAASC,IAAI,QAAuB,kBAAiB;AACrD,SAASC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAQ;AAEpEF,SAAS,sBAAsB;IAC9B,IAAIG;IAEJJ,WAAW;QACV,MAAMK,SAAwB,MAAMP,KAAKQ,mBAAmB,CAAC;YAC5DC,WAAW;gBAACV;aAAmB;QAChC,GAAGW,OAAO;QAEVJ,UAAUC,OAAOI,GAAG,CAAqBZ;IAC1C;IAEAE,UAAU;QACTK,QAAQM,YAAY;IACrB;IAEAT,SAAS,yBAAyB;QACjCE,GAAG,mCAAmC;YACrC,MAAMQ,gBAAgBP,QAAQQ,qBAAqB;YAEnDV,OAAOS,eAAeE,WAAW;YACjCX,OAAO,OAAOS,eAAeG,IAAI,CAAC;YAClCZ,OAAOS,eAAeI,OAAO,CAAC;QAC/B;QAEAZ,GAAG,0CAA0C;YAC5C,MAAMa,MAAMZ,QAAQQ,qBAAqB;YACzC,MAAMK,MAAMb,QAAQQ,qBAAqB;YAEzCV,OAAOc,KAAKE,GAAG,CAACJ,IAAI,CAACG;QACtB;IACD;IAEAhB,SAAS,sBAAsB;QAC9B,MAAMkB,cAA8B;YACnCR,eAAe;YACfS,WAAWC,KAAKC,GAAG;YACnBC,UAAU;YACVC,WAAW;YACXC,QAAQ;YACRC,KAAK;YACLC,WAAWC,OAAOP,KAAKC,GAAG,KAAK;QAChC;QAEAnB,GAAG,8BAA8B;YAChCC,QAAQyB,UAAU,CAACV;YACnB,MAAMW,mBAAmB1B,QAAQ2B,UAAU;YAE3C7B,OAAO4B,kBAAkBE,OAAO,CAACb;QAClC;QAEAhB,GAAG,6CAA6C;YAC/C,MAAM8B,UAAU7B,QAAQ2B,UAAU;YAClC7B,OAAO+B,SAASC,QAAQ;QACzB;QAEA/B,GAAG,0CAA0C;YAC5CC,QAAQyB,UAAU,CAACV;YACnB,MAAMR,gBAAgBP,QAAQ+B,gBAAgB;YAE9CjC,OAAOS,eAAeG,IAAI,CAACK,YAAYR,aAAa;QACrD;QAEAR,GAAG,qDAAqD;YACvD,MAAMQ,gBAAgBP,QAAQ+B,gBAAgB;YAC9CjC,OAAOS,eAAeuB,QAAQ;QAC/B;QAEA/B,GAAG,2CAA2C;YAC7CC,QAAQyB,UAAU,CAACV;YAEnB,MAAMiB,UAAU;gBAAEC,QAAQ;YAAU;YACpCjC,QAAQkC,aAAa,CAACF;YAEtB,MAAMG,iBAAiBnC,QAAQ2B,UAAU;YACzC7B,OAAOqC,gBAAgBP,OAAO,CAAC;gBAAE,GAAGb,WAAW;gBAAE,GAAGiB,OAAO;YAAC;QAC7D;QAEAjC,GAAG,oDAAoD;YACtD,MAAMiC,UAAU;gBAAEC,QAAQ;YAAU;YACpCjC,QAAQkC,aAAa,CAACF;YAEtB,MAAMH,UAAU7B,QAAQ2B,UAAU;YAClC7B,OAAO+B,SAASC,QAAQ;QACzB;IACD;IAEAjC,SAAS,kBAAkB;QAC1B,MAAMkB,cAA8B;YACnCR,eAAe;YACfS,WAAWC,KAAKC,GAAG;YACnBC,UAAU;YACVE,QAAQ;YACRC,KAAK;YACLC,WAAWC,OAAOP,KAAKC,GAAG,KAAK;QAChC;QAEAnB,GAAG,kDAAkD;YACpD,IAAIqC,oBAA2C;YAE/C,MAAMC,SAASrC,QAAQsC,cAAc,CAACvB,aAAa;gBAClDqB,oBAAoBpC,QAAQ2B,UAAU;gBACtC,OAAO;YACR;YAEA7B,OAAOuC,QAAQ3B,IAAI,CAAC;YACpBZ,OAAOsC,mBAAmBR,OAAO,CAACb;QACnC;QAEAhB,GAAG,gDAAgD;YAClD,MAAMsC,SAASrC,QAAQsC,cAAc,CAACvB,aAAa;gBAClD,OAAOf,QAAQ+B,gBAAgB;YAChC;YAEAjC,OAAOuC,QAAQ3B,IAAI,CAACK,YAAYR,aAAa;YAC7CT,OAAOE,QAAQ2B,UAAU,IAAIG,QAAQ;QACtC;QAEA/B,GAAG,iCAAiC;YACnC,MAAMwC,gBAAgB;gBACrB,MAAM,IAAIC,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;gBACjD,OAAOzC,QAAQ+B,gBAAgB;YAChC;YAEA,MAAMM,SAASrC,QAAQsC,cAAc,CAACvB,aAAawB;YACnDzC,OAAO,MAAMuC,QAAQ3B,IAAI,CAACK,YAAYR,aAAa;QACpD;IACD;IAEAV,SAAS,gBAAgB;QACxBE,GAAG,iCAAiC;YACnC,MAAMgB,cAA8B;gBACnCR,eAAe;gBACfS,WAAWC,KAAKC,GAAG;gBACnBC,UAAU;gBACVE,QAAQ;gBACRC,KAAK;gBACLC,WAAWC,OAAOP,KAAKC,GAAG,KAAK;YAChC;YAEAlB,QAAQyB,UAAU,CAACV;YACnBjB,OAAOE,QAAQ2B,UAAU,IAAIC,OAAO,CAACb;YAErCf,QAAQM,YAAY;YACpBR,OAAOE,QAAQ2B,UAAU,IAAIG,QAAQ;QACtC;IACD;AACD"}