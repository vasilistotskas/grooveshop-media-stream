{"version":3,"sources":["../../../../../src/test/Correlation/utils/performance-tracker.util.spec.ts"],"sourcesContent":["import type { Mock } from 'vitest'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { PerformanceTracker } from '@microservice/Correlation/utils/performance-tracker.util'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock the CorrelatedLogger\r\nvi.mock('@microservice/Correlation/utils/logger.util', () => ({\r\n\tCorrelatedLogger: {\r\n\t\tdebug: vi.fn(),\r\n\t\twarn: vi.fn(),\r\n\t\tlog: vi.fn(),\r\n\t},\r\n}))\r\n\r\n// Mock the CorrelationService to return a consistent correlation ID\r\nconst mockCorrelationService = {\r\n\tsetContext: vi.fn(),\r\n\tgetContext: vi.fn(),\r\n\tgetCorrelationId: vi.fn().mockReturnValue('test-correlation-id'),\r\n\tupdateContext: vi.fn(),\r\n\tclearContext: vi.fn(),\r\n}\r\n\r\n// Mock the CorrelationService class\r\nvi.mock('@microservice/Correlation/services/correlation.service', () => {\r\n\treturn {\r\n\t\tCorrelationService: vi.fn().mockImplementation(() => mockCorrelationService),\r\n\t}\r\n})\r\n\r\n// Ensure the mock is applied before importing PerformanceTracker\r\nvi.doMock('@microservice/Correlation/services/correlation.service', () => {\r\n\treturn {\r\n\t\tCorrelationService: vi.fn().mockImplementation(() => mockCorrelationService),\r\n\t}\r\n})\r\n\r\ndescribe('performanceTracker', () => {\r\n\tlet correlationService: CorrelationService\r\n\r\n\tbeforeEach(() => {\r\n\t\t// Reset all mocks\r\n\t\tvi.clearAllMocks()\r\n\r\n\t\t// Ensure the mock returns the correlation ID consistently\r\n\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t// Clear any existing phases by directly accessing the private phases map\r\n\t\t;(PerformanceTracker as any).phases = new Map()\r\n\r\n\t\t// Create correlation service instance\r\n\t\tcorrelationService = new CorrelationService()\r\n\r\n\t\t// Verify the mock is working\r\n\t\texpect(correlationService.getCorrelationId()).toBe('test-correlation-id')\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\t// Clear phases directly since clearPhases() also depends on correlation ID\r\n\t\t;(PerformanceTracker as any).phases = new Map()\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('phase Tracking', () => {\r\n\t\tit('should start and end a performance phase', () => {\r\n\t\t\tPerformanceTracker.startPhase('test-phase')\r\n\r\n\t\t\tconst phases = PerformanceTracker.getPhases()\r\n\t\t\texpect(phases).toHaveLength(1)\r\n\t\t\texpect(phases[0].name).toBe('test-phase')\r\n\t\t\texpect(phases[0].startTime).toBeDefined()\r\n\t\t\texpect(phases[0].endTime).toBeUndefined()\r\n\r\n\t\t\tconst duration = PerformanceTracker.endPhase('test-phase')\r\n\r\n\t\t\texpect(duration).toBeGreaterThan(0)\r\n\t\t\texpect(phases[0].endTime).toBeDefined()\r\n\t\t\texpect(phases[0].duration).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should handle phases with metadata', () => {\r\n\t\t\tconst metadata = { operation: 'image-resize', size: '1024x768' }\r\n\r\n\t\t\tPerformanceTracker.startPhase('resize-phase', metadata)\r\n\t\t\tPerformanceTracker.endPhase('resize-phase', { result: 'success' })\r\n\r\n\t\t\tconst phases = PerformanceTracker.getPhases()\r\n\t\t\texpect(phases[0].metadata).toEqual({\r\n\t\t\t\toperation: 'image-resize',\r\n\t\t\t\tsize: '1024x768',\r\n\t\t\t\tresult: 'success',\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should handle multiple phases', () => {\r\n\t\t\tPerformanceTracker.startPhase('phase-1')\r\n\t\t\tPerformanceTracker.startPhase('phase-2')\r\n\t\t\tPerformanceTracker.endPhase('phase-1')\r\n\t\t\tPerformanceTracker.endPhase('phase-2')\r\n\r\n\t\t\tconst phases = PerformanceTracker.getPhases()\r\n\t\t\texpect(phases).toHaveLength(2)\r\n\t\t\texpect(phases.every(p => p.duration !== undefined)).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should handle nested phases with same name', () => {\r\n\t\t\tPerformanceTracker.startPhase('nested-phase')\r\n\t\t\tPerformanceTracker.startPhase('nested-phase')\r\n\r\n\t\t\tconst duration1 = PerformanceTracker.endPhase('nested-phase')\r\n\t\t\tconst duration2 = PerformanceTracker.endPhase('nested-phase')\r\n\r\n\t\t\texpect(duration1).toBeGreaterThan(0)\r\n\t\t\texpect(duration2).toBeGreaterThan(0)\r\n\r\n\t\t\tconst phases = PerformanceTracker.getPhases()\r\n\t\t\texpect(phases).toHaveLength(2)\r\n\t\t\texpect(phases.every(p => p.name === 'nested-phase')).toBe(true)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('performance Summary', () => {\r\n\t\tit('should provide accurate summary', () => {\r\n\t\t\tPerformanceTracker.startPhase('phase-1')\r\n\t\t\tPerformanceTracker.startPhase('phase-2')\r\n\t\t\tPerformanceTracker.endPhase('phase-1')\r\n\t\t\t// Leave phase-2 incomplete\r\n\r\n\t\t\tconst summary = PerformanceTracker.getSummary()\r\n\r\n\t\t\texpect(summary.totalPhases).toBe(2)\r\n\t\t\texpect(summary.completedPhases).toBe(1)\r\n\t\t\texpect(summary.totalDuration).toBeGreaterThan(0)\r\n\t\t\texpect(summary.slowestPhase?.name).toBe('phase-1')\r\n\t\t})\r\n\r\n\t\tit('should return empty summary when no phases exist', () => {\r\n\t\t\tconst summary = PerformanceTracker.getSummary()\r\n\r\n\t\t\texpect(summary.totalPhases).toBe(0)\r\n\t\t\texpect(summary.completedPhases).toBe(0)\r\n\t\t\texpect(summary.totalDuration).toBe(0)\r\n\t\t\texpect(summary.slowestPhase).toBeUndefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('measure Function', () => {\r\n\t\tit('should measure synchronous function execution', async () => {\r\n\t\t\tconst testFn = () => {\r\n\t\t\t\t// Simulate some work\r\n\t\t\t\tconst start = Date.now()\r\n\t\t\t\twhile (Date.now() - start < 10) {\r\n\t\t\t\t\t// Busy wait for 10ms\r\n\t\t\t\t}\r\n\t\t\t\treturn 'result'\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await PerformanceTracker.measure('sync-test', testFn)\r\n\r\n\t\t\texpect(result).toBe('result')\r\n\r\n\t\t\tconst phases = PerformanceTracker.getPhases()\r\n\t\t\texpect(phases).toHaveLength(1)\r\n\t\t\texpect(phases[0].name).toBe('sync-test')\r\n\t\t\texpect(phases[0].duration).toBeGreaterThan(0)\r\n\t\t\texpect(phases[0].metadata?.success).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should measure asynchronous function execution', async () => {\r\n\t\t\tconst testFn = async () => {\r\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 10))\r\n\t\t\t\treturn 'async-result'\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await PerformanceTracker.measure('async-test', testFn)\r\n\r\n\t\t\texpect(result).toBe('async-result')\r\n\r\n\t\t\tconst phases = PerformanceTracker.getPhases()\r\n\t\t\texpect(phases).toHaveLength(1)\r\n\t\t\texpect(phases[0].name).toBe('async-test')\r\n\t\t\texpect(phases[0].duration).toBeGreaterThan(0)\r\n\t\t\texpect(phases[0].metadata?.success).toBe(true)\r\n\t\t})\r\n\r\n\t\tit('should handle function errors', async () => {\r\n\t\t\tconst testFn = () => {\r\n\t\t\t\tthrow new Error('Test error')\r\n\t\t\t}\r\n\r\n\t\t\tawait expect(\r\n\t\t\t\tPerformanceTracker.measure('error-test', testFn),\r\n\t\t\t).rejects.toThrow('Test error')\r\n\r\n\t\t\tconst phases = PerformanceTracker.getPhases()\r\n\t\t\texpect(phases).toHaveLength(1)\r\n\t\t\texpect(phases[0].name).toBe('error-test')\r\n\t\t\texpect(phases[0].duration).toBeGreaterThan(0)\r\n\t\t\texpect(phases[0].metadata?.success).toBe(false)\r\n\t\t\texpect(phases[0].metadata?.error).toBe('Test error')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('method Decorator', () => {\r\n\t\tit('should create a working method decorator', async () => {\r\n\t\t\tclass TestClass {\r\n\t\t\t\t@PerformanceTracker.measureMethod('decorated-method')\r\n\t\t\t\tasync testMethod(value: string): Promise<string> {\r\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 10))\r\n\t\t\t\t\treturn `processed-${value}`\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst instance = new TestClass()\r\n\t\t\tconst result = await instance.testMethod('test')\r\n\r\n\t\t\texpect(result).toBe('processed-test')\r\n\r\n\t\t\tconst phases = PerformanceTracker.getPhases()\r\n\t\t\texpect(phases).toHaveLength(1)\r\n\t\t\texpect(phases[0].name).toBe('decorated-method')\r\n\t\t\texpect(phases[0].duration).toBeGreaterThan(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('clear Phases', () => {\r\n\t\tit('should clear all phases for current correlation', () => {\r\n\t\t\tPerformanceTracker.startPhase('phase-1')\r\n\t\t\tPerformanceTracker.startPhase('phase-2')\r\n\r\n\t\t\texpect(PerformanceTracker.getPhases()).toHaveLength(2)\r\n\r\n\t\t\tPerformanceTracker.clearPhases()\r\n\r\n\t\t\texpect(PerformanceTracker.getPhases()).toHaveLength(0)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('edge Cases', () => {\r\n\t\tit('should handle missing correlation context gracefully', () => {\r\n\t\t\t// Clear correlation context and mock to return null\r\n\t\t\tcorrelationService.clearContext()\r\n\t\t\t;(correlationService.getCorrelationId as unknown as Mock).mockReturnValue(null)\r\n\t\t\tif (mockCorrelationService) {\r\n\t\t\t\t;(mockCorrelationService.getCorrelationId as unknown as Mock).mockReturnValue(null)\r\n\t\t\t}\r\n\r\n\t\t\tPerformanceTracker.startPhase('no-context-phase')\r\n\t\t\tconst duration = PerformanceTracker.endPhase('no-context-phase')\r\n\r\n\t\t\texpect(duration).toBeNull()\r\n\t\t\texpect(PerformanceTracker.getPhases()).toHaveLength(0)\r\n\t\t})\r\n\r\n\t\tit('should handle ending non-existent phase', () => {\r\n\t\t\tconst duration = PerformanceTracker.endPhase('non-existent-phase')\r\n\r\n\t\t\texpect(duration).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should handle ending already ended phase', () => {\r\n\t\t\tPerformanceTracker.startPhase('test-phase')\r\n\t\t\tconst duration1 = PerformanceTracker.endPhase('test-phase')\r\n\t\t\tconst duration2 = PerformanceTracker.endPhase('test-phase')\r\n\r\n\t\t\texpect(duration1).toBeGreaterThan(0)\r\n\t\t\texpect(duration2).toBeNull()\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CorrelationService","PerformanceTracker","afterEach","beforeEach","describe","expect","it","vi","mock","CorrelatedLogger","debug","fn","warn","log","mockCorrelationService","setContext","getContext","getCorrelationId","mockReturnValue","updateContext","clearContext","mockImplementation","doMock","correlationService","clearAllMocks","phases","Map","toBe","startPhase","getPhases","toHaveLength","name","startTime","toBeDefined","endTime","toBeUndefined","duration","endPhase","toBeGreaterThan","metadata","operation","size","result","toEqual","every","p","undefined","duration1","duration2","summary","getSummary","totalPhases","completedPhases","totalDuration","slowestPhase","testFn","start","Date","now","measure","success","Promise","resolve","setTimeout","Error","rejects","toThrow","error","TestClass","testMethod","value","measureMethod","instance","clearPhases","toBeNull"],"mappings":"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"}