{"version":3,"sources":["../../../../../src/test/Correlation/utils/logger.util.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { CorrelatedLogger } from '@microservice/Correlation/utils/logger.util'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock the CorrelationService\r\nvi.mock('@microservice/Correlation/services/correlation.service')\r\n\r\ndescribe('correlatedLogger', () => {\r\n\tlet mockCorrelationService: MockedObject<CorrelationService>\r\n\tlet consoleSpy: {\r\n\t\tlog: ReturnType<typeof vi.spyOn>\r\n\t\terror: ReturnType<typeof vi.spyOn>\r\n\t\twarn: ReturnType<typeof vi.spyOn>\r\n\t\tdebug: ReturnType<typeof vi.spyOn>\r\n\t}\r\n\r\n\tbeforeEach(() => {\r\n\t\t// Setup console spies\r\n\t\tconsoleSpy = {\r\n\t\t\tlog: vi.spyOn(console, 'log').mockImplementation(() => {}),\r\n\t\t\terror: vi.spyOn(console, 'error').mockImplementation(() => {}),\r\n\t\t\twarn: vi.spyOn(console, 'warn').mockImplementation(() => {}),\r\n\t\t\tdebug: vi.spyOn(console, 'debug').mockImplementation(() => {}),\r\n\t\t}\r\n\r\n\t\t// Mock the static correlation service instance\r\n\t\tmockCorrelationService = new CorrelationService() as MockedObject<CorrelationService>\r\n\t\tCorrelatedLogger.setCorrelationService(mockCorrelationService)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tObject.values(consoleSpy).forEach(spy => spy.mockRestore())\r\n\t})\r\n\r\n\tdescribe('log', () => {\r\n\t\tit('should log with correlation ID when available', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.log('Test message')\r\n\r\n\t\t\texpect(consoleSpy.log).toHaveBeenCalledWith('[test-correlation-id] Test message')\r\n\t\t})\r\n\r\n\t\tit('should log without correlation ID when not available', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue(null)\r\n\r\n\t\t\tCorrelatedLogger.log('Test message')\r\n\r\n\t\t\texpect(consoleSpy.log).toHaveBeenCalledWith(' Test message')\r\n\t\t})\r\n\r\n\t\tit('should include context when provided', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.log('Test message', 'TestContext')\r\n\r\n\t\t\texpect(consoleSpy.log).toHaveBeenCalledWith('[test-correlation-id] [TestContext] Test message')\r\n\t\t})\r\n\r\n\t\tit('should handle missing correlation ID and context', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue(null)\r\n\r\n\t\t\tCorrelatedLogger.log('Test message', 'TestContext')\r\n\r\n\t\t\texpect(consoleSpy.log).toHaveBeenCalledWith(' [TestContext] Test message')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error', () => {\r\n\t\tit('should log error with correlation ID', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.error('Error message')\r\n\r\n\t\t\texpect(consoleSpy.error).toHaveBeenCalledWith('[test-correlation-id] ERROR: Error message')\r\n\t\t})\r\n\r\n\t\tit('should log error with trace when provided', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.error('Error message', 'Stack trace here', 'ErrorContext')\r\n\r\n\t\t\texpect(consoleSpy.error).toHaveBeenCalledWith('[test-correlation-id] [ErrorContext] ERROR: Error message')\r\n\t\t\texpect(consoleSpy.error).toHaveBeenCalledWith('[test-correlation-id] [ErrorContext] TRACE: Stack trace here')\r\n\t\t})\r\n\r\n\t\tit('should handle missing correlation ID', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue(null)\r\n\r\n\t\t\tCorrelatedLogger.error('Error message')\r\n\r\n\t\t\texpect(consoleSpy.error).toHaveBeenCalledWith(' ERROR: Error message')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('warn', () => {\r\n\t\tit('should log warning with correlation ID', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.warn('Warning message')\r\n\r\n\t\t\texpect(consoleSpy.warn).toHaveBeenCalledWith('[test-correlation-id] WARN: Warning message')\r\n\t\t})\r\n\r\n\t\tit('should log warning with context', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.warn('Warning message', 'WarnContext')\r\n\r\n\t\t\texpect(consoleSpy.warn).toHaveBeenCalledWith('[test-correlation-id] [WarnContext] WARN: Warning message')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('debug', () => {\r\n\t\tit('should log debug message with correlation ID', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.debug('Debug message')\r\n\r\n\t\t\texpect(consoleSpy.debug).toHaveBeenCalledWith('[test-correlation-id] DEBUG: Debug message')\r\n\t\t})\r\n\r\n\t\tit('should log debug message with context', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.debug('Debug message', 'DebugContext')\r\n\r\n\t\t\texpect(consoleSpy.debug).toHaveBeenCalledWith('[test-correlation-id] [DebugContext] DEBUG: Debug message')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('verbose', () => {\r\n\t\tit('should log verbose message with correlation ID', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.verbose('Verbose message')\r\n\r\n\t\t\texpect(consoleSpy.log).toHaveBeenCalledWith('[test-correlation-id] VERBOSE: Verbose message')\r\n\t\t})\r\n\r\n\t\tit('should log verbose message with context', () => {\r\n\t\t\tmockCorrelationService.getCorrelationId.mockReturnValue('test-correlation-id')\r\n\r\n\t\t\tCorrelatedLogger.verbose('Verbose message', 'VerboseContext')\r\n\r\n\t\t\texpect(consoleSpy.log).toHaveBeenCalledWith('[test-correlation-id] [VerboseContext] VERBOSE: Verbose message')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CorrelationService","CorrelatedLogger","afterEach","beforeEach","describe","expect","it","vi","mock","mockCorrelationService","consoleSpy","log","spyOn","console","mockImplementation","error","warn","debug","setCorrelationService","Object","values","forEach","spy","mockRestore","getCorrelationId","mockReturnValue","toHaveBeenCalledWith","verbose"],"mappings":"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"}