{"version":3,"sources":["../../../../../src/test/Correlation/middleware/correlation.middleware.spec.ts"],"sourcesContent":["import type { NextFunction, Request, Response } from 'express'\r\nimport { CORRELATION_ID_HEADER, CorrelationMiddleware } from '@microservice/Correlation/middleware/correlation.middleware'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('correlationMiddleware', () => {\r\n\tlet middleware: CorrelationMiddleware\r\n\tlet correlationService: CorrelationService\r\n\tlet mockRequest: Partial<Request>\r\n\tlet mockResponse: Partial<Response>\r\n\tlet mockNext: NextFunction\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [CorrelationService],\r\n\t\t}).compile()\r\n\r\n\t\tcorrelationService = module.get<CorrelationService>(CorrelationService)\r\n\t\tmiddleware = new CorrelationMiddleware(correlationService)\r\n\r\n\t\tmockRequest = {\r\n\t\t\theaders: {},\r\n\t\t\tmethod: 'GET',\r\n\t\t\turl: '/test',\r\n\t\t\tconnection: { remoteAddress: '127.0.0.1' } as any,\r\n\t\t\tsocket: { remoteAddress: '127.0.0.1' } as any,\r\n\t\t}\r\n\r\n\t\tmockResponse = {\r\n\t\t\tsetHeader: vi.fn(),\r\n\t\t}\r\n\r\n\t\tmockNext = vi.fn()\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tcorrelationService.clearContext()\r\n\t})\r\n\r\n\tdescribe('use', () => {\r\n\t\tit('should generate correlation ID when not provided in header', () => {\r\n\t\t\tvi.spyOn(correlationService, 'generateCorrelationId').mockReturnValue('generated-id')\r\n\t\t\tvi.spyOn(correlationService, 'runWithContext').mockImplementation((context, fn) => fn())\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\texpect(correlationService.generateCorrelationId).toHaveBeenCalled()\r\n\t\t\texpect(mockResponse.setHeader).toHaveBeenCalledWith(CORRELATION_ID_HEADER, 'generated-id')\r\n\t\t\texpect(mockNext).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should use correlation ID from header when provided', () => {\r\n\t\t\tconst existingId = 'existing-correlation-id'\r\n\t\t\tmockRequest.headers = { [CORRELATION_ID_HEADER]: existingId }\r\n\r\n\t\t\tvi.spyOn(correlationService, 'generateCorrelationId')\r\n\t\t\tvi.spyOn(correlationService, 'runWithContext').mockImplementation((context, fn) => fn())\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\texpect(correlationService.generateCorrelationId).not.toHaveBeenCalled()\r\n\t\t\texpect(mockResponse.setHeader).toHaveBeenCalledWith(CORRELATION_ID_HEADER, existingId)\r\n\t\t\texpect(mockNext).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should create request context with correct properties', () => {\r\n\t\t\tconst correlationId = 'test-correlation-id'\r\n\t\t\tmockRequest.headers = {\r\n\t\t\t\t[CORRELATION_ID_HEADER]: correlationId,\r\n\t\t\t\t'user-agent': 'test-user-agent',\r\n\t\t\t}\r\n\r\n\t\t\tlet capturedContext: any = null\r\n\t\t\tvi.spyOn(correlationService, 'runWithContext').mockImplementation((context, fn) => {\r\n\t\t\t\tcapturedContext = context\r\n\t\t\t\treturn fn()\r\n\t\t\t})\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\texpect(capturedContext).toMatchObject({\r\n\t\t\t\tcorrelationId,\r\n\t\t\t\tclientIp: '127.0.0.1',\r\n\t\t\t\tuserAgent: 'test-user-agent',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl: '/test',\r\n\t\t\t})\r\n\t\t\texpect(capturedContext.timestamp).toBeDefined()\r\n\t\t\texpect(capturedContext.startTime).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should extract client IP from x-forwarded-for header', () => {\r\n\t\t\tmockRequest.headers = {\r\n\t\t\t\t'x-forwarded-for': '192.168.1.1, 10.0.0.1',\r\n\t\t\t}\r\n\r\n\t\t\tlet capturedContext: any = null\r\n\t\t\tvi.spyOn(correlationService, 'runWithContext').mockImplementation((context, fn) => {\r\n\t\t\t\tcapturedContext = context\r\n\t\t\t\treturn fn()\r\n\t\t\t})\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\texpect(capturedContext.clientIp).toBe('192.168.1.1')\r\n\t\t})\r\n\r\n\t\tit('should extract client IP from x-real-ip header', () => {\r\n\t\t\tmockRequest.headers = {\r\n\t\t\t\t'x-real-ip': '192.168.1.2',\r\n\t\t\t}\r\n\r\n\t\t\tlet capturedContext: any = null\r\n\t\t\tvi.spyOn(correlationService, 'runWithContext').mockImplementation((context, fn) => {\r\n\t\t\t\tcapturedContext = context\r\n\t\t\t\treturn fn()\r\n\t\t\t})\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\texpect(capturedContext.clientIp).toBe('192.168.1.2')\r\n\t\t})\r\n\r\n\t\tit('should fallback to connection.remoteAddress for client IP', () => {\r\n\t\t\tmockRequest.connection = { remoteAddress: '192.168.1.3' } as any\r\n\r\n\t\t\tlet capturedContext: any = null\r\n\t\t\tvi.spyOn(correlationService, 'runWithContext').mockImplementation((context, fn) => {\r\n\t\t\t\tcapturedContext = context\r\n\t\t\t\treturn fn()\r\n\t\t\t})\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\texpect(capturedContext.clientIp).toBe('192.168.1.3')\r\n\t\t})\r\n\r\n\t\tit('should use \"unknown\" when no IP can be determined', () => {\r\n\t\t\tmockRequest.connection = {} as any\r\n\t\t\tmockRequest.socket = {} as any\r\n\r\n\t\t\tlet capturedContext: any = null\r\n\t\t\tvi.spyOn(correlationService, 'runWithContext').mockImplementation((context, fn) => {\r\n\t\t\t\tcapturedContext = context\r\n\t\t\t\treturn fn()\r\n\t\t\t})\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\texpect(capturedContext.clientIp).toBe('unknown')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["CORRELATION_ID_HEADER","CorrelationMiddleware","CorrelationService","Test","afterEach","beforeEach","describe","expect","it","vi","middleware","correlationService","mockRequest","mockResponse","mockNext","module","createTestingModule","providers","compile","get","headers","method","url","connection","remoteAddress","socket","setHeader","fn","clearContext","spyOn","mockReturnValue","mockImplementation","context","use","generateCorrelationId","toHaveBeenCalled","toHaveBeenCalledWith","existingId","not","correlationId","capturedContext","toMatchObject","clientIp","userAgent","timestamp","toBeDefined","startTime","toBe"],"mappings":"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"}