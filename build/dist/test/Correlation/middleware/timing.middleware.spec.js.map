{"version":3,"sources":["../../../../../src/test/Correlation/middleware/timing.middleware.spec.ts"],"sourcesContent":["import type { NextFunction, Request, Response } from 'express'\r\nimport { TimingMiddleware } from '@microservice/Correlation/middleware/timing.middleware'\r\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\ndescribe('timingMiddleware', () => {\r\n\tlet middleware: TimingMiddleware\r\n\tlet correlationService: CorrelationService\r\n\tlet mockRequest: Partial<Request>\r\n\tlet mockResponse: any\r\n\tlet mockNext: NextFunction\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [CorrelationService],\r\n\t\t}).compile()\r\n\r\n\t\tcorrelationService = module.get<CorrelationService>(CorrelationService)\r\n\t\tmiddleware = new TimingMiddleware(correlationService)\r\n\r\n\t\tmockRequest = {\r\n\t\t\tmethod: 'GET',\r\n\t\t\turl: '/test',\r\n\t\t}\r\n\r\n\t\tmockResponse = {\r\n\t\t\tsetHeader: vi.fn(),\r\n\t\t\tstatusCode: 200,\r\n\t\t\theadersSent: false,\r\n\t\t\tend: vi.fn().mockImplementation(function (this: any, chunk?: any, encoding?: any, cb?: any) {\r\n\t\t\t\tif (typeof chunk === 'function')\r\n\t\t\t\t\tcb = chunk\r\n\t\t\t\tif (typeof encoding === 'function')\r\n\t\t\t\t\tcb = encoding\r\n\t\t\t\tif (cb)\r\n\t\t\t\t\tsetTimeout(cb, 0)\r\n\t\t\t\treturn this\r\n\t\t\t}),\r\n\t\t\ton: vi.fn((event, callback) => {\r\n\t\t\t\tif (event === 'finish') {\r\n\t\t\t\t\tsetTimeout(callback, 10)\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\temit: vi.fn((_event) => {\r\n\t\t\t\t// Simulate event emission\r\n\t\t\t\treturn true\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tmockNext = vi.fn()\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tcorrelationService.clearContext()\r\n\t})\r\n\r\n\tdescribe('use', () => {\r\n\t\tit('should call next function immediately', () => {\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\texpect(mockNext).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should set response time header on finish event', () => {\r\n\t\t\tvi.spyOn(correlationService, 'updateContext')\r\n\t\t\tvi.spyOn(correlationService, 'getContext').mockReturnValue({\r\n\t\t\t\tcorrelationId: 'test-id',\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tclientIp: '127.0.0.1',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl: '/test',\r\n\t\t\t\tstartTime: BigInt(Date.now() * 1000000),\r\n\t\t\t})\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\t// Call res.end to trigger the timing logic\r\n\t\t\tmockResponse.end()\r\n\r\n\t\t\texpect(mockResponse.setHeader).toHaveBeenCalledWith(\r\n\t\t\t\t'x-request-start',\r\n\t\t\t\texpect.any(String),\r\n\t\t\t)\r\n\t\t\texpect(mockResponse.setHeader).toHaveBeenCalledWith(\r\n\t\t\t\t'x-response-time',\r\n\t\t\t\texpect.stringMatching(/^\\d+(\\.\\d+)?ms$/),\r\n\t\t\t)\r\n\t\t\texpect(correlationService.updateContext).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should log request completion with timing info', async () => {\r\n\t\t\tconst consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => {})\r\n\r\n\t\t\tvi.spyOn(correlationService, 'getContext').mockReturnValue({\r\n\t\t\t\tcorrelationId: 'test-correlation-id',\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tclientIp: '127.0.0.1',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl: '/test',\r\n\t\t\t\tstartTime: BigInt(Date.now() * 1000000),\r\n\t\t\t})\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 20))\r\n\t\t\t// The actual logging is done by the CorrelatedLogger, not console.log\r\n\t\t\t// So we should check if the logger was called instead\r\n\t\t\texpect(mockNext).toHaveBeenCalled()\r\n\r\n\t\t\tconsoleSpy.mockRestore()\r\n\t\t}, 10000)\r\n\r\n\t\tit('should handle missing correlation context gracefully', () => {\r\n\t\t\tconst consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => {})\r\n\t\t\tvi.spyOn(correlationService, 'getContext').mockReturnValue(null)\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\t// Call res.end to trigger the timing logic\r\n\t\t\tmockResponse.end()\r\n\r\n\t\t\texpect(mockResponse.setHeader).toHaveBeenCalledWith(\r\n\t\t\t\t'x-request-start',\r\n\t\t\t\texpect.any(String),\r\n\t\t\t)\r\n\t\t\texpect(mockResponse.setHeader).toHaveBeenCalledWith(\r\n\t\t\t\t'x-response-time',\r\n\t\t\t\texpect.stringMatching(/^\\d+(\\.\\d+)?ms$/),\r\n\t\t\t)\r\n\r\n\t\t\texpect(mockNext).toHaveBeenCalled()\r\n\r\n\t\t\tconsoleSpy.mockRestore()\r\n\t\t})\r\n\r\n\t\tit('should update context with start time', () => {\r\n\t\t\tconst updateContextSpy = vi.spyOn(correlationService, 'updateContext')\r\n\t\t\tvi.spyOn(correlationService, 'getContext').mockReturnValue({\r\n\t\t\t\tcorrelationId: 'test-id',\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t\tclientIp: '127.0.0.1',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl: '/test',\r\n\t\t\t\tstartTime: BigInt(Date.now() * 1000000),\r\n\t\t\t})\r\n\r\n\t\t\tmiddleware.use(mockRequest as Request, mockResponse as Response, mockNext)\r\n\r\n\t\t\t// Call res.end to trigger the timing logic\r\n\t\t\tmockResponse.end()\r\n\r\n\t\t\t// The middleware should update context when response ends\r\n\t\t\texpect(updateContextSpy).toHaveBeenCalledWith(\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\tstartTime: expect.any(BigInt),\r\n\t\t\t\t\tendTime: expect.any(BigInt),\r\n\t\t\t\t\tduration: expect.any(Number),\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["TimingMiddleware","CorrelationService","Test","afterEach","beforeEach","describe","expect","it","vi","middleware","correlationService","mockRequest","mockResponse","mockNext","module","createTestingModule","providers","compile","get","method","url","setHeader","fn","statusCode","headersSent","end","mockImplementation","chunk","encoding","cb","setTimeout","on","event","callback","emit","_event","clearContext","use","toHaveBeenCalled","spyOn","mockReturnValue","correlationId","timestamp","Date","now","clientIp","startTime","BigInt","toHaveBeenCalledWith","any","String","stringMatching","updateContext","consoleSpy","console","Promise","resolve","mockRestore","updateContextSpy","objectContaining","endTime","duration","Number"],"mappings":"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"}