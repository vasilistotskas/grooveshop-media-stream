{"version":3,"sources":["../../../../../src/test/Cache/integration/multi-layer-cache.integration.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { FileCacheLayer } from '@microservice/Cache/layers/file-cache.layer'\r\nimport { MemoryCacheLayer } from '@microservice/Cache/layers/memory-cache.layer'\r\nimport { RedisCacheLayer } from '@microservice/Cache/layers/redis-cache.layer'\r\nimport { MemoryCacheService } from '@microservice/Cache/services/memory-cache.service'\r\nimport { MultiLayerCacheManager } from '@microservice/Cache/services/multi-layer-cache.manager'\r\nimport { RedisCacheService } from '@microservice/Cache/services/redis-cache.service'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\r\nimport 'reflect-metadata'\n\r\ndescribe('multiLayerCacheManager Integration', () => {\r\n\tlet cacheManager: MultiLayerCacheManager\r\n\tlet mockConfigService: MockedObject<ConfigService>\r\n\tlet mockMetricsService: MockedObject<MetricsService>\r\n\tlet mockMemoryCacheService: MockedObject<MemoryCacheService>\r\n\tlet mockRedisCacheService: MockedObject<RedisCacheService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tmockConfigService = {\r\n\t\t\tget: vi.fn(),\r\n\t\t\tgetOptional: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tmockMetricsService = {\r\n\t\t\trecordCacheOperation: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tmockMemoryCacheService = {\r\n\t\t\tget: vi.fn(),\r\n\t\t\tset: vi.fn(),\r\n\t\t\tdelete: vi.fn(),\r\n\t\t\thas: vi.fn(),\r\n\t\t\tclear: vi.fn(),\r\n\t\t\tgetStats: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tmockRedisCacheService = {\r\n\t\t\tget: vi.fn(),\r\n\t\t\tset: vi.fn(),\r\n\t\t\tdelete: vi.fn(),\r\n\t\t\thas: vi.fn(),\r\n\t\t\tclear: vi.fn(),\r\n\t\t\tgetStats: vi.fn(),\r\n\t\t\tgetConnectionStatus: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\t// Default config values\r\n\t\tmockConfigService.get.mockImplementation((key: string) => {\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase 'cache.file.directory':\r\n\t\t\t\t\treturn './test-cache'\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn undefined\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tmockConfigService.getOptional.mockImplementation((key: string, defaultValue: any) => {\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase 'cache.preloading.enabled':\r\n\t\t\t\t\treturn false\r\n\t\t\t\tcase 'cache.preloading.interval':\r\n\t\t\t\t\treturn 300000\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn defaultValue\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tMultiLayerCacheManager,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\tuseValue: mockMetricsService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MemoryCacheLayer,\r\n\t\t\t\t\tuseFactory: () => new MemoryCacheLayer(mockMemoryCacheService),\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: RedisCacheLayer,\r\n\t\t\t\t\tuseFactory: () => new RedisCacheLayer(mockRedisCacheService),\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: FileCacheLayer,\r\n\t\t\t\t\tuseFactory: () => new FileCacheLayer(mockConfigService),\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tcacheManager = module.get<MultiLayerCacheManager>(MultiLayerCacheManager)\r\n\r\n\t\t// Initialize the cache manager\r\n\t\tawait cacheManager.onModuleInit()\r\n\t})\r\n\r\n\tdescribe('cache-aside Pattern', () => {\r\n\t\tit('should get value from memory cache first', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.get.mockResolvedValue(testValue)\r\n\r\n\t\t\tconst result = await cacheManager.get('images', 'test-key')\r\n\r\n\t\t\texpect(result).toEqual(testValue)\r\n\t\t\texpect(mockMemoryCacheService.get).toHaveBeenCalledWith('images:test-key')\r\n\t\t\texpect(mockRedisCacheService.get).not.toHaveBeenCalled()\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'memory', 'hit')\r\n\t\t})\r\n\r\n\t\tit('should fallback to Redis when memory cache misses', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.get.mockResolvedValue(null)\r\n\t\t\tmockRedisCacheService.get.mockResolvedValue(testValue)\r\n\t\t\tmockMemoryCacheService.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tconst result = await cacheManager.get('images', 'test-key')\r\n\r\n\t\t\texpect(result).toEqual(testValue)\r\n\t\t\texpect(mockMemoryCacheService.get).toHaveBeenCalledWith('images:test-key')\r\n\t\t\texpect(mockRedisCacheService.get).toHaveBeenCalledWith('images:test-key')\r\n\t\t\texpect(mockMemoryCacheService.set).toHaveBeenCalledWith('images:test-key', testValue, undefined)\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'redis', 'hit')\r\n\t\t})\r\n\r\n\t\tit('should return null when all layers miss', async () => {\r\n\t\t\tmockMemoryCacheService.get.mockResolvedValue(null)\r\n\t\t\tmockRedisCacheService.get.mockResolvedValue(null)\r\n\r\n\t\t\tconst result = await cacheManager.get('images', 'test-key')\r\n\r\n\t\t\texpect(result).toBeNull()\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'multi-layer', 'miss')\r\n\t\t})\r\n\r\n\t\tit('should handle layer failures gracefully', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.get.mockRejectedValue(new Error('Memory cache error'))\r\n\t\t\tmockRedisCacheService.get.mockResolvedValue(testValue)\r\n\t\t\tmockMemoryCacheService.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tconst result = await cacheManager.get('images', 'test-key')\r\n\r\n\t\t\texpect(result).toEqual(testValue)\r\n\t\t\texpect(mockRedisCacheService.get).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('cache Operations', () => {\r\n\t\tit('should set value in all layers', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.set.mockResolvedValue(undefined)\r\n\t\t\tmockRedisCacheService.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait cacheManager.set('images', 'test-key', testValue, 3600)\r\n\r\n\t\t\texpect(mockMemoryCacheService.set).toHaveBeenCalledWith('images:test-key', testValue, 3600)\r\n\t\t\texpect(mockRedisCacheService.set).toHaveBeenCalledWith('images:test-key', testValue, 3600)\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('set', 'multi-layer', 'success')\r\n\t\t})\r\n\r\n\t\tit('should delete from all layers', async () => {\r\n\t\t\tmockMemoryCacheService.delete.mockResolvedValue(undefined)\r\n\t\t\tmockRedisCacheService.delete.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait cacheManager.delete('images', 'test-key')\r\n\r\n\t\t\texpect(mockMemoryCacheService.delete).toHaveBeenCalledWith('images:test-key')\r\n\t\t\texpect(mockRedisCacheService.delete).toHaveBeenCalledWith('images:test-key')\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('delete', 'multi-layer', 'success')\r\n\t\t})\r\n\r\n\t\tit('should check existence in priority order', async () => {\r\n\t\t\tmockMemoryCacheService.has.mockResolvedValue(false)\r\n\t\t\tmockRedisCacheService.has.mockResolvedValue(true)\r\n\r\n\t\t\tconst result = await cacheManager.exists('images', 'test-key')\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(mockMemoryCacheService.has).toHaveBeenCalledWith('images:test-key')\r\n\t\t\texpect(mockRedisCacheService.has).toHaveBeenCalledWith('images:test-key')\r\n\t\t})\r\n\r\n\t\tit('should clear all layers', async () => {\r\n\t\t\tmockMemoryCacheService.clear.mockResolvedValue(undefined)\r\n\t\t\tmockRedisCacheService.clear.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait cacheManager.clear()\r\n\r\n\t\t\texpect(mockMemoryCacheService.clear).toHaveBeenCalled()\r\n\t\t\texpect(mockRedisCacheService.clear).toHaveBeenCalled()\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('flush', 'multi-layer', 'success')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('key Generation', () => {\r\n\t\tit('should generate consistent keys', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.get.mockResolvedValue(testValue)\r\n\r\n\t\t\tawait cacheManager.get('images', 'test-key', { width: 100, height: 200 })\r\n\r\n\t\t\t// Key should include hashed parameters\r\n\t\t\texpect(mockMemoryCacheService.get).toHaveBeenCalledWith(\r\n\t\t\t\texpect.stringMatching(/^images:test-key:[a-f0-9]{16}$/),\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tit('should generate same key for same parameters', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.get.mockResolvedValue(testValue)\r\n\r\n\t\t\tawait cacheManager.get('images', 'test-key', { width: 100, height: 200 })\r\n\t\t\tawait cacheManager.get('images', 'test-key', { height: 200, width: 100 }) // Different order\r\n\r\n\t\t\t// Should generate the same key both times\r\n\t\t\tconst calls = mockMemoryCacheService.get.mock.calls\r\n\t\t\texpect(calls[0][0]).toBe(calls[1][0])\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('statistics', () => {\r\n\t\tit('should aggregate stats from all layers', async () => {\r\n\t\t\tmockMemoryCacheService.getStats.mockResolvedValue({\r\n\t\t\t\thits: 100,\r\n\t\t\t\tmisses: 20,\r\n\t\t\t\tkeys: 50,\r\n\t\t\t\tksize: 100,\r\n\t\t\t\tvsize: 924,\r\n\t\t\t\thitRate: 0.83,\r\n\t\t\t\tmemoryUsage: 1024,\r\n\t\t\t})\r\n\r\n\t\t\tmockRedisCacheService.getStats.mockResolvedValue({\r\n\t\t\t\thits: 80,\r\n\t\t\t\tmisses: 40,\r\n\t\t\t\tkeys: 60,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 2048,\r\n\t\t\t\thitRate: 0.67,\r\n\t\t\t})\r\n\r\n\t\t\tmockRedisCacheService.getConnectionStatus.mockReturnValue({\r\n\t\t\t\tconnected: true,\r\n\t\t\t\tstats: { hits: 80, misses: 40, operations: 120, errors: 2 },\r\n\t\t\t})\r\n\r\n\t\t\tconst stats = await cacheManager.getStats()\r\n\r\n\t\t\texpect(stats.totalHits).toBe(180)\r\n\t\t\texpect(stats.totalMisses).toBe(60)\r\n\t\t\texpect(stats.overallHitRate).toBeCloseTo(0.75)\r\n\t\t\texpect(stats.layers.memory.hits).toBe(100)\r\n\t\t\texpect(stats.layers.redis.hits).toBe(80)\r\n\t\t\texpect(stats.layerHitDistribution.memory).toBe(100)\r\n\t\t\texpect(stats.layerHitDistribution.redis).toBe(80)\r\n\t\t})\r\n\r\n\t\tit('should handle layer stats failures', async () => {\r\n\t\t\tmockMemoryCacheService.getStats.mockRejectedValue(new Error('Stats error'))\r\n\t\t\tmockRedisCacheService.getStats.mockResolvedValue({\r\n\t\t\t\thits: 50,\r\n\t\t\t\tmisses: 10,\r\n\t\t\t\tkeys: 30,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 1024,\r\n\t\t\t\thitRate: 0.83,\r\n\t\t\t})\r\n\t\t\tmockRedisCacheService.getConnectionStatus.mockReturnValue({\r\n\t\t\t\tconnected: true,\r\n\t\t\t\tstats: { hits: 50, misses: 10, operations: 60, errors: 0 },\r\n\t\t\t})\r\n\r\n\t\t\tconst stats = await cacheManager.getStats()\r\n\r\n\t\t\texpect(stats.layers.memory.errors).toBe(1)\r\n\t\t\texpect(stats.layers.redis.hits).toBe(50)\r\n\t\t\texpect(stats.totalHits).toBe(50)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('invalidation', () => {\r\n\t\tit('should invalidate namespace by clearing all layers', async () => {\r\n\t\t\tmockMemoryCacheService.clear.mockResolvedValue(undefined)\r\n\t\t\tmockRedisCacheService.clear.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait cacheManager.invalidateNamespace('images')\r\n\r\n\t\t\texpect(mockMemoryCacheService.clear).toHaveBeenCalled()\r\n\t\t\texpect(mockRedisCacheService.clear).toHaveBeenCalled()\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('flush', 'multi-layer', 'success')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('backfill Behavior', () => {\r\n\t\tit('should backfill higher priority layers on cache hit', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.get.mockResolvedValue(null)\r\n\t\t\tmockRedisCacheService.get.mockResolvedValue(testValue)\r\n\t\t\tmockMemoryCacheService.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait cacheManager.get('images', 'test-key')\r\n\r\n\t\t\t// Should backfill memory cache\r\n\t\t\texpect(mockMemoryCacheService.set).toHaveBeenCalledWith('images:test-key', testValue, undefined)\r\n\t\t})\r\n\r\n\t\tit('should not backfill when hit is in highest priority layer', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.get.mockResolvedValue(testValue)\r\n\r\n\t\t\tawait cacheManager.get('images', 'test-key')\r\n\r\n\t\t\t// Should not call set on any layer\r\n\t\t\texpect(mockMemoryCacheService.set).not.toHaveBeenCalled()\r\n\t\t\texpect(mockRedisCacheService.set).not.toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["FileCacheLayer","MemoryCacheLayer","RedisCacheLayer","MultiLayerCacheManager","ConfigService","MetricsService","Test","beforeEach","describe","expect","it","vi","cacheManager","mockConfigService","mockMetricsService","mockMemoryCacheService","mockRedisCacheService","get","fn","getOptional","recordCacheOperation","set","delete","has","clear","getStats","getConnectionStatus","mockImplementation","key","undefined","defaultValue","module","createTestingModule","providers","provide","useValue","useFactory","compile","onModuleInit","testValue","data","mockResolvedValue","result","toEqual","toHaveBeenCalledWith","not","toHaveBeenCalled","toBeNull","mockRejectedValue","Error","exists","toBe","width","height","stringMatching","calls","mock","hits","misses","keys","ksize","vsize","hitRate","memoryUsage","mockReturnValue","connected","stats","operations","errors","totalHits","totalMisses","overallHitRate","toBeCloseTo","layers","memory","redis","layerHitDistribution","invalidateNamespace"],"mappings":"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"}