{"version":3,"sources":["../../../../../src/test/Cache/integration/memory-cache.integration.spec.ts"],"sourcesContent":["import { MemoryCacheService } from '@microservice/Cache/services/memory-cache.service'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport { afterAll, afterEach, beforeAll, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('memoryCacheService Integration', () => {\r\n\tlet service: MemoryCacheService\r\n\tlet module: TestingModule\r\n\r\n\tbeforeAll(async () => {\r\n\t\t// Mock environment variables for configuration\r\n\t\tprocess.env.CACHE_MEMORY_DEFAULT_TTL = '3600'\r\n\t\tprocess.env.CACHE_MEMORY_CHECK_PERIOD = '600'\r\n\t\tprocess.env.CACHE_MEMORY_MAX_KEYS = '1000'\r\n\t\tprocess.env.CACHE_MEMORY_MAX_SIZE = '104857600'\r\n\t\tprocess.env.MONITORING_ENABLED = 'true'\r\n\r\n\t\tmodule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tMemoryCacheService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: {\r\n\t\t\t\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\t\t\t\tif (key === 'cache.memory') {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tdefaultTtl: 3600,\r\n\t\t\t\t\t\t\t\t\tcheckPeriod: 600,\r\n\t\t\t\t\t\t\t\t\tmaxKeys: 1000,\r\n\t\t\t\t\t\t\t\t\tmaxSize: 104857600,\r\n\t\t\t\t\t\t\t\t\twarningThreshold: 80,\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn undefined\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\tuseValue: {\r\n\t\t\t\t\t\trecordCacheOperation: vi.fn(),\r\n\t\t\t\t\t\tupdateCacheHitRatio: vi.fn(),\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<MemoryCacheService>(MemoryCacheService)\r\n\t})\r\n\r\n\tafterEach(async () => {\r\n\t\tawait service.clear()\r\n\t})\r\n\r\n\tafterAll(async () => {\r\n\t\tawait module.close()\r\n\t})\r\n\r\n\tit('should be defined', () => {\r\n\t\texpect(service).toBeDefined()\r\n\t})\r\n\r\n\tit('should set and get values', async () => {\r\n\t\tconst key = 'test-key'\r\n\t\tconst value = { data: 'test-value', timestamp: Date.now() }\r\n\r\n\t\tawait service.set(key, value)\r\n\t\tconst result = await service.get(key)\r\n\r\n\t\texpect(result).toEqual(value)\r\n\t})\r\n\r\n\tit('should handle TTL expiration', async () => {\r\n\t\tconst key = 'ttl-test'\r\n\t\tconst value = 'test-value'\r\n\t\tconst ttl = 1 // 1 second\r\n\r\n\t\tawait service.set(key, value, ttl)\r\n\t\texpect(await service.get(key)).toBe(value)\r\n\r\n\t\t// Wait for expiration\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 1100))\r\n\t\texpect(await service.get(key)).toBeNull()\r\n\t})\r\n\r\n\tit('should return cache statistics', async () => {\r\n\t\tawait service.set('key1', 'value1')\r\n\t\tawait service.set('key2', 'value2')\r\n\t\tawait service.get('key1') // Hit\r\n\t\tawait service.get('key3') // Miss\r\n\r\n\t\tconst stats = await service.getStats()\r\n\r\n\t\texpect(stats).toHaveProperty('hits')\r\n\t\texpect(stats).toHaveProperty('misses')\r\n\t\texpect(stats).toHaveProperty('keys')\r\n\t\texpect(stats).toHaveProperty('hitRate')\r\n\t\texpect(stats.keys).toBe(2)\r\n\t})\r\n\r\n\tit('should delete keys', async () => {\r\n\t\tconst key = 'delete-test'\r\n\t\tconst value = 'test-value'\r\n\r\n\t\tawait service.set(key, value)\r\n\t\texpect(await service.has(key)).toBe(true)\r\n\r\n\t\tawait service.delete(key)\r\n\t\texpect(await service.has(key)).toBe(false)\r\n\t})\r\n\r\n\tit('should clear all keys', async () => {\r\n\t\tawait service.set('key1', 'value1')\r\n\t\tawait service.set('key2', 'value2')\r\n\r\n\t\tawait service.clear()\r\n\r\n\t\texpect(await service.get('key1')).toBeNull()\r\n\t\texpect(await service.get('key2')).toBeNull()\r\n\t})\r\n\r\n\tit('should return memory usage information', () => {\r\n\t\tconst memoryUsage = service.getMemoryUsage()\r\n\r\n\t\texpect(memoryUsage).toHaveProperty('used')\r\n\t\texpect(memoryUsage).toHaveProperty('total')\r\n\t\texpect(typeof memoryUsage.used).toBe('number')\r\n\t\texpect(typeof memoryUsage.total).toBe('number')\r\n\t})\r\n})\r\n"],"names":["MemoryCacheService","ConfigService","MetricsService","Test","afterAll","afterEach","beforeAll","describe","expect","it","vi","service","module","process","env","CACHE_MEMORY_DEFAULT_TTL","CACHE_MEMORY_CHECK_PERIOD","CACHE_MEMORY_MAX_KEYS","CACHE_MEMORY_MAX_SIZE","MONITORING_ENABLED","createTestingModule","providers","provide","useValue","get","fn","mockImplementation","key","defaultTtl","checkPeriod","maxKeys","maxSize","warningThreshold","undefined","recordCacheOperation","updateCacheHitRatio","compile","clear","close","toBeDefined","value","data","timestamp","Date","now","set","result","toEqual","ttl","toBe","Promise","resolve","setTimeout","toBeNull","stats","getStats","toHaveProperty","keys","has","delete","memoryUsage","getMemoryUsage","used","total"],"mappings":"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"}