{"version":3,"sources":["../../../../../src/test/Cache/strategies/cache-key.strategy.spec.ts"],"sourcesContent":["import { DefaultCacheKeyStrategy } from '@microservice/Cache/strategies/cache-key.strategy'\r\nimport { beforeEach, describe, expect, it } from 'vitest'\n\r\ndescribe('defaultCacheKeyStrategy', () => {\r\n\tlet strategy: DefaultCacheKeyStrategy\r\n\r\n\tbeforeEach(() => {\r\n\t\tstrategy = new DefaultCacheKeyStrategy()\r\n\t})\r\n\r\n\tdescribe('generateKey', () => {\r\n\t\tit('should generate key with namespace and identifier', () => {\r\n\t\t\tconst key = strategy.generateKey('images', 'test-image')\r\n\t\t\texpect(key).toBe('images:test-image')\r\n\t\t})\r\n\r\n\t\tit('should include hashed parameters when provided', () => {\r\n\t\t\tconst key = strategy.generateKey('images', 'test-image', { width: 100, height: 200 })\r\n\t\t\texpect(key).toMatch(/^images:test-image:[a-f0-9]{16}$/)\r\n\t\t})\r\n\r\n\t\tit('should generate consistent keys for same parameters', () => {\r\n\t\t\tconst key1 = strategy.generateKey('images', 'test-image', { width: 100, height: 200 })\r\n\t\t\tconst key2 = strategy.generateKey('images', 'test-image', { width: 100, height: 200 })\r\n\t\t\texpect(key1).toBe(key2)\r\n\t\t})\r\n\r\n\t\tit('should generate consistent keys regardless of parameter order', () => {\r\n\t\t\tconst key1 = strategy.generateKey('images', 'test-image', { width: 100, height: 200 })\r\n\t\t\tconst key2 = strategy.generateKey('images', 'test-image', { height: 200, width: 100 })\r\n\t\t\texpect(key1).toBe(key2)\r\n\t\t})\r\n\r\n\t\tit('should generate different keys for different parameters', () => {\r\n\t\t\tconst key1 = strategy.generateKey('images', 'test-image', { width: 100, height: 200 })\r\n\t\t\tconst key2 = strategy.generateKey('images', 'test-image', { width: 150, height: 200 })\r\n\t\t\texpect(key1).not.toBe(key2)\r\n\t\t})\r\n\r\n\t\tit('should handle empty parameters object', () => {\r\n\t\t\tconst key = strategy.generateKey('images', 'test-image', {})\r\n\t\t\texpect(key).toBe('images:test-image')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('parseKey', () => {\r\n\t\tit('should parse simple key', () => {\r\n\t\t\tconst parsed = strategy.parseKey('images:test-image')\r\n\t\t\texpect(parsed).toEqual({\r\n\t\t\t\tnamespace: 'images',\r\n\t\t\t\tidentifier: 'test-image',\r\n\t\t\t\tparams: undefined,\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should parse key with hash', () => {\r\n\t\t\tconst parsed = strategy.parseKey('images:test-image:abc123def456')\r\n\t\t\texpect(parsed).toEqual({\r\n\t\t\t\tnamespace: 'images',\r\n\t\t\t\tidentifier: 'test-image',\r\n\t\t\t\tparams: { hash: 'abc123def456' },\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should throw error for invalid key format', () => {\r\n\t\t\texpect(() => strategy.parseKey('invalid-key')).toThrow('Invalid cache key format')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('generateHash', () => {\r\n\t\tit('should generate consistent hash for same input', () => {\r\n\t\t\tconst hash1 = strategy.generateHash('test-input')\r\n\t\t\tconst hash2 = strategy.generateHash('test-input')\r\n\t\t\texpect(hash1).toBe(hash2)\r\n\t\t})\r\n\r\n\t\tit('should generate different hashes for different inputs', () => {\r\n\t\t\tconst hash1 = strategy.generateHash('test-input-1')\r\n\t\t\tconst hash2 = strategy.generateHash('test-input-2')\r\n\t\t\texpect(hash1).not.toBe(hash2)\r\n\t\t})\r\n\r\n\t\tit('should generate 16-character hash', () => {\r\n\t\t\tconst hash = strategy.generateHash('test-input')\r\n\t\t\texpect(hash).toHaveLength(16)\r\n\t\t\texpect(hash).toMatch(/^[a-f0-9]{16}$/)\r\n\t\t})\r\n\t})\r\n})\n"],"names":["DefaultCacheKeyStrategy","beforeEach","describe","expect","it","strategy","key","generateKey","toBe","width","height","toMatch","key1","key2","not","parsed","parseKey","toEqual","namespace","identifier","params","undefined","hash","toThrow","hash1","generateHash","hash2","toHaveLength"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,8DAAmD;AAC3F,SAASC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAQ;AAEzDF,SAAS,2BAA2B;IACnC,IAAIG;IAEJJ,WAAW;QACVI,WAAW,IAAIL;IAChB;IAEAE,SAAS,eAAe;QACvBE,GAAG,qDAAqD;YACvD,MAAME,MAAMD,SAASE,WAAW,CAAC,UAAU;YAC3CJ,OAAOG,KAAKE,IAAI,CAAC;QAClB;QAEAJ,GAAG,kDAAkD;YACpD,MAAME,MAAMD,SAASE,WAAW,CAAC,UAAU,cAAc;gBAAEE,OAAO;gBAAKC,QAAQ;YAAI;YACnFP,OAAOG,KAAKK,OAAO,CAAC;QACrB;QAEAP,GAAG,uDAAuD;YACzD,MAAMQ,OAAOP,SAASE,WAAW,CAAC,UAAU,cAAc;gBAAEE,OAAO;gBAAKC,QAAQ;YAAI;YACpF,MAAMG,OAAOR,SAASE,WAAW,CAAC,UAAU,cAAc;gBAAEE,OAAO;gBAAKC,QAAQ;YAAI;YACpFP,OAAOS,MAAMJ,IAAI,CAACK;QACnB;QAEAT,GAAG,iEAAiE;YACnE,MAAMQ,OAAOP,SAASE,WAAW,CAAC,UAAU,cAAc;gBAAEE,OAAO;gBAAKC,QAAQ;YAAI;YACpF,MAAMG,OAAOR,SAASE,WAAW,CAAC,UAAU,cAAc;gBAAEG,QAAQ;gBAAKD,OAAO;YAAI;YACpFN,OAAOS,MAAMJ,IAAI,CAACK;QACnB;QAEAT,GAAG,2DAA2D;YAC7D,MAAMQ,OAAOP,SAASE,WAAW,CAAC,UAAU,cAAc;gBAAEE,OAAO;gBAAKC,QAAQ;YAAI;YACpF,MAAMG,OAAOR,SAASE,WAAW,CAAC,UAAU,cAAc;gBAAEE,OAAO;gBAAKC,QAAQ;YAAI;YACpFP,OAAOS,MAAME,GAAG,CAACN,IAAI,CAACK;QACvB;QAEAT,GAAG,yCAAyC;YAC3C,MAAME,MAAMD,SAASE,WAAW,CAAC,UAAU,cAAc,CAAC;YAC1DJ,OAAOG,KAAKE,IAAI,CAAC;QAClB;IACD;IAEAN,SAAS,YAAY;QACpBE,GAAG,2BAA2B;YAC7B,MAAMW,SAASV,SAASW,QAAQ,CAAC;YACjCb,OAAOY,QAAQE,OAAO,CAAC;gBACtBC,WAAW;gBACXC,YAAY;gBACZC,QAAQC;YACT;QACD;QAEAjB,GAAG,8BAA8B;YAChC,MAAMW,SAASV,SAASW,QAAQ,CAAC;YACjCb,OAAOY,QAAQE,OAAO,CAAC;gBACtBC,WAAW;gBACXC,YAAY;gBACZC,QAAQ;oBAAEE,MAAM;gBAAe;YAChC;QACD;QAEAlB,GAAG,6CAA6C;YAC/CD,OAAO,IAAME,SAASW,QAAQ,CAAC,gBAAgBO,OAAO,CAAC;QACxD;IACD;IAEArB,SAAS,gBAAgB;QACxBE,GAAG,kDAAkD;YACpD,MAAMoB,QAAQnB,SAASoB,YAAY,CAAC;YACpC,MAAMC,QAAQrB,SAASoB,YAAY,CAAC;YACpCtB,OAAOqB,OAAOhB,IAAI,CAACkB;QACpB;QAEAtB,GAAG,yDAAyD;YAC3D,MAAMoB,QAAQnB,SAASoB,YAAY,CAAC;YACpC,MAAMC,QAAQrB,SAASoB,YAAY,CAAC;YACpCtB,OAAOqB,OAAOV,GAAG,CAACN,IAAI,CAACkB;QACxB;QAEAtB,GAAG,qCAAqC;YACvC,MAAMkB,OAAOjB,SAASoB,YAAY,CAAC;YACnCtB,OAAOmB,MAAMK,YAAY,CAAC;YAC1BxB,OAAOmB,MAAMX,OAAO,CAAC;QACtB;IACD;AACD"}