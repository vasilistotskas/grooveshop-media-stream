{"version":3,"sources":["../../../../../src/test/Cache/layers/redis-cache.layer.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { RedisCacheLayer } from '@microservice/Cache/layers/redis-cache.layer'\r\nimport { RedisCacheService } from '@microservice/Cache/services/redis-cache.service'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('redisCacheLayer', () => {\r\n\tlet layer: RedisCacheLayer\r\n\tlet mockRedisCacheService: MockedObject<RedisCacheService>\r\n\r\n\tbeforeEach(() => {\r\n\t\tmockRedisCacheService = {\r\n\t\t\tget: vi.fn(),\r\n\t\t\tset: vi.fn(),\r\n\t\t\tdelete: vi.fn(),\r\n\t\t\thas: vi.fn(),\r\n\t\t\texists: vi.fn(),\r\n\t\t\tclear: vi.fn(),\r\n\t\t\tgetStats: vi.fn(),\r\n\t\t\tgetConnectionStatus: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tlayer = new RedisCacheLayer(mockRedisCacheService)\r\n\t})\r\n\r\n\tdescribe('basic Operations', () => {\r\n\t\tit('should get value from redis cache service', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockRedisCacheService.get.mockResolvedValue(testValue)\r\n\r\n\t\t\tconst result = await layer.get('test-key')\r\n\r\n\t\t\texpect(result).toEqual(testValue)\r\n\t\t\texpect(mockRedisCacheService.get).toHaveBeenCalledWith('test-key')\r\n\t\t})\r\n\r\n\t\tit('should return null when redis get fails', async () => {\r\n\t\t\tmockRedisCacheService.get.mockRejectedValue(new Error('Redis error'))\r\n\r\n\t\t\tconst result = await layer.get('test-key')\r\n\r\n\t\t\texpect(result).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should set value in redis cache service', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockRedisCacheService.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait layer.set('test-key', testValue, 3600)\r\n\r\n\t\t\texpect(mockRedisCacheService.set).toHaveBeenCalledWith('test-key', testValue, 3600)\r\n\t\t})\r\n\r\n\t\tit('should silently fail when redis set fails', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockRedisCacheService.set.mockRejectedValue(new Error('Redis error'))\r\n\r\n\t\t\tawait expect(layer.set('test-key', testValue, 3600)).resolves.not.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should delete key from redis cache service', async () => {\r\n\t\t\tmockRedisCacheService.delete.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait layer.delete('test-key')\r\n\r\n\t\t\texpect(mockRedisCacheService.delete).toHaveBeenCalledWith('test-key')\r\n\t\t})\r\n\r\n\t\tit('should silently fail when redis delete fails', async () => {\r\n\t\t\tmockRedisCacheService.delete.mockRejectedValue(new Error('Redis error'))\r\n\r\n\t\t\tawait expect(layer.delete('test-key')).resolves.not.toThrow()\r\n\t\t})\r\n\r\n\t\tit('should check existence in redis cache service', async () => {\r\n\t\t\tmockRedisCacheService.has.mockResolvedValue(true)\r\n\r\n\t\t\tconst result = await layer.exists('test-key')\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(mockRedisCacheService.has).toHaveBeenCalledWith('test-key')\r\n\t\t})\r\n\r\n\t\tit('should return false when redis exists check fails', async () => {\r\n\t\t\tmockRedisCacheService.has.mockRejectedValue(new Error('Redis error'))\r\n\r\n\t\t\tconst result = await layer.exists('test-key')\r\n\r\n\t\t\texpect(result).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should clear redis cache service', async () => {\r\n\t\t\tmockRedisCacheService.clear.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait layer.clear()\r\n\r\n\t\t\texpect(mockRedisCacheService.clear).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should silently fail when redis clear fails', async () => {\r\n\t\t\tmockRedisCacheService.clear.mockRejectedValue(new Error('Redis error'))\r\n\r\n\t\t\tawait expect(layer.clear()).resolves.not.toThrow()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('statistics', () => {\r\n\t\tit('should return formatted stats from redis cache service', async () => {\r\n\t\t\tconst mockStats = {\r\n\t\t\t\thits: 80,\r\n\t\t\t\tmisses: 40,\r\n\t\t\t\tkeys: 60,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 2048,\r\n\t\t\t\thitRate: 0.67,\r\n\t\t\t}\r\n\t\t\tconst mockConnectionStatus = {\r\n\t\t\t\tconnected: true,\r\n\t\t\t\tstats: { hits: 80, misses: 40, operations: 120, errors: 2 },\r\n\t\t\t}\r\n\r\n\t\t\tmockRedisCacheService.getStats.mockResolvedValue(mockStats)\r\n\t\t\tmockRedisCacheService.getConnectionStatus.mockReturnValue(mockConnectionStatus)\r\n\r\n\t\t\tconst result = await layer.getStats()\r\n\r\n\t\t\texpect(result).toEqual({\r\n\t\t\t\thits: 80,\r\n\t\t\t\tmisses: 40,\r\n\t\t\t\tkeys: 60,\r\n\t\t\t\thitRate: 0.67,\r\n\t\t\t\terrors: 2,\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should return error stats when redis stats fail', async () => {\r\n\t\t\tmockRedisCacheService.getStats.mockRejectedValue(new Error('Redis error'))\r\n\r\n\t\t\tconst result = await layer.getStats()\r\n\r\n\t\t\texpect(result).toEqual({\r\n\t\t\t\thits: 0,\r\n\t\t\t\tmisses: 0,\r\n\t\t\t\tkeys: 0,\r\n\t\t\t\thitRate: 0,\r\n\t\t\t\terrors: 1,\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('layer Properties', () => {\r\n\t\tit('should return correct layer name', () => {\r\n\t\t\texpect(layer.getLayerName()).toBe('redis')\r\n\t\t})\r\n\r\n\t\tit('should return correct priority', () => {\r\n\t\t\texpect(layer.getPriority()).toBe(2)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["RedisCacheLayer","beforeEach","describe","expect","it","vi","layer","mockRedisCacheService","get","fn","set","delete","has","exists","clear","getStats","getConnectionStatus","testValue","data","mockResolvedValue","result","toEqual","toHaveBeenCalledWith","mockRejectedValue","Error","toBeNull","undefined","resolves","not","toThrow","toBe","toHaveBeenCalled","mockStats","hits","misses","keys","ksize","vsize","hitRate","mockConnectionStatus","connected","stats","operations","errors","mockReturnValue","getLayerName","getPriority"],"mappings":"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"}