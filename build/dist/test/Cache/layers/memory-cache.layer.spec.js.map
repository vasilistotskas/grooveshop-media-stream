{"version":3,"sources":["../../../../../src/test/Cache/layers/memory-cache.layer.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { MemoryCacheLayer } from '@microservice/Cache/layers/memory-cache.layer'\r\nimport { MemoryCacheService } from '@microservice/Cache/services/memory-cache.service'\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('memoryCacheLayer', () => {\r\n\tlet layer: MemoryCacheLayer\r\n\tlet mockMemoryCacheService: MockedObject<MemoryCacheService>\r\n\r\n\tbeforeEach(() => {\r\n\t\tmockMemoryCacheService = {\r\n\t\t\tget: vi.fn(),\r\n\t\t\tset: vi.fn(),\r\n\t\t\tdelete: vi.fn(),\r\n\t\t\thas: vi.fn(),\r\n\t\t\texists: vi.fn(),\r\n\t\t\tclear: vi.fn(),\r\n\t\t\tgetStats: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\tlayer = new MemoryCacheLayer(mockMemoryCacheService)\r\n\t})\r\n\r\n\tdescribe('basic Operations', () => {\r\n\t\tit('should get value from memory cache service', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.get.mockResolvedValue(testValue)\r\n\r\n\t\t\tconst result = await layer.get('test-key')\r\n\r\n\t\t\texpect(result).toEqual(testValue)\r\n\t\t\texpect(mockMemoryCacheService.get).toHaveBeenCalledWith('test-key')\r\n\t\t})\r\n\r\n\t\tit('should set value in memory cache service', async () => {\r\n\t\t\tconst testValue = { data: 'test' }\r\n\t\t\tmockMemoryCacheService.set.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait layer.set('test-key', testValue, 3600)\r\n\r\n\t\t\texpect(mockMemoryCacheService.set).toHaveBeenCalledWith('test-key', testValue, 3600)\r\n\t\t})\r\n\r\n\t\tit('should delete key from memory cache service', async () => {\r\n\t\t\tmockMemoryCacheService.delete.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait layer.delete('test-key')\r\n\r\n\t\t\texpect(mockMemoryCacheService.delete).toHaveBeenCalledWith('test-key')\r\n\t\t})\r\n\r\n\t\tit('should check existence in memory cache service', async () => {\r\n\t\t\tmockMemoryCacheService.has.mockResolvedValue(true)\r\n\r\n\t\t\tconst result = await layer.exists('test-key')\r\n\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(mockMemoryCacheService.has).toHaveBeenCalledWith('test-key')\r\n\t\t})\r\n\r\n\t\tit('should clear memory cache service', async () => {\r\n\t\t\tmockMemoryCacheService.clear.mockResolvedValue(undefined)\r\n\r\n\t\t\tawait layer.clear()\r\n\r\n\t\t\texpect(mockMemoryCacheService.clear).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('statistics', () => {\r\n\t\tit('should return formatted stats from memory cache service', async () => {\r\n\t\t\tconst mockStats = {\r\n\t\t\t\thits: 100,\r\n\t\t\t\tmisses: 20,\r\n\t\t\t\tkeys: 50,\r\n\t\t\t\tksize: 100,\r\n\t\t\t\tvsize: 924,\r\n\t\t\t\thitRate: 0.83,\r\n\t\t\t\tmemoryUsage: 1024,\r\n\t\t\t}\r\n\t\t\tmockMemoryCacheService.getStats.mockResolvedValue(mockStats)\r\n\r\n\t\t\tconst result = await layer.getStats()\r\n\r\n\t\t\texpect(result).toEqual({\r\n\t\t\t\thits: 100,\r\n\t\t\t\tmisses: 20,\r\n\t\t\t\tkeys: 50,\r\n\t\t\t\thitRate: 0.83,\r\n\t\t\t\tmemoryUsage: 1024,\r\n\t\t\t\terrors: 0,\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('layer Properties', () => {\r\n\t\tit('should return correct layer name', () => {\r\n\t\t\texpect(layer.getLayerName()).toBe('memory')\r\n\t\t})\r\n\r\n\t\tit('should return correct priority', () => {\r\n\t\t\texpect(layer.getPriority()).toBe(1)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["MemoryCacheLayer","beforeEach","describe","expect","it","vi","layer","mockMemoryCacheService","get","fn","set","delete","has","exists","clear","getStats","testValue","data","mockResolvedValue","result","toEqual","toHaveBeenCalledWith","undefined","toBe","toHaveBeenCalled","mockStats","hits","misses","keys","ksize","vsize","hitRate","memoryUsage","errors","getLayerName","getPriority"],"mappings":"AACA,SAASA,gBAAgB,QAAQ,0DAA+C;AAEhF,SAASC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,EAAEC,EAAE,QAAQ,SAAQ;AAE7DH,SAAS,oBAAoB;IAC5B,IAAII;IACJ,IAAIC;IAEJN,WAAW;QACVM,yBAAyB;YACxBC,KAAKH,GAAGI,EAAE;YACVC,KAAKL,GAAGI,EAAE;YACVE,QAAQN,GAAGI,EAAE;YACbG,KAAKP,GAAGI,EAAE;YACVI,QAAQR,GAAGI,EAAE;YACbK,OAAOT,GAAGI,EAAE;YACZM,UAAUV,GAAGI,EAAE;QAChB;QAEAH,QAAQ,IAAIN,iBAAiBO;IAC9B;IAEAL,SAAS,oBAAoB;QAC5BE,GAAG,8CAA8C;YAChD,MAAMY,YAAY;gBAAEC,MAAM;YAAO;YACjCV,uBAAuBC,GAAG,CAACU,iBAAiB,CAACF;YAE7C,MAAMG,SAAS,MAAMb,MAAME,GAAG,CAAC;YAE/BL,OAAOgB,QAAQC,OAAO,CAACJ;YACvBb,OAAOI,uBAAuBC,GAAG,EAAEa,oBAAoB,CAAC;QACzD;QAEAjB,GAAG,4CAA4C;YAC9C,MAAMY,YAAY;gBAAEC,MAAM;YAAO;YACjCV,uBAAuBG,GAAG,CAACQ,iBAAiB,CAACI;YAE7C,MAAMhB,MAAMI,GAAG,CAAC,YAAYM,WAAW;YAEvCb,OAAOI,uBAAuBG,GAAG,EAAEW,oBAAoB,CAAC,YAAYL,WAAW;QAChF;QAEAZ,GAAG,+CAA+C;YACjDG,uBAAuBI,MAAM,CAACO,iBAAiB,CAACI;YAEhD,MAAMhB,MAAMK,MAAM,CAAC;YAEnBR,OAAOI,uBAAuBI,MAAM,EAAEU,oBAAoB,CAAC;QAC5D;QAEAjB,GAAG,kDAAkD;YACpDG,uBAAuBK,GAAG,CAACM,iBAAiB,CAAC;YAE7C,MAAMC,SAAS,MAAMb,MAAMO,MAAM,CAAC;YAElCV,OAAOgB,QAAQI,IAAI,CAAC;YACpBpB,OAAOI,uBAAuBK,GAAG,EAAES,oBAAoB,CAAC;QACzD;QAEAjB,GAAG,qCAAqC;YACvCG,uBAAuBO,KAAK,CAACI,iBAAiB,CAACI;YAE/C,MAAMhB,MAAMQ,KAAK;YAEjBX,OAAOI,uBAAuBO,KAAK,EAAEU,gBAAgB;QACtD;IACD;IAEAtB,SAAS,cAAc;QACtBE,GAAG,2DAA2D;YAC7D,MAAMqB,YAAY;gBACjBC,MAAM;gBACNC,QAAQ;gBACRC,MAAM;gBACNC,OAAO;gBACPC,OAAO;gBACPC,SAAS;gBACTC,aAAa;YACd;YACAzB,uBAAuBQ,QAAQ,CAACG,iBAAiB,CAACO;YAElD,MAAMN,SAAS,MAAMb,MAAMS,QAAQ;YAEnCZ,OAAOgB,QAAQC,OAAO,CAAC;gBACtBM,MAAM;gBACNC,QAAQ;gBACRC,MAAM;gBACNG,SAAS;gBACTC,aAAa;gBACbC,QAAQ;YACT;QACD;IACD;IAEA/B,SAAS,oBAAoB;QAC5BE,GAAG,oCAAoC;YACtCD,OAAOG,MAAM4B,YAAY,IAAIX,IAAI,CAAC;QACnC;QAEAnB,GAAG,kCAAkC;YACpCD,OAAOG,MAAM6B,WAAW,IAAIZ,IAAI,CAAC;QAClC;IACD;AACD"}