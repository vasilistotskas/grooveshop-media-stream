{"version":3,"sources":["../../../../../src/test/Cache/operations/cache-image-resource.operation.spec.ts"],"sourcesContent":["import type { AxiosResponse } from 'axios'\r\nimport { Buffer } from 'node:buffer'\r\nimport * as fs from 'node:fs/promises'\r\nimport * as path from 'node:path'\r\nimport CacheImageRequest, {\r\n\tBackgroundOptions,\r\n\tFitOptions,\r\n\tPositionOptions,\r\n\tResizeOptions,\r\n\tSupportedResizeFormats,\r\n} from '@microservice/API/dto/cache-image-request.dto'\r\nimport CacheImageResourceOperation from '@microservice/Cache/operations/cache-image-resource.operation'\r\nimport { MultiLayerCacheManager } from '@microservice/Cache/services/multi-layer-cache.manager'\r\nimport ResourceMetaData from '@microservice/HTTP/dto/resource-meta-data.dto'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport ManipulationJobResult from '@microservice/Queue/dto/manipulation-job-result.dto'\r\nimport FetchResourceResponseJob from '@microservice/Queue/jobs/fetch-resource-response.job'\r\nimport GenerateResourceIdentityFromRequestJob from '@microservice/Queue/jobs/generate-resource-identity-from-request.job'\r\nimport StoreResourceResponseToFileJob from '@microservice/Queue/jobs/store-resource-response-to-file.job'\r\nimport WebpImageManipulationJob from '@microservice/Queue/jobs/webp-image-manipulation.job'\r\nimport { JobQueueManager } from '@microservice/Queue/services/job-queue.manager'\r\nimport ValidateCacheImageRequestResizeTargetRule from '@microservice/Validation/rules/validate-cache-image-request-resize-target.rule'\r\nimport ValidateCacheImageRequestRule from '@microservice/Validation/rules/validate-cache-image-request.rule'\r\nimport { InputSanitizationService } from '@microservice/Validation/services/input-sanitization.service'\r\nimport { HttpService } from '@nestjs/axios'\r\nimport { Logger } from '@nestjs/common'\r\nimport { Test } from '@nestjs/testing'\nimport { AxiosHeaders } from 'axios'\r\nimport { beforeEach, describe, expect, it, vi } from 'vitest'\n\r\nvi.mock('node:fs/promises')\r\nvi.mock('node:process', () => ({\r\n\tcwd: vi.fn(() => '/mock/cwd'),\r\n}))\r\n\r\ndescribe('cacheImageResourceOperation', () => {\r\n\tlet operation: CacheImageResourceOperation\r\n\tlet mockHttpService: HttpService\r\n\tlet mockGenerateResourceIdentityFromRequestJob: GenerateResourceIdentityFromRequestJob\r\n\tlet mockFetchResourceResponseJob: FetchResourceResponseJob\r\n\tlet mockStoreResourceResponseToFileJob: StoreResourceResponseToFileJob\r\n\tlet mockWebpImageManipulationJob: WebpImageManipulationJob\r\n\tlet mockValidateCacheImageRequestRule: ValidateCacheImageRequestRule\r\n\tlet mockValidateCacheImageRequestResizeTargetRule: ValidateCacheImageRequestResizeTargetRule\r\n\tlet mockCacheManager: MultiLayerCacheManager\r\n\tlet mockInputSanitizationService: InputSanitizationService\r\n\tlet mockJobQueueManager: JobQueueManager\r\n\tlet mockMetricsService: MetricsService\r\n\tlet mockLogger: Logger\r\n\tlet mockCwd: string\r\n\tlet mockRequest: CacheImageRequest\r\n\tlet moduleRef: any\r\n\r\n\tbeforeEach(async () => {\r\n\t\tmockCwd = '/mock/cwd'\r\n\t\tmockRequest = new CacheImageRequest()\r\n\t\tmockRequest.resourceTarget = 'https://example.com/image.jpg'\r\n\t\tmockRequest.resizeOptions = new ResizeOptions()\r\n\t\tmockRequest.resizeOptions.width = 100\r\n\t\tmockRequest.resizeOptions.height = 100\r\n\t\tmockRequest.resizeOptions.quality = 80\r\n\t\tmockRequest.resizeOptions.format = SupportedResizeFormats.webp\r\n\t\tmockRequest.resizeOptions.fit = FitOptions.contain\r\n\t\tmockRequest.resizeOptions.position = PositionOptions.entropy\r\n\t\tmockRequest.resizeOptions.background = BackgroundOptions.white\r\n\t\tmockRequest.resizeOptions.trimThreshold = 10\r\n\r\n\t\tmockHttpService = {} as HttpService\r\n\r\n\t\tmockGenerateResourceIdentityFromRequestJob = {\r\n\t\t\thandle: vi.fn(),\r\n\t\t} as unknown as GenerateResourceIdentityFromRequestJob\r\n\t\tvi.spyOn(mockGenerateResourceIdentityFromRequestJob, 'handle').mockResolvedValue('mock-resource-id')\r\n\r\n\t\tmockFetchResourceResponseJob = {\r\n\t\t\thandle: vi.fn(),\r\n\t\t} as unknown as FetchResourceResponseJob\r\n\r\n\t\tconst axiosHeaders = new AxiosHeaders()\r\n\t\taxiosHeaders.set('content-type', 'image/jpeg')\r\n\r\n\t\tconst mockResponse = {\r\n\t\t\tstatus: 200,\r\n\t\t\tstatusText: 'OK',\r\n\t\t\theaders: { 'content-type': 'image/jpeg' },\r\n\t\t\tdata: Buffer.from('mock-image-data'),\r\n\t\t\tconfig: {\r\n\t\t\t\theaders: axiosHeaders,\r\n\t\t\t\turl: 'https://example.com/image.jpg',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t},\r\n\t\t} as unknown as AxiosResponse\r\n\r\n\t\tvi.spyOn(mockFetchResourceResponseJob, 'handle').mockResolvedValue(mockResponse)\r\n\r\n\t\tmockStoreResourceResponseToFileJob = {\r\n\t\t\thandle: vi.fn(),\r\n\t\t} as unknown as StoreResourceResponseToFileJob\r\n\t\tvi.spyOn(mockStoreResourceResponseToFileJob, 'handle').mockResolvedValue()\r\n\r\n\t\tmockWebpImageManipulationJob = {\r\n\t\t\thandle: vi.fn(),\r\n\t\t} as unknown as WebpImageManipulationJob\r\n\t\tvi.spyOn(mockWebpImageManipulationJob, 'handle').mockResolvedValue({\r\n\t\t\tformat: 'webp',\r\n\t\t\tsize: '1000',\r\n\t\t} as ManipulationJobResult)\r\n\r\n\t\tmockValidateCacheImageRequestRule = {\r\n\t\t\tsetup: vi.fn(),\r\n\t\t\tapply: vi.fn(),\r\n\t\t} as unknown as ValidateCacheImageRequestRule\r\n\r\n\t\tmockValidateCacheImageRequestResizeTargetRule = {\r\n\t\t\tsetup: vi.fn(),\r\n\t\t\tapply: vi.fn(),\r\n\t\t} as unknown as ValidateCacheImageRequestResizeTargetRule\r\n\r\n\t\tmockCacheManager = {\r\n\t\t\tget: vi.fn(),\r\n\t\t\tset: vi.fn(),\r\n\t\t\tdelete: vi.fn(),\r\n\t\t\texists: vi.fn(),\r\n\t\t} as unknown as MultiLayerCacheManager\r\n\r\n\t\tmockInputSanitizationService = {\r\n\t\t\tsanitize: vi.fn(),\r\n\t\t\tvalidateUrl: vi.fn(),\r\n\t\t\tvalidateFileSize: vi.fn(),\r\n\t\t\tvalidateImageDimensions: vi.fn(),\r\n\t\t} as unknown as InputSanitizationService\r\n\r\n\t\tmockJobQueueManager = {\r\n\t\t\taddImageProcessingJob: vi.fn(),\r\n\t\t} as unknown as JobQueueManager\r\n\r\n\t\tmockMetricsService = {\r\n\t\t\trecordCacheOperation: vi.fn(),\r\n\t\t\trecordImageProcessing: vi.fn(),\r\n\t\t\trecordError: vi.fn(),\r\n\t\t} as unknown as MetricsService\r\n\r\n\t\tmockLogger = {\r\n\t\t\tlog: vi.fn(),\r\n\t\t\terror: vi.fn(),\r\n\t\t\twarn: vi.fn(),\r\n\t\t\tdebug: vi.fn(),\r\n\t\t\tverbose: vi.fn(),\r\n\t\t} as unknown as Logger\r\n\r\n\t\t// Setup default mock behaviors\r\n\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(null)\r\n\t\tvi.spyOn(mockCacheManager, 'set').mockResolvedValue()\r\n\t\tvi.spyOn(mockCacheManager, 'delete').mockResolvedValue()\r\n\t\tvi.spyOn(mockCacheManager, 'exists').mockResolvedValue(false)\r\n\r\n\t\tvi.spyOn(mockInputSanitizationService, 'sanitize').mockImplementation(async input => input)\r\n\t\tvi.spyOn(mockInputSanitizationService, 'validateUrl').mockReturnValue(true)\r\n\t\tvi.spyOn(mockInputSanitizationService, 'validateFileSize').mockReturnValue(true)\r\n\t\tvi.spyOn(mockInputSanitizationService, 'validateImageDimensions').mockReturnValue(true)\r\n\r\n\t\tvi.spyOn(mockJobQueueManager, 'addImageProcessingJob').mockResolvedValue({} as any)\r\n\r\n\t\tmoduleRef = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tCacheImageResourceOperation,\r\n\t\t\t\t{ provide: HttpService, useValue: mockHttpService },\r\n\t\t\t\t{ provide: GenerateResourceIdentityFromRequestJob, useValue: mockGenerateResourceIdentityFromRequestJob },\r\n\t\t\t\t{ provide: FetchResourceResponseJob, useValue: mockFetchResourceResponseJob },\r\n\t\t\t\t{ provide: StoreResourceResponseToFileJob, useValue: mockStoreResourceResponseToFileJob },\r\n\t\t\t\t{ provide: WebpImageManipulationJob, useValue: mockWebpImageManipulationJob },\r\n\t\t\t\t{ provide: ValidateCacheImageRequestRule, useValue: mockValidateCacheImageRequestRule },\r\n\t\t\t\t{ provide: ValidateCacheImageRequestResizeTargetRule, useValue: mockValidateCacheImageRequestResizeTargetRule },\r\n\t\t\t\t{ provide: MultiLayerCacheManager, useValue: mockCacheManager },\r\n\t\t\t\t{ provide: InputSanitizationService, useValue: mockInputSanitizationService },\r\n\t\t\t\t{ provide: JobQueueManager, useValue: mockJobQueueManager },\r\n\t\t\t\t{ provide: MetricsService, useValue: mockMetricsService },\r\n\t\t\t\t{ provide: Logger, useValue: mockLogger },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\toperation = await moduleRef.resolve(CacheImageResourceOperation)\r\n\t})\r\n\r\n\tdescribe('resource Path Getters', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\toperation.id = 'test-resource'\r\n\t\t\tawait operation.setup(mockRequest)\r\n\t\t})\r\n\r\n\t\tit('should return correct resource path', () => {\r\n\t\t\tconst expected = path.normalize(path.join(mockCwd, 'storage', `${operation.id}.rsc`))\r\n\t\t\tconst resourcePath = operation.getResourcePath\r\n\t\t\texpect(resourcePath).toBe(expected)\r\n\t\t})\r\n\r\n\t\tit('should return correct resource temp path', () => {\r\n\t\t\tconst expected = path.normalize(path.join(mockCwd, 'storage', `${operation.id}.rst`))\r\n\t\t\tconst resourceTempPath = operation.getResourceTempPath\r\n\t\t\texpect(resourceTempPath).toBe(expected)\r\n\t\t})\r\n\r\n\t\tit('should return correct resource meta path', () => {\r\n\t\t\tconst expected = path.normalize(path.join(mockCwd, 'storage', `${operation.id}.rsm`))\r\n\t\t\tconst resourceMetaPath = operation.getResourceMetaPath\r\n\t\t\texpect(resourceMetaPath).toBe(expected)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('setup with new infrastructure', () => {\r\n\t\tit('should sanitize input and validate URL', async () => {\r\n\t\t\tawait operation.setup(mockRequest)\r\n\r\n\t\t\texpect(mockInputSanitizationService.sanitize).toHaveBeenCalledWith(mockRequest)\r\n\t\t\texpect(mockInputSanitizationService.validateUrl).toHaveBeenCalledWith(mockRequest.resourceTarget)\r\n\t\t\texpect(mockInputSanitizationService.validateImageDimensions).toHaveBeenCalledWith(100, 100)\r\n\t\t})\r\n\r\n\t\tit('should throw error for invalid URL', async () => {\r\n\t\t\tvi.spyOn(mockInputSanitizationService, 'validateUrl').mockReturnValue(false)\r\n\r\n\t\t\tawait expect(operation.setup(mockRequest)).rejects.toThrow('Invalid or disallowed URL')\r\n\t\t\texpect(mockMetricsService.recordError).toHaveBeenCalledWith('validation', 'setup')\r\n\t\t})\r\n\r\n\t\tit('should throw error for invalid dimensions', async () => {\r\n\t\t\tvi.spyOn(mockInputSanitizationService, 'validateImageDimensions').mockReturnValue(false)\r\n\r\n\t\t\tawait expect(operation.setup(mockRequest)).rejects.toThrow('Invalid image dimensions')\r\n\t\t\texpect(mockMetricsService.recordError).toHaveBeenCalledWith('validation', 'setup')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('resourceExists with cache integration', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\tawait operation.setup(mockRequest)\r\n\t\t})\r\n\r\n\t\tit('should return true when resource exists in cache and is valid', async () => {\r\n\t\t\tconst mockCachedResource = {\r\n\t\t\t\tdata: Buffer.from('cached-data'),\r\n\t\t\t\tmetadata: new ResourceMetaData({\r\n\t\t\t\t\tversion: 1,\r\n\t\t\t\t\tsize: '1000',\r\n\t\t\t\t\tformat: 'webp',\r\n\t\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(mockCachedResource)\r\n\r\n\t\t\tconst result = await operation.resourceExists\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(mockCacheManager.get).toHaveBeenCalledWith('image', operation.id)\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'multi-layer', 'hit', expect.any(Number))\r\n\t\t})\r\n\r\n\t\tit('should delete expired resource from cache', async () => {\r\n\t\t\tconst expiredResource = {\r\n\t\t\t\tdata: Buffer.from('expired-data'),\r\n\t\t\t\tmetadata: new ResourceMetaData({\r\n\t\t\t\t\tversion: 1,\r\n\t\t\t\t\tsize: '1000',\r\n\t\t\t\t\tformat: 'webp',\r\n\t\t\t\t\tdateCreated: Date.now() - 7 * 30 * 24 * 60 * 60 * 1000, // 7 months ago\r\n\t\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(expiredResource)\r\n\t\t\tconst mockedFs = vi.mocked(fs)\r\n\t\t\tmockedFs.access.mockResolvedValue()\r\n\r\n\t\t\tawait operation.resourceExists\r\n\t\t\texpect(mockCacheManager.delete).toHaveBeenCalledWith('image', operation.id)\r\n\t\t})\r\n\r\n\t\tit('should fallback to filesystem when cache miss', async () => {\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(null)\r\n\t\t\tconst mockedFs = vi.mocked(fs)\r\n\t\t\tmockedFs.access.mockResolvedValue()\r\n\t\t\tmockedFs.readFile.mockResolvedValue(JSON.stringify({\r\n\t\t\t\tversion: 1,\r\n\t\t\t\tsize: '1000',\r\n\t\t\t\tformat: 'webp',\r\n\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t}))\r\n\r\n\t\t\tconst result = await operation.resourceExists\r\n\t\t\texpect(result).toBe(true)\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'multi-layer', 'hit', expect.any(Number))\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('execute with background processing', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\tawait operation.setup(mockRequest)\r\n\t\t})\r\n\r\n\t\tit('should return early if resource already exists', async () => {\r\n\t\t\tconst mockCachedResource = {\r\n\t\t\t\tdata: Buffer.from('cached-data'),\r\n\t\t\t\tmetadata: new ResourceMetaData({\r\n\t\t\t\t\tversion: 1,\r\n\t\t\t\t\tsize: '1000',\r\n\t\t\t\t\tformat: 'webp',\r\n\t\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(mockCachedResource)\r\n\r\n\t\t\tawait operation.execute()\r\n\r\n\t\t\texpect(mockFetchResourceResponseJob.handle).not.toHaveBeenCalled()\r\n\t\t\texpect(mockMetricsService.recordImageProcessing).toHaveBeenCalledWith('cache_check', 'cached', 'success', expect.any(Number))\r\n\t\t})\r\n\r\n\t\tit('should queue large image processing in background', async () => {\r\n\t\t\t// Set up large image dimensions (> 2MP threshold)\r\n\t\t\tmockRequest.resizeOptions.width = 2000\r\n\t\t\tmockRequest.resizeOptions.height = 1500 // 3MP total\r\n\t\t\tawait operation.setup(mockRequest)\r\n\r\n\t\t\t// Mock shouldUseBackgroundProcessing to return true for this test\r\n\t\t\tvi.spyOn(operation, 'shouldUseBackgroundProcessing').mockReturnValue(true)\r\n\r\n\t\t\t// Ensure cache returns null so resource doesn't exist\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(null)\r\n\r\n\t\t\t// Mock filesystem access to return false (resource doesn't exist)\r\n\t\t\tconst mockedFs = vi.mocked(fs)\r\n\t\t\tmockedFs.access.mockRejectedValue(new Error('File not found'))\r\n\r\n\t\t\tawait operation.execute()\r\n\r\n\t\t\texpect(mockJobQueueManager.addImageProcessingJob).toHaveBeenCalledWith({\r\n\t\t\t\timageUrl: mockRequest.resourceTarget,\r\n\t\t\t\twidth: mockRequest.resizeOptions.width,\r\n\t\t\t\theight: mockRequest.resizeOptions.height,\r\n\t\t\t\tquality: mockRequest.resizeOptions.quality,\r\n\t\t\t\tformat: mockRequest.resizeOptions.format,\r\n\t\t\t\tfit: mockRequest.resizeOptions.fit,\r\n\t\t\t\tposition: mockRequest.resizeOptions.position,\r\n\t\t\t\tbackground: mockRequest.resizeOptions.background,\r\n\t\t\t\ttrimThreshold: mockRequest.resizeOptions.trimThreshold,\r\n\t\t\t\tcacheKey: operation.id,\r\n\t\t\t\tpriority: expect.any(Number),\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should process small images synchronously', async () => {\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(null)\r\n\t\t\tconst mockedFs = vi.mocked(fs)\r\n\t\t\tmockedFs.readFile.mockResolvedValue(Buffer.from('processed-image-data'))\r\n\r\n\t\t\tawait operation.execute()\r\n\r\n\t\t\texpect(mockFetchResourceResponseJob.handle).toHaveBeenCalled()\r\n\t\t\texpect(mockWebpImageManipulationJob.handle).toHaveBeenCalled()\r\n\t\t\texpect(mockCacheManager.set).toHaveBeenCalledWith('image', operation.id, expect.any(Object), expect.any(Number))\r\n\t\t})\r\n\r\n\t\tit('should validate file size during processing', async () => {\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(null)\r\n\t\t\tvi.spyOn(mockInputSanitizationService, 'validateFileSize').mockReturnValue(false)\r\n\r\n\t\t\tconst mockResponse = {\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\tstatusText: 'OK',\r\n\t\t\t\theaders: { 'content-length': '50000000' }, // 50MB\r\n\t\t\t\tdata: Buffer.from('large-image-data'),\r\n\t\t\t\tconfig: {} as any,\r\n\t\t\t} as AxiosResponse\r\n\r\n\t\t\tvi.spyOn(mockFetchResourceResponseJob, 'handle').mockResolvedValue(mockResponse)\r\n\r\n\t\t\tawait expect(operation.execute()).rejects.toThrow('Error fetching or processing image.')\r\n\t\t\texpect(mockMetricsService.recordImageProcessing).toHaveBeenCalledWith('execute', 'unknown', 'error', expect.any(Number))\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getCachedResource', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\tawait operation.setup(mockRequest)\r\n\t\t})\r\n\r\n\t\tit('should return cached resource from multi-layer cache', async () => {\r\n\t\t\tconst mockCachedResource = {\r\n\t\t\t\tdata: Buffer.from('cached-data'),\r\n\t\t\t\tmetadata: new ResourceMetaData({\r\n\t\t\t\t\tversion: 1,\r\n\t\t\t\t\tsize: '1000',\r\n\t\t\t\t\tformat: 'webp',\r\n\t\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(mockCachedResource)\r\n\r\n\t\t\tconst result = await operation.getCachedResource()\r\n\r\n\t\t\texpect(result).toEqual(mockCachedResource)\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'multi-layer', 'hit', expect.any(Number))\r\n\t\t})\r\n\r\n\t\tit('should fallback to filesystem and cache result', async () => {\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(null)\r\n\t\t\tconst mockedFs = vi.mocked(fs)\r\n\t\t\tmockedFs.access.mockResolvedValue()\r\n\t\t\tmockedFs.readFile\r\n\t\t\t\t.mockResolvedValueOnce(Buffer.from('file-data'))\r\n\t\t\t\t.mockResolvedValueOnce(JSON.stringify({\r\n\t\t\t\t\tversion: 1,\r\n\t\t\t\t\tsize: '1000',\r\n\t\t\t\t\tformat: 'webp',\r\n\t\t\t\t\tdateCreated: Date.now(),\r\n\t\t\t\t\tpublicTTL: 12 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t\tprivateTTL: 6 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\t\t}))\r\n\r\n\t\t\tconst result = await operation.getCachedResource()\r\n\r\n\t\t\texpect(result).toBeDefined()\r\n\t\t\texpect(result?.data).toEqual(Buffer.from('file-data'))\r\n\t\t\texpect(mockCacheManager.set).toHaveBeenCalledWith('image', operation.id, expect.any(Object), expect.any(Number))\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'filesystem', 'hit', expect.any(Number))\r\n\t\t})\r\n\r\n\t\tit('should return null when resource not found', async () => {\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockResolvedValue(null)\r\n\t\t\tconst mockedFs = vi.mocked(fs)\r\n\t\t\tmockedFs.access.mockRejectedValue(new Error('File not found'))\r\n\r\n\t\t\tconst result = await operation.getCachedResource()\r\n\r\n\t\t\texpect(result).toBeNull()\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'multi-layer', 'miss', expect.any(Number))\r\n\t\t})\r\n\r\n\t\tit('should handle errors gracefully', async () => {\r\n\t\t\tvi.spyOn(mockCacheManager, 'get').mockRejectedValue(new Error('Cache error'))\r\n\r\n\t\t\tconst result = await operation.getCachedResource()\r\n\r\n\t\t\texpect(result).toBeNull()\r\n\t\t\texpect(mockMetricsService.recordError).toHaveBeenCalledWith('cache_retrieval', 'get_cached_resource')\r\n\t\t\texpect(mockMetricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'multi-layer', 'error', expect.any(Number))\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('optimizeAndServeDefaultImage', () => {\r\n\t\tit('should optimize and serve default image with custom options', async () => {\r\n\t\t\tconst customOptions = new ResizeOptions()\r\n\t\t\tcustomOptions.width = 100\r\n\t\t\tcustomOptions.height = 100\r\n\t\t\tcustomOptions.fit = FitOptions.contain\r\n\t\t\tcustomOptions.position = PositionOptions.entropy\r\n\t\t\tcustomOptions.format = SupportedResizeFormats.webp\r\n\t\t\tcustomOptions.background = BackgroundOptions.white\r\n\t\t\tcustomOptions.trimThreshold = 5\r\n\t\t\tcustomOptions.quality = 100\r\n\r\n\t\t\tconst mockedFs = vi.mocked(fs)\r\n\t\t\tmockedFs.access.mockRejectedValueOnce({ code: 'ENOENT' } as NodeJS.ErrnoException)\r\n\r\n\t\t\tconst result = await operation.optimizeAndServeDefaultImage(customOptions)\r\n\t\t\texpect(result).toBeDefined()\r\n\t\t\texpect(mockWebpImageManipulationJob.handle).toHaveBeenCalledWith(\r\n\t\t\t\tpath.normalize(path.join(mockCwd, 'public', 'default.png')),\r\n\t\t\t\texpect.any(String),\r\n\t\t\t\texpect.objectContaining({\r\n\t\t\t\t\twidth: 100,\r\n\t\t\t\t\theight: 100,\r\n\t\t\t\t\tfit: FitOptions.contain,\r\n\t\t\t\t\tposition: PositionOptions.entropy,\r\n\t\t\t\t\tformat: SupportedResizeFormats.webp,\r\n\t\t\t\t\tbackground: BackgroundOptions.white,\r\n\t\t\t\t\ttrimThreshold: 5,\r\n\t\t\t\t\tquality: 100,\r\n\t\t\t\t}),\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["Buffer","fs","path","CacheImageRequest","BackgroundOptions","FitOptions","PositionOptions","ResizeOptions","SupportedResizeFormats","CacheImageResourceOperation","MultiLayerCacheManager","ResourceMetaData","MetricsService","FetchResourceResponseJob","GenerateResourceIdentityFromRequestJob","StoreResourceResponseToFileJob","WebpImageManipulationJob","JobQueueManager","ValidateCacheImageRequestResizeTargetRule","ValidateCacheImageRequestRule","InputSanitizationService","HttpService","Logger","Test","AxiosHeaders","beforeEach","describe","expect","it","vi","mock","cwd","fn","operation","mockHttpService","mockGenerateResourceIdentityFromRequestJob","mockFetchResourceResponseJob","mockStoreResourceResponseToFileJob","mockWebpImageManipulationJob","mockValidateCacheImageRequestRule","mockValidateCacheImageRequestResizeTargetRule","mockCacheManager","mockInputSanitizationService","mockJobQueueManager","mockMetricsService","mockLogger","mockCwd","mockRequest","moduleRef","resourceTarget","resizeOptions","width","height","quality","format","webp","fit","contain","position","entropy","background","white","trimThreshold","handle","spyOn","mockResolvedValue","axiosHeaders","set","mockResponse","status","statusText","headers","data","from","config","url","method","size","setup","apply","get","delete","exists","sanitize","validateUrl","validateFileSize","validateImageDimensions","addImageProcessingJob","recordCacheOperation","recordImageProcessing","recordError","log","error","warn","debug","verbose","mockImplementation","input","mockReturnValue","createTestingModule","providers","provide","useValue","compile","resolve","id","expected","normalize","join","resourcePath","getResourcePath","toBe","resourceTempPath","getResourceTempPath","resourceMetaPath","getResourceMetaPath","toHaveBeenCalledWith","rejects","toThrow","mockCachedResource","metadata","version","dateCreated","Date","now","publicTTL","privateTTL","result","resourceExists","any","Number","expiredResource","mockedFs","mocked","access","readFile","JSON","stringify","execute","not","toHaveBeenCalled","mockRejectedValue","Error","imageUrl","cacheKey","priority","Object","getCachedResource","toEqual","mockResolvedValueOnce","toBeDefined","toBeNull","customOptions","mockRejectedValueOnce","code","optimizeAndServeDefaultImage","String","objectContaining"],"mappings":"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"}