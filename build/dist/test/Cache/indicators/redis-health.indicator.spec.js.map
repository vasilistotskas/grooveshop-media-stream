{"version":3,"sources":["../../../../../src/test/Cache/indicators/redis-health.indicator.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { RedisHealthIndicator } from '@microservice/Cache/indicators/redis-health.indicator'\r\nimport { RedisCacheService } from '@microservice/Cache/services/redis-cache.service'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('redisHealthIndicator', () => {\r\n\tlet indicator: RedisHealthIndicator\r\n\tlet redisCacheService: MockedObject<RedisCacheService>\r\n\r\n\tconst mockConfig = {\r\n\t\thost: 'localhost',\r\n\t\tport: 6379,\r\n\t\tdb: 0,\r\n\t\tttl: 7200,\r\n\t\tmaxRetries: 3,\r\n\t}\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockRedisCacheService = {\r\n\t\t\tping: vi.fn(),\r\n\t\t\tget: vi.fn(),\r\n\t\t\tset: vi.fn(),\r\n\t\t\tdelete: vi.fn(),\r\n\t\t\tgetTtl: vi.fn(),\r\n\t\t\tgetStats: vi.fn(),\r\n\t\t\tgetMemoryUsage: vi.fn(),\r\n\t\t\tgetConnectionStatus: vi.fn(),\r\n\t\t\tkeys: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'cache.redis.host')\r\n\t\t\t\t\treturn mockConfig.host\r\n\t\t\t\tif (key === 'cache.redis.port')\r\n\t\t\t\t\treturn mockConfig.port\r\n\t\t\t\tif (key === 'cache.redis.db')\r\n\t\t\t\t\treturn mockConfig.db\r\n\t\t\t\tif (key === 'cache.redis.ttl')\r\n\t\t\t\t\treturn mockConfig.ttl\r\n\t\t\t\tif (key === 'cache.redis.maxRetries')\r\n\t\t\t\t\treturn mockConfig.maxRetries\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tRedisHealthIndicator,\r\n\t\t\t\t{ provide: RedisCacheService, useValue: mockRedisCacheService },\r\n\t\t\t\t{ provide: ConfigService, useValue: mockConfigService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tindicator = module.get<RedisHealthIndicator>(RedisHealthIndicator)\r\n\t\tredisCacheService = module.get(RedisCacheService)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('performHealthCheck', () => {\r\n\t\tit('should return healthy status when all operations succeed', async () => {\r\n\t\t\tlet capturedValue: any = null\r\n\t\t\tlet deleteWasCalled = false\r\n\r\n\t\t\tredisCacheService.ping.mockResolvedValue('PONG')\r\n\t\t\tredisCacheService.set.mockImplementation(async (key, value) => {\r\n\t\t\t\tcapturedValue = value\r\n\t\t\t\treturn undefined\r\n\t\t\t})\r\n\t\t\tredisCacheService.get.mockImplementation(async (key) => {\r\n\t\t\t\tif (key === 'health-check-redis-test' && !deleteWasCalled) {\r\n\t\t\t\t\treturn capturedValue\r\n\t\t\t\t}\r\n\t\t\t\treturn null\r\n\t\t\t})\r\n\t\t\tredisCacheService.getTtl.mockResolvedValue(59)\r\n\t\t\tredisCacheService.delete.mockImplementation(async (key) => {\r\n\t\t\t\tif (key === 'health-check-redis-test') {\r\n\t\t\t\t\tdeleteWasCalled = true\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined\r\n\t\t\t})\r\n\t\t\tredisCacheService.getStats.mockResolvedValue({\r\n\t\t\t\thits: 10,\r\n\t\t\t\tmisses: 2,\r\n\t\t\t\tkeys: 100,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 1048576,\r\n\t\t\t\thitRate: 0.83,\r\n\t\t\t})\r\n\t\t\tredisCacheService.getMemoryUsage.mockResolvedValue({\r\n\t\t\t\tused: 1048576,\r\n\t\t\t\tpeak: 2097152,\r\n\t\t\t\tfragmentation: 1.2,\r\n\t\t\t})\r\n\t\t\tredisCacheService.getConnectionStatus.mockReturnValue({\r\n\t\t\t\tconnected: true,\r\n\t\t\t\tstats: { hits: 10, misses: 2, operations: 15, errors: 0 },\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.redis.status).toBe('up')\r\n\t\t\texpect(result.redis.connection.connected).toBe(true)\r\n\t\t\texpect(result.redis.statistics.hitRate).toBe(83)\r\n\t\t\texpect(result.redis.memory.usedMB).toBe(1)\r\n\t\t\texpect(result.redis.warnings).toEqual([])\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when ping fails', async () => {\r\n\t\t\tredisCacheService.ping.mockResolvedValue('ERROR')\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.redis.status).toBe('down')\r\n\t\t\texpect(result.redis.error).toContain('Redis ping failed')\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when GET operation fails', async () => {\r\n\t\t\tredisCacheService.ping.mockResolvedValue('PONG')\r\n\t\t\tredisCacheService.set.mockResolvedValue(undefined)\r\n\t\t\tredisCacheService.get.mockResolvedValue({ timestamp: 123, test: true }) // Different timestamp\r\n\t\t\tredisCacheService.getTtl.mockResolvedValue(59)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.redis.status).toBe('down')\r\n\t\t\texpect(result.redis.error).toContain('Redis GET operation failed')\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when TTL operation fails', async () => {\r\n\t\t\tlet storedValue: any = null\r\n\r\n\t\t\tredisCacheService.ping.mockResolvedValue('PONG')\r\n\t\t\tredisCacheService.set.mockImplementation((key, value) => {\r\n\t\t\t\tstoredValue = value\r\n\t\t\t\treturn Promise.resolve(undefined)\r\n\t\t\t})\r\n\t\t\tredisCacheService.get.mockImplementation(() => Promise.resolve(storedValue))\r\n\t\t\tredisCacheService.getTtl.mockResolvedValue(-1) // Invalid TTL\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.redis.status).toBe('down')\r\n\t\t\texpect(result.redis.error).toContain('Redis TTL operation failed')\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status when DELETE operation fails', async () => {\r\n\t\t\tlet storedValue: any = null\r\n\t\t\tlet getCallCount = 0\r\n\r\n\t\t\tredisCacheService.ping.mockResolvedValue('PONG')\r\n\t\t\tredisCacheService.set.mockImplementation(async (key, value) => {\r\n\t\t\t\tstoredValue = value\r\n\t\t\t\treturn undefined\r\n\t\t\t})\r\n\t\t\tredisCacheService.get.mockImplementation(async (_key) => {\r\n\t\t\t\tgetCallCount++\r\n\t\t\t\tif (getCallCount === 1) {\r\n\t\t\t\t\t// First GET call: return the stored value (for GET operation test)\r\n\t\t\t\t\treturn storedValue\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Second GET call: return the stored value again (should be null after delete, but we return the value to simulate delete failure)\r\n\t\t\t\t\treturn storedValue\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tredisCacheService.getTtl.mockResolvedValue(59)\r\n\t\t\tredisCacheService.delete.mockResolvedValue(undefined)\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.redis.status).toBe('down')\r\n\t\t\texpect(result.redis.error).toContain('Redis DELETE operation failed')\r\n\t\t})\r\n\r\n\t\tit('should handle Redis connection errors', async () => {\r\n\t\t\tredisCacheService.ping.mockRejectedValue(new Error('Connection refused'))\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.redis.status).toBe('down')\r\n\t\t\texpect(result.redis.error).toBe('Connection refused')\r\n\t\t\texpect(result.redis.connection.connected).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should return unhealthy status for slow response times', async () => {\r\n\t\t\tconst testValue = { timestamp: Date.now(), test: true }\r\n\r\n\t\t\t// Mock slow operations\r\n\t\t\tredisCacheService.ping.mockImplementation(() =>\r\n\t\t\t\tnew Promise(resolve => setTimeout(() => resolve('PONG'), 250)),\r\n\t\t\t)\r\n\t\t\tredisCacheService.set.mockResolvedValue(undefined)\r\n\t\t\tredisCacheService.get.mockResolvedValue(testValue)\r\n\t\t\tredisCacheService.getTtl.mockResolvedValue(59)\r\n\t\t\tredisCacheService.delete.mockResolvedValue(undefined)\r\n\t\t\tredisCacheService.get.mockResolvedValueOnce(testValue).mockResolvedValueOnce(null)\r\n\t\t\tredisCacheService.getStats.mockResolvedValue({\r\n\t\t\t\thits: 10,\r\n\t\t\t\tmisses: 2,\r\n\t\t\t\tkeys: 100,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 1048576,\r\n\t\t\t\thitRate: 0.83,\r\n\t\t\t})\r\n\t\t\tredisCacheService.getMemoryUsage.mockResolvedValue({\r\n\t\t\t\tused: 1048576,\r\n\t\t\t\tpeak: 2097152,\r\n\t\t\t\tfragmentation: 1.2,\r\n\t\t\t})\r\n\t\t\tredisCacheService.getConnectionStatus.mockReturnValue({\r\n\t\t\t\tconnected: true,\r\n\t\t\t\tstats: { hits: 10, misses: 2, operations: 15, errors: 0 },\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.redis.status).toBe('down')\r\n\t\t\texpect(Number.parseInt(result.redis.responseTime)).toBeGreaterThan(200)\r\n\t\t})\r\n\r\n\t\tit('should generate warnings for performance issues', async () => {\r\n\t\t\tlet capturedValue: any = null\r\n\t\t\tlet deleteWasCalled = false\r\n\r\n\t\t\tredisCacheService.ping.mockResolvedValue('PONG')\r\n\t\t\tredisCacheService.set.mockImplementation(async (key, value) => {\r\n\t\t\t\tcapturedValue = value\r\n\t\t\t\treturn undefined\r\n\t\t\t})\r\n\t\t\tredisCacheService.get.mockImplementation(async (key) => {\r\n\t\t\t\tif (key === 'health-check-redis-test' && !deleteWasCalled) {\r\n\t\t\t\t\treturn capturedValue\r\n\t\t\t\t}\r\n\t\t\t\treturn null\r\n\t\t\t})\r\n\t\t\tredisCacheService.getTtl.mockResolvedValue(59)\r\n\t\t\tredisCacheService.delete.mockImplementation(async (key) => {\r\n\t\t\t\tif (key === 'health-check-redis-test') {\r\n\t\t\t\t\tdeleteWasCalled = true\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined\r\n\t\t\t})\r\n\t\t\tredisCacheService.getStats.mockResolvedValue({\r\n\t\t\t\thits: 5,\r\n\t\t\t\tmisses: 10,\r\n\t\t\t\tkeys: 100,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 1048576,\r\n\t\t\t\thitRate: 0.33, // Low hit rate\r\n\t\t\t})\r\n\t\t\tredisCacheService.getMemoryUsage.mockResolvedValue({\r\n\t\t\t\tused: 209715200, // 200MB\r\n\t\t\t\tpeak: 2097152,\r\n\t\t\t\tfragmentation: 2.0, // High fragmentation\r\n\t\t\t})\r\n\t\t\tredisCacheService.getConnectionStatus.mockReturnValue({\r\n\t\t\t\tconnected: true,\r\n\t\t\t\tstats: { hits: 5, misses: 10, operations: 20, errors: 3 }, // Has errors\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await indicator.isHealthy()\r\n\r\n\t\t\texpect(result.redis.warnings).toEqual(\r\n\t\t\t\texpect.arrayContaining([\r\n\t\t\t\t\texpect.stringContaining('Cache hit rate (33%) is below optimal (70%)'),\r\n\t\t\t\t]),\r\n\t\t\t)\r\n\t\t\texpect(result.redis.warnings).toEqual(\r\n\t\t\t\texpect.arrayContaining([\r\n\t\t\t\t\texpect.stringContaining('Memory fragmentation (2) is high (>1.5)'),\r\n\t\t\t\t\texpect.stringContaining('Redis has recorded 3 errors'),\r\n\t\t\t\t\texpect.stringContaining('Memory usage (200MB) is high'),\r\n\t\t\t\t]),\r\n\t\t\t)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDetailedStatus', () => {\r\n\t\tit('should return detailed Redis status when connected', async () => {\r\n\t\t\tredisCacheService.getStats.mockResolvedValue({\r\n\t\t\t\thits: 100,\r\n\t\t\t\tmisses: 20,\r\n\t\t\t\tkeys: 50,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 1048576,\r\n\t\t\t\thitRate: 0.83,\r\n\t\t\t})\r\n\t\t\tredisCacheService.getMemoryUsage.mockResolvedValue({\r\n\t\t\t\tused: 1048576,\r\n\t\t\t\tpeak: 2097152,\r\n\t\t\t\tfragmentation: 1.2,\r\n\t\t\t})\r\n\t\t\tredisCacheService.getConnectionStatus.mockReturnValue({\r\n\t\t\t\tconnected: true,\r\n\t\t\t\tstats: { hits: 100, misses: 20, operations: 150, errors: 1 },\r\n\t\t\t})\r\n\t\t\tredisCacheService.keys.mockResolvedValue(['key1', 'key2', 'key3'])\r\n\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result).toEqual({\r\n\t\t\t\ttype: 'redis-cache',\r\n\t\t\t\tstatus: 'operational',\r\n\t\t\t\tconnection: {\r\n\t\t\t\t\tconnected: true,\r\n\t\t\t\t\thost: mockConfig.host,\r\n\t\t\t\t\tport: mockConfig.port,\r\n\t\t\t\t\tdb: mockConfig.db,\r\n\t\t\t\t},\r\n\t\t\t\tstatistics: {\r\n\t\t\t\t\thits: 100,\r\n\t\t\t\t\tmisses: 20,\r\n\t\t\t\t\tkeys: 50,\r\n\t\t\t\t\tksize: 0,\r\n\t\t\t\t\tvsize: 1048576,\r\n\t\t\t\t\thitRate: 0.83,\r\n\t\t\t\t\toperations: 150,\r\n\t\t\t\t\terrors: 1,\r\n\t\t\t\t},\r\n\t\t\t\tmemory: {\r\n\t\t\t\t\tused: 1048576,\r\n\t\t\t\t\tpeak: 2097152,\r\n\t\t\t\t\tfragmentation: 1.2,\r\n\t\t\t\t\tusedMB: 1,\r\n\t\t\t\t\tpeakMB: 2,\r\n\t\t\t\t},\r\n\t\t\t\tconfiguration: {\r\n\t\t\t\t\thost: mockConfig.host,\r\n\t\t\t\t\tport: mockConfig.port,\r\n\t\t\t\t\tdb: mockConfig.db,\r\n\t\t\t\t\tttl: mockConfig.ttl,\r\n\t\t\t\t\tmaxRetries: mockConfig.maxRetries,\r\n\t\t\t\t},\r\n\t\t\t\trecentKeys: ['key1', 'key2', 'key3'],\r\n\t\t\t\tlastUpdated: expect.any(String),\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tit('should return disconnected status when not connected', async () => {\r\n\t\t\tredisCacheService.getConnectionStatus.mockReturnValue({\r\n\t\t\t\tconnected: false,\r\n\t\t\t\tstats: { hits: 0, misses: 0, operations: 0, errors: 5 },\r\n\t\t\t})\r\n\t\t\tredisCacheService.getStats.mockResolvedValue({\r\n\t\t\t\thits: 0,\r\n\t\t\t\tmisses: 0,\r\n\t\t\t\tkeys: 0,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 0,\r\n\t\t\t\thitRate: 0,\r\n\t\t\t})\r\n\t\t\tredisCacheService.getMemoryUsage.mockResolvedValue({\r\n\t\t\t\tused: 0,\r\n\t\t\t\tpeak: 0,\r\n\t\t\t\tfragmentation: 0,\r\n\t\t\t})\r\n\t\t\tredisCacheService.keys.mockResolvedValue([])\r\n\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result.status).toBe('disconnected')\r\n\t\t\texpect(result.connection.connected).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should handle errors gracefully', async () => {\r\n\t\t\tredisCacheService.getStats.mockRejectedValue(new Error('Connection failed'))\r\n\r\n\t\t\tconst result = await indicator.getDetailedStatus()\r\n\r\n\t\t\texpect(result).toEqual({\r\n\t\t\t\ttype: 'redis-cache',\r\n\t\t\t\tstatus: 'error',\r\n\t\t\t\terror: 'Connection failed',\r\n\t\t\t\tlastUpdated: expect.any(String),\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('getDescription', () => {\r\n\t\tit('should return correct description', () => {\r\n\t\t\t// Access the protected method through any casting for testing\r\n\t\t\tconst description = (indicator as any).getDescription()\r\n\t\t\texpect(description).toBe('Redis cache health indicator that tests connection and basic operations')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('key property', () => {\r\n\t\tit('should have correct key', () => {\r\n\t\t\texpect(indicator.key).toBe('redis')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["RedisHealthIndicator","RedisCacheService","ConfigService","Test","afterEach","beforeEach","describe","expect","it","vi","indicator","redisCacheService","mockConfig","host","port","db","ttl","maxRetries","mockRedisCacheService","ping","fn","get","set","delete","getTtl","getStats","getMemoryUsage","getConnectionStatus","keys","mockConfigService","mockImplementation","key","undefined","module","createTestingModule","providers","provide","useValue","compile","clearAllMocks","capturedValue","deleteWasCalled","mockResolvedValue","value","hits","misses","ksize","vsize","hitRate","used","peak","fragmentation","mockReturnValue","connected","stats","operations","errors","result","isHealthy","redis","status","toBe","connection","statistics","memory","usedMB","warnings","toEqual","error","toContain","timestamp","test","storedValue","Promise","resolve","getCallCount","_key","mockRejectedValue","Error","testValue","Date","now","setTimeout","mockResolvedValueOnce","Number","parseInt","responseTime","toBeGreaterThan","arrayContaining","stringContaining","getDetailedStatus","type","peakMB","configuration","recentKeys","lastUpdated","any","String","description","getDescription"],"mappings":"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"}