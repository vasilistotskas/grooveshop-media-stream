{"version":3,"sources":["../../../../../src/test/Cache/services/memory-cache.service.spec.ts"],"sourcesContent":["import type { MockedObject } from 'vitest'\r\nimport { MemoryCacheService } from '@microservice/Cache/services/memory-cache.service'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\n\r\ndescribe('memoryCacheService', () => {\r\n\tlet service: MemoryCacheService\r\n\tlet configService: MockedObject<ConfigService>\r\n\tlet metricsService: MockedObject<MetricsService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'cache.memory') {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdefaultTtl: 3600,\r\n\t\t\t\t\t\tcheckPeriod: 600,\r\n\t\t\t\t\t\tmaxKeys: 1000,\r\n\t\t\t\t\t\tmaxSize: 100 * 1024 * 1024,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst mockMetricsService = {\r\n\t\t\trecordCacheOperation: vi.fn(),\r\n\t\t\tupdateCacheHitRatio: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tMemoryCacheService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\tuseValue: mockMetricsService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<MemoryCacheService>(MemoryCacheService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\t\tmetricsService = module.get(MetricsService)\r\n\r\n\t\t// Setup default config\r\n\t\tconfigService.get.mockImplementation((key: string) => {\r\n\t\t\tif (key === 'cache.memory') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdefaultTtl: 3600,\r\n\t\t\t\t\tcheckPeriod: 600,\r\n\t\t\t\t\tmaxKeys: 1000,\r\n\t\t\t\t\tmaxSize: 100 * 1024 * 1024,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn undefined\r\n\t\t})\r\n\t})\r\n\r\n\tafterEach(async () => {\r\n\t\tawait service.clear()\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('basic Cache Operations', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(service).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should set and get a value', async () => {\r\n\t\t\tconst key = 'test-key'\r\n\t\t\tconst value = { data: 'test-value', timestamp: Date.now() }\r\n\r\n\t\t\tawait service.set(key, value)\r\n\t\t\tconst result = await service.get(key)\r\n\r\n\t\t\texpect(result).toEqual(value)\r\n\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('set', 'memory', 'success')\r\n\t\t})\r\n\r\n\t\tit('should return null for non-existent key', async () => {\r\n\t\t\tconst result = await service.get('non-existent-key')\r\n\t\t\texpect(result).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should delete a key', async () => {\r\n\t\t\tconst key = 'test-key'\r\n\t\t\tconst value = 'test-value'\r\n\r\n\t\t\tawait service.set(key, value)\r\n\t\t\tawait service.delete(key)\r\n\t\t\tconst result = await service.get(key)\r\n\r\n\t\t\texpect(result).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should check if key exists', async () => {\r\n\t\t\tconst key = 'test-key'\r\n\t\t\tconst value = 'test-value'\r\n\r\n\t\t\texpect(await service.has(key)).toBe(false)\r\n\r\n\t\t\tawait service.set(key, value)\r\n\t\t\texpect(await service.has(key)).toBe(true)\r\n\r\n\t\t\tawait service.delete(key)\r\n\t\t\texpect(await service.has(key)).toBe(false)\r\n\t\t})\r\n\r\n\t\tit('should clear all keys', async () => {\r\n\t\t\tawait service.set('key1', 'value1')\r\n\t\t\tawait service.set('key2', 'value2')\r\n\r\n\t\t\tawait service.clear()\r\n\r\n\t\t\texpect(await service.get('key1')).toBeNull()\r\n\t\t\texpect(await service.get('key2')).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should get all keys', async () => {\r\n\t\t\tawait service.set('key1', 'value1')\r\n\t\t\tawait service.set('key2', 'value2')\r\n\r\n\t\t\tconst keys = await service.keys()\r\n\r\n\t\t\texpect(keys).toContain('key1')\r\n\t\t\texpect(keys).toContain('key2')\r\n\t\t\texpect(keys).toHaveLength(2)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('tTL Operations', () => {\r\n\t\tit('should set value with custom TTL', async () => {\r\n\t\t\tconst key = 'ttl-test'\r\n\t\t\tconst value = 'test-value'\r\n\t\t\tconst ttl = 1 // 1 second\r\n\r\n\t\t\tawait service.set(key, value, ttl)\r\n\t\t\texpect(await service.get(key)).toBe(value)\r\n\r\n\t\t\t// Wait for expiration\r\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 1100))\r\n\t\t\texpect(await service.get(key)).toBeNull()\r\n\t\t})\r\n\r\n\t\tit('should get TTL for a key', async () => {\r\n\t\t\tconst key = 'ttl-test'\r\n\t\t\tconst value = 'test-value'\r\n\t\t\tconst ttl = 3600\r\n\r\n\t\t\tawait service.set(key, value, ttl)\r\n\t\t\tconst keyTtl = service.getTtl(key)\r\n\r\n\t\t\t// NodeCache getTtl returns a timestamp, so it should be greater than current time\r\n\t\t\texpect(keyTtl).toBeGreaterThan(Date.now())\r\n\t\t\t// And should be within the expected TTL range (current time + ttl seconds)\r\n\t\t\texpect(keyTtl).toBeLessThanOrEqual(Date.now() + (ttl * 1000))\r\n\t\t})\r\n\r\n\t\tit('should update TTL for existing key', async () => {\r\n\t\t\tconst key = 'ttl-test'\r\n\t\t\tconst value = 'test-value'\r\n\r\n\t\t\tawait service.set(key, value, 3600)\r\n\t\t\tconst success = service.setTtl(key, 7200)\r\n\r\n\t\t\texpect(success).toBe(true)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('statistics', () => {\r\n\t\tit('should return cache statistics', async () => {\r\n\t\t\tawait service.set('key1', 'value1')\r\n\t\t\tawait service.set('key2', 'value2')\r\n\t\t\tawait service.get('key1') // Hit\r\n\t\t\tawait service.get('key3') // Miss\r\n\r\n\t\t\tconst stats = await service.getStats()\r\n\r\n\t\t\texpect(stats).toHaveProperty('hits')\r\n\t\t\texpect(stats).toHaveProperty('misses')\r\n\t\t\texpect(stats).toHaveProperty('keys')\r\n\t\t\texpect(stats).toHaveProperty('hitRate')\r\n\t\t\texpect(stats.keys).toBe(2)\r\n\t\t\texpect(metricsService.updateCacheHitRatio).toHaveBeenCalledWith('memory', expect.any(Number))\r\n\t\t})\r\n\r\n\t\tit('should calculate hit rate correctly', async () => {\r\n\t\t\tawait service.set('key1', 'value1')\r\n\r\n\t\t\t// Generate some hits and misses\r\n\t\t\tawait service.get('key1') // Hit\r\n\t\t\tawait service.get('key1') // Hit\r\n\t\t\tawait service.get('key2') // Miss\r\n\r\n\t\t\tconst stats = await service.getStats()\r\n\r\n\t\t\texpect(stats.hitRate).toBeCloseTo(0.67, 1) // 2 hits out of 3 requests\r\n\t\t})\r\n\r\n\t\tit('should return memory usage information', async () => {\r\n\t\t\tconst memoryUsage = service.getMemoryUsage()\r\n\r\n\t\t\texpect(memoryUsage).toHaveProperty('used')\r\n\t\t\texpect(memoryUsage).toHaveProperty('total')\r\n\t\t\texpect(typeof memoryUsage.used).toBe('number')\r\n\t\t\texpect(typeof memoryUsage.total).toBe('number')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('error Handling', () => {\r\n\t\tit('should handle get errors gracefully', async () => {\r\n\t\t\t// Mock cache to throw error\r\n\t\t\tconst originalGet = (service as any).cache.get\r\n\t\t\t;(service as any).cache.get = vi.fn().mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Cache error')\r\n\t\t\t})\r\n\r\n\t\t\tconst result = await service.get('test-key')\r\n\r\n\t\t\texpect(result).toBeNull()\r\n\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'memory', 'error')\r\n\r\n\t\t\t// Restore original method\r\n\t\t\t;(service as any).cache.get = originalGet\r\n\t\t})\r\n\r\n\t\tit('should handle set errors gracefully', async () => {\r\n\t\t\t// Mock cache to throw error\r\n\t\t\tconst originalSet = (service as any).cache.set\r\n\t\t\t;(service as any).cache.set = vi.fn().mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Cache error')\r\n\t\t\t})\r\n\r\n\t\t\tawait expect(service.set('test-key', 'test-value')).rejects.toThrow('Cache error')\r\n\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('set', 'memory', 'error')\r\n\r\n\t\t\t// Restore original method\r\n\t\t\t;(service as any).cache.set = originalSet\r\n\t\t})\r\n\r\n\t\tit('should handle stats errors gracefully', async () => {\r\n\t\t\t// Mock cache to throw error\r\n\t\t\tconst originalGetStats = (service as any).cache.getStats\r\n\t\t\t;(service as any).cache.getStats = vi.fn().mockImplementation(() => {\r\n\t\t\t\tthrow new Error('Stats error')\r\n\t\t\t})\r\n\r\n\t\t\tconst stats = await service.getStats()\r\n\r\n\t\t\texpect(stats).toEqual({\r\n\t\t\t\thits: 0,\r\n\t\t\t\tmisses: 0,\r\n\t\t\t\tkeys: 0,\r\n\t\t\t\tksize: 0,\r\n\t\t\t\tvsize: 0,\r\n\t\t\t\thitRate: 0,\r\n\t\t\t})\r\n\r\n\t\t\t// Restore original method\r\n\t\t\t;(service as any).cache.getStats = originalGetStats\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('configuration', () => {\r\n\t\tit('should use configuration values', () => {\r\n\t\t\texpect(configService.get).toHaveBeenCalledWith('cache.memory')\r\n\t\t})\r\n\r\n\t\tit('should handle missing configuration gracefully', async () => {\r\n\t\t\tconfigService.get.mockReturnValue(undefined)\r\n\r\n\t\t\t// Create new service instance with missing config\r\n\t\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tMemoryCacheService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: configService,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\t\tuseValue: metricsService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst newService = module.get<MemoryCacheService>(MemoryCacheService)\r\n\t\t\texpect(newService).toBeDefined()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('metrics Integration', () => {\r\n\t\tit('should record cache operations in metrics', async () => {\r\n\t\t\t// Clear any previous calls\r\n\t\t\tvi.clearAllMocks()\r\n\r\n\t\t\tawait service.set('key1', 'value1')\r\n\t\t\tconst value = await service.get('key1') // This should be a hit since we just set it\r\n\t\t\tawait service.delete('key1')\r\n\t\t\tawait service.clear()\r\n\r\n\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('set', 'memory', 'success')\r\n\t\t\t// Note: get operation metrics are recorded via NodeCache events, which may not fire in test environment\r\n\t\t\t// The important thing is that the get operation works correctly\r\n\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('delete', 'memory', 'success')\r\n\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('flush', 'memory', 'success')\r\n\t\t\texpect(value).toBe('value1') // Ensure the get actually worked\r\n\t\t})\r\n\r\n\t\tit('should update hit ratio in metrics', async () => {\r\n\t\t\tawait service.getStats()\r\n\r\n\t\t\texpect(metricsService.updateCacheHitRatio).toHaveBeenCalledWith('memory', expect.any(Number))\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["MemoryCacheService","ConfigService","MetricsService","Test","afterEach","beforeEach","describe","expect","it","vi","service","configService","metricsService","mockConfigService","get","fn","mockImplementation","key","defaultTtl","checkPeriod","maxKeys","maxSize","undefined","mockMetricsService","recordCacheOperation","updateCacheHitRatio","module","createTestingModule","providers","provide","useValue","compile","clear","clearAllMocks","toBeDefined","value","data","timestamp","Date","now","set","result","toEqual","toHaveBeenCalledWith","toBeNull","delete","has","toBe","keys","toContain","toHaveLength","ttl","Promise","resolve","setTimeout","keyTtl","getTtl","toBeGreaterThan","toBeLessThanOrEqual","success","setTtl","stats","getStats","toHaveProperty","any","Number","hitRate","toBeCloseTo","memoryUsage","getMemoryUsage","used","total","originalGet","cache","Error","originalSet","rejects","toThrow","originalGetStats","hits","misses","ksize","vsize","mockReturnValue","newService"],"mappings":"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"}