{"version":3,"sources":["../../../../../src/test/Cache/services/redis-cache.service.spec.ts"],"sourcesContent":["import type { MockedClass, MockedObject } from 'vitest'\r\nimport { Buffer } from 'node:buffer'\r\nimport { RedisCacheService } from '@microservice/Cache/services/redis-cache.service'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\r\nimport Redis from 'ioredis'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock ioredis\r\nvi.mock('ioredis')\r\n\r\ndescribe('redisCacheService', () => {\r\n\tlet service: RedisCacheService\r\n\tlet metricsService: MockedObject<MetricsService>\r\n\tlet mockRedis: MockedObject<Redis>\r\n\r\n\tconst mockConfig = {\r\n\t\thost: 'localhost',\r\n\t\tport: 6379,\r\n\t\tpassword: undefined,\r\n\t\tdb: 0,\r\n\t\tttl: 7200,\r\n\t\tmaxRetries: 3,\r\n\t\tretryDelayOnFailover: 100,\r\n\t}\r\n\r\n\tbeforeEach(async () => {\r\n\t\t// Create mock Redis instance\r\n\t\tmockRedis = {\r\n\t\t\tconnect: vi.fn().mockResolvedValue(undefined),\r\n\t\t\tquit: vi.fn().mockResolvedValue('OK'),\r\n\t\t\tget: vi.fn(),\r\n\t\t\tset: vi.fn().mockResolvedValue('OK'),\r\n\t\t\tsetex: vi.fn().mockResolvedValue('OK'),\r\n\t\t\tdel: vi.fn().mockResolvedValue(1),\r\n\t\t\tflushdb: vi.fn().mockResolvedValue('OK'),\r\n\t\t\tflushall: vi.fn().mockResolvedValue('OK'),\r\n\t\t\texists: vi.fn(),\r\n\t\t\tkeys: vi.fn().mockResolvedValue(['key1', 'key2']),\r\n\t\t\tping: vi.fn().mockResolvedValue('PONG'),\r\n\t\t\tttl: vi.fn().mockResolvedValue(3600),\r\n\t\t\texpire: vi.fn().mockResolvedValue(1),\r\n\t\t\tinfo: vi.fn(),\r\n\t\t\ton: vi.fn(),\r\n\t\t} as any\r\n\r\n\t\t// Mock Redis constructor\r\n\t\t;(Redis as MockedClass<typeof Redis>).mockImplementation(() => mockRedis)\r\n\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn().mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'cache.redis')\r\n\t\t\t\t\treturn mockConfig\r\n\t\t\t\tif (key === 'cache.redis.ttl')\r\n\t\t\t\t\treturn mockConfig.ttl\r\n\t\t\t\treturn undefined\r\n\t\t\t}),\r\n\t\t}\r\n\r\n\t\tconst mockMetricsService = {\r\n\t\t\trecordCacheOperation: vi.fn(),\r\n\t\t\tupdateCacheHitRatio: vi.fn(),\r\n\t\t\tupdateActiveConnections: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tRedisCacheService,\r\n\t\t\t\t{ provide: ConfigService, useValue: mockConfigService },\r\n\t\t\t\t{ provide: MetricsService, useValue: mockMetricsService },\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<RedisCacheService>(RedisCacheService)\r\n\t\tmetricsService = module.get(MetricsService)\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('initialization', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(service).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should initialize Redis connection on module init', async () => {\r\n\t\t\tawait service.onModuleInit()\r\n\r\n\t\t\texpect(Redis).toHaveBeenCalledWith({\r\n\t\t\t\thost: mockConfig.host,\r\n\t\t\t\tport: mockConfig.port,\r\n\t\t\t\tpassword: mockConfig.password,\r\n\t\t\t\tdb: mockConfig.db,\r\n\t\t\t\tmaxRetriesPerRequest: mockConfig.maxRetries,\r\n\t\t\t\tenableReadyCheck: true,\r\n\t\t\t\tlazyConnect: true,\r\n\t\t\t\tkeepAlive: 30000,\r\n\t\t\t\tconnectTimeout: 10000,\r\n\t\t\t\tcommandTimeout: 5000,\r\n\t\t\t})\r\n\t\t\texpect(mockRedis.connect).toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should set up event listeners', async () => {\r\n\t\t\tawait service.onModuleInit()\r\n\r\n\t\t\texpect(mockRedis.on).toHaveBeenCalledWith('connect', expect.any(Function))\r\n\t\t\texpect(mockRedis.on).toHaveBeenCalledWith('ready', expect.any(Function))\r\n\t\t\texpect(mockRedis.on).toHaveBeenCalledWith('error', expect.any(Function))\r\n\t\t\texpect(mockRedis.on).toHaveBeenCalledWith('close', expect.any(Function))\r\n\t\t\texpect(mockRedis.on).toHaveBeenCalledWith('reconnecting', expect.any(Function))\r\n\t\t})\r\n\r\n\t\tit('should close Redis connection on module destroy', async () => {\r\n\t\t\tawait service.onModuleInit()\r\n\t\t\tawait service.onModuleDestroy()\r\n\r\n\t\t\texpect(mockRedis.quit).toHaveBeenCalled()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('cache operations', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\tawait service.onModuleInit()\r\n\t\t\t// Simulate ready event\r\n\t\t\tconst readyCallback = mockRedis.on.mock.calls.find(call => call[0] === 'ready')?.[1]\r\n\t\t\tif (readyCallback)\r\n\t\t\t\treadyCallback()\r\n\t\t})\r\n\r\n\t\tdescribe('get', () => {\r\n\t\t\tit('should get value from Redis and parse JSON', async () => {\r\n\t\t\t\tconst testValue = { test: 'data', number: 42 }\r\n\t\t\t\tmockRedis.get.mockResolvedValue(JSON.stringify(testValue))\r\n\r\n\t\t\t\tconst result = await service.get<typeof testValue>('test-key')\r\n\r\n\t\t\t\texpect(mockRedis.get).toHaveBeenCalledWith('test-key')\r\n\t\t\t\texpect(result).toEqual(testValue)\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'redis', 'hit')\r\n\t\t\t})\r\n\r\n\t\t\tit('should return null when key does not exist', async () => {\r\n\t\t\t\tmockRedis.get.mockResolvedValue(null)\r\n\r\n\t\t\t\tconst result = await service.get('non-existent-key')\r\n\r\n\t\t\t\texpect(result).toBeNull()\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'redis', 'miss')\r\n\t\t\t})\r\n\r\n\t\t\tit('should handle Redis errors gracefully', async () => {\r\n\t\t\t\tmockRedis.get.mockRejectedValue(new Error('Redis connection failed'))\r\n\r\n\t\t\t\tconst result = await service.get('test-key')\r\n\r\n\t\t\t\texpect(result).toBeNull()\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'redis', 'error')\r\n\t\t\t})\r\n\r\n\t\t\tit('should return null when Redis is not connected', async () => {\r\n\t\t\t\t// Simulate disconnected state\r\n\t\t\t\tconst closeCallback = mockRedis.on.mock.calls.find(call => call[0] === 'close')?.[1]\r\n\t\t\t\tif (closeCallback)\r\n\t\t\t\t\tcloseCallback()\r\n\r\n\t\t\t\tconst result = await service.get('test-key')\r\n\r\n\t\t\t\texpect(result).toBeNull()\r\n\t\t\t\texpect(mockRedis.get).not.toHaveBeenCalled()\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('get', 'redis', 'miss')\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('set', () => {\r\n\t\t\tit('should set value in Redis with TTL', async () => {\r\n\t\t\t\tconst testValue = { test: 'data' }\r\n\t\t\t\tconst ttl = 3600\r\n\r\n\t\t\t\tawait service.set('test-key', testValue, ttl)\r\n\r\n\t\t\t\texpect(mockRedis.setex).toHaveBeenCalledWith('test-key', ttl, JSON.stringify(testValue))\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('set', 'redis', 'success')\r\n\t\t\t})\r\n\r\n\t\t\tit('should set value in Redis with default TTL', async () => {\r\n\t\t\t\tconst testValue = { test: 'data' }\r\n\r\n\t\t\t\tawait service.set('test-key', testValue)\r\n\r\n\t\t\t\texpect(mockRedis.setex).toHaveBeenCalledWith('test-key', mockConfig.ttl, JSON.stringify(testValue))\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('set', 'redis', 'success')\r\n\t\t\t})\r\n\r\n\t\t\tit('should set value without TTL when TTL is 0', async () => {\r\n\t\t\t\tconst testValue = { test: 'data' }\r\n\r\n\t\t\t\tawait service.set('test-key', testValue, 0)\r\n\r\n\t\t\t\texpect(mockRedis.set).toHaveBeenCalledWith('test-key', JSON.stringify(testValue))\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('set', 'redis', 'success')\r\n\t\t\t})\r\n\r\n\t\t\tit('should handle Redis errors', async () => {\r\n\t\t\t\tmockRedis.setex.mockRejectedValue(new Error('Redis connection failed'))\r\n\r\n\t\t\t\t// The service should handle errors gracefully and not throw\r\n\t\t\t\tawait service.set('test-key', { test: 'data' })\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('set', 'redis', 'error')\r\n\t\t\t})\r\n\r\n\t\t\tit('should skip operation when Redis is not connected', async () => {\r\n\t\t\t\t// Simulate disconnected state\r\n\t\t\t\tconst closeCallback = mockRedis.on.mock.calls.find(call => call[0] === 'close')?.[1]\r\n\t\t\t\tif (closeCallback)\r\n\t\t\t\t\tcloseCallback()\r\n\r\n\t\t\t\tawait service.set('test-key', { test: 'data' })\r\n\r\n\t\t\t\texpect(mockRedis.setex).not.toHaveBeenCalled()\r\n\t\t\t\texpect(mockRedis.set).not.toHaveBeenCalled()\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('delete', () => {\r\n\t\t\tit('should delete key from Redis', async () => {\r\n\t\t\t\tawait service.delete('test-key')\r\n\r\n\t\t\t\texpect(mockRedis.del).toHaveBeenCalledWith('test-key')\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('delete', 'redis', 'success')\r\n\t\t\t})\r\n\r\n\t\t\tit('should handle Redis errors', async () => {\r\n\t\t\t\tmockRedis.del.mockRejectedValue(new Error('Redis connection failed'))\r\n\r\n\t\t\t\tawait expect(service.delete('test-key')).rejects.toThrow('Redis connection failed')\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('delete', 'redis', 'error')\r\n\t\t\t})\r\n\r\n\t\t\tit('should skip operation when Redis is not connected', async () => {\r\n\t\t\t\t// Simulate disconnected state\r\n\t\t\t\tconst closeCallback = mockRedis.on.mock.calls.find(call => call[0] === 'close')?.[1]\r\n\t\t\t\tif (closeCallback)\r\n\t\t\t\t\tcloseCallback()\r\n\r\n\t\t\t\tawait service.delete('test-key')\r\n\r\n\t\t\t\texpect(mockRedis.del).not.toHaveBeenCalled()\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('clear', () => {\r\n\t\t\tit('should flush current database', async () => {\r\n\t\t\t\tawait service.clear()\r\n\r\n\t\t\t\texpect(mockRedis.flushdb).toHaveBeenCalled()\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('clear', 'redis', 'success')\r\n\t\t\t})\r\n\r\n\t\t\tit('should handle Redis errors', async () => {\r\n\t\t\t\tmockRedis.flushdb.mockRejectedValue(new Error('Redis connection failed'))\r\n\r\n\t\t\t\tawait expect(service.clear()).rejects.toThrow('Redis connection failed')\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('clear', 'redis', 'error')\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('has', () => {\r\n\t\t\tit('should return true when key exists', async () => {\r\n\t\t\t\tmockRedis.exists.mockResolvedValue(1)\r\n\r\n\t\t\t\tconst result = await service.has('test-key')\r\n\r\n\t\t\t\texpect(result).toBe(true)\r\n\t\t\t\texpect(mockRedis.exists).toHaveBeenCalledWith('test-key')\r\n\t\t\t})\r\n\r\n\t\t\tit('should return false when key does not exist', async () => {\r\n\t\t\t\tmockRedis.exists.mockResolvedValue(0)\r\n\r\n\t\t\t\tconst result = await service.has('test-key')\r\n\r\n\t\t\t\texpect(result).toBe(false)\r\n\t\t\t})\r\n\r\n\t\t\tit('should return false on Redis errors', async () => {\r\n\t\t\t\tmockRedis.exists.mockRejectedValue(new Error('Redis connection failed'))\r\n\r\n\t\t\t\tconst result = await service.has('test-key')\r\n\r\n\t\t\t\texpect(result).toBe(false)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('keys', () => {\r\n\t\t\tit('should return all keys', async () => {\r\n\t\t\t\tconst mockKeys = ['key1', 'key2', 'key3']\r\n\t\t\t\tmockRedis.keys.mockResolvedValue(mockKeys)\r\n\r\n\t\t\t\tconst result = await service.keys()\r\n\r\n\t\t\t\texpect(result).toEqual(mockKeys)\r\n\t\t\t\texpect(mockRedis.keys).toHaveBeenCalledWith('*')\r\n\t\t\t})\r\n\r\n\t\t\tit('should return empty array on Redis errors', async () => {\r\n\t\t\t\tmockRedis.keys.mockRejectedValue(new Error('Redis connection failed'))\r\n\r\n\t\t\t\tconst result = await service.keys()\r\n\r\n\t\t\t\texpect(result).toEqual([])\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('flushAll', () => {\r\n\t\t\tit('should flush all databases', async () => {\r\n\t\t\t\tawait service.flushAll()\r\n\r\n\t\t\t\texpect(mockRedis.flushall).toHaveBeenCalled()\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('flush', 'redis', 'success')\r\n\t\t\t})\r\n\r\n\t\t\tit('should handle Redis errors', async () => {\r\n\t\t\t\tmockRedis.flushall.mockRejectedValue(new Error('Redis connection failed'))\r\n\r\n\t\t\t\tawait expect(service.flushAll()).rejects.toThrow('Redis connection failed')\r\n\t\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('flush', 'redis', 'error')\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('getStats', () => {\r\n\t\t\tit('should return cache statistics', async () => {\r\n\t\t\t\tmockRedis.info.mockImplementation((...args: (string | Buffer)[]) => {\r\n\t\t\t\t\tconst section = args[0] as string\r\n\t\t\t\t\tif (section === 'keyspace')\r\n\t\t\t\t\t\treturn Promise.resolve('db0:keys=100,expires=50')\r\n\t\t\t\t\tif (section === 'memory')\r\n\t\t\t\t\t\treturn Promise.resolve('used_memory:1048576')\r\n\t\t\t\t\treturn Promise.resolve('')\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Simulate some cache operations to generate stats\r\n\t\t\t\tmockRedis.get.mockResolvedValueOnce(null) // miss\r\n\t\t\t\tawait service.get('key1')\r\n\t\t\t\tmockRedis.get.mockResolvedValueOnce(JSON.stringify({ test: 'data' })) // hit\r\n\t\t\t\tawait service.get('key2')\r\n\t\t\t\tmockRedis.get.mockResolvedValueOnce(JSON.stringify({ test: 'data2' })) // hit\r\n\t\t\t\tawait service.get('key3')\r\n\r\n\t\t\t\tconst stats = await service.getStats()\r\n\r\n\t\t\t\texpect(stats).toEqual({\r\n\t\t\t\t\thits: 2,\r\n\t\t\t\t\tmisses: 1,\r\n\t\t\t\t\tkeys: 100,\r\n\t\t\t\t\tksize: 0,\r\n\t\t\t\t\tvsize: 1048576,\r\n\t\t\t\t\thitRate: 0.6666666666666666,\r\n\t\t\t\t})\r\n\t\t\t\texpect(metricsService.updateCacheHitRatio).toHaveBeenCalledWith('redis', 0.6666666666666666)\r\n\t\t\t})\r\n\r\n\t\t\tit('should handle Redis info errors gracefully', async () => {\r\n\t\t\t\tmockRedis.info.mockRejectedValue(new Error('Redis connection failed'))\r\n\r\n\t\t\t\tconst stats = await service.getStats()\r\n\r\n\t\t\t\texpect(stats.keys).toBe(0)\r\n\t\t\t\texpect(stats.vsize).toBe(0)\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('redis-specific methods', () => {\r\n\t\tbeforeEach(async () => {\r\n\t\t\tawait service.onModuleInit()\r\n\t\t\t// Simulate ready event\r\n\t\t\tconst readyCallback = mockRedis.on.mock.calls.find(call => call[0] === 'ready')?.[1]\r\n\t\t\tif (readyCallback)\r\n\t\t\t\treadyCallback()\r\n\t\t})\r\n\r\n\t\tdescribe('ping', () => {\r\n\t\t\tit('should ping Redis successfully', async () => {\r\n\t\t\t\tconst result = await service.ping()\r\n\r\n\t\t\t\texpect(result).toBe('PONG')\r\n\t\t\t\texpect(mockRedis.ping).toHaveBeenCalled()\r\n\t\t\t})\r\n\r\n\t\t\tit('should throw error when Redis is not connected', async () => {\r\n\t\t\t\t// Simulate disconnected state\r\n\t\t\t\tconst closeCallback = mockRedis.on.mock.calls.find(call => call[0] === 'close')?.[1]\r\n\t\t\t\tif (closeCallback)\r\n\t\t\t\t\tcloseCallback()\r\n\r\n\t\t\t\tawait expect(service.ping()).rejects.toThrow('Redis not connected')\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('getTtl', () => {\r\n\t\t\tit('should get TTL for key', async () => {\r\n\t\t\t\tmockRedis.ttl.mockResolvedValue(3600)\r\n\r\n\t\t\t\tconst result = await service.getTtl('test-key')\r\n\r\n\t\t\t\texpect(result).toBe(3600)\r\n\t\t\t\texpect(mockRedis.ttl).toHaveBeenCalledWith('test-key')\r\n\t\t\t})\r\n\r\n\t\t\tit('should return -1 when Redis is not connected', async () => {\r\n\t\t\t\t// Simulate disconnected state\r\n\t\t\t\tconst closeCallback = mockRedis.on.mock.calls.find(call => call[0] === 'close')?.[1]\r\n\t\t\t\tif (closeCallback)\r\n\t\t\t\t\tcloseCallback()\r\n\r\n\t\t\t\tconst result = await service.getTtl('test-key')\r\n\r\n\t\t\t\texpect(result).toBe(-1)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('setTtl', () => {\r\n\t\t\tit('should set TTL for key', async () => {\r\n\t\t\t\tmockRedis.expire.mockResolvedValue(1)\r\n\r\n\t\t\t\tconst result = await service.setTtl('test-key', 3600)\r\n\r\n\t\t\t\texpect(result).toBe(true)\r\n\t\t\t\texpect(mockRedis.expire).toHaveBeenCalledWith('test-key', 3600)\r\n\t\t\t})\r\n\r\n\t\t\tit('should return false when key does not exist', async () => {\r\n\t\t\t\tmockRedis.expire.mockResolvedValue(0)\r\n\r\n\t\t\t\tconst result = await service.setTtl('non-existent-key', 3600)\r\n\r\n\t\t\t\texpect(result).toBe(false)\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('getConnectionStatus', () => {\r\n\t\t\tit('should return connection status and stats', async () => {\r\n\t\t\t\tconst status = service.getConnectionStatus()\r\n\r\n\t\t\t\texpect(status).toEqual({\r\n\t\t\t\t\tconnected: true,\r\n\t\t\t\t\tstats: {\r\n\t\t\t\t\t\thits: 0,\r\n\t\t\t\t\t\tmisses: 0,\r\n\t\t\t\t\t\toperations: 0,\r\n\t\t\t\t\t\terrors: 0,\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tdescribe('getMemoryUsage', () => {\r\n\t\t\tit('should return memory usage information', async () => {\r\n\t\t\t\tmockRedis.info.mockResolvedValue(\r\n\t\t\t\t\t'used_memory:1048576\\nused_memory_peak:2097152\\nmem_fragmentation_ratio:1.25',\r\n\t\t\t\t)\r\n\r\n\t\t\t\tconst result = await service.getMemoryUsage()\r\n\r\n\t\t\t\texpect(result).toEqual({\r\n\t\t\t\t\tused: 1048576,\r\n\t\t\t\t\tpeak: 2097152,\r\n\t\t\t\t\tfragmentation: 1.25,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tit('should return zeros when Redis is not connected', async () => {\r\n\t\t\t\t// Simulate disconnected state\r\n\t\t\t\tconst closeCallback = mockRedis.on.mock.calls.find(call => call[0] === 'close')?.[1]\r\n\t\t\t\tif (closeCallback)\r\n\t\t\t\t\tcloseCallback()\r\n\r\n\t\t\t\tconst result = await service.getMemoryUsage()\r\n\r\n\t\t\t\texpect(result).toEqual({\r\n\t\t\t\t\tused: 0,\r\n\t\t\t\t\tpeak: 0,\r\n\t\t\t\t\tfragmentation: 0,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["RedisCacheService","ConfigService","MetricsService","Test","Redis","afterEach","beforeEach","describe","expect","it","vi","mock","service","metricsService","mockRedis","mockConfig","host","port","password","undefined","db","ttl","maxRetries","retryDelayOnFailover","connect","fn","mockResolvedValue","quit","get","set","setex","del","flushdb","flushall","exists","keys","ping","expire","info","on","mockImplementation","mockConfigService","key","mockMetricsService","recordCacheOperation","updateCacheHitRatio","updateActiveConnections","module","createTestingModule","providers","provide","useValue","compile","clearAllMocks","toBeDefined","onModuleInit","toHaveBeenCalledWith","maxRetriesPerRequest","enableReadyCheck","lazyConnect","keepAlive","connectTimeout","commandTimeout","toHaveBeenCalled","any","Function","onModuleDestroy","readyCallback","calls","find","call","testValue","test","number","JSON","stringify","result","toEqual","toBeNull","mockRejectedValue","Error","closeCallback","not","delete","rejects","toThrow","clear","has","toBe","mockKeys","flushAll","args","section","Promise","resolve","mockResolvedValueOnce","stats","getStats","hits","misses","ksize","vsize","hitRate","getTtl","setTtl","status","getConnectionStatus","connected","operations","errors","getMemoryUsage","used","peak","fragmentation"],"mappings":"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"}