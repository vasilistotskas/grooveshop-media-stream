{"version":3,"sources":["../../../../../src/test/Cache/services/cache-warming.service.spec.ts"],"sourcesContent":["import type { MockedFunction, MockedObject } from 'vitest'\r\nimport { Buffer } from 'node:buffer'\r\nimport { readdir, readFile, stat } from 'node:fs/promises'\r\nimport { join } from 'node:path'\r\nimport { CacheWarmingService } from '@microservice/Cache/services/cache-warming.service'\r\nimport { MemoryCacheService } from '@microservice/Cache/services/memory-cache.service'\r\nimport { ConfigService } from '@microservice/Config/config.service'\r\nimport { MetricsService } from '@microservice/Metrics/services/metrics.service'\r\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\n// Mock fs promises\r\nvi.mock('node:fs/promises')\r\nvi.mock('node:path')\r\n\r\nconst mockReaddir = readdir as unknown as MockedFunction<typeof readdir>\r\nconst mockStat = stat as unknown as MockedFunction<typeof stat>\r\nconst mockReadFile = readFile as unknown as MockedFunction<typeof readFile>\r\nconst mockJoin = join as unknown as MockedFunction<typeof join>\r\n\r\ndescribe('cacheWarmingService', () => {\r\n\tlet service: CacheWarmingService\r\n\tlet memoryCacheService: MockedObject<MemoryCacheService>\r\n\tlet configService: MockedObject<ConfigService>\r\n\tlet metricsService: MockedObject<MetricsService>\r\n\r\n\tbeforeEach(async () => {\r\n\t\tconst mockMemoryCacheService = {\r\n\t\t\thas: vi.fn(),\r\n\t\t\tset: vi.fn(),\r\n\t\t\tgetStats: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockConfigService = {\r\n\t\t\tget: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst mockMetricsService = {\r\n\t\t\trecordCacheOperation: vi.fn(),\r\n\t\t}\r\n\r\n\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\tproviders: [\r\n\t\t\t\tCacheWarmingService,\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MemoryCacheService,\r\n\t\t\t\t\tuseValue: mockMemoryCacheService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\tuseValue: mockConfigService,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\tuseValue: mockMetricsService,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t}).compile()\r\n\r\n\t\tservice = module.get<CacheWarmingService>(CacheWarmingService)\r\n\t\tmemoryCacheService = module.get(MemoryCacheService)\r\n\t\tconfigService = module.get(ConfigService)\r\n\t\tmetricsService = module.get(MetricsService)\r\n\r\n\t\t// Setup default config\r\n\t\tconfigService.get.mockImplementation((key: string) => {\r\n\t\t\tconst config = {\r\n\t\t\t\t'cache.warming': {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\twarmupOnStart: true,\r\n\t\t\t\t\tmaxFilesToWarm: 50,\r\n\t\t\t\t\twarmupCron: '0 */6 * * *',\r\n\t\t\t\t\tpopularImageThreshold: 5,\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t\treturn (config as any)[key]\r\n\t\t})\r\n\r\n\t\t// Setup default mocks\r\n\t\tmockJoin.mockImplementation((...paths) => paths.join('/'))\r\n\t\tmemoryCacheService.getStats.mockResolvedValue({\r\n\t\t\thits: 10,\r\n\t\t\tmisses: 5,\r\n\t\t\tkeys: 3,\r\n\t\t\tksize: 100,\r\n\t\t\tvsize: 1000,\r\n\t\t\thitRate: 0.67,\r\n\t\t})\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.clearAllMocks()\r\n\t})\r\n\r\n\tdescribe('initialization', () => {\r\n\t\tit('should be defined', () => {\r\n\t\t\texpect(service).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should load configuration on initialization', () => {\r\n\t\t\texpect(configService.get).toHaveBeenCalledWith('cache.warming')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('cache Warmup', () => {\r\n\t\tit('should warm up popular files', async () => {\r\n\t\t\t// Mock file system\r\n\t\t\tmockReaddir.mockResolvedValue(['file1.rsc', 'file2.rsc', 'file3.rsc'] as any)\r\n\t\t\tmockStat.mockResolvedValue({\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t\tsize: 1024,\r\n\t\t\t} as any)\r\n\t\t\tmockReadFile\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 10}') // metadata\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 8}') // metadata\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 6}') // metadata\r\n\t\t\t\t.mockResolvedValue(Buffer.from('file content')) // file content\r\n\r\n\t\t\tmemoryCacheService.has.mockResolvedValue(false)\r\n\t\t\tmemoryCacheService.set.mockResolvedValue()\r\n\r\n\t\t\tawait service.warmupCache()\r\n\r\n\t\t\texpect(mockReaddir).toHaveBeenCalled()\r\n\t\t\texpect(memoryCacheService.set).toHaveBeenCalledTimes(3)\r\n\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('warmup', 'memory', 'success')\r\n\t\t})\r\n\r\n\t\tit('should skip files already in cache', async () => {\r\n\t\t\tmockReaddir.mockResolvedValue(['file1.rsc'] as any)\r\n\t\t\tmockStat.mockResolvedValue({\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t\tsize: 1024,\r\n\t\t\t} as any)\r\n\t\t\tmockReadFile.mockResolvedValue('{\"accessCount\": 10}')\r\n\r\n\t\t\tmemoryCacheService.has.mockResolvedValue(true) // Already in cache\r\n\t\t\tmemoryCacheService.set.mockResolvedValue()\r\n\r\n\t\t\tawait service.warmupCache()\r\n\r\n\t\t\texpect(memoryCacheService.set).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should limit number of files warmed up', async () => {\r\n\t\t\t// Override config to limit files\r\n\t\t\tconfigService.get.mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'cache.warming') {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tenabled: true,\r\n\t\t\t\t\t\twarmupOnStart: true,\r\n\t\t\t\t\t\tmaxFilesToWarm: 2, // Limit to 2 files\r\n\t\t\t\t\t\twarmupCron: '0 */6 * * *',\r\n\t\t\t\t\t\tpopularImageThreshold: 5,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined\r\n\t\t\t})\r\n\r\n\t\t\t// Create new service instance with updated config\r\n\t\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tCacheWarmingService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: MemoryCacheService,\r\n\t\t\t\t\t\tuseValue: memoryCacheService,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: configService,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\t\tuseValue: metricsService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst limitedService = module.get<CacheWarmingService>(CacheWarmingService)\r\n\r\n\t\t\tmockReaddir.mockResolvedValue(['file1.rsc', 'file2.rsc', 'file3.rsc'] as any)\r\n\t\t\tmockStat.mockResolvedValue({\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t\tsize: 1024,\r\n\t\t\t} as any)\r\n\t\t\tmockReadFile\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 10}')\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 8}')\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 6}')\r\n\t\t\t\t.mockResolvedValue(Buffer.from('file content'))\r\n\r\n\t\t\tmemoryCacheService.has.mockResolvedValue(false)\r\n\t\t\tmemoryCacheService.set.mockResolvedValue()\r\n\r\n\t\t\tawait limitedService.warmupCache()\r\n\r\n\t\t\texpect(memoryCacheService.set).toHaveBeenCalledTimes(2) // Limited to 2 files\r\n\t\t})\r\n\r\n\t\tit('should filter files by popularity threshold', async () => {\r\n\t\t\tmockReaddir.mockResolvedValue(['file1.rsc', 'file2.rsc'] as any)\r\n\t\t\tmockStat.mockResolvedValue({\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t\tsize: 1024,\r\n\t\t\t} as any)\r\n\t\t\tmockReadFile\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 10}') // Above threshold\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 2}') // Below threshold\r\n\t\t\t\t.mockResolvedValue(Buffer.from('file content'))\r\n\r\n\t\t\tmemoryCacheService.has.mockResolvedValue(false)\r\n\t\t\tmemoryCacheService.set.mockResolvedValue()\r\n\r\n\t\t\tawait service.warmupCache()\r\n\r\n\t\t\texpect(memoryCacheService.set).toHaveBeenCalledTimes(1) // Only 1 file above threshold\r\n\t\t})\r\n\r\n\t\tit('should handle file system errors gracefully', async () => {\r\n\t\t\tmockReaddir.mockRejectedValue(new Error('File system error'))\r\n\r\n\t\t\tawait service.warmupCache()\r\n\r\n\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('warmup', 'memory', 'success')\r\n\t\t})\r\n\r\n\t\tit('should handle individual file errors gracefully', async () => {\r\n\t\t\tmockReaddir.mockResolvedValue(['file1.rsc', 'file2.rsc'] as any)\r\n\t\t\tmockStat.mockResolvedValue({\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t\tsize: 1024,\r\n\t\t\t} as any)\r\n\t\t\tmockReadFile\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 10}')\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 8}')\r\n\t\t\t\t.mockResolvedValueOnce(Buffer.from('file content')) // First file succeeds\r\n\t\t\t\t.mockRejectedValueOnce(new Error('File read error')) // Second file fails\r\n\r\n\t\t\tmemoryCacheService.has.mockResolvedValue(false)\r\n\t\t\tmemoryCacheService.set.mockResolvedValue()\r\n\r\n\t\t\tawait service.warmupCache()\r\n\r\n\t\t\texpect(memoryCacheService.set).toHaveBeenCalledTimes(1) // Only successful file\r\n\t\t\texpect(metricsService.recordCacheOperation).toHaveBeenCalledWith('warmup', 'memory', 'success')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('manual Warmup', () => {\r\n\t\tit('should manually warm up specific file', async () => {\r\n\t\t\tconst resourceId = 'test-resource'\r\n\t\t\tconst content = Buffer.from('test content')\r\n\t\t\tconst ttl = 3600\r\n\r\n\t\t\tmemoryCacheService.set.mockResolvedValue()\r\n\r\n\t\t\tawait service.warmupSpecificFile(resourceId, content, ttl)\r\n\r\n\t\t\texpect(memoryCacheService.set).toHaveBeenCalledWith(`file:${resourceId}`, content, ttl)\r\n\t\t})\r\n\r\n\t\tit('should handle manual warmup errors', async () => {\r\n\t\t\tconst resourceId = 'test-resource'\r\n\t\t\tconst content = Buffer.from('test content')\r\n\r\n\t\t\tmemoryCacheService.set.mockRejectedValue(new Error('Cache error'))\r\n\r\n\t\t\tawait expect(service.warmupSpecificFile(resourceId, content)).rejects.toThrow('Cache error')\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('statistics', () => {\r\n\t\tit('should return warmup statistics', async () => {\r\n\t\t\tconst stats = await service.getWarmupStats()\r\n\r\n\t\t\texpect(stats).toHaveProperty('enabled')\r\n\t\t\texpect(stats).toHaveProperty('lastWarmup')\r\n\t\t\texpect(stats).toHaveProperty('filesWarmed')\r\n\t\t\texpect(stats).toHaveProperty('cacheSize')\r\n\t\t\texpect(stats.enabled).toBe(true)\r\n\t\t\texpect(stats.filesWarmed).toBe(3)\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('configuration', () => {\r\n\t\tit('should respect disabled configuration', async () => {\r\n\t\t\tconfigService.get.mockImplementation((key: string) => {\r\n\t\t\t\tif (key === 'cache.warming') {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tenabled: false,\r\n\t\t\t\t\t\twarmupOnStart: true,\r\n\t\t\t\t\t\tmaxFilesToWarm: 50,\r\n\t\t\t\t\t\twarmupCron: '0 */6 * * *',\r\n\t\t\t\t\t\tpopularImageThreshold: 5,\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined\r\n\t\t\t})\r\n\r\n\t\t\t// Create new service instance with disabled config\r\n\t\t\tconst module: TestingModule = await Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tCacheWarmingService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: MemoryCacheService,\r\n\t\t\t\t\t\tuseValue: memoryCacheService,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: configService,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\t\tuseValue: metricsService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t}).compile()\r\n\r\n\t\t\tconst disabledService = module.get<CacheWarmingService>(CacheWarmingService)\r\n\r\n\t\t\tawait disabledService.warmupCache()\r\n\r\n\t\t\texpect(mockReaddir).not.toHaveBeenCalled()\r\n\t\t})\r\n\r\n\t\tit('should use default configuration when not provided', () => {\r\n\t\t\tconfigService.get.mockReturnValue(undefined)\r\n\r\n\t\t\t// Create new service instance\r\n\t\t\tconst module = Test.createTestingModule({\r\n\t\t\t\tproviders: [\r\n\t\t\t\t\tCacheWarmingService,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: MemoryCacheService,\r\n\t\t\t\t\t\tuseValue: memoryCacheService,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: ConfigService,\r\n\t\t\t\t\t\tuseValue: configService,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprovide: MetricsService,\r\n\t\t\t\t\t\tuseValue: metricsService,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t})\r\n\r\n\t\t\texpect(() => module.compile()).not.toThrow()\r\n\t\t})\r\n\t})\r\n\r\n\tdescribe('tTL Calculation', () => {\r\n\t\tit('should calculate TTL based on access patterns', async () => {\r\n\t\t\tmockReaddir.mockResolvedValue(['file1.rsc'] as any)\r\n\t\t\tmockStat.mockResolvedValue({\r\n\t\t\t\tatime: new Date(),\r\n\t\t\t\tsize: 1024,\r\n\t\t\t} as any)\r\n\t\t\tmockReadFile\r\n\t\t\t\t.mockResolvedValueOnce('{\"accessCount\": 20}') // High access count\r\n\t\t\t\t.mockResolvedValueOnce(Buffer.from('file content'))\r\n\r\n\t\t\tmemoryCacheService.has.mockResolvedValue(false)\r\n\t\t\tmemoryCacheService.set.mockResolvedValue()\r\n\r\n\t\t\tawait service.warmupCache()\r\n\r\n\t\t\t// Should set with higher TTL due to high access count\r\n\t\t\texpect(memoryCacheService.set).toHaveBeenCalledWith(\r\n\t\t\t\texpect.any(String),\r\n\t\t\t\texpect.any(Buffer),\r\n\t\t\t\texpect.any(Number),\r\n\t\t\t)\r\n\r\n\t\t\tconst [, , ttl] = memoryCacheService.set.mock.calls[0]\r\n\t\t\texpect(ttl).toBeGreaterThan(3600) // Should be higher than base TTL\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["Buffer","readdir","readFile","stat","join","CacheWarmingService","MemoryCacheService","ConfigService","MetricsService","Test","afterEach","beforeEach","describe","expect","it","vi","mock","mockReaddir","mockStat","mockReadFile","mockJoin","service","memoryCacheService","configService","metricsService","mockMemoryCacheService","has","fn","set","getStats","mockConfigService","get","mockMetricsService","recordCacheOperation","module","createTestingModule","providers","provide","useValue","compile","mockImplementation","key","config","enabled","warmupOnStart","maxFilesToWarm","warmupCron","popularImageThreshold","paths","mockResolvedValue","hits","misses","keys","ksize","vsize","hitRate","clearAllMocks","toBeDefined","toHaveBeenCalledWith","atime","Date","size","mockResolvedValueOnce","from","warmupCache","toHaveBeenCalled","toHaveBeenCalledTimes","not","undefined","limitedService","mockRejectedValue","Error","mockRejectedValueOnce","resourceId","content","ttl","warmupSpecificFile","rejects","toThrow","stats","getWarmupStats","toHaveProperty","toBe","filesWarmed","disabledService","mockReturnValue","any","String","Number","calls","toBeGreaterThan"],"mappings":"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"}