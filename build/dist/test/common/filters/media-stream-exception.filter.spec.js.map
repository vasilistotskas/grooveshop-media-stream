{"version":3,"sources":["../../../../../src/test/common/filters/media-stream-exception.filter.spec.ts"],"sourcesContent":["import type { ArgumentsHost } from '@nestjs/common'\r\nimport type { Mock } from 'vitest'\r\nimport { MediaStreamError, ResourceNotFoundError } from '@microservice/common/errors/media-stream.errors'\r\nimport { MediaStreamExceptionFilter } from '@microservice/common/filters/media-stream-exception.filter'\nimport { CorrelationService } from '@microservice/Correlation/services/correlation.service'\r\nimport { HttpException, HttpStatus } from '@nestjs/common'\r\nimport { HttpAdapterHost } from '@nestjs/core'\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest'\r\n\r\ndescribe('mediaStreamExceptionFilter', () => {\r\n\tlet filter: MediaStreamExceptionFilter\r\n\tlet mockArgumentsHost: ArgumentsHost\r\n\tlet mockResponse: any\r\n\tlet mockRequest: any\r\n\tlet mockHttpContext: any\r\n\tlet mockGetResponseFn: Mock\r\n\tlet mockGetRequestFn: Mock\r\n\tlet mockSwitchToHttpFn: Mock\r\n\tlet mockHttpAdapterHost: HttpAdapterHost\r\n\tlet mockHttpAdapterReply: Mock\r\n\tlet mockCorrelationService: CorrelationService\r\n\r\n\tbeforeEach(() => {\r\n\t\tmockRequest = {\r\n\t\t\turl: '/test/url',\r\n\t\t\tmethod: 'GET',\r\n\t\t}\r\n\r\n\t\tmockResponse = {}\r\n\r\n\t\tmockGetResponseFn = vi.fn().mockReturnValue(mockResponse)\r\n\t\tmockGetRequestFn = vi.fn().mockReturnValue(mockRequest)\r\n\t\tmockHttpContext = {\r\n\t\t\tgetResponse: mockGetResponseFn,\r\n\t\t\tgetRequest: mockGetRequestFn,\r\n\t\t}\r\n\r\n\t\tmockSwitchToHttpFn = vi.fn().mockReturnValue(mockHttpContext)\r\n\t\tmockArgumentsHost = {\r\n\t\t\tswitchToHttp: mockSwitchToHttpFn,\r\n\t\t} as unknown as ArgumentsHost\r\n\r\n\t\tmockHttpAdapterReply = vi.fn()\r\n\r\n\t\tmockHttpAdapterHost = {\r\n\t\t\thttpAdapter: {\r\n\t\t\t\treply: mockHttpAdapterReply,\r\n\t\t\t\tgetRequestUrl: vi.fn().mockReturnValue('/test/url'),\r\n\t\t\t},\r\n\t\t} as unknown as HttpAdapterHost\r\n\r\n\t\tmockCorrelationService = {\r\n\t\t\tgetCorrelationId: vi.fn().mockReturnValue('test-correlation-id'),\r\n\t\t} as unknown as CorrelationService\r\n\r\n\t\tfilter = new MediaStreamExceptionFilter(mockHttpAdapterHost, mockCorrelationService)\r\n\r\n\t\tvi.spyOn(console, 'error').mockImplementation(() => {})\r\n\t})\r\n\r\n\tafterEach(() => {\r\n\t\tvi.restoreAllMocks()\r\n\t})\r\n\r\n\tdescribe('catch', () => {\r\n\t\tit('should handle MediaStreamError', () => {\r\n\t\t\tconst error = new MediaStreamError('Test error', HttpStatus.BAD_REQUEST, 'TEST_ERROR', { test: 'value' })\r\n\r\n\t\t\tfilter.catch(error, mockArgumentsHost)\r\n\r\n\t\t\texpect(mockSwitchToHttpFn).toHaveBeenCalled()\r\n\t\t\texpect(mockGetResponseFn).toHaveBeenCalled()\r\n\t\t\texpect(mockGetRequestFn).toHaveBeenCalled()\r\n\r\n\t\t\texpect(mockHttpAdapterReply).toHaveBeenCalled()\r\n\r\n\t\t\tconst [responseArg, errorResponseArg, statusArg] = mockHttpAdapterReply.mock.calls[0]\r\n\r\n\t\t\texpect(responseArg).toBe(mockResponse)\r\n\t\t\texpect(statusArg).toBe(HttpStatus.BAD_REQUEST)\r\n\r\n\t\t\tconst typedErrorResponse = errorResponseArg as Record<string, any>\r\n\r\n\t\t\texpect(typedErrorResponse.name).toBe('MediaStreamError')\r\n\t\t\texpect(typedErrorResponse.message).toBe('Test error')\r\n\t\t\texpect(typedErrorResponse.code).toBe('TEST_ERROR')\r\n\t\t\texpect(typedErrorResponse.status).toBe(HttpStatus.BAD_REQUEST)\r\n\t\t\texpect(typedErrorResponse.context).toEqual({ test: 'value' })\r\n\t\t\texpect(typedErrorResponse.path).toBe('/test/url')\r\n\t\t\texpect(typedErrorResponse.method).toBe('GET')\r\n\t\t\texpect(typedErrorResponse.timestamp).toBeDefined()\r\n\t\t})\r\n\r\n\t\tit('should handle ResourceNotFoundError', () => {\r\n\t\t\tconst error = new ResourceNotFoundError('Resource not found', { resourceId: '123' })\r\n\r\n\t\t\tfilter.catch(error, mockArgumentsHost)\r\n\r\n\t\t\texpect(mockHttpAdapterReply).toHaveBeenCalled()\r\n\r\n\t\t\tconst [responseArg, errorResponseArg, statusArg] = mockHttpAdapterReply.mock.calls[0]\r\n\r\n\t\t\texpect(responseArg).toBe(mockResponse)\r\n\t\t\texpect(statusArg).toBe(HttpStatus.NOT_FOUND)\r\n\r\n\t\t\tconst typedErrorResponse = errorResponseArg as Record<string, any>\r\n\r\n\t\t\texpect(typedErrorResponse.name).toBe('ResourceNotFoundError')\r\n\t\t\texpect(typedErrorResponse.message).toBe('Resource not found')\r\n\t\t\texpect(typedErrorResponse.code).toBe('RESOURCE_NOT_FOUND')\r\n\t\t\texpect(typedErrorResponse.context).toEqual({ resourceId: '123' })\r\n\t\t})\r\n\r\n\t\tit('should handle HttpException', () => {\r\n\t\t\tconst error = new HttpException('Forbidden', HttpStatus.FORBIDDEN)\r\n\r\n\t\t\tfilter.catch(error, mockArgumentsHost)\r\n\r\n\t\t\texpect(mockHttpAdapterReply).toHaveBeenCalled()\r\n\r\n\t\t\tconst [responseArg, errorResponseArg, statusArg] = mockHttpAdapterReply.mock.calls[0]\r\n\r\n\t\t\texpect(responseArg).toBe(mockResponse)\r\n\t\t\texpect(statusArg).toBe(HttpStatus.FORBIDDEN)\r\n\r\n\t\t\tconst typedErrorResponse = errorResponseArg as Record<string, any>\r\n\r\n\t\t\texpect(typedErrorResponse.name).toBe('HttpException')\r\n\t\t\texpect(typedErrorResponse.message).toBe('Forbidden')\r\n\t\t\texpect(typedErrorResponse.code).toBe(`HTTP_${HttpStatus.FORBIDDEN}`)\r\n\t\t})\r\n\r\n\t\tit('should handle HttpException with object response', () => {\r\n\t\t\tconst errorResponse = {\r\n\t\t\t\tmessage: 'Validation failed',\r\n\t\t\t\terrors: ['Field is required'],\r\n\t\t\t}\r\n\t\t\tconst error = new HttpException(errorResponse, HttpStatus.BAD_REQUEST)\r\n\r\n\t\t\tfilter.catch(error, mockArgumentsHost)\r\n\r\n\t\t\texpect(mockHttpAdapterReply).toHaveBeenCalled()\r\n\r\n\t\t\tconst [responseArg, errorResponseArg, statusArg] = mockHttpAdapterReply.mock.calls[0]\r\n\r\n\t\t\texpect(responseArg).toBe(mockResponse)\r\n\t\t\texpect(statusArg).toBe(HttpStatus.BAD_REQUEST)\r\n\r\n\t\t\tconst typedErrorResponse = errorResponseArg as Record<string, any>\r\n\r\n\t\t\texpect(typedErrorResponse.message).toBe('Validation failed')\r\n\t\t\texpect(typedErrorResponse.code).toBe(`HTTP_${HttpStatus.BAD_REQUEST}`)\r\n\t\t})\r\n\r\n\t\tit('should handle unknown errors', () => {\r\n\t\t\tconst error = new Error('Unknown error')\r\n\r\n\t\t\tfilter.catch(error, mockArgumentsHost)\r\n\r\n\t\t\texpect(mockHttpAdapterReply).toHaveBeenCalled()\r\n\r\n\t\t\tconst [responseArg, errorResponseArg, statusArg] = mockHttpAdapterReply.mock.calls[0]\r\n\r\n\t\t\texpect(responseArg).toBe(mockResponse)\r\n\t\t\texpect(statusArg).toBe(HttpStatus.INTERNAL_SERVER_ERROR)\r\n\r\n\t\t\tconst typedErrorResponse = errorResponseArg as Record<string, any>\r\n\r\n\t\t\texpect(typedErrorResponse.name).toBe('InternalServerError')\r\n\t\t\texpect(typedErrorResponse.message).toBe('An unexpected error occurred')\r\n\t\t\texpect(typedErrorResponse.code).toBe('INTERNAL_SERVER_ERROR')\r\n\t\t})\r\n\t})\r\n})\r\n"],"names":["MediaStreamError","ResourceNotFoundError","MediaStreamExceptionFilter","HttpException","HttpStatus","afterEach","beforeEach","describe","expect","it","vi","filter","mockArgumentsHost","mockResponse","mockRequest","mockHttpContext","mockGetResponseFn","mockGetRequestFn","mockSwitchToHttpFn","mockHttpAdapterHost","mockHttpAdapterReply","mockCorrelationService","url","method","fn","mockReturnValue","getResponse","getRequest","switchToHttp","httpAdapter","reply","getRequestUrl","getCorrelationId","spyOn","console","mockImplementation","restoreAllMocks","error","BAD_REQUEST","test","catch","toHaveBeenCalled","responseArg","errorResponseArg","statusArg","mock","calls","toBe","typedErrorResponse","name","message","code","status","context","toEqual","path","timestamp","toBeDefined","resourceId","NOT_FOUND","FORBIDDEN","errorResponse","errors","Error","INTERNAL_SERVER_ERROR"],"mappings":"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"}